680x0 MACRO ASSEMBLER   Version 5.00   (c) 1992-2005 Peter J. Fondse

Date: 12 Apr 2024      Time: 00:22:48          Source: C:\USERS\10054\ONEDRIVE\CPEN 412 FINAL PROJECT\FINAL_PROJECT_2023_SEM2_STUDENT_TEMPLATE\FINAL_PROJECT_2023_SEM2_STUDENT_TEMPLATE\PROGRAMS\TETRIS.SRC

                       1          section   code
                       2   ; for initial stack use $08040000 if your system uses SRAM for main memory (top of 256kbyte SRAM space)
                       3   ; When your system is converted to use DRAM for main memory set this constant to $0C000000 (top of 64MByte DRAM space
                       4   
          0804 0000    5   StackPointerVal     equ $08040000      when using sram
                       6   ;StackPointerVal     equ $0C000000      when using dram
                       7   
                       8   ; define RamVectorTable as $0803000 if your system uses SRAM for main memory
                       9   ; When your system is converted to use DRAM for main memory define RamVectorTable constant as $0B000000 (top of 64MByte DRAM space)
                      10   
          0803 0000   11   RamVectorTable      equ $08030000      when using sram
                      12   ;RamVectorTable      equ $0B000000      when using dram
                      13   
                      14   
                      15   
                      16   ; CSTART.ASM  -  C startup-code for Debug Monitor
00000000              17                   align
                      18   
00000000              19                   org $00000000          ;start of rom based vector table, 68k hard wired to expect this at $0
                      20   
00000000  0804 0000   21   InitialSP       dc.l StackPointerVal   ;initial supervisor state stack pointer(stack decrements first before being used)
00000004  0000 0400   22   InitialPC       dc.l start             ;address of 1st instruction of program after a reset
00000008  0000 0796   23   BusError        dc.l E_BErro           ;bus error - stop program
0000000C  0000 07A8   24   AddressError    dc.l E_AErro           ;address error - stop program
00000010  0000 07BA   25   IllegalInstr    dc.l E_IInst           ;illegal instruction - stop program
00000014  0000 07CC   26   DividebyZero    dc.l E_DZero           ;divide by zero error - stop program
00000018  0000 07DE   27   Check           dc.l E_Check           ;Check instruction - stop program
0000001C  0000 07F0   28   TrapV           dc.l E_Trapv           ;Trapv instruction - stop program
00000020  0000 0802   29   Privilege       dc.l E_Priv            ;privilige violation - stop program
00000024  0000 0814   30   Trace           dc.l E_Trace           ;stop on trace
00000028  0000 0826   31   Line1010emul    dc.l E_1010            ;1010 instructions stop
0000002C  0000 0838   32   Line1111emul    dc.l E_1111            ;1111 instructions stop
00000030  0000 084A   33   Unassigned1     dc.l E_Unnas1           ;unassigned vector
00000034  0000 084A   34   Unassigned2     dc.l E_Unnas2           ;unassigned vector
00000038  0000 084A   35   Unassigned3     dc.l E_Unnas3           ;unassigned vector
0000003C  0000 084A   36   Uninit_IRQ      dc.l E_UnitI           ;uninitialised interrupt
00000040  0000 084A   37   Unassigned4     dc.l E_Unnas4           ;unassigned vector
00000044  0000 084A   38   Unassigned5     dc.l E_Unnas5           ;unassigned vector
00000048  0000 084A   39   Unassigned6     dc.l E_Unnas6           ;unassigned vector
0000004C  0000 084A   40   Unassigned7     dc.l E_Unnas7           ;unassigned vector
00000050  0000 084A   41   Unassigned8     dc.l E_Unnas8           ;unassigned vector
00000054  0000 084A   42   Unassigned9     dc.l E_Unnas9           ;unassigned vector
00000058  0000 084A   43   Unassigned10    dc.l E_Unnas10           ;unassigned vector
0000005C  0000 084A   44   Unassigned11    dc.l E_Unnas11           ;unassigned vector
00000060  0000 084A   45   SpuriousIRQ     dc.l E_Spuri           ;stop on spurious irq
                      46   *
                      47   *
00000064  0000 042E   48   Level1IRQ       dc.l Level1RamISR
00000068  0000 0440   49   Level2IRQ       dc.l Level2RamISR
0000006C  0000 0452   50   Level3IRQ       dc.l Level3RamISR
00000070  0000 0464   51   Level4IRQ       dc.l Level4RamISR
00000074  0000 0476   52   Level5IRQ       dc.l Level5RamISR
00000078  0000 0580   53   Level6IRQ       dc.l Level6RamISR
0000007C  0000 0592   54   Level7IRQ       dc.l Level7RamISR
                      55   *
                      56   *
00000080  0000 05A4   57   Trap0           dc.l Trap0RamISR        ; User installed trap handler
00000084  0000 05B6   58   Trap1           dc.l Trap1RamISR        ; User installed trap handler
00000088  0000 05C8   59   Trap2           dc.l Trap2RamISR        ; User installed trap handler
0000008C  0000 05DA   60   Trap3           dc.l Trap3RamISR        ; User installed trap handler
00000090  0000 05EC   61   Trap4           dc.l Trap4RamISR        ; User installed trap handler
00000094  0000 05FE   62   Trap5           dc.l Trap5RamISR        ; User installed trap handler
00000098  0000 0610   63   Trap6           dc.l Trap6RamISR        ; User installed trap handler
0000009C  0000 0622   64   Trap7           dc.l Trap7RamISR        ; User installed trap handler
000000A0  0000 0634   65   Trap8           dc.l Trap8RamISR        ; User installed trap handler
000000A4  0000 0646   66   Trap9           dc.l Trap9RamISR        ; User installed trap handler
000000A8  0000 0658   67   Trap10          dc.l Trap10RamISR       ; User installed trap handler
000000AC  0000 066A   68   Trap11          dc.l Trap11RamISR       ; User installed trap handler
000000B0  0000 067C   69   Trap12          dc.l Trap12RamISR       ; User installed trap handler
000000B4  0000 068E   70   Trap13          dc.l Trap13RamISR       ; User installed trap handler
000000B8  0000 06A0   71   Trap14          dc.l Trap14RamISR       ; User installed trap handler
000000BC  0000 0790   72   Trap15          dc.l Trap15RamISR       ; User installed trap handler
                      73   
                      74   *
                      75   * Other vectors 64-255 are users vectors for autovectored IO device (not implemented in TG68)
                      76   *
                      77   
00000400              78                   org       $00000400
                      79   
00000400  46FC 2700   80   start:          move.w     #$2700,SR             ;set interrupts to disable until later
                      81   
                      82   *************************************************************************************
                      83   ** add some 68000 instruction to read and write to memory, IO etc. This doesn't do anything
                      84   ** important, it just creates read and write bus cycles to specific addresses which
                      85   ** help with debugging hardware in Quartus simulations
                      86   **************************************************************************************
                      87   
                      88                   ; some important initialisation do not modify
00000404  23FC FFFF   89                   move.l    #-1,__ungetbuf  ; unget-buffer for keyboard input
00000408  FFFF 0803 
0000040C  00C0      
0000040E  23FC 0000   90                   move.l    #0,__allocp     ; pointer to allocated memory for malloc-function
00000412  0000 0803 
00000416  00C4      
00000418  23FC 0803   91                   move.l    #heap,__heap    ; pointer to free memory
0000041C  077E 0803 
00000420  00C4      
00000422  46FC 2000   92                   move.w    #$2000,SR       ; enable interrupts
                      93   
00000426  4EB9 0000   94   mainloop        jsr       _main
0000042A  2220      
0000042C  60F8        95                   bra       mainloop
                      96   
                      97   *********************************************************************************************************
                      98   * Code to call Ram Based Interrupt handler and other exeception handler code
                      99   *********************************************************************************************************
0000042E  48E7 FFFE  100   Level1RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000432  2079 0803  101                   move.l    VL1IRQ,a0               get ram based address into a0
00000436  0064      
00000438  4E90       102                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000043A  4CDF 7FFF  103                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000043E  4E73       104                   rte
00000440  48E7 FFFE  105   Level2RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000444  2079 0803  106                   move.l    VL2IRQ,a0               get ram based address into a0
00000448  0068      
0000044A  4E90       107                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000044C  4CDF 7FFF  108                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000450  4E73       109                   rte
00000452  48E7 FFFE  110   Level3RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000456  2079 0803  111                   move.l    VL3IRQ,a0               get ram based address into a0
0000045A  006C      
0000045C  4E90       112                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000045E  4CDF 7FFF  113                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000462  4E73       114                   rte
00000464  48E7 FFFE  115   Level4RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000468  2079 0803  116                   move.l    VL4IRQ,a0               get ram based address into a0
0000046C  0070      
0000046E  4E90       117                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
00000470  4CDF 7FFF  118                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000474  4E73       119                   rte
                     120   
                     121   * Trace trap Handler
                     122   
                     123   Level5RamISR
                     124   *
                     125   **         Copy 68000 registers from debug monitor Variables,
                     126   *
                     127   *
00000476  23FC 0000  128                   move.l    #1,_Trace              switch on Trace Mode
0000047A  0001 0803 
0000047E  00D8      
00000480  13FC 0000  129                   move.b    #$0,$0040000A          turn off a trace exception so we don't when generate a trace when disassembling instruction in the register dump (disassembling causes access to use program)
00000484  0040 000A 
00000488  33DF 0803  130                   move.w    (sp)+,_SR              get at the users status register pointed to by stack pointer and copy
0000048C  012C      
0000048E  23DF 0803  131                   move.l    (sp)+,_PC              get at the users program counter and copy
00000492  0120      
                     132   *
00000494  23CF 0803  133                   move.l    SP,_SSP                copy system stack pointer to debug monitor variable
00000498  0124      
0000049A  23C0 0803  134                   move.l    d0,_d0
0000049E  00E4      
000004A0  23C1 0803  135                   move.l    d1,_d1
000004A4  00E8      
000004A6  23C2 0803  136                   move.l    d2,_d2
000004AA  00EC      
000004AC  23C3 0803  137                   move.l    d3,_d3
000004B0  00F0      
000004B2  23C4 0803  138                   move.l    d4,_d4
000004B6  00F4      
000004B8  23C5 0803  139                   move.l    d5,_d5
000004BC  00F8      
000004BE  23C6 0803  140                   move.l    d6,_d6
000004C2  00FC      
000004C4  23C7 0803  141                   move.l    d7,_d7
000004C8  0100      
                     142   *
000004CA  23C8 0803  143                   move.l    a0,_a0
000004CE  0104      
000004D0  23C9 0803  144                   move.l    a1,_a1
000004D4  0108      
000004D6  23CA 0803  145                   move.l    a2,_a2
000004DA  010C      
000004DC  23CB 0803  146                   move.l    a3,_a3
000004E0  0110      
000004E2  23CC 0803  147                   move.l    a4,_a4
000004E6  0114      
000004E8  23CD 0803  148                   move.l    a5,_a5
000004EC  0118      
000004EE  23CE 0803  149                   move.l    a6,_a6
000004F2  011C      
000004F4  4E68       150                   move.l    usp,a0
000004F6  23C8 0803  151                   move.l    a0,_USP
000004FA  0128      
                     152   *
000004FC  2079 0803  153                   move.l    VL5IRQ,a0              get ram based address into a0, trace exception for next instruction will be generated in Menu SPACE command
00000500  0074      
00000502  4E90       154                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     155   
                     156   ** After trace, reload 68000 registers with new values before continuing
                     157   
00000504  2039 0803  158                   move.l   _d0,d0
00000508  00E4      
0000050A  2239 0803  159                   move.l   _d1,d1
0000050E  00E8      
00000510  2439 0803  160                   move.l   _d2,d2
00000514  00EC      
00000516  2639 0803  161                   move.l   _d3,d3
0000051A  00F0      
0000051C  2839 0803  162                   move.l   _d4,d4
00000520  00F4      
00000522  2A39 0803  163                   move.l   _d5,d5
00000526  00F8      
00000528  2C39 0803  164                   move.l   _d6,d6
0000052C  00FC      
0000052E  2E39 0803  165                   move.l   _d7,d7
00000532  0100      
                     166   
00000534  2079 0803  167                   move.l   _USP,a0
00000538  0128      
0000053A  4E60       168                   move.l   a0,USP                     load user stack pointer
0000053C  2079 0803  169                   move.l   _a0,a0
00000540  0104      
00000542  2279 0803  170                   move.l   _a1,a1
00000546  0108      
00000548  2479 0803  171                   move.l   _a2,a2
0000054C  010C      
0000054E  2679 0803  172                   move.l   _a3,a3
00000552  0110      
00000554  2879 0803  173                   move.l   _a4,a4
00000558  0114      
0000055A  2A79 0803  174                   move.l   _a5,a5
0000055E  0118      
00000560  2C79 0803  175                   move.l   _a6,a6
00000564  011C      
                     176   
00000566  2E79 0803  177                   move.l   _SSP,sp
0000056A  0124      
0000056C  2F39 0803  178                   move.l   _PC,-(sp)
00000570  0120      
00000572  3F39 0803  179                   move.w   _SR,-(sp)
00000576  012C      
00000578  11F8 0074  180                   move.b    $00000074,$0	          read trace exception vector after accessing disassembly to reset the trace request causes by disassembling program above
0000057C  0000      
0000057E  4E73       181                   rte
                     182   
                     183   * address trap handler
                     184   
00000580  48E7 FFFE  185   Level6RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000584  2079 0803  186                   move.l    VL6IRQ,a0               get ram based address into a0
00000588  0078      
0000058A  4E90       187                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000058C  4CDF 7FFF  188                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000590  4E73       189                   rte
                     190   
00000592  48E7 FFFE  191   Level7RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000596  2079 0803  192                   move.l    VL7IRQ,a0               get ram based address into a0
0000059A  007C      
0000059C  4E90       193                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000059E  4CDF 7FFF  194                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005A2  4E73       195                   rte
                     196   
                     197   
                     198   ********************************************************************************************************
                     199   * Ram based Trap handler and other exeception handler code
                     200   *********************************************************************************************************
                     201   
000005A4  48E7 FFFE  202   Trap0RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005A8  2079 0803  203                   move.l    VTrap0,a0                get ram based address into a0
000005AC  0080      
000005AE  4E90       204                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000005B0  4CDF 7FFF  205                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005B4  4E73       206                   rte
                     207   
000005B6  48E7 FFFE  208   Trap1RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005BA  2079 0803  209                   move.l    VTrap1,a0                get ram based address into a0
000005BE  0084      
000005C0  4E90       210                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000005C2  4CDF 7FFF  211                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005C6  4E73       212                   rte
                     213   
000005C8  48E7 FFFE  214   Trap2RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005CC  2079 0803  215                   move.l    VTrap2,a0                get ram based address into a0
000005D0  0088      
000005D2  4E90       216                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000005D4  4CDF 7FFF  217                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005D8  4E73       218                   rte
                     219   
000005DA  48E7 FFFE  220   Trap3RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005DE  2079 0803  221                   move.l    VTrap3,a0                get ram based address into a0
000005E2  008C      
000005E4  4E90       222                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000005E6  4CDF 7FFF  223                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005EA  4E73       224                   rte
                     225   
000005EC  48E7 FFFE  226   Trap4RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005F0  2079 0803  227                   move.l    VTrap4,a0                get ram based address into a0
000005F4  0090      
000005F6  4E90       228                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000005F8  4CDF 7FFF  229                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005FC  4E73       230                   rte
                     231   
000005FE  48E7 FFFE  232   Trap5RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000602  2079 0803  233                   move.l    VTrap5,a0                get ram based address into a0
00000606  0094      
00000608  4E90       234                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000060A  4CDF 7FFF  235                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000060E  4E73       236                   rte
                     237   
00000610  48E7 FFFE  238   Trap6RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000614  2079 0803  239                   move.l    VTrap6,a0                get ram based address into a0
00000618  0098      
0000061A  4E90       240                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000061C  4CDF 7FFF  241                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000620  4E73       242                   rte
                     243   
00000622  48E7 FFFE  244   Trap7RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000626  2079 0803  245                   move.l    VTrap7,a0                get ram based address into a0
0000062A  009C      
0000062C  4E90       246                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000062E  4CDF 7FFF  247                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000632  4E73       248                   rte
                     249   
00000634  48E7 FFFE  250   Trap8RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000638  2079 0803  251                   move.l    VTrap8,a0                get ram based address into a0
0000063C  00A0      
0000063E  4E90       252                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000640  4CDF 7FFF  253                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000644  4E73       254                   rte
                     255   
00000646  48E7 FFFE  256   Trap9RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000064A  2079 0803  257                   move.l    VTrap9,a0                get ram based address into a0
0000064E  00A4      
00000650  4E90       258                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000652  4CDF 7FFF  259                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000656  4E73       260                   rte
                     261   
00000658  48E7 FFFE  262   Trap10RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000065C  2079 0803  263                   move.l    VTrap10,a0                get ram based address into a0
00000660  00A8      
00000662  4E90       264                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000664  4CDF 7FFF  265                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000668  4E73       266                   rte
                     267   
0000066A  48E7 FFFE  268   Trap11RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000066E  2079 0803  269                   move.l    VTrap11,a0                get ram based address into a0
00000672  00AC      
00000674  4E90       270                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000676  4CDF 7FFF  271                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000067A  4E73       272                   rte
                     273   
0000067C  48E7 FFFE  274   Trap12RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000680  2079 0803  275                   move.l    VTrap12,a0                get ram based address into a0
00000684  00B0      
00000686  4E90       276                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000688  4CDF 7FFF  277                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000068C  4E73       278                   rte
                     279   
0000068E  48E7 FFFE  280   Trap13RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000692  2079 0803  281                   move.l    VTrap13,a0                get ram based address into a0
00000696  00B4      
00000698  4E90       282                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000069A  4CDF 7FFF  283                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000069E  4E73       284                   rte
                     285   
                     286   Trap14RamISR    ;Break Point Handler
                     287   *
                     288   **         Copy 68000 registers from debug monitor Variables
                     289   *
000006A0  23FC 0000  290                   move.l    #1,_Trace      switch on Trace Mode
000006A4  0001 0803 
000006A8  00D8      
000006AA  33DF 0803  291                   move.w    (sp)+,_SR       get at the users status register pointed to by stack pointer and copy
000006AE  012C      
000006B0  23DF 0803  292                   move.l    (sp)+,_PC      get at the users program counter and copy
000006B4  0120      
                     293   *
000006B6  23C0 0803  294                   move.l    d0,_d0
000006BA  00E4      
000006BC  23C1 0803  295                   move.l    d1,_d1
000006C0  00E8      
000006C2  23C2 0803  296                   move.l    d2,_d2
000006C6  00EC      
000006C8  23C3 0803  297                   move.l    d3,_d3
000006CC  00F0      
000006CE  23C4 0803  298                   move.l    d4,_d4
000006D2  00F4      
000006D4  23C5 0803  299                   move.l    d5,_d5
000006D8  00F8      
000006DA  23C6 0803  300                   move.l    d6,_d6
000006DE  00FC      
000006E0  23C7 0803  301                   move.l    d7,_d7
000006E4  0100      
                     302   *
000006E6  23C8 0803  303                   move.l    a0,_a0
000006EA  0104      
000006EC  23C9 0803  304                   move.l    a1,_a1
000006F0  0108      
000006F2  23CA 0803  305                   move.l    a2,_a2
000006F6  010C      
000006F8  23CB 0803  306                   move.l    a3,_a3
000006FC  0110      
000006FE  23CC 0803  307                   move.l    a4,_a4
00000702  0114      
00000704  23CD 0803  308                   move.l    a5,_a5
00000708  0118      
0000070A  23CE 0803  309                   move.l    a6,_a6
0000070E  011C      
00000710  4E68       310                   move.l    USP,a0
00000712  23C8 0803  311                   move.l    a0,_USP
00000716  0128      
                     312   *
00000718  2079 0803  313                   move.l    VTrap14,a0             get ram based address into a0
0000071C  00B8      
0000071E  4E90       314                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     315   
                     316   ** After breakpoint reload 68000 registers with new values before continuing
                     317   
                     318   *                move.b    #$ff,$0040000A     generate a trace exception for the next instruction
00000720  2039 0803  319                   move.l   _d0,d0
00000724  00E4      
00000726  2239 0803  320                   move.l   _d1,d1
0000072A  00E8      
0000072C  2439 0803  321                   move.l   _d2,d2
00000730  00EC      
00000732  2639 0803  322                   move.l   _d3,d3
00000736  00F0      
00000738  2839 0803  323                   move.l   _d4,d4
0000073C  00F4      
0000073E  2A39 0803  324                   move.l   _d5,d5
00000742  00F8      
00000744  2C39 0803  325                   move.l   _d6,d6
00000748  00FC      
0000074A  2E39 0803  326                   move.l   _d7,d7
0000074E  0100      
                     327   
00000750  2079 0803  328                   move.l   _USP,a0
00000754  0128      
00000756  4E60       329                   move.l   a0,USP        load user stack pointer A7
00000758  2079 0803  330                   move.l   _a0,a0
0000075C  0104      
0000075E  2279 0803  331                   move.l   _a1,a1
00000762  0108      
00000764  2479 0803  332                   move.l   _a2,a2
00000768  010C      
0000076A  2679 0803  333                   move.l   _a3,a3
0000076E  0110      
00000770  2879 0803  334                   move.l   _a4,a4
00000774  0114      
00000776  2A79 0803  335                   move.l   _a5,a5
0000077A  0118      
0000077C  2C79 0803  336                   move.l   _a6,a6
00000780  011C      
                     337   
00000782  2F39 0803  338                   move.l   _PC,-(sp)
00000786  0120      
00000788  3F39 0803  339                   move.w   _SR,-(sp)
0000078C  012C      
0000078E  4E73       340                   rte
                     341   
00000790  4EF9 0000  342   Trap15RamISR    jmp     _CallDebugMonitor
00000794  1E32      
                     343   *                movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                     344   *                move.l    VTrap15,a0                get ram based address into a0
                     345   *                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                     346   *                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                     347   *                rte
                     348   
                     349   *********************************************************************************************************
                     350   *Default exception handler for everything without a specific handler
                     351   *********************************************************************************************************
                     352   
                     353   *
                     354   **              Jump here for each unhandled exception
                     355   **              If you need to, MAKE SURE YOU SAVE ALL IMPORTANT REGISTERS AND RESTORE THEM BEFORE RETURNING (IF APPROPRIATE)
                     356   *
                     357   
00000796  48E7 FFFE  358   E_BErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000079A  2079 0803  359                   move.l    VBusError,a0            get ram based address into a0
0000079E  0008      
000007A0  4E90       360                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000007A2  4CDF 7FFF  361                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000007A6  4E73       362                   rte
000007A8  48E7 FFFE  363   E_AErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000007AC  2079 0803  364                   move.l    VAddressError,a0        get ram based address into a0
000007B0  000C      
000007B2  4E90       365                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000007B4  4CDF 7FFF  366                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000007B8  4E73       367                   rte
000007BA  48E7 FFFE  368   E_IInst         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000007BE  2079 0803  369                   move.l    VIllegalInstr,a0        get ram based address into a0
000007C2  0010      
000007C4  4E90       370                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000007C6  4CDF 7FFF  371                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000007CA  4E73       372                   rte
000007CC  48E7 FFFE  373   E_DZero         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000007D0  2079 0803  374                   move.l    VDividebyZero,a0        get ram based address into a0
000007D4  0014      
000007D6  4E90       375                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000007D8  4CDF 7FFF  376                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000007DC  4E73       377                   rte
000007DE  48E7 FFFE  378   E_Check         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000007E2  2079 0803  379                   move.l    VCheck,a0               get ram based address into a0
000007E6  0018      
000007E8  4E90       380                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000007EA  4CDF 7FFF  381                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000007EE  4E73       382                   rte
000007F0  48E7 FFFE  383   E_Trapv         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000007F4  2079 0803  384                   move.l    VTrapV,a0               get ram based address into a0
000007F8  001C      
000007FA  4E90       385                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000007FC  4CDF 7FFF  386                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000800  4E73       387                   rte
00000802  48E7 FFFE  388   E_Priv          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000806  2079 0803  389                   move.l    VPrivilege,a0           get ram based address into a0
0000080A  0020      
0000080C  4E90       390                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000080E  4CDF 7FFF  391                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000812  4E73       392                   rte
00000814  48E7 FFFE  393   E_Trace         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000818  2079 0803  394                   move.l    VTrace,a0               get ram based address into a0
0000081C  0024      
0000081E  4E90       395                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000820  4CDF 7FFF  396                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000824  4E73       397                   rte
00000826  48E7 FFFE  398   E_1010          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000082A  2079 0803  399                   move.l    VLine1010emul,a0        get ram based address into a0
0000082E  0028      
00000830  4E90       400                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000832  4CDF 7FFF  401                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000836  4E73       402                   rte
00000838  48E7 FFFE  403   E_1111          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000083C  2079 0803  404                   move.l    VLine1111emul,a0        get ram based address into a0
00000840  002C      
00000842  4E90       405                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000844  4CDF 7FFF  406                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000848  4E73       407                   rte
                     408   E_Unnas1
                     409   E_Unnas2
                     410   E_Unnas3
                     411   E_UnitI
                     412   E_Unnas4
                     413   E_Unnas5
                     414   E_Unnas6
                     415   E_Unnas7
                     416   E_Unnas8
                     417   E_Unnas9
                     418   E_Unnas10
                     419   E_Unnas11
                     420   E_Spuri
0000084A  60FE       421   _stop            bra _stop                         stop
                     422   ***************************************************************************************************
                     423   * Go() function in debug monitor
                     424   ***************************************************************************************************
                     425   _go
0000084C  2E79 0803  426                   move.l   _SSP,a7        load system stack pointer (remember we are in supervisor mode when running this so a7 is the System stack pointer)
00000850  0124      
00000852  2F39 0803  427                   move.l   _PC,-(sp)      copy debug monitor PC variable to the stack
00000856  0120      
00000858  3F39 0803  428                   move.w   _SR,-(sp)      copy debug monitor status reg to the stack
0000085C  012C      
                     429   
0000085E  1038 0078  430                   move.b   $00000078,d0  remove any spurious address exception arising after power on
00000862  2039 0803  431                   move.l   _d0,d0
00000866  00E4      
00000868  2239 0803  432                   move.l   _d1,d1
0000086C  00E8      
0000086E  2439 0803  433                   move.l   _d2,d2
00000872  00EC      
00000874  2639 0803  434                   move.l   _d3,d3
00000878  00F0      
0000087A  2839 0803  435                   move.l   _d4,d4
0000087E  00F4      
00000880  2A39 0803  436                   move.l   _d5,d5
00000884  00F8      
00000886  2C39 0803  437                   move.l   _d6,d6
0000088A  00FC      
0000088C  2E39 0803  438                   move.l   _d7,d7
00000890  0100      
                     439   
00000892  2079 0803  440                   move.l   _USP,a0
00000896  0128      
00000898  4E60       441                   move.l   a0,USP        load user stack pointer (remember we are in supervisor mode when running this, so a7 is the System stack pointer)
0000089A  2079 0803  442                   move.l   _a0,a0
0000089E  0104      
000008A0  2279 0803  443                   move.l   _a1,a1
000008A4  0108      
000008A6  2479 0803  444                   move.l   _a2,a2
000008AA  010C      
000008AC  2679 0803  445                   move.l   _a3,a3
000008B0  0110      
000008B2  2879 0803  446                   move.l   _a4,a4
000008B6  0114      
000008B8  2A79 0803  447                   move.l   _a5,a5
000008BC  0118      
000008BE  2C79 0803  448                   move.l   _a6,a6
000008C2  011C      
000008C4  4E73       449                   rte                    load the status reg and PC from the stack and commence running
                     450                                          *used to be rte but this didn't load the status byte
                     451   
                     452   ; C:\USERS\10054\ONEDRIVE\CPEN 412 FINAL PROJECT\FINAL_PROJECT_2023_SEM2_STUDENT_TEMPLATE\FINAL_PROJECT_2023_SEM2_STUDENT_TEMPLATE\PROGRAMS\DEBUGMONITORCODE\M68KDEBUG (NO DISASSEMBLER).C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                     453   ; #include "DebugMonitor.h"
                     454   ; #include "say_phoneme.h"
                     455   ; // use 08030000 for a system running from sram or 0B000000 for system running from dram
                     456   ; #define StartOfExceptionVectorTable 0x08030000
                     457   ; //#define StartOfExceptionVectorTable 0x0B000000
                     458   ; // use 0C000000 for dram or hex 08040000 for sram
                     459   ; #define TopOfStack 0x08040000
                     460   ; //#define TopOfStack 0x0C000000
                     461   ; #define voice *(char*)(0xFF00FFFE)
                     462   ; #define VGA_ADDRESS 0xFFFF0000 
                     463   ; /* DO NOT INITIALISE GLOBAL VARIABLES - DO IT in MAIN() */
                     464   ; unsigned int i, x, y, z, PortA_Count;
                     465   ; int     Trace, GoFlag, Echo;                       // used in tracing/single stepping
                     466   ; // 68000 register dump and preintialise value (these can be changed by the user program when it is running, e.g. stack pointer, registers etc
                     467   ; unsigned int d0,d1,d2,d3,d4,d5,d6,d7 ;
                     468   ; unsigned int a0,a1,a2,a3,a4,a5,a6 ;
                     469   ; unsigned int PC, SSP, USP ;
                     470   ; unsigned short int SR;
                     471   ; // Breakpoint variables
                     472   ; unsigned int BreakPointAddress[8];                      //array of 8 breakpoint addresses
                     473   ; unsigned short int BreakPointInstruction[8] ;           // to hold the instruction opcode at the breakpoint
                     474   ; unsigned int BreakPointSetOrCleared[8] ;
                     475   ; unsigned int InstructionSize ;
                     476   ; // watchpoint variables
                     477   ; unsigned int WatchPointAddress[8];                      //array of 8 breakpoint addresses
                     478   ; unsigned int WatchPointSetOrCleared[8] ;
                     479   ; char WatchPointString[8][100] ;
                     480   ; char    TempString[100] ;
                     481   ; void Wait1ms(void)
                     482   ; {
                     483   _Wait1ms:
000008C6  2F02       484          move.l    D2,-(A7)
                     485   ; int i;
                     486   ; for (i = 0; i < 1000; i++)
000008C8  4282       487          clr.l     D2
                     488   Wait1ms_1:
000008CA  0C82 0000  489          cmp.l     #1000,D2
000008CE  03E8      
000008D0  6C04       490          bge.s     Wait1ms_3
000008D2  5282       491          addq.l    #1,D2
000008D4  60F4       492          bra       Wait1ms_1
                     493   Wait1ms_3:
000008D6  241F       494          move.l    (A7)+,D2
000008D8  4E75       495          rts
                     496   ; ;
                     497   ; }
                     498   ; void Wait3ms(void)
                     499   ; {
                     500   _Wait3ms:
000008DA  2F02       501          move.l    D2,-(A7)
                     502   ; int i;
                     503   ; for (i = 0; i < 3; i++)
000008DC  4282       504          clr.l     D2
                     505   Wait3ms_1:
000008DE  0C82 0000  506          cmp.l     #3,D2
000008E2  0003      
000008E4  6C08       507          bge.s     Wait3ms_3
                     508   ; Wait1ms();
000008E6  4EB8 08C6  509          jsr       _Wait1ms
000008EA  5282       510          addq.l    #1,D2
000008EC  60F0       511          bra       Wait3ms_1
                     512   Wait3ms_3:
000008EE  241F       513          move.l    (A7)+,D2
000008F0  4E75       514          rts
                     515   ; }
                     516   ; void Wait250ms(void)
                     517   ; {
                     518   _Wait250ms:
000008F2  2F02       519          move.l    D2,-(A7)
                     520   ; int i;
                     521   ; for (i = 0; i < 250; i++)
000008F4  4282       522          clr.l     D2
                     523   Wait250ms_1:
000008F6  0C82 0000  524          cmp.l     #250,D2
000008FA  00FA      
000008FC  6C08       525          bge.s     Wait250ms_3
                     526   ; Wait1ms();
000008FE  4EB8 08C6  527          jsr       _Wait1ms
00000902  5282       528          addq.l    #1,D2
00000904  60F0       529          bra       Wait250ms_1
                     530   Wait250ms_3:
00000906  241F       531          move.l    (A7)+,D2
00000908  4E75       532          rts
                     533   ; }
                     534   ; void Wait500ms(void)
                     535   ; {
                     536   _Wait500ms:
0000090A  2F02       537          move.l    D2,-(A7)
                     538   ; int i;
                     539   ; for (i = 0; i < 500; i++)
0000090C  4282       540          clr.l     D2
                     541   Wait500ms_1:
0000090E  0C82 0000  542          cmp.l     #500,D2
00000912  01F4      
00000914  6C08       543          bge.s     Wait500ms_3
                     544   ; Wait1ms();
00000916  4EB8 08C6  545          jsr       _Wait1ms
0000091A  5282       546          addq.l    #1,D2
0000091C  60F0       547          bra       Wait500ms_1
                     548   Wait500ms_3:
0000091E  241F       549          move.l    (A7)+,D2
00000920  4E75       550          rts
                     551   ; }
                     552   ; void Wait750ms(void)
                     553   ; {
                     554   _Wait750ms:
00000922  2F02       555          move.l    D2,-(A7)
                     556   ; int i;
                     557   ; for (i = 0; i < 750; i++)
00000924  4282       558          clr.l     D2
                     559   Wait750ms_1:
00000926  0C82 0000  560          cmp.l     #750,D2
0000092A  02EE      
0000092C  6C08       561          bge.s     Wait750ms_3
                     562   ; Wait1ms();
0000092E  4EB8 08C6  563          jsr       _Wait1ms
00000932  5282       564          addq.l    #1,D2
00000934  60F0       565          bra       Wait750ms_1
                     566   Wait750ms_3:
00000936  241F       567          move.l    (A7)+,D2
00000938  4E75       568          rts
                     569   ; }
                     570   ; void InstallExceptionHandler( void (*function_ptr)(), int level)
                     571   ; {
                     572   _InstallExceptionHandler:
0000093A  4E56 FFFC  573          link      A6,#-4
                     574   ; volatile long int *RamVectorAddress = (volatile long int *)(StartOfExceptionVectorTable) ;   // pointer to the Ram based interrupt vector table created in Cstart in debug monitor
0000093E  2D7C 0803  575          move.l    #134414336,-4(A6)
00000942  0000 FFFC 
                     576   ; RamVectorAddress[level] = (long int *)(function_ptr);
00000946  206E FFFC  577          move.l    -4(A6),A0
0000094A  202E 000C  578          move.l    12(A6),D0
0000094E  E588       579          lsl.l     #2,D0
00000950  21AE 0008  580          move.l    8(A6),0(A0,D0.L)
00000954  0800      
00000956  4E5E       581          unlk      A6
00000958  4E75       582          rts
                     583   ; }
                     584   ; void say_phoneme   (char phoneme_code) {
                     585   _say_phoneme:
0000095A  4E56 0000  586          link      A6,#0
                     587   ; //you need to write this function
                     588   ; voice = phoneme_code;
0000095E  13EE 000B  589          move.b    11(A6),-16711682
00000962  FF00 FFFE 
00000966  4E5E       590          unlk      A6
00000968  4E75       591          rts
                     592   ; }
                     593   ; void say_Sasha(){
                     594   _say_Sasha:
                     595   ; talkphonemeSS();
0000096A  4EB9 0000  596          jsr       _talkphonemeSS
0000096E  2608      
                     597   ; talkphonemeAA();
00000970  4EB9 0000  598          jsr       _talkphonemeAA
00000974  2404      
                     599   ; talkphonemeSH();
00000976  4EB9 0000  600          jsr       _talkphonemeSH
0000097A  25FC      
                     601   ; // talkphonemeHH1();
                     602   ; talkphonemeAA();
0000097C  4EB9 0000  603          jsr       _talkphonemeAA
00000980  2404      
                     604   ; endword();
00000982  4EB9 0000  605          jsr       _endword
00000986  2AAA      
00000988  4E75       606          rts
                     607   ; }
                     608   ; void say_hello() {
                     609   _say_hello:
                     610   ; talkphonemeHH1();
0000098A  4EB9 0000  611          jsr       _talkphonemeHH1
0000098E  2518      
                     612   ; talkphonemeEH();
00000990  4EB9 0000  613          jsr       _talkphonemeEH
00000994  24AC      
                     614   ; talkphonemeLL();
00000996  4EB9 0000  615          jsr       _talkphonemeLL
0000099A  2578      
                     616   ; talkphonemeAX();
0000099C  4EB9 0000  617          jsr       _talkphonemeAX
000009A0  2440      
                     618   ; talkphonemeOW();
000009A2  4EB9 0000  619          jsr       _talkphonemeOW
000009A6  25C0      
                     620   ; endword();
000009A8  4EB9 0000  621          jsr       _endword
000009AC  2AAA      
000009AE  4E75       622          rts
                     623   ; }
                     624   ; void say_world() {
                     625   _say_world:
                     626   ; talkphonemeWW();
000009B0  4EB9 0000  627          jsr       _talkphonemeWW
000009B4  2674      
                     628   ; talkphonemeER2();
000009B6  4EB9 0000  629          jsr       _talkphonemeER2
000009BA  24D0      
                     630   ; talkphonemeLL();
000009BC  4EB9 0000  631          jsr       _talkphonemeLL
000009C0  2578      
                     632   ; talkphonemeDD1();
000009C2  4EB9 0000  633          jsr       _talkphonemeDD1
000009C6  247C      
                     634   ; endword();
000009C8  4EB9 0000  635          jsr       _endword
000009CC  2AAA      
000009CE  4E75       636          rts
                     637   ; }
                     638   ; /*********************************************************************************************
                     639   ; *Subroutine to initialise the RS232 Port by writing some commands to the internal registers
                     640   ; *********************************************************************************************/
                     641   ; void Init_RS232(void)
                     642   ; {
                     643   _Init_RS232:
                     644   ; RS232_Control = (char)(0x15) ; //  %00010101    divide by 16 clock, set rts low, 8 bits no parity, 1 stop bit transmitter interrupt disabled
000009D0  13FC 0015  645          move.b    #21,4194368
000009D4  0040 0040 
                     646   ; RS232_Baud = (char)(0x1) ;      // program baud rate generator 000 = 230k, 001 = 115k, 010 = 57.6k, 011 = 38.4k, 100 = 19.2, all others = 9600
000009D8  13FC 0001  647          move.b    #1,4194372
000009DC  0040 0044 
000009E0  4E75       648          rts
                     649   ; }
                     650   ; int kbhit(void)
                     651   ; {
                     652   _kbhit:
                     653   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // wait for Rx bit in status register to be '1'
000009E2  1039 0040  654          move.b    4194368,D0
000009E6  0040      
000009E8  C03C 0001  655          and.b     #1,D0
000009EC  0C00 0001  656          cmp.b     #1,D0
000009F0  6604       657          bne.s     kbhit_1
                     658   ; return 1 ;
000009F2  7001       659          moveq     #1,D0
000009F4  6002       660          bra.s     kbhit_3
                     661   kbhit_1:
                     662   ; else
                     663   ; return 0 ;
000009F6  4280       664          clr.l     D0
                     665   kbhit_3:
000009F8  4E75       666          rts
                     667   ; }
                     668   ; /*********************************************************************************************************
                     669   ; **  Subroutine to provide a low level output function to 6850 ACIA
                     670   ; **  This routine provides the basic functionality to output a single character to the serial Port
                     671   ; **  to allow the board to communicate with HyperTerminal Program
                     672   ; **
                     673   ; **  NOTE you do not call this function directly, instead you call the normal putchar() function
                     674   ; **  which in turn calls _putch() below). Other functions like puts(), printf() call putchar() so will
                     675   ; **  call _putch() also
                     676   ; *********************************************************************************************************/
                     677   ; int _putch( int c)
                     678   ; {
                     679   __putch:
000009FA  4E56 0000  680          link      A6,#0
                     681   ; while(((char)(RS232_Status) & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
                     682   _putch_1:
000009FE  1039 0040  683          move.b    4194368,D0
00000A02  0040      
00000A04  C03C 0002  684          and.b     #2,D0
00000A08  0C00 0002  685          cmp.b     #2,D0
00000A0C  6702       686          beq.s     _putch_3
00000A0E  60EE       687          bra       _putch_1
                     688   _putch_3:
                     689   ; ;
                     690   ; (char)(RS232_TxData) = ((char)(c) & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
00000A10  202E 0008  691          move.l    8(A6),D0
00000A14  C03C 007F  692          and.b     #127,D0
00000A18  13C0 0040  693          move.b    D0,4194370
00000A1C  0042      
                     694   ; return c ;                                              // putchar() expects the character to be returned
00000A1E  202E 0008  695          move.l    8(A6),D0
00000A22  4E5E       696          unlk      A6
00000A24  4E75       697          rts
                     698   ; }
                     699   ; /*********************************************************************************************************
                     700   ; **  Subroutine to provide a low level input function to 6850 ACIA
                     701   ; **  This routine provides the basic functionality to input a single character from the serial Port
                     702   ; **  to allow the board to communicate with HyperTerminal Program Keyboard (your PC)
                     703   ; **
                     704   ; **  NOTE you do not call this function directly, instead you call the normal _getch() function
                     705   ; **  which in turn calls _getch() below). Other functions like gets(), scanf() call _getch() so will
                     706   ; **  call _getch() also
                     707   ; *********************************************************************************************************/
                     708   ; int _getch( void )
                     709   ; {
                     710   __getch:
00000A26  2F02       711          move.l    D2,-(A7)
                     712   ; int c ;
                     713   ; while(((char)(RS232_Status) & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
                     714   _getch_1:
00000A28  1039 0040  715          move.b    4194368,D0
00000A2C  0040      
00000A2E  C03C 0001  716          and.b     #1,D0
00000A32  0C00 0001  717          cmp.b     #1,D0
00000A36  6702       718          beq.s     _getch_3
00000A38  60EE       719          bra       _getch_1
                     720   _getch_3:
                     721   ; ;
                     722   ; c = (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
00000A3A  1039 0040  723          move.b    4194370,D0
00000A3E  0042      
00000A40  C0BC 0000  724          and.l     #255,D0
00000A44  00FF      
00000A46  C0BC 0000  725          and.l     #127,D0
00000A4A  007F      
00000A4C  2400       726          move.l    D0,D2
                     727   ; // shall we echo the character? Echo is set to TRUE at reset, but for speed we don't want to echo when downloading code with the 'L' debugger command
                     728   ; if(Echo)
00000A4E  4AB9 0803  729          tst.l     _Echo.L
00000A52  00E0      
00000A54  6708       730          beq.s     _getch_4
                     731   ; _putch(c);
00000A56  2F02       732          move.l    D2,-(A7)
00000A58  4EB8 09FA  733          jsr       __putch
00000A5C  584F       734          addq.w    #4,A7
                     735   _getch_4:
                     736   ; return c ;
00000A5E  2002       737          move.l    D2,D0
00000A60  241F       738          move.l    (A7)+,D2
00000A62  4E75       739          rts
                     740   ; }
                     741   ; // flush the input stream for any unread characters
                     742   ; void FlushKeyboard(void)
                     743   ; {
                     744   _FlushKeyboard:
00000A64  4E56 FFFC  745          link      A6,#-4
                     746   ; char c ;
                     747   ; while(1)    {
                     748   FlushKeyboard_1:
                     749   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // if Rx bit in status register is '1'
00000A68  1039 0040  750          move.b    4194368,D0
00000A6C  0040      
00000A6E  C03C 0001  751          and.b     #1,D0
00000A72  0C00 0001  752          cmp.b     #1,D0
00000A76  6610       753          bne.s     FlushKeyboard_4
                     754   ; c = ((char)(RS232_RxData) & (char)(0x7f)) ;
00000A78  1039 0040  755          move.b    4194370,D0
00000A7C  0042      
00000A7E  C03C 007F  756          and.b     #127,D0
00000A82  1D40 FFFF  757          move.b    D0,-1(A6)
00000A86  6002       758          bra.s     FlushKeyboard_5
                     759   FlushKeyboard_4:
                     760   ; else
                     761   ; return ;
00000A88  6002       762          bra.s     FlushKeyboard_6
                     763   FlushKeyboard_5:
00000A8A  60DC       764          bra       FlushKeyboard_1
                     765   FlushKeyboard_6:
00000A8C  4E5E       766          unlk      A6
00000A8E  4E75       767          rts
                     768   ; }
                     769   ; }
                     770   ; // converts hex char to 4 bit binary equiv in range 0000-1111 (0-F)
                     771   ; // char assumed to be a valid hex char 0-9, a-f, A-F
                     772   ; char xtod(int c)
                     773   ; {
                     774   _xtod:
00000A90  4E56 0000  775          link      A6,#0
00000A94  2F02       776          move.l    D2,-(A7)
00000A96  242E 0008  777          move.l    8(A6),D2
                     778   ; if ((char)(c) <= (char)('9'))
00000A9A  0C02 0039  779          cmp.b     #57,D2
00000A9E  6E08       780          bgt.s     xtod_1
                     781   ; return c - (char)(0x30);    // 0 - 9 = 0x30 - 0x39 so convert to number by sutracting 0x30
00000AA0  1002       782          move.b    D2,D0
00000AA2  0400 0030  783          sub.b     #48,D0
00000AA6  6014       784          bra.s     xtod_3
                     785   xtod_1:
                     786   ; else if((char)(c) > (char)('F'))    // assume lower case
00000AA8  0C02 0046  787          cmp.b     #70,D2
00000AAC  6F08       788          ble.s     xtod_4
                     789   ; return c - (char)(0x57);    // a-f = 0x61-66 so needs to be converted to 0x0A - 0x0F so subtract 0x57
00000AAE  1002       790          move.b    D2,D0
00000AB0  0400 0057  791          sub.b     #87,D0
00000AB4  6006       792          bra.s     xtod_3
                     793   xtod_4:
                     794   ; else
                     795   ; return c - (char)(0x37);    // A-F = 0x41-46 so needs to be converted to 0x0A - 0x0F so subtract 0x37
00000AB6  1002       796          move.b    D2,D0
00000AB8  0400 0037  797          sub.b     #55,D0
                     798   xtod_3:
00000ABC  241F       799          move.l    (A7)+,D2
00000ABE  4E5E       800          unlk      A6
00000AC0  4E75       801          rts
                     802   ; }
                     803   ; int Get2HexDigits(char *CheckSumPtr)
                     804   ; {
                     805   _Get2HexDigits:
00000AC2  4E56 0000  806          link      A6,#0
00000AC6  2F02       807          move.l    D2,-(A7)
                     808   ; register int i = (xtod(_getch()) << 4) | (xtod(_getch()));
00000AC8  2F00       809          move.l    D0,-(A7)
00000ACA  4EB8 0A26  810          jsr       __getch
00000ACE  2200       811          move.l    D0,D1
00000AD0  201F       812          move.l    (A7)+,D0
00000AD2  2F01       813          move.l    D1,-(A7)
00000AD4  4EB8 0A90  814          jsr       _xtod
00000AD8  584F       815          addq.w    #4,A7
00000ADA  C0BC 0000  816          and.l     #255,D0
00000ADE  00FF      
00000AE0  E980       817          asl.l     #4,D0
00000AE2  2F00       818          move.l    D0,-(A7)
00000AE4  2F01       819          move.l    D1,-(A7)
00000AE6  4EB8 0A26  820          jsr       __getch
00000AEA  221F       821          move.l    (A7)+,D1
00000AEC  2F00       822          move.l    D0,-(A7)
00000AEE  4EB8 0A90  823          jsr       _xtod
00000AF2  584F       824          addq.w    #4,A7
00000AF4  2200       825          move.l    D0,D1
00000AF6  201F       826          move.l    (A7)+,D0
00000AF8  C2BC 0000  827          and.l     #255,D1
00000AFC  00FF      
00000AFE  8081       828          or.l      D1,D0
00000B00  2400       829          move.l    D0,D2
                     830   ; if(CheckSumPtr)
00000B02  4AAE 0008  831          tst.l     8(A6)
00000B06  6706       832          beq.s     Get2HexDigits_1
                     833   ; *CheckSumPtr += i ;
00000B08  206E 0008  834          move.l    8(A6),A0
00000B0C  D510       835          add.b     D2,(A0)
                     836   Get2HexDigits_1:
                     837   ; return i ;
00000B0E  2002       838          move.l    D2,D0
00000B10  241F       839          move.l    (A7)+,D2
00000B12  4E5E       840          unlk      A6
00000B14  4E75       841          rts
                     842   ; }
                     843   ; int Get4HexDigits(char *CheckSumPtr)
                     844   ; {
                     845   _Get4HexDigits:
00000B16  4E56 0000  846          link      A6,#0
                     847   ; return (Get2HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000B1A  2F2E 0008  848          move.l    8(A6),-(A7)
00000B1E  4EB8 0AC2  849          jsr       _Get2HexDigits
00000B22  584F       850          addq.w    #4,A7
00000B24  E180       851          asl.l     #8,D0
00000B26  2F00       852          move.l    D0,-(A7)
00000B28  2F2E 0008  853          move.l    8(A6),-(A7)
00000B2C  4EB8 0AC2  854          jsr       _Get2HexDigits
00000B30  584F       855          addq.w    #4,A7
00000B32  2200       856          move.l    D0,D1
00000B34  201F       857          move.l    (A7)+,D0
00000B36  8081       858          or.l      D1,D0
00000B38  4E5E       859          unlk      A6
00000B3A  4E75       860          rts
                     861   ; }
                     862   ; int Get6HexDigits(char *CheckSumPtr)
                     863   ; {
                     864   _Get6HexDigits:
00000B3C  4E56 0000  865          link      A6,#0
                     866   ; return (Get4HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000B40  2F2E 0008  867          move.l    8(A6),-(A7)
00000B44  4EB8 0B16  868          jsr       _Get4HexDigits
00000B48  584F       869          addq.w    #4,A7
00000B4A  E180       870          asl.l     #8,D0
00000B4C  2F00       871          move.l    D0,-(A7)
00000B4E  2F2E 0008  872          move.l    8(A6),-(A7)
00000B52  4EB8 0AC2  873          jsr       _Get2HexDigits
00000B56  584F       874          addq.w    #4,A7
00000B58  2200       875          move.l    D0,D1
00000B5A  201F       876          move.l    (A7)+,D0
00000B5C  8081       877          or.l      D1,D0
00000B5E  4E5E       878          unlk      A6
00000B60  4E75       879          rts
                     880   ; }
                     881   ; int Get8HexDigits(char *CheckSumPtr)
                     882   ; {
                     883   _Get8HexDigits:
00000B62  4E56 0000  884          link      A6,#0
                     885   ; return (Get4HexDigits(CheckSumPtr) << 16) | (Get4HexDigits(CheckSumPtr));
00000B66  2F2E 0008  886          move.l    8(A6),-(A7)
00000B6A  4EB8 0B16  887          jsr       _Get4HexDigits
00000B6E  584F       888          addq.w    #4,A7
00000B70  E180       889          asl.l     #8,D0
00000B72  E180       890          asl.l     #8,D0
00000B74  2F00       891          move.l    D0,-(A7)
00000B76  2F2E 0008  892          move.l    8(A6),-(A7)
00000B7A  4EB8 0B16  893          jsr       _Get4HexDigits
00000B7E  584F       894          addq.w    #4,A7
00000B80  2200       895          move.l    D0,D1
00000B82  201F       896          move.l    (A7)+,D0
00000B84  8081       897          or.l      D1,D0
00000B86  4E5E       898          unlk      A6
00000B88  4E75       899          rts
                     900   ; }
                     901   ; void DumpMemory(void)   // simple dump memory fn
                     902   ; {
                     903   _DumpMemory:
00000B8A  48E7 3C30  904          movem.l   D2/D3/D4/D5/A2/A3,-(A7)
00000B8E  45F9 0000  905          lea       _printf.L,A2
00000B92  3B88      
00000B94  47F9 0000  906          lea       _putch.L,A3
00000B98  3AB6      
                     907   ; int i, j ;
                     908   ; unsigned char *RamPtr,c ; // pointer to where the program is download (assumed)
                     909   ; printf("\r\nDump Memory Block: <ESC> to Abort, <SPACE> to Continue") ;
00000B9A  4879 0000  910          pea       @m68kde~1_1.L
00000B9E  4474      
00000BA0  4E92       911          jsr       (A2)
00000BA2  584F       912          addq.w    #4,A7
                     913   ; printf("\r\nEnter Start Address: ") ;
00000BA4  4879 0000  914          pea       @m68kde~1_2.L
00000BA8  44AE      
00000BAA  4E92       915          jsr       (A2)
00000BAC  584F       916          addq.w    #4,A7
                     917   ; RamPtr = Get8HexDigits(0) ;
00000BAE  42A7       918          clr.l     -(A7)
00000BB0  4EB8 0B62  919          jsr       _Get8HexDigits
00000BB4  584F       920          addq.w    #4,A7
00000BB6  2600       921          move.l    D0,D3
                     922   ; while(1)    {
                     923   DumpMemory_1:
                     924   ; for(i = 0; i < 16; i ++)    {
00000BB8  4285       925          clr.l     D5
                     926   DumpMemory_4:
00000BBA  0C85 0000  927          cmp.l     #16,D5
00000BBE  0010      
00000BC0  6C00 0096  928          bge       DumpMemory_6
                     929   ; printf("\r\n%08x ", RamPtr) ;
00000BC4  2F03       930          move.l    D3,-(A7)
00000BC6  4879 0000  931          pea       @m68kde~1_3.L
00000BCA  44C6      
00000BCC  4E92       932          jsr       (A2)
00000BCE  504F       933          addq.w    #8,A7
                     934   ; for(j=0; j < 16; j ++)  {
00000BD0  4282       935          clr.l     D2
                     936   DumpMemory_7:
00000BD2  0C82 0000  937          cmp.l     #16,D2
00000BD6  0010      
00000BD8  6C24       938          bge.s     DumpMemory_9
                     939   ; printf("%02X",RamPtr[j]) ;
00000BDA  2043       940          move.l    D3,A0
00000BDC  1230 2800  941          move.b    0(A0,D2.L),D1
00000BE0  C2BC 0000  942          and.l     #255,D1
00000BE4  00FF      
00000BE6  2F01       943          move.l    D1,-(A7)
00000BE8  4879 0000  944          pea       @m68kde~1_4.L
00000BEC  44CE      
00000BEE  4E92       945          jsr       (A2)
00000BF0  504F       946          addq.w    #8,A7
                     947   ; putchar(' ') ;
00000BF2  4878 0020  948          pea       32
00000BF6  4E93       949          jsr       (A3)
00000BF8  584F       950          addq.w    #4,A7
00000BFA  5282       951          addq.l    #1,D2
00000BFC  60D4       952          bra       DumpMemory_7
                     953   DumpMemory_9:
                     954   ; }
                     955   ; // now display the data as ASCII at the end
                     956   ; printf("  ") ;
00000BFE  4879 0000  957          pea       @m68kde~1_5.L
00000C02  44D4      
00000C04  4E92       958          jsr       (A2)
00000C06  584F       959          addq.w    #4,A7
                     960   ; for(j = 0; j < 16; j++) {
00000C08  4282       961          clr.l     D2
                     962   DumpMemory_10:
00000C0A  0C82 0000  963          cmp.l     #16,D2
00000C0E  0010      
00000C10  6C00 003A  964          bge       DumpMemory_12
                     965   ; c = ((char)(RamPtr[j]) & 0x7f) ;
00000C14  2043       966          move.l    D3,A0
00000C16  1030 2800  967          move.b    0(A0,D2.L),D0
00000C1A  C03C 007F  968          and.b     #127,D0
00000C1E  1800       969          move.b    D0,D4
                     970   ; if((c > (char)(0x7f)) || (c < ' '))
00000C20  0C04 007F  971          cmp.b     #127,D4
00000C24  6206       972          bhi.s     DumpMemory_15
00000C26  0C04 0020  973          cmp.b     #32,D4
00000C2A  640A       974          bhs.s     DumpMemory_13
                     975   DumpMemory_15:
                     976   ; putchar('.') ;
00000C2C  4878 002E  977          pea       46
00000C30  4E93       978          jsr       (A3)
00000C32  584F       979          addq.w    #4,A7
00000C34  6012       980          bra.s     DumpMemory_14
                     981   DumpMemory_13:
                     982   ; else
                     983   ; putchar(RamPtr[j]) ;
00000C36  2043       984          move.l    D3,A0
00000C38  1230 2800  985          move.b    0(A0,D2.L),D1
00000C3C  C2BC 0000  986          and.l     #255,D1
00000C40  00FF      
00000C42  2F01       987          move.l    D1,-(A7)
00000C44  4E93       988          jsr       (A3)
00000C46  584F       989          addq.w    #4,A7
                     990   DumpMemory_14:
00000C48  5282       991          addq.l    #1,D2
00000C4A  60BE       992          bra       DumpMemory_10
                     993   DumpMemory_12:
                     994   ; }
                     995   ; RamPtr = RamPtr + 16 ;
00000C4C  0683 0000  996          add.l     #16,D3
00000C50  0010      
00000C52  5285       997          addq.l    #1,D5
00000C54  6000 FF64  998          bra       DumpMemory_4
                     999   DumpMemory_6:
                    1000   ; }
                    1001   ; printf("\r\n") ;
00000C58  4879 0000 1002          pea       @m68kde~1_6.L
00000C5C  44D8      
00000C5E  4E92      1003          jsr       (A2)
00000C60  584F      1004          addq.w    #4,A7
                    1005   ; c = _getch() ;
00000C62  4EB8 0A26 1006          jsr       __getch
00000C66  1800      1007          move.b    D0,D4
                    1008   ; if(c == 0x1b)          // break on ESC
00000C68  0C04 001B 1009          cmp.b     #27,D4
00000C6C  6602      1010          bne.s     DumpMemory_16
                    1011   ; break ;
00000C6E  6004      1012          bra.s     DumpMemory_3
                    1013   DumpMemory_16:
00000C70  6000 FF46 1014          bra       DumpMemory_1
                    1015   DumpMemory_3:
00000C74  4CDF 0C3C 1016          movem.l   (A7)+,D2/D3/D4/D5/A2/A3
00000C78  4E75      1017          rts
                    1018   ; }
                    1019   ; }
                    1020   ; void FillMemory()
                    1021   ; {
                    1022   _FillMemory:
00000C7A  48E7 3820 1023          movem.l   D2/D3/D4/A2,-(A7)
00000C7E  45F9 0000 1024          lea       _printf.L,A2
00000C82  3B88      
                    1025   ; char *StartRamPtr, *EndRamPtr ;
                    1026   ; unsigned char FillData ;
                    1027   ; printf("\r\nFill Memory Block") ;
00000C84  4879 0000 1028          pea       @m68kde~1_7.L
00000C88  44DC      
00000C8A  4E92      1029          jsr       (A2)
00000C8C  584F      1030          addq.w    #4,A7
                    1031   ; printf("\r\nEnter Start Address: ") ;
00000C8E  4879 0000 1032          pea       @m68kde~1_2.L
00000C92  44AE      
00000C94  4E92      1033          jsr       (A2)
00000C96  584F      1034          addq.w    #4,A7
                    1035   ; StartRamPtr = Get8HexDigits(0) ;
00000C98  42A7      1036          clr.l     -(A7)
00000C9A  4EB8 0B62 1037          jsr       _Get8HexDigits
00000C9E  584F      1038          addq.w    #4,A7
00000CA0  2400      1039          move.l    D0,D2
                    1040   ; printf("\r\nEnter End Address: ") ;
00000CA2  4879 0000 1041          pea       @m68kde~1_8.L
00000CA6  44F0      
00000CA8  4E92      1042          jsr       (A2)
00000CAA  584F      1043          addq.w    #4,A7
                    1044   ; EndRamPtr = Get8HexDigits(0) ;
00000CAC  42A7      1045          clr.l     -(A7)
00000CAE  4EB8 0B62 1046          jsr       _Get8HexDigits
00000CB2  584F      1047          addq.w    #4,A7
00000CB4  2800      1048          move.l    D0,D4
                    1049   ; printf("\r\nEnter Fill Data: ") ;
00000CB6  4879 0000 1050          pea       @m68kde~1_9.L
00000CBA  4506      
00000CBC  4E92      1051          jsr       (A2)
00000CBE  584F      1052          addq.w    #4,A7
                    1053   ; FillData = Get2HexDigits(0) ;
00000CC0  42A7      1054          clr.l     -(A7)
00000CC2  4EB8 0AC2 1055          jsr       _Get2HexDigits
00000CC6  584F      1056          addq.w    #4,A7
00000CC8  1600      1057          move.b    D0,D3
                    1058   ; printf("\r\nFilling Addresses [$%08X - $%08X] with $%02X", StartRamPtr, EndRamPtr, FillData) ;
00000CCA  C6BC 0000 1059          and.l     #255,D3
00000CCE  00FF      
00000CD0  2F03      1060          move.l    D3,-(A7)
00000CD2  2F04      1061          move.l    D4,-(A7)
00000CD4  2F02      1062          move.l    D2,-(A7)
00000CD6  4879 0000 1063          pea       @m68kde~1_10.L
00000CDA  451A      
00000CDC  4E92      1064          jsr       (A2)
00000CDE  DEFC 0010 1065          add.w     #16,A7
                    1066   ; while(StartRamPtr < EndRamPtr)
                    1067   FillMemory_1:
00000CE2  B484      1068          cmp.l     D4,D2
00000CE4  6408      1069          bhs.s     FillMemory_3
                    1070   ; *StartRamPtr++ = FillData ;
00000CE6  2042      1071          move.l    D2,A0
00000CE8  5282      1072          addq.l    #1,D2
00000CEA  1083      1073          move.b    D3,(A0)
00000CEC  60F4      1074          bra       FillMemory_1
                    1075   FillMemory_3:
00000CEE  4CDF 041C 1076          movem.l   (A7)+,D2/D3/D4/A2
00000CF2  4E75      1077          rts
                    1078   ; }
                    1079   ; void Load_SRecordFile()
                    1080   ; {
                    1081   _Load_SRecordFile:
00000CF4  4E56 FFDC 1082          link      A6,#-36
00000CF8  48E7 3F3C 1083          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00000CFC  45EE FFFA 1084          lea       -6(A6),A2
00000D00  47F8 0AC2 1085          lea       _Get2HexDigits.L,A3
00000D04  49F9 0000 1086          lea       _printf.L,A4
00000D08  3B88      
                    1087   ; int i, Address, AddressSize, DataByte, NumDataBytesToRead, LoadFailed, FailedAddress, AddressFail, SRecordCount = 0, ByteTotal = 0 ;
00000D0A  42AE FFEE 1088          clr.l     -18(A6)
00000D0E  3A7C 0000 1089          move.w    #0,A5
                    1090   ; int result, ByteCount ;
                    1091   ; char c, CheckSum, ReadCheckSum, HeaderType ;
                    1092   ; char *RamPtr ;                          // pointer to Memory where downloaded program will be stored
                    1093   ; LoadFailed = 0 ;                        //assume LOAD operation will pass
00000D12  7E00      1094          moveq     #0,D7
                    1095   ; AddressFail = 0 ;
00000D14  42AE FFEA 1096          clr.l     -22(A6)
                    1097   ; Echo = 0 ;                              // don't echo S records during download
00000D18  42B9 0803 1098          clr.l     _Echo.L
00000D1C  00E0      
                    1099   ; printf("\r\nUse HyperTerminal to Send Text File (.hex)\r\n") ;
00000D1E  4879 0000 1100          pea       @m68kde~1_11.L
00000D22  454A      
00000D24  4E94      1101          jsr       (A4)
00000D26  584F      1102          addq.w    #4,A7
                    1103   ; while(1)    {
                    1104   Load_SRecordFile_1:
                    1105   ; CheckSum = 0 ;
00000D28  4212      1106          clr.b     (A2)
                    1107   ; do {
                    1108   Load_SRecordFile_4:
                    1109   ; c = toupper(_getch()) ;
00000D2A  2F00      1110          move.l    D0,-(A7)
00000D2C  4EB8 0A26 1111          jsr       __getch
00000D30  2200      1112          move.l    D0,D1
00000D32  201F      1113          move.l    (A7)+,D0
00000D34  2F01      1114          move.l    D1,-(A7)
00000D36  4EB9 0000 1115          jsr       _toupper
00000D3A  3B5C      
00000D3C  584F      1116          addq.w    #4,A7
00000D3E  1C00      1117          move.b    D0,D6
                    1118   ; if(c == 0x1b )      // if break
00000D40  0C06 001B 1119          cmp.b     #27,D6
00000D44  6604      1120          bne.s     Load_SRecordFile_6
                    1121   ; return;
00000D46  6000 0132 1122          bra       Load_SRecordFile_8
                    1123   Load_SRecordFile_6:
00000D4A  0C06 0053 1124          cmp.b     #83,D6
00000D4E  66DA      1125          bne       Load_SRecordFile_4
                    1126   ; }while(c != (char)('S'));   // wait for S start of header
                    1127   ; HeaderType = _getch() ;
00000D50  4EB8 0A26 1128          jsr       __getch
00000D54  1600      1129          move.b    D0,D3
                    1130   ; if(HeaderType == (char)('0') || HeaderType == (char)('5'))       // ignore s0, s5 records
00000D56  0C03 0030 1131          cmp.b     #48,D3
00000D5A  6706      1132          beq.s     Load_SRecordFile_11
00000D5C  0C03 0035 1133          cmp.b     #53,D3
00000D60  6604      1134          bne.s     Load_SRecordFile_9
                    1135   Load_SRecordFile_11:
                    1136   ; continue ;
00000D62  6000 00D2 1137          bra       Load_SRecordFile_23
                    1138   Load_SRecordFile_9:
                    1139   ; if(HeaderType >= (char)('7'))
00000D66  0C03 0037 1140          cmp.b     #55,D3
00000D6A  6D04      1141          blt.s     Load_SRecordFile_12
                    1142   ; break ;                 // end load on s7,s8,s9 records
00000D6C  6000 00CC 1143          bra       Load_SRecordFile_3
                    1144   Load_SRecordFile_12:
                    1145   ; // get the bytecount
                    1146   ; ByteCount = Get2HexDigits(&CheckSum) ;
00000D70  2F0A      1147          move.l    A2,-(A7)
00000D72  4E93      1148          jsr       (A3)
00000D74  584F      1149          addq.w    #4,A7
00000D76  2D40 FFF6 1150          move.l    D0,-10(A6)
                    1151   ; // get the address, 4 digits for s1, 6 digits for s2, and 8 digits for s3 record
                    1152   ; if(HeaderType == (char)('1')) {
00000D7A  0C03 0031 1153          cmp.b     #49,D3
00000D7E  660E      1154          bne.s     Load_SRecordFile_14
                    1155   ; AddressSize = 2 ;       // 2 byte address
00000D80  7A02      1156          moveq     #2,D5
                    1157   ; Address = Get4HexDigits(&CheckSum);
00000D82  2F0A      1158          move.l    A2,-(A7)
00000D84  4EB8 0B16 1159          jsr       _Get4HexDigits
00000D88  584F      1160          addq.w    #4,A7
00000D8A  2800      1161          move.l    D0,D4
00000D8C  6020      1162          bra.s     Load_SRecordFile_17
                    1163   Load_SRecordFile_14:
                    1164   ; }
                    1165   ; else if (HeaderType == (char)('2')) {
00000D8E  0C03 0032 1166          cmp.b     #50,D3
00000D92  660E      1167          bne.s     Load_SRecordFile_16
                    1168   ; AddressSize = 3 ;       // 3 byte address
00000D94  7A03      1169          moveq     #3,D5
                    1170   ; Address = Get6HexDigits(&CheckSum) ;
00000D96  2F0A      1171          move.l    A2,-(A7)
00000D98  4EB8 0B3C 1172          jsr       _Get6HexDigits
00000D9C  584F      1173          addq.w    #4,A7
00000D9E  2800      1174          move.l    D0,D4
00000DA0  600C      1175          bra.s     Load_SRecordFile_17
                    1176   Load_SRecordFile_16:
                    1177   ; }
                    1178   ; else    {
                    1179   ; AddressSize = 4 ;       // 4 byte address
00000DA2  7A04      1180          moveq     #4,D5
                    1181   ; Address = Get8HexDigits(&CheckSum) ;
00000DA4  2F0A      1182          move.l    A2,-(A7)
00000DA6  4EB8 0B62 1183          jsr       _Get8HexDigits
00000DAA  584F      1184          addq.w    #4,A7
00000DAC  2800      1185          move.l    D0,D4
                    1186   Load_SRecordFile_17:
                    1187   ; }
                    1188   ; RamPtr = (char *)(Address) ;                            // point to download area
00000DAE  2D44 FFFC 1189          move.l    D4,-4(A6)
                    1190   ; NumDataBytesToRead = ByteCount - AddressSize - 1 ;
00000DB2  202E FFF6 1191          move.l    -10(A6),D0
00000DB6  9085      1192          sub.l     D5,D0
00000DB8  5380      1193          subq.l    #1,D0
00000DBA  2D40 FFE2 1194          move.l    D0,-30(A6)
                    1195   ; for(i = 0; i < NumDataBytesToRead; i ++) {     // read in remaining data bytes (ignore address and checksum at the end
00000DBE  4282      1196          clr.l     D2
                    1197   Load_SRecordFile_18:
00000DC0  B4AE FFE2 1198          cmp.l     -30(A6),D2
00000DC4  6C1E      1199          bge.s     Load_SRecordFile_20
                    1200   ; DataByte = Get2HexDigits(&CheckSum) ;
00000DC6  2F0A      1201          move.l    A2,-(A7)
00000DC8  4E93      1202          jsr       (A3)
00000DCA  584F      1203          addq.w    #4,A7
00000DCC  2D40 FFDE 1204          move.l    D0,-34(A6)
                    1205   ; *RamPtr++ = DataByte ;                      // store downloaded byte in Ram at specified address
00000DD0  202E FFDE 1206          move.l    -34(A6),D0
00000DD4  206E FFFC 1207          move.l    -4(A6),A0
00000DD8  52AE FFFC 1208          addq.l    #1,-4(A6)
00000DDC  1080      1209          move.b    D0,(A0)
                    1210   ; ByteTotal++;
00000DDE  524D      1211          addq.w    #1,A5
00000DE0  5282      1212          addq.l    #1,D2
00000DE2  60DC      1213          bra       Load_SRecordFile_18
                    1214   Load_SRecordFile_20:
                    1215   ; }
                    1216   ; // checksum is the 1's complement of the sum of all data pairs following the bytecount, i.e. it includes the address and the data itself
                    1217   ; ReadCheckSum = Get2HexDigits(0) ;
00000DE4  42A7      1218          clr.l     -(A7)
00000DE6  4E93      1219          jsr       (A3)
00000DE8  584F      1220          addq.w    #4,A7
00000DEA  1D40 FFFB 1221          move.b    D0,-5(A6)
                    1222   ; if((~CheckSum&0Xff) != (ReadCheckSum&0Xff))   {
00000DEE  1012      1223          move.b    (A2),D0
00000DF0  4600      1224          not.b     D0
00000DF2  4880      1225          ext.w     D0
00000DF4  C07C 00FF 1226          and.w     #255,D0
00000DF8  122E FFFB 1227          move.b    -5(A6),D1
00000DFC  4881      1228          ext.w     D1
00000DFE  C27C 00FF 1229          and.w     #255,D1
00000E02  B041      1230          cmp.w     D1,D0
00000E04  6708      1231          beq.s     Load_SRecordFile_21
                    1232   ; LoadFailed = 1 ;
00000E06  7E01      1233          moveq     #1,D7
                    1234   ; FailedAddress = Address ;
00000E08  2D44 FFE6 1235          move.l    D4,-26(A6)
                    1236   ; break;
00000E0C  602C      1237          bra.s     Load_SRecordFile_3
                    1238   Load_SRecordFile_21:
                    1239   ; }
                    1240   ; SRecordCount++ ;
00000E0E  52AE FFEE 1241          addq.l    #1,-18(A6)
                    1242   ; // display feedback on progress
                    1243   ; if(SRecordCount % 25 == 0)
00000E12  2F2E FFEE 1244          move.l    -18(A6),-(A7)
00000E16  4878 0019 1245          pea       25
00000E1A  4EB9 0000 1246          jsr       LDIV
00000E1E  394A      
00000E20  202F 0004 1247          move.l    4(A7),D0
00000E24  504F      1248          addq.w    #8,A7
00000E26  4A80      1249          tst.l     D0
00000E28  660C      1250          bne.s     Load_SRecordFile_23
                    1251   ; putchar('.') ;
00000E2A  4878 002E 1252          pea       46
00000E2E  4EB9 0000 1253          jsr       _putch
00000E32  3AB6      
00000E34  584F      1254          addq.w    #4,A7
                    1255   Load_SRecordFile_23:
00000E36  6000 FEF0 1256          bra       Load_SRecordFile_1
                    1257   Load_SRecordFile_3:
                    1258   ; }
                    1259   ; if(LoadFailed == 1) {
00000E3A  0C87 0000 1260          cmp.l     #1,D7
00000E3E  0001      
00000E40  6610      1261          bne.s     Load_SRecordFile_25
                    1262   ; printf("\r\nLoad Failed at Address = [$%08X]\r\n", FailedAddress) ;
00000E42  2F2E FFE6 1263          move.l    -26(A6),-(A7)
00000E46  4879 0000 1264          pea       @m68kde~1_12.L
00000E4A  457A      
00000E4C  4E94      1265          jsr       (A4)
00000E4E  504F      1266          addq.w    #8,A7
00000E50  600C      1267          bra.s     Load_SRecordFile_26
                    1268   Load_SRecordFile_25:
                    1269   ; }
                    1270   ; else
                    1271   ; printf("\r\nSuccess: Downloaded %d bytes\r\n", ByteTotal) ;
00000E52  2F0D      1272          move.l    A5,-(A7)
00000E54  4879 0000 1273          pea       @m68kde~1_13.L
00000E58  45A0      
00000E5A  4E94      1274          jsr       (A4)
00000E5C  504F      1275          addq.w    #8,A7
                    1276   Load_SRecordFile_26:
                    1277   ; // pause at the end to wait for download to finish transmitting at the end of S8 etc
                    1278   ; for(i = 0; i < 400000; i ++)
00000E5E  4282      1279          clr.l     D2
                    1280   Load_SRecordFile_27:
00000E60  0C82 0006 1281          cmp.l     #400000,D2
00000E64  1A80      
00000E66  6C04      1282          bge.s     Load_SRecordFile_29
00000E68  5282      1283          addq.l    #1,D2
00000E6A  60F4      1284          bra       Load_SRecordFile_27
                    1285   Load_SRecordFile_29:
                    1286   ; ;
                    1287   ; FlushKeyboard() ;
00000E6C  4EB8 0A64 1288          jsr       _FlushKeyboard
                    1289   ; Echo = 1;
00000E70  23FC 0000 1290          move.l    #1,_Echo.L
00000E74  0001 0803 
00000E78  00E0      
                    1291   Load_SRecordFile_8:
00000E7A  4CDF 3CFC 1292          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00000E7E  4E5E      1293          unlk      A6
00000E80  4E75      1294          rts
                    1295   ; }
                    1296   ; void MemoryChange(void)
                    1297   ; {
                    1298   _MemoryChange:
00000E82  48E7 3820 1299          movem.l   D2/D3/D4/A2,-(A7)
00000E86  45F9 0000 1300          lea       _printf.L,A2
00000E8A  3B88      
                    1301   ; unsigned char *RamPtr,c ; // pointer to memory
                    1302   ; int Data ;
                    1303   ; printf("\r\nExamine and Change Memory") ;
00000E8C  4879 0000 1304          pea       @m68kde~1_14.L
00000E90  45C2      
00000E92  4E92      1305          jsr       (A2)
00000E94  584F      1306          addq.w    #4,A7
                    1307   ; printf("\r\n<ESC> to Stop, <SPACE> to Advance, '-' to Go Back, <DATA> to change") ;
00000E96  4879 0000 1308          pea       @m68kde~1_15.L
00000E9A  45DE      
00000E9C  4E92      1309          jsr       (A2)
00000E9E  584F      1310          addq.w    #4,A7
                    1311   ; printf("\r\nEnter Address: ") ;
00000EA0  4879 0000 1312          pea       @m68kde~1_16.L
00000EA4  4624      
00000EA6  4E92      1313          jsr       (A2)
00000EA8  584F      1314          addq.w    #4,A7
                    1315   ; RamPtr = Get8HexDigits(0) ;
00000EAA  42A7      1316          clr.l     -(A7)
00000EAC  4EB8 0B62 1317          jsr       _Get8HexDigits
00000EB0  584F      1318          addq.w    #4,A7
00000EB2  2600      1319          move.l    D0,D3
                    1320   ; while(1)    {
                    1321   MemoryChange_1:
                    1322   ; printf("\r\n[%08x] : %02x  ", RamPtr, *RamPtr) ;
00000EB4  2043      1323          move.l    D3,A0
00000EB6  1210      1324          move.b    (A0),D1
00000EB8  C2BC 0000 1325          and.l     #255,D1
00000EBC  00FF      
00000EBE  2F01      1326          move.l    D1,-(A7)
00000EC0  2F03      1327          move.l    D3,-(A7)
00000EC2  4879 0000 1328          pea       @m68kde~1_17.L
00000EC6  4636      
00000EC8  4E92      1329          jsr       (A2)
00000ECA  DEFC 000C 1330          add.w     #12,A7
                    1331   ; c = tolower(_getch()) ;
00000ECE  2F00      1332          move.l    D0,-(A7)
00000ED0  4EB8 0A26 1333          jsr       __getch
00000ED4  2200      1334          move.l    D0,D1
00000ED6  201F      1335          move.l    (A7)+,D0
00000ED8  2F01      1336          move.l    D1,-(A7)
00000EDA  4EB9 0000 1337          jsr       _tolower
00000EDE  3AE6      
00000EE0  584F      1338          addq.w    #4,A7
00000EE2  1400      1339          move.b    D0,D2
                    1340   ; if(c == (char)(0x1b))
00000EE4  0C02 001B 1341          cmp.b     #27,D2
00000EE8  6604      1342          bne.s     MemoryChange_4
                    1343   ; return ;                                // abort on escape
00000EEA  6000 0090 1344          bra       MemoryChange_6
                    1345   MemoryChange_4:
                    1346   ; else if((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f')) {  // are we trying to change data at this location by entering a hex char
00000EEE  0C02 0030 1347          cmp.b     #48,D2
00000EF2  6506      1348          blo.s     MemoryChange_10
00000EF4  0C02 0039 1349          cmp.b     #57,D2
00000EF8  6310      1350          bls.s     MemoryChange_9
                    1351   MemoryChange_10:
00000EFA  0C02 0061 1352          cmp.b     #97,D2
00000EFE  6500 006E 1353          blo       MemoryChange_7
00000F02  0C02 0066 1354          cmp.b     #102,D2
00000F06  6200 0066 1355          bhi       MemoryChange_7
                    1356   MemoryChange_9:
                    1357   ; Data = (xtod(c) << 4) | (xtod(_getch()));
00000F0A  C4BC 0000 1358          and.l     #255,D2
00000F0E  00FF      
00000F10  2F02      1359          move.l    D2,-(A7)
00000F12  4EB8 0A90 1360          jsr       _xtod
00000F16  584F      1361          addq.w    #4,A7
00000F18  C0BC 0000 1362          and.l     #255,D0
00000F1C  00FF      
00000F1E  E980      1363          asl.l     #4,D0
00000F20  2F00      1364          move.l    D0,-(A7)
00000F22  2F01      1365          move.l    D1,-(A7)
00000F24  4EB8 0A26 1366          jsr       __getch
00000F28  221F      1367          move.l    (A7)+,D1
00000F2A  2F00      1368          move.l    D0,-(A7)
00000F2C  4EB8 0A90 1369          jsr       _xtod
00000F30  584F      1370          addq.w    #4,A7
00000F32  2200      1371          move.l    D0,D1
00000F34  201F      1372          move.l    (A7)+,D0
00000F36  C2BC 0000 1373          and.l     #255,D1
00000F3A  00FF      
00000F3C  8081      1374          or.l      D1,D0
00000F3E  2800      1375          move.l    D0,D4
                    1376   ; *RamPtr = (char)(Data) ;
00000F40  2043      1377          move.l    D3,A0
00000F42  1084      1378          move.b    D4,(A0)
                    1379   ; if(*RamPtr != Data) {
00000F44  2043      1380          move.l    D3,A0
00000F46  1010      1381          move.b    (A0),D0
00000F48  C0BC 0000 1382          and.l     #255,D0
00000F4C  00FF      
00000F4E  B084      1383          cmp.l     D4,D0
00000F50  671A      1384          beq.s     MemoryChange_11
                    1385   ; printf("\r\nWarning Change Failed: Wrote [%02x], Read [%02x]", Data, *RamPtr) ;
00000F52  2043      1386          move.l    D3,A0
00000F54  1210      1387          move.b    (A0),D1
00000F56  C2BC 0000 1388          and.l     #255,D1
00000F5A  00FF      
00000F5C  2F01      1389          move.l    D1,-(A7)
00000F5E  2F04      1390          move.l    D4,-(A7)
00000F60  4879 0000 1391          pea       @m68kde~1_18.L
00000F64  4648      
00000F66  4E92      1392          jsr       (A2)
00000F68  DEFC 000C 1393          add.w     #12,A7
                    1394   MemoryChange_11:
00000F6C  6008      1395          bra.s     MemoryChange_13
                    1396   MemoryChange_7:
                    1397   ; }
                    1398   ; }
                    1399   ; else if(c == (char)('-'))
00000F6E  0C02 002D 1400          cmp.b     #45,D2
00000F72  6602      1401          bne.s     MemoryChange_13
                    1402   ; RamPtr -= 2 ; ;
00000F74  5583      1403          subq.l    #2,D3
                    1404   MemoryChange_13:
                    1405   ; RamPtr ++ ;
00000F76  5283      1406          addq.l    #1,D3
00000F78  6000 FF3A 1407          bra       MemoryChange_1
                    1408   MemoryChange_6:
00000F7C  4CDF 041C 1409          movem.l   (A7)+,D2/D3/D4/A2
00000F80  4E75      1410          rts
                    1411   ; }
                    1412   ; }
                    1413   ; //////////////////////////////////////////////////////////////////////////////////////////////////
                    1414   ; // IMPORTANT
                    1415   ; // TG68 does not support the Native Trace mode of the original 68000 so tracing
                    1416   ; // has to be done with an interrupt (IRQ Level 6)
                    1417   ; //
                    1418   ; // To allow the 68000 to execute one more instruction after each pseudo trace (IRQ6)
                    1419   ; // the IRQ is removed in hardware once the TG68 reads the IRQ autovector (i.e. acknowledges the IRQ)
                    1420   ; //
                    1421   ; // on return from the IRQ service handler, the first access to the user memory program space
                    1422   ; // generates a fresh IRQ (in hardware) to generate a new trace, this allows the tg68 to
                    1423   ; // execute one more new instruction (without it the TG68 would trace on the same instruction
                    1424   ; // each time and not after the next one). It also means it doesn't simgle step outside the user
                    1425   ; // program area
                    1426   ; //
                    1427   ; // The bottom line is the Trace handler, which includes the Dump registers below
                    1428   ; // cannot access the user memory to display for example the Instruction Opcode or to disassemble etc
                    1429   ; // as this would lead to a new IRQ being reset and the TG68 would trace on same instruction
                    1430   ; // NOT SURE THIS IS TRUE NOW THAT TRACE HANDLER HAS BEEN MODIVIED TO NOT AUTOMATICALLY GENERATE A TRACE EXCEPTION
                    1431   ; // INSTEAD IT IS DONE IN THE 'N' COMMAND FOR NEXT
                    1432   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    1433   ; void DumpRegisters()
                    1434   ; {
                    1435   _DumpRegisters:
00000F82  48E7 3F3C 1436          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00000F86  45F9 0000 1437          lea       _putch.L,A2
00000F8A  3AB6      
00000F8C  47F9 0000 1438          lea       _printf.L,A3
00000F90  3B88      
00000F92  49F9 0803 1439          lea       _SR.L,A4
00000F96  012C      
00000F98  4BF9 0803 1440          lea       _WatchPointString.L,A5
00000F9C  01C2      
                    1441   ; short i, x, j, k ;
                    1442   ; unsigned char c, *BytePointer;
                    1443   ; // buld up strings for displaying watchpoints
                    1444   ; for(x = 0; x < (short)(8); x++)
00000F9E  4242      1445          clr.w     D2
                    1446   DumpRegisters_1:
00000FA0  0C42 0008 1447          cmp.w     #8,D2
00000FA4  6C00 01C6 1448          bge       DumpRegisters_3
                    1449   ; {
                    1450   ; if(WatchPointSetOrCleared[x] == 1)
00000FA8  48C2      1451          ext.l     D2
00000FAA  2002      1452          move.l    D2,D0
00000FAC  E588      1453          lsl.l     #2,D0
00000FAE  41F9 0803 1454          lea       _WatchPointSetOrCleared.L,A0
00000FB2  01A2      
00000FB4  2030 0800 1455          move.l    0(A0,D0.L),D0
00000FB8  0C80 0000 1456          cmp.l     #1,D0
00000FBC  0001      
00000FBE  6600 0186 1457          bne       DumpRegisters_4
                    1458   ; {
                    1459   ; sprintf(WatchPointString[x], "$%08X  ", WatchPointAddress[x]) ;
00000FC2  48C2      1460          ext.l     D2
00000FC4  2202      1461          move.l    D2,D1
00000FC6  E589      1462          lsl.l     #2,D1
00000FC8  41F9 0803 1463          lea       _WatchPointAddress.L,A0
00000FCC  0182      
00000FCE  2F30 1800 1464          move.l    0(A0,D1.L),-(A7)
00000FD2  4879 0000 1465          pea       @m68kde~1_19.L
00000FD6  467C      
00000FD8  220D      1466          move.l    A5,D1
00000FDA  48C2      1467          ext.l     D2
00000FDC  2F00      1468          move.l    D0,-(A7)
00000FDE  2002      1469          move.l    D2,D0
00000FE0  C1FC 0064 1470          muls      #100,D0
00000FE4  D280      1471          add.l     D0,D1
00000FE6  201F      1472          move.l    (A7)+,D0
00000FE8  2F01      1473          move.l    D1,-(A7)
00000FEA  4EB9 0000 1474          jsr       _sprintf
00000FEE  3B12      
00000FF0  DEFC 000C 1475          add.w     #12,A7
                    1476   ; BytePointer = (char *)(WatchPointAddress[x]) ;
00000FF4  48C2      1477          ext.l     D2
00000FF6  2002      1478          move.l    D2,D0
00000FF8  E588      1479          lsl.l     #2,D0
00000FFA  41F9 0803 1480          lea       _WatchPointAddress.L,A0
00000FFE  0182      
00001000  2A30 0800 1481          move.l    0(A0,D0.L),D5
                    1482   ; for(j = 0; j < (short)(16); j+=2)
00001004  4243      1483          clr.w     D3
                    1484   DumpRegisters_6:
00001006  0C43 0010 1485          cmp.w     #16,D3
0000100A  6C00 0082 1486          bge       DumpRegisters_8
                    1487   ; {
                    1488   ; for(k = 0; k < (short)(2); k++)
0000100E  4246      1489          clr.w     D6
                    1490   DumpRegisters_9:
00001010  0C46 0002 1491          cmp.w     #2,D6
00001014  6C00 0052 1492          bge       DumpRegisters_11
                    1493   ; {
                    1494   ; sprintf(TempString, "%02X", BytePointer[j+k]) ;
00001018  2045      1495          move.l    D5,A0
0000101A  48C3      1496          ext.l     D3
0000101C  2203      1497          move.l    D3,D1
0000101E  48C6      1498          ext.l     D6
00001020  D286      1499          add.l     D6,D1
00001022  1230 1800 1500          move.b    0(A0,D1.L),D1
00001026  C2BC 0000 1501          and.l     #255,D1
0000102A  00FF      
0000102C  2F01      1502          move.l    D1,-(A7)
0000102E  4879 0000 1503          pea       @m68kde~1_4.L
00001032  44CE      
00001034  4879 0803 1504          pea       _TempString.L
00001038  04E2      
0000103A  4EB9 0000 1505          jsr       _sprintf
0000103E  3B12      
00001040  DEFC 000C 1506          add.w     #12,A7
                    1507   ; strcat(WatchPointString[x], TempString) ;
00001044  4879 0803 1508          pea       _TempString.L
00001048  04E2      
0000104A  220D      1509          move.l    A5,D1
0000104C  48C2      1510          ext.l     D2
0000104E  2F00      1511          move.l    D0,-(A7)
00001050  2002      1512          move.l    D2,D0
00001052  C1FC 0064 1513          muls      #100,D0
00001056  D280      1514          add.l     D0,D1
00001058  201F      1515          move.l    (A7)+,D0
0000105A  2F01      1516          move.l    D1,-(A7)
0000105C  4EB9 0000 1517          jsr       _strcat
00001060  3B46      
00001062  504F      1518          addq.w    #8,A7
00001064  5246      1519          addq.w    #1,D6
00001066  60A8      1520          bra       DumpRegisters_9
                    1521   DumpRegisters_11:
                    1522   ; }
                    1523   ; strcat(WatchPointString[x]," ") ;
00001068  4879 0000 1524          pea       @m68kde~1_20.L
0000106C  4684      
0000106E  220D      1525          move.l    A5,D1
00001070  48C2      1526          ext.l     D2
00001072  2F00      1527          move.l    D0,-(A7)
00001074  2002      1528          move.l    D2,D0
00001076  C1FC 0064 1529          muls      #100,D0
0000107A  D280      1530          add.l     D0,D1
0000107C  201F      1531          move.l    (A7)+,D0
0000107E  2F01      1532          move.l    D1,-(A7)
00001080  4EB9 0000 1533          jsr       _strcat
00001084  3B46      
00001086  504F      1534          addq.w    #8,A7
00001088  5443      1535          addq.w    #2,D3
0000108A  6000 FF7A 1536          bra       DumpRegisters_6
                    1537   DumpRegisters_8:
                    1538   ; }
                    1539   ; strcat(WatchPointString[x], "  ") ;
0000108E  4879 0000 1540          pea       @m68kde~1_5.L
00001092  44D4      
00001094  220D      1541          move.l    A5,D1
00001096  48C2      1542          ext.l     D2
00001098  2F00      1543          move.l    D0,-(A7)
0000109A  2002      1544          move.l    D2,D0
0000109C  C1FC 0064 1545          muls      #100,D0
000010A0  D280      1546          add.l     D0,D1
000010A2  201F      1547          move.l    (A7)+,D0
000010A4  2F01      1548          move.l    D1,-(A7)
000010A6  4EB9 0000 1549          jsr       _strcat
000010AA  3B46      
000010AC  504F      1550          addq.w    #8,A7
                    1551   ; BytePointer = (char *)(WatchPointAddress[x]) ;
000010AE  48C2      1552          ext.l     D2
000010B0  2002      1553          move.l    D2,D0
000010B2  E588      1554          lsl.l     #2,D0
000010B4  41F9 0803 1555          lea       _WatchPointAddress.L,A0
000010B8  0182      
000010BA  2A30 0800 1556          move.l    0(A0,D0.L),D5
                    1557   ; for(j = 0; j < (short)(16); j++)
000010BE  4243      1558          clr.w     D3
                    1559   DumpRegisters_12:
000010C0  0C43 0010 1560          cmp.w     #16,D3
000010C4  6C00 007E 1561          bge       DumpRegisters_14
                    1562   ; {
                    1563   ; c = ((char)(BytePointer[j]) & 0x7f) ;
000010C8  2045      1564          move.l    D5,A0
000010CA  48C3      1565          ext.l     D3
000010CC  1030 3800 1566          move.b    0(A0,D3.L),D0
000010D0  C03C 007F 1567          and.b     #127,D0
000010D4  1E00      1568          move.b    D0,D7
                    1569   ; if((c > (char)(0x7f)) || (c < (char)(' ')))
000010D6  0C07 007F 1570          cmp.b     #127,D7
000010DA  6206      1571          bhi.s     DumpRegisters_17
000010DC  0C07 0020 1572          cmp.b     #32,D7
000010E0  6416      1573          bhs.s     DumpRegisters_15
                    1574   DumpRegisters_17:
                    1575   ; sprintf(TempString, ".") ;
000010E2  4879 0000 1576          pea       @m68kde~1_21.L
000010E6  4686      
000010E8  4879 0803 1577          pea       _TempString.L
000010EC  04E2      
000010EE  4EB9 0000 1578          jsr       _sprintf
000010F2  3B12      
000010F4  504F      1579          addq.w    #8,A7
000010F6  6026      1580          bra.s     DumpRegisters_16
                    1581   DumpRegisters_15:
                    1582   ; else
                    1583   ; sprintf(TempString, "%c", BytePointer[j]) ;
000010F8  2045      1584          move.l    D5,A0
000010FA  48C3      1585          ext.l     D3
000010FC  1230 3800 1586          move.b    0(A0,D3.L),D1
00001100  C2BC 0000 1587          and.l     #255,D1
00001104  00FF      
00001106  2F01      1588          move.l    D1,-(A7)
00001108  4879 0000 1589          pea       @m68kde~1_22.L
0000110C  4688      
0000110E  4879 0803 1590          pea       _TempString.L
00001112  04E2      
00001114  4EB9 0000 1591          jsr       _sprintf
00001118  3B12      
0000111A  DEFC 000C 1592          add.w     #12,A7
                    1593   DumpRegisters_16:
                    1594   ; strcat(WatchPointString[x], TempString) ;
0000111E  4879 0803 1595          pea       _TempString.L
00001122  04E2      
00001124  220D      1596          move.l    A5,D1
00001126  48C2      1597          ext.l     D2
00001128  2F00      1598          move.l    D0,-(A7)
0000112A  2002      1599          move.l    D2,D0
0000112C  C1FC 0064 1600          muls      #100,D0
00001130  D280      1601          add.l     D0,D1
00001132  201F      1602          move.l    (A7)+,D0
00001134  2F01      1603          move.l    D1,-(A7)
00001136  4EB9 0000 1604          jsr       _strcat
0000113A  3B46      
0000113C  504F      1605          addq.w    #8,A7
0000113E  5243      1606          addq.w    #1,D3
00001140  6000 FF7E 1607          bra       DumpRegisters_12
                    1608   DumpRegisters_14:
00001144  6020      1609          bra.s     DumpRegisters_5
                    1610   DumpRegisters_4:
                    1611   ; }
                    1612   ; }
                    1613   ; else
                    1614   ; strcpy(WatchPointString[x], "") ;
00001146  4879 0000 1615          pea       @m68kde~1_23.L
0000114A  468C      
0000114C  220D      1616          move.l    A5,D1
0000114E  48C2      1617          ext.l     D2
00001150  2F00      1618          move.l    D0,-(A7)
00001152  2002      1619          move.l    D2,D0
00001154  C1FC 0064 1620          muls      #100,D0
00001158  D280      1621          add.l     D0,D1
0000115A  201F      1622          move.l    (A7)+,D0
0000115C  2F01      1623          move.l    D1,-(A7)
0000115E  4EB9 0000 1624          jsr       _strcpy
00001162  3928      
00001164  504F      1625          addq.w    #8,A7
                    1626   DumpRegisters_5:
00001166  5242      1627          addq.w    #1,D2
00001168  6000 FE36 1628          bra       DumpRegisters_1
                    1629   DumpRegisters_3:
                    1630   ; }
                    1631   ; printf("\r\n\r\n D0 = $%08X  A0 = $%08X",d0,a0) ;
0000116C  2F39 0803 1632          move.l    _a0.L,-(A7)
00001170  0104      
00001172  2F39 0803 1633          move.l    _d0.L,-(A7)
00001176  00E4      
00001178  4879 0000 1634          pea       @m68kde~1_24.L
0000117C  468E      
0000117E  4E93      1635          jsr       (A3)
00001180  DEFC 000C 1636          add.w     #12,A7
                    1637   ; printf("\r\n D1 = $%08X  A1 = $%08X",d1,a1) ;
00001184  2F39 0803 1638          move.l    _a1.L,-(A7)
00001188  0108      
0000118A  2F39 0803 1639          move.l    _d1.L,-(A7)
0000118E  00E8      
00001190  4879 0000 1640          pea       @m68kde~1_25.L
00001194  46AA      
00001196  4E93      1641          jsr       (A3)
00001198  DEFC 000C 1642          add.w     #12,A7
                    1643   ; printf("\r\n D2 = $%08X  A2 = $%08X",d2,a2) ;
0000119C  2F39 0803 1644          move.l    _a2.L,-(A7)
000011A0  010C      
000011A2  2F39 0803 1645          move.l    _d2.L,-(A7)
000011A6  00EC      
000011A8  4879 0000 1646          pea       @m68kde~1_26.L
000011AC  46C4      
000011AE  4E93      1647          jsr       (A3)
000011B0  DEFC 000C 1648          add.w     #12,A7
                    1649   ; printf("\r\n D3 = $%08X  A3 = $%08X",d3,a3) ;
000011B4  2F39 0803 1650          move.l    _a3.L,-(A7)
000011B8  0110      
000011BA  2F39 0803 1651          move.l    _d3.L,-(A7)
000011BE  00F0      
000011C0  4879 0000 1652          pea       @m68kde~1_27.L
000011C4  46DE      
000011C6  4E93      1653          jsr       (A3)
000011C8  DEFC 000C 1654          add.w     #12,A7
                    1655   ; printf("\r\n D4 = $%08X  A4 = $%08X",d4,a4) ;
000011CC  2F39 0803 1656          move.l    _a4.L,-(A7)
000011D0  0114      
000011D2  2F39 0803 1657          move.l    _d4.L,-(A7)
000011D6  00F4      
000011D8  4879 0000 1658          pea       @m68kde~1_28.L
000011DC  46F8      
000011DE  4E93      1659          jsr       (A3)
000011E0  DEFC 000C 1660          add.w     #12,A7
                    1661   ; printf("\r\n D5 = $%08X  A5 = $%08X",d5,a5) ;
000011E4  2F39 0803 1662          move.l    _a5.L,-(A7)
000011E8  0118      
000011EA  2F39 0803 1663          move.l    _d5.L,-(A7)
000011EE  00F8      
000011F0  4879 0000 1664          pea       @m68kde~1_29.L
000011F4  4712      
000011F6  4E93      1665          jsr       (A3)
000011F8  DEFC 000C 1666          add.w     #12,A7
                    1667   ; printf("\r\n D6 = $%08X  A6 = $%08X",d6,a6) ;
000011FC  2F39 0803 1668          move.l    _a6.L,-(A7)
00001200  011C      
00001202  2F39 0803 1669          move.l    _d6.L,-(A7)
00001206  00FC      
00001208  4879 0000 1670          pea       @m68kde~1_30.L
0000120C  472C      
0000120E  4E93      1671          jsr       (A3)
00001210  DEFC 000C 1672          add.w     #12,A7
                    1673   ; printf("\r\n D7 = $%08X  A7 = $%08X",d7,((SR & (unsigned short int)(0x2000)) == ((unsigned short int)(0x2000))) ? SSP : USP) ;
00001214  3214      1674          move.w    (A4),D1
00001216  C27C 2000 1675          and.w     #8192,D1
0000121A  0C41 2000 1676          cmp.w     #8192,D1
0000121E  6608      1677          bne.s     DumpRegisters_18
00001220  2239 0803 1678          move.l    _SSP.L,D1
00001224  0124      
00001226  6006      1679          bra.s     DumpRegisters_19
                    1680   DumpRegisters_18:
00001228  2239 0803 1681          move.l    _USP.L,D1
0000122C  0128      
                    1682   DumpRegisters_19:
0000122E  2F01      1683          move.l    D1,-(A7)
00001230  2F39 0803 1684          move.l    _d7.L,-(A7)
00001234  0100      
00001236  4879 0000 1685          pea       @m68kde~1_31.L
0000123A  4746      
0000123C  4E93      1686          jsr       (A3)
0000123E  DEFC 000C 1687          add.w     #12,A7
                    1688   ; printf("\r\n\r\nUSP = $%08X  (A7) User SP", USP ) ;
00001242  2F39 0803 1689          move.l    _USP.L,-(A7)
00001246  0128      
00001248  4879 0000 1690          pea       @m68kde~1_32.L
0000124C  4760      
0000124E  4E93      1691          jsr       (A3)
00001250  504F      1692          addq.w    #8,A7
                    1693   ; printf("\r\nSSP = $%08X  (A7) Supervisor SP", SSP) ;
00001252  2F39 0803 1694          move.l    _SSP.L,-(A7)
00001256  0124      
00001258  4879 0000 1695          pea       @m68kde~1_33.L
0000125C  477E      
0000125E  4E93      1696          jsr       (A3)
00001260  504F      1697          addq.w    #8,A7
                    1698   ; printf("\r\n SR = $%04X   ",SR) ;
00001262  3214      1699          move.w    (A4),D1
00001264  C2BC 0000 1700          and.l     #65535,D1
00001268  FFFF      
0000126A  2F01      1701          move.l    D1,-(A7)
0000126C  4879 0000 1702          pea       @m68kde~1_34.L
00001270  47A0      
00001272  4E93      1703          jsr       (A3)
00001274  504F      1704          addq.w    #8,A7
                    1705   ; // display the status word in characters etc.
                    1706   ; printf("   [") ;
00001276  4879 0000 1707          pea       @m68kde~1_35.L
0000127A  47B2      
0000127C  4E93      1708          jsr       (A3)
0000127E  584F      1709          addq.w    #4,A7
                    1710   ; if((SR & (unsigned short int)(0x8000)) == (unsigned short int)(0x8000)) putchar('T') ; else putchar('-') ;      // Trace bit(bit 15)
00001280  3014      1711          move.w    (A4),D0
00001282  C07C 8000 1712          and.w     #32768,D0
00001286  0C40 8000 1713          cmp.w     #32768,D0
0000128A  660A      1714          bne.s     DumpRegisters_20
0000128C  4878 0054 1715          pea       84
00001290  4E92      1716          jsr       (A2)
00001292  584F      1717          addq.w    #4,A7
00001294  6008      1718          bra.s     DumpRegisters_21
                    1719   DumpRegisters_20:
00001296  4878 002D 1720          pea       45
0000129A  4E92      1721          jsr       (A2)
0000129C  584F      1722          addq.w    #4,A7
                    1723   DumpRegisters_21:
                    1724   ; if((SR & (unsigned short int)(0x2000)) == (unsigned short int)(0x2000)) putchar('S') ; else putchar('U') ;      // supervisor bit  (bit 13)
0000129E  3014      1725          move.w    (A4),D0
000012A0  C07C 2000 1726          and.w     #8192,D0
000012A4  0C40 2000 1727          cmp.w     #8192,D0
000012A8  660A      1728          bne.s     DumpRegisters_22
000012AA  4878 0053 1729          pea       83
000012AE  4E92      1730          jsr       (A2)
000012B0  584F      1731          addq.w    #4,A7
000012B2  6008      1732          bra.s     DumpRegisters_23
                    1733   DumpRegisters_22:
000012B4  4878 0055 1734          pea       85
000012B8  4E92      1735          jsr       (A2)
000012BA  584F      1736          addq.w    #4,A7
                    1737   DumpRegisters_23:
                    1738   ; if((SR & (unsigned short int)(0x0400)) == (unsigned short int)(0x0400)) putchar('1') ; else putchar('0') ;      // IRQ2 Bit (bit 10)
000012BC  3014      1739          move.w    (A4),D0
000012BE  C07C 0400 1740          and.w     #1024,D0
000012C2  0C40 0400 1741          cmp.w     #1024,D0
000012C6  660A      1742          bne.s     DumpRegisters_24
000012C8  4878 0031 1743          pea       49
000012CC  4E92      1744          jsr       (A2)
000012CE  584F      1745          addq.w    #4,A7
000012D0  6008      1746          bra.s     DumpRegisters_25
                    1747   DumpRegisters_24:
000012D2  4878 0030 1748          pea       48
000012D6  4E92      1749          jsr       (A2)
000012D8  584F      1750          addq.w    #4,A7
                    1751   DumpRegisters_25:
                    1752   ; if((SR & (unsigned short int)(0x0200)) == (unsigned short int)(0x0200)) putchar('1') ; else putchar('0') ;      // IRQ1 Bit (bit 9)
000012DA  3014      1753          move.w    (A4),D0
000012DC  C07C 0200 1754          and.w     #512,D0
000012E0  0C40 0200 1755          cmp.w     #512,D0
000012E4  660A      1756          bne.s     DumpRegisters_26
000012E6  4878 0031 1757          pea       49
000012EA  4E92      1758          jsr       (A2)
000012EC  584F      1759          addq.w    #4,A7
000012EE  6008      1760          bra.s     DumpRegisters_27
                    1761   DumpRegisters_26:
000012F0  4878 0030 1762          pea       48
000012F4  4E92      1763          jsr       (A2)
000012F6  584F      1764          addq.w    #4,A7
                    1765   DumpRegisters_27:
                    1766   ; if((SR & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100)) putchar('1') ; else putchar('0') ;      // IRQ0 Bit (bit 8)
000012F8  3014      1767          move.w    (A4),D0
000012FA  C07C 0100 1768          and.w     #256,D0
000012FE  0C40 0100 1769          cmp.w     #256,D0
00001302  660A      1770          bne.s     DumpRegisters_28
00001304  4878 0031 1771          pea       49
00001308  4E92      1772          jsr       (A2)
0000130A  584F      1773          addq.w    #4,A7
0000130C  6008      1774          bra.s     DumpRegisters_29
                    1775   DumpRegisters_28:
0000130E  4878 0030 1776          pea       48
00001312  4E92      1777          jsr       (A2)
00001314  584F      1778          addq.w    #4,A7
                    1779   DumpRegisters_29:
                    1780   ; if((SR & (unsigned short int)(0x0010)) == (unsigned short int)(0x0010)) putchar('X') ; else putchar('-') ;      // X Bit (bit 4)
00001316  3014      1781          move.w    (A4),D0
00001318  C07C 0010 1782          and.w     #16,D0
0000131C  0C40 0010 1783          cmp.w     #16,D0
00001320  660A      1784          bne.s     DumpRegisters_30
00001322  4878 0058 1785          pea       88
00001326  4E92      1786          jsr       (A2)
00001328  584F      1787          addq.w    #4,A7
0000132A  6008      1788          bra.s     DumpRegisters_31
                    1789   DumpRegisters_30:
0000132C  4878 002D 1790          pea       45
00001330  4E92      1791          jsr       (A2)
00001332  584F      1792          addq.w    #4,A7
                    1793   DumpRegisters_31:
                    1794   ; if((SR & (unsigned short int)(0x0008)) == (unsigned short int)(0x0008)) putchar('N') ; else putchar('-') ;      // N Bit (bit 3)
00001334  3014      1795          move.w    (A4),D0
00001336  C07C 0008 1796          and.w     #8,D0
0000133A  0C40 0008 1797          cmp.w     #8,D0
0000133E  660A      1798          bne.s     DumpRegisters_32
00001340  4878 004E 1799          pea       78
00001344  4E92      1800          jsr       (A2)
00001346  584F      1801          addq.w    #4,A7
00001348  6008      1802          bra.s     DumpRegisters_33
                    1803   DumpRegisters_32:
0000134A  4878 002D 1804          pea       45
0000134E  4E92      1805          jsr       (A2)
00001350  584F      1806          addq.w    #4,A7
                    1807   DumpRegisters_33:
                    1808   ; if((SR & (unsigned short int)(0x0004)) == (unsigned short int)(0x0004)) putchar('Z') ; else putchar('-') ;      // Z Bit (bit 2)
00001352  3014      1809          move.w    (A4),D0
00001354  C07C 0004 1810          and.w     #4,D0
00001358  0C40 0004 1811          cmp.w     #4,D0
0000135C  660A      1812          bne.s     DumpRegisters_34
0000135E  4878 005A 1813          pea       90
00001362  4E92      1814          jsr       (A2)
00001364  584F      1815          addq.w    #4,A7
00001366  6008      1816          bra.s     DumpRegisters_35
                    1817   DumpRegisters_34:
00001368  4878 002D 1818          pea       45
0000136C  4E92      1819          jsr       (A2)
0000136E  584F      1820          addq.w    #4,A7
                    1821   DumpRegisters_35:
                    1822   ; if((SR & (unsigned short int)(0x0002)) == (unsigned short int)(0x0002)) putchar('V') ; else putchar('-') ;      // V Bit (bit 1)
00001370  3014      1823          move.w    (A4),D0
00001372  C07C 0002 1824          and.w     #2,D0
00001376  0C40 0002 1825          cmp.w     #2,D0
0000137A  660A      1826          bne.s     DumpRegisters_36
0000137C  4878 0056 1827          pea       86
00001380  4E92      1828          jsr       (A2)
00001382  584F      1829          addq.w    #4,A7
00001384  6008      1830          bra.s     DumpRegisters_37
                    1831   DumpRegisters_36:
00001386  4878 002D 1832          pea       45
0000138A  4E92      1833          jsr       (A2)
0000138C  584F      1834          addq.w    #4,A7
                    1835   DumpRegisters_37:
                    1836   ; if((SR & (unsigned short int)(0x0001)) == (unsigned short int)(0x0001)) putchar('C') ; else putchar('-') ;      // C Bit (bit 0)
0000138E  3014      1837          move.w    (A4),D0
00001390  C07C 0001 1838          and.w     #1,D0
00001394  0C40 0001 1839          cmp.w     #1,D0
00001398  660A      1840          bne.s     DumpRegisters_38
0000139A  4878 0043 1841          pea       67
0000139E  4E92      1842          jsr       (A2)
000013A0  584F      1843          addq.w    #4,A7
000013A2  6008      1844          bra.s     DumpRegisters_39
                    1845   DumpRegisters_38:
000013A4  4878 002D 1846          pea       45
000013A8  4E92      1847          jsr       (A2)
000013AA  584F      1848          addq.w    #4,A7
                    1849   DumpRegisters_39:
                    1850   ; putchar(']') ;
000013AC  4878 005D 1851          pea       93
000013B0  4E92      1852          jsr       (A2)
000013B2  584F      1853          addq.w    #4,A7
                    1854   ; printf("\r\n PC = $%08X  ", PC) ;
000013B4  2F39 0803 1855          move.l    _PC.L,-(A7)
000013B8  0120      
000013BA  4879 0000 1856          pea       @m68kde~1_36.L
000013BE  47B8      
000013C0  4E93      1857          jsr       (A3)
000013C2  504F      1858          addq.w    #8,A7
                    1859   ; if(*(unsigned short int *)(PC) == 0x4e4e)
000013C4  2039 0803 1860          move.l    _PC.L,D0
000013C8  0120      
000013CA  2040      1861          move.l    D0,A0
000013CC  3010      1862          move.w    (A0),D0
000013CE  0C40 4E4E 1863          cmp.w     #20046,D0
000013D2  660A      1864          bne.s     DumpRegisters_40
                    1865   ; printf("[@ BREAKPOINT]") ;
000013D4  4879 0000 1866          pea       @m68kde~1_37.L
000013D8  47C8      
000013DA  4E93      1867          jsr       (A3)
000013DC  584F      1868          addq.w    #4,A7
                    1869   DumpRegisters_40:
                    1870   ; printf("\r\n") ;
000013DE  4879 0000 1871          pea       @m68kde~1_6.L
000013E2  44D8      
000013E4  4E93      1872          jsr       (A3)
000013E6  584F      1873          addq.w    #4,A7
                    1874   ; for(i=0; i < 8; i++)    {
000013E8  4244      1875          clr.w     D4
                    1876   DumpRegisters_42:
000013EA  0C44 0008 1877          cmp.w     #8,D4
000013EE  6C00 0040 1878          bge       DumpRegisters_44
                    1879   ; if(WatchPointSetOrCleared[i] == 1)
000013F2  48C4      1880          ext.l     D4
000013F4  2004      1881          move.l    D4,D0
000013F6  E588      1882          lsl.l     #2,D0
000013F8  41F9 0803 1883          lea       _WatchPointSetOrCleared.L,A0
000013FC  01A2      
000013FE  2030 0800 1884          move.l    0(A0,D0.L),D0
00001402  0C80 0000 1885          cmp.l     #1,D0
00001406  0001      
00001408  6622      1886          bne.s     DumpRegisters_45
                    1887   ; printf("\r\nWP%d = %s", i, WatchPointString[i]) ;
0000140A  220D      1888          move.l    A5,D1
0000140C  48C4      1889          ext.l     D4
0000140E  2F00      1890          move.l    D0,-(A7)
00001410  2004      1891          move.l    D4,D0
00001412  C1FC 0064 1892          muls      #100,D0
00001416  D280      1893          add.l     D0,D1
00001418  201F      1894          move.l    (A7)+,D0
0000141A  2F01      1895          move.l    D1,-(A7)
0000141C  48C4      1896          ext.l     D4
0000141E  2F04      1897          move.l    D4,-(A7)
00001420  4879 0000 1898          pea       @m68kde~1_38.L
00001424  47D8      
00001426  4E93      1899          jsr       (A3)
00001428  DEFC 000C 1900          add.w     #12,A7
                    1901   DumpRegisters_45:
0000142C  5244      1902          addq.w    #1,D4
0000142E  60BA      1903          bra       DumpRegisters_42
                    1904   DumpRegisters_44:
00001430  4CDF 3CFC 1905          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00001434  4E75      1906          rts
                    1907   ; }
                    1908   ; }
                    1909   ; // Trace Exception Handler
                    1910   ; void DumpRegistersandPause(void)
                    1911   ; {
                    1912   _DumpRegistersandPause:
00001436  2F0A      1913          move.l    A2,-(A7)
00001438  45F9 0000 1914          lea       _printf.L,A2
0000143C  3B88      
                    1915   ; printf("\r\n\r\n\r\n\r\n\r\n\r\nSingle Step  :[ON]") ;
0000143E  4879 0000 1916          pea       @m68kde~1_39.L
00001442  47E4      
00001444  4E92      1917          jsr       (A2)
00001446  584F      1918          addq.w    #4,A7
                    1919   ; printf("\r\nBreak Points :[Disabled]") ;
00001448  4879 0000 1920          pea       @m68kde~1_40.L
0000144C  4804      
0000144E  4E92      1921          jsr       (A2)
00001450  584F      1922          addq.w    #4,A7
                    1923   ; DumpRegisters() ;
00001452  4EB8 0F82 1924          jsr       _DumpRegisters
                    1925   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
00001456  4879 0000 1926          pea       @m68kde~1_41.L
0000145A  4820      
0000145C  4E92      1927          jsr       (A2)
0000145E  584F      1928          addq.w    #4,A7
                    1929   ; printf("\r\nPress <ESC> to Resume Program") ;
00001460  4879 0000 1930          pea       @m68kde~1_42.L
00001464  484C      
00001466  4E92      1931          jsr       (A2)
00001468  584F      1932          addq.w    #4,A7
                    1933   ; menu() ;
0000146A  4EB9 0000 1934          jsr       _menu
0000146E  1FD6      
00001470  245F      1935          move.l    (A7)+,A2
00001472  4E75      1936          rts
                    1937   ; }
                    1938   ; void ChangeRegisters(void)
                    1939   ; {
                    1940   _ChangeRegisters:
00001474  4E56 FFFC 1941          link      A6,#-4
00001478  48E7 303C 1942          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
0000147C  45F9 0000 1943          lea       _printf.L,A2
00001480  3B88      
00001482  47EE FFFC 1944          lea       -4(A6),A3
00001486  49F8 0B62 1945          lea       _Get8HexDigits.L,A4
0000148A  4BF8 0A26 1946          lea       __getch.L,A5
                    1947   ; // get register name d0-d7, a0-a7, up, sp, sr, pc
                    1948   ; int reg_val ;
                    1949   ; char c, reg[3] ;
                    1950   ; reg[0] = tolower(_getch()) ;
0000148E  2F00      1951          move.l    D0,-(A7)
00001490  4E95      1952          jsr       (A5)
00001492  2200      1953          move.l    D0,D1
00001494  201F      1954          move.l    (A7)+,D0
00001496  2F01      1955          move.l    D1,-(A7)
00001498  4EB9 0000 1956          jsr       _tolower
0000149C  3AE6      
0000149E  584F      1957          addq.w    #4,A7
000014A0  1680      1958          move.b    D0,(A3)
                    1959   ; reg[1] = c = tolower(_getch()) ;
000014A2  2F00      1960          move.l    D0,-(A7)
000014A4  4E95      1961          jsr       (A5)
000014A6  2200      1962          move.l    D0,D1
000014A8  201F      1963          move.l    (A7)+,D0
000014AA  2F01      1964          move.l    D1,-(A7)
000014AC  4EB9 0000 1965          jsr       _tolower
000014B0  3AE6      
000014B2  584F      1966          addq.w    #4,A7
000014B4  1400      1967          move.b    D0,D2
000014B6  1740 0001 1968          move.b    D0,1(A3)
                    1969   ; if(reg[0] == (char)('d'))  {    // change data register
000014BA  1013      1970          move.b    (A3),D0
000014BC  0C00 0064 1971          cmp.b     #100,D0
000014C0  6600 00AE 1972          bne       ChangeRegisters_1
                    1973   ; if((reg[1] > (char)('7')) || (reg[1] < (char)('0'))) {
000014C4  102B 0001 1974          move.b    1(A3),D0
000014C8  0C00 0037 1975          cmp.b     #55,D0
000014CC  6E0A      1976          bgt.s     ChangeRegisters_5
000014CE  102B 0001 1977          move.b    1(A3),D0
000014D2  0C00 0030 1978          cmp.b     #48,D0
000014D6  6C0E      1979          bge.s     ChangeRegisters_3
                    1980   ChangeRegisters_5:
                    1981   ; printf("\r\nIllegal Data Register : Use D0-D7.....\r\n") ;
000014D8  4879 0000 1982          pea       @m68kde~1_43.L
000014DC  486C      
000014DE  4E92      1983          jsr       (A2)
000014E0  584F      1984          addq.w    #4,A7
                    1985   ; return ;
000014E2  6000 0244 1986          bra       ChangeRegisters_6
                    1987   ChangeRegisters_3:
                    1988   ; }
                    1989   ; else {
                    1990   ; printf("\r\nD%c = ", c) ;
000014E6  4882      1991          ext.w     D2
000014E8  48C2      1992          ext.l     D2
000014EA  2F02      1993          move.l    D2,-(A7)
000014EC  4879 0000 1994          pea       @m68kde~1_44.L
000014F0  4898      
000014F2  4E92      1995          jsr       (A2)
000014F4  504F      1996          addq.w    #8,A7
                    1997   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000014F6  42A7      1998          clr.l     -(A7)
000014F8  4E94      1999          jsr       (A4)
000014FA  584F      2000          addq.w    #4,A7
000014FC  2600      2001          move.l    D0,D3
                    2002   ; }
                    2003   ; // bit cludgy but d0-d7 not stored as an array for good reason
                    2004   ; if(c == (char)('0'))
000014FE  0C02 0030 2005          cmp.b     #48,D2
00001502  660A      2006          bne.s     ChangeRegisters_7
                    2007   ; d0 = reg_val ;
00001504  23C3 0803 2008          move.l    D3,_d0.L
00001508  00E4      
0000150A  6000 0060 2009          bra       ChangeRegisters_20
                    2010   ChangeRegisters_7:
                    2011   ; else if(c == (char)('1'))
0000150E  0C02 0031 2012          cmp.b     #49,D2
00001512  660A      2013          bne.s     ChangeRegisters_9
                    2014   ; d1 = reg_val ;
00001514  23C3 0803 2015          move.l    D3,_d1.L
00001518  00E8      
0000151A  6000 0050 2016          bra       ChangeRegisters_20
                    2017   ChangeRegisters_9:
                    2018   ; else if(c == (char)('2'))
0000151E  0C02 0032 2019          cmp.b     #50,D2
00001522  660A      2020          bne.s     ChangeRegisters_11
                    2021   ; d2 = reg_val ;
00001524  23C3 0803 2022          move.l    D3,_d2.L
00001528  00EC      
0000152A  6000 0040 2023          bra       ChangeRegisters_20
                    2024   ChangeRegisters_11:
                    2025   ; else if(c == (char)('3'))
0000152E  0C02 0033 2026          cmp.b     #51,D2
00001532  6608      2027          bne.s     ChangeRegisters_13
                    2028   ; d3 = reg_val ;
00001534  23C3 0803 2029          move.l    D3,_d3.L
00001538  00F0      
0000153A  6030      2030          bra.s     ChangeRegisters_20
                    2031   ChangeRegisters_13:
                    2032   ; else if(c == (char)('4'))
0000153C  0C02 0034 2033          cmp.b     #52,D2
00001540  6608      2034          bne.s     ChangeRegisters_15
                    2035   ; d4 = reg_val ;
00001542  23C3 0803 2036          move.l    D3,_d4.L
00001546  00F4      
00001548  6022      2037          bra.s     ChangeRegisters_20
                    2038   ChangeRegisters_15:
                    2039   ; else if(c == (char)('5'))
0000154A  0C02 0035 2040          cmp.b     #53,D2
0000154E  6608      2041          bne.s     ChangeRegisters_17
                    2042   ; d5 = reg_val ;
00001550  23C3 0803 2043          move.l    D3,_d5.L
00001554  00F8      
00001556  6014      2044          bra.s     ChangeRegisters_20
                    2045   ChangeRegisters_17:
                    2046   ; else if(c == (char)('6'))
00001558  0C02 0036 2047          cmp.b     #54,D2
0000155C  6608      2048          bne.s     ChangeRegisters_19
                    2049   ; d6 = reg_val ;
0000155E  23C3 0803 2050          move.l    D3,_d6.L
00001562  00FC      
00001564  6006      2051          bra.s     ChangeRegisters_20
                    2052   ChangeRegisters_19:
                    2053   ; else
                    2054   ; d7 = reg_val ;
00001566  23C3 0803 2055          move.l    D3,_d7.L
0000156A  0100      
                    2056   ChangeRegisters_20:
0000156C  6000 01B6 2057          bra       ChangeRegisters_51
                    2058   ChangeRegisters_1:
                    2059   ; }
                    2060   ; else if(reg[0] == (char)('a'))  {    // change address register, a7 is the user stack pointer, sp is the system stack pointer
00001570  1013      2061          move.b    (A3),D0
00001572  0C00 0061 2062          cmp.b     #97,D0
00001576  6600 00A6 2063          bne       ChangeRegisters_21
                    2064   ; if((c > (char)('7')) || (c < (char)('0'))) {
0000157A  0C02 0037 2065          cmp.b     #55,D2
0000157E  6E06      2066          bgt.s     ChangeRegisters_25
00001580  0C02 0030 2067          cmp.b     #48,D2
00001584  6C0E      2068          bge.s     ChangeRegisters_23
                    2069   ChangeRegisters_25:
                    2070   ; printf("\r\nIllegal Address Register : Use A0-A7.....\r\n") ;
00001586  4879 0000 2071          pea       @m68kde~1_45.L
0000158A  48A2      
0000158C  4E92      2072          jsr       (A2)
0000158E  584F      2073          addq.w    #4,A7
                    2074   ; return ;
00001590  6000 0196 2075          bra       ChangeRegisters_6
                    2076   ChangeRegisters_23:
                    2077   ; }
                    2078   ; else {
                    2079   ; printf("\r\nA%c = ", c) ;
00001594  4882      2080          ext.w     D2
00001596  48C2      2081          ext.l     D2
00001598  2F02      2082          move.l    D2,-(A7)
0000159A  4879 0000 2083          pea       @m68kde~1_46.L
0000159E  48D0      
000015A0  4E92      2084          jsr       (A2)
000015A2  504F      2085          addq.w    #8,A7
                    2086   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000015A4  42A7      2087          clr.l     -(A7)
000015A6  4E94      2088          jsr       (A4)
000015A8  584F      2089          addq.w    #4,A7
000015AA  2600      2090          move.l    D0,D3
                    2091   ; }
                    2092   ; // bit cludgy but a0-a7 not stored as an array for good reason
                    2093   ; if(c == (char)('0'))
000015AC  0C02 0030 2094          cmp.b     #48,D2
000015B0  660A      2095          bne.s     ChangeRegisters_26
                    2096   ; a0 = reg_val ;
000015B2  23C3 0803 2097          move.l    D3,_a0.L
000015B6  0104      
000015B8  6000 0060 2098          bra       ChangeRegisters_39
                    2099   ChangeRegisters_26:
                    2100   ; else if(c == (char)('1'))
000015BC  0C02 0031 2101          cmp.b     #49,D2
000015C0  660A      2102          bne.s     ChangeRegisters_28
                    2103   ; a1 = reg_val ;
000015C2  23C3 0803 2104          move.l    D3,_a1.L
000015C6  0108      
000015C8  6000 0050 2105          bra       ChangeRegisters_39
                    2106   ChangeRegisters_28:
                    2107   ; else if(c == (char)('2'))
000015CC  0C02 0032 2108          cmp.b     #50,D2
000015D0  660A      2109          bne.s     ChangeRegisters_30
                    2110   ; a2 = reg_val ;
000015D2  23C3 0803 2111          move.l    D3,_a2.L
000015D6  010C      
000015D8  6000 0040 2112          bra       ChangeRegisters_39
                    2113   ChangeRegisters_30:
                    2114   ; else if(c == (char)('3'))
000015DC  0C02 0033 2115          cmp.b     #51,D2
000015E0  6608      2116          bne.s     ChangeRegisters_32
                    2117   ; a3 = reg_val ;
000015E2  23C3 0803 2118          move.l    D3,_a3.L
000015E6  0110      
000015E8  6030      2119          bra.s     ChangeRegisters_39
                    2120   ChangeRegisters_32:
                    2121   ; else if(c == (char)('4'))
000015EA  0C02 0034 2122          cmp.b     #52,D2
000015EE  6608      2123          bne.s     ChangeRegisters_34
                    2124   ; a4 = reg_val ;
000015F0  23C3 0803 2125          move.l    D3,_a4.L
000015F4  0114      
000015F6  6022      2126          bra.s     ChangeRegisters_39
                    2127   ChangeRegisters_34:
                    2128   ; else if(c == (char)('5'))
000015F8  0C02 0035 2129          cmp.b     #53,D2
000015FC  6608      2130          bne.s     ChangeRegisters_36
                    2131   ; a5 = reg_val ;
000015FE  23C3 0803 2132          move.l    D3,_a5.L
00001602  0118      
00001604  6014      2133          bra.s     ChangeRegisters_39
                    2134   ChangeRegisters_36:
                    2135   ; else if(c == (char)('6'))
00001606  0C02 0036 2136          cmp.b     #54,D2
0000160A  6608      2137          bne.s     ChangeRegisters_38
                    2138   ; a6 = reg_val ;
0000160C  23C3 0803 2139          move.l    D3,_a6.L
00001610  011C      
00001612  6006      2140          bra.s     ChangeRegisters_39
                    2141   ChangeRegisters_38:
                    2142   ; else
                    2143   ; USP = reg_val ;
00001614  23C3 0803 2144          move.l    D3,_USP.L
00001618  0128      
                    2145   ChangeRegisters_39:
0000161A  6000 0108 2146          bra       ChangeRegisters_51
                    2147   ChangeRegisters_21:
                    2148   ; }
                    2149   ; else if((reg[0] == (char)('u')) && (c == (char)('s')))  {
0000161E  1013      2150          move.b    (A3),D0
00001620  0C00 0075 2151          cmp.b     #117,D0
00001624  6600 004E 2152          bne       ChangeRegisters_40
00001628  0C02 0073 2153          cmp.b     #115,D2
0000162C  6600 0046 2154          bne       ChangeRegisters_40
                    2155   ; if(tolower(_getch()) == 'p')  {    // change user stack pointer
00001630  2F00      2156          move.l    D0,-(A7)
00001632  4E95      2157          jsr       (A5)
00001634  2200      2158          move.l    D0,D1
00001636  201F      2159          move.l    (A7)+,D0
00001638  2F01      2160          move.l    D1,-(A7)
0000163A  4EB9 0000 2161          jsr       _tolower
0000163E  3AE6      
00001640  584F      2162          addq.w    #4,A7
00001642  0C80 0000 2163          cmp.l     #112,D0
00001646  0070      
00001648  6618      2164          bne.s     ChangeRegisters_42
                    2165   ; printf("\r\nUser SP = ") ;
0000164A  4879 0000 2166          pea       @m68kde~1_47.L
0000164E  48DA      
00001650  4E92      2167          jsr       (A2)
00001652  584F      2168          addq.w    #4,A7
                    2169   ; USP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001654  42A7      2170          clr.l     -(A7)
00001656  4E94      2171          jsr       (A4)
00001658  584F      2172          addq.w    #4,A7
0000165A  23C0 0803 2173          move.l    D0,_USP.L
0000165E  0128      
00001660  600E      2174          bra.s     ChangeRegisters_43
                    2175   ChangeRegisters_42:
                    2176   ; }
                    2177   ; else {
                    2178   ; printf("\r\nIllegal Register....") ;
00001662  4879 0000 2179          pea       @m68kde~1_48.L
00001666  48E8      
00001668  4E92      2180          jsr       (A2)
0000166A  584F      2181          addq.w    #4,A7
                    2182   ; return ;
0000166C  6000 00BA 2183          bra       ChangeRegisters_6
                    2184   ChangeRegisters_43:
00001670  6000 00B2 2185          bra       ChangeRegisters_51
                    2186   ChangeRegisters_40:
                    2187   ; }
                    2188   ; }
                    2189   ; else if((reg[0] == (char)('s')) && (c == (char)('s')))  {
00001674  1013      2190          move.b    (A3),D0
00001676  0C00 0073 2191          cmp.b     #115,D0
0000167A  6600 004E 2192          bne       ChangeRegisters_44
0000167E  0C02 0073 2193          cmp.b     #115,D2
00001682  6600 0046 2194          bne       ChangeRegisters_44
                    2195   ; if(tolower(_getch()) == 'p')  {    // change system stack pointer
00001686  2F00      2196          move.l    D0,-(A7)
00001688  4E95      2197          jsr       (A5)
0000168A  2200      2198          move.l    D0,D1
0000168C  201F      2199          move.l    (A7)+,D0
0000168E  2F01      2200          move.l    D1,-(A7)
00001690  4EB9 0000 2201          jsr       _tolower
00001694  3AE6      
00001696  584F      2202          addq.w    #4,A7
00001698  0C80 0000 2203          cmp.l     #112,D0
0000169C  0070      
0000169E  6618      2204          bne.s     ChangeRegisters_46
                    2205   ; printf("\r\nSystem SP = ") ;
000016A0  4879 0000 2206          pea       @m68kde~1_49.L
000016A4  4900      
000016A6  4E92      2207          jsr       (A2)
000016A8  584F      2208          addq.w    #4,A7
                    2209   ; SSP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000016AA  42A7      2210          clr.l     -(A7)
000016AC  4E94      2211          jsr       (A4)
000016AE  584F      2212          addq.w    #4,A7
000016B0  23C0 0803 2213          move.l    D0,_SSP.L
000016B4  0124      
000016B6  600E      2214          bra.s     ChangeRegisters_47
                    2215   ChangeRegisters_46:
                    2216   ; }
                    2217   ; else {
                    2218   ; printf("\r\nIllegal Register....") ;
000016B8  4879 0000 2219          pea       @m68kde~1_48.L
000016BC  48E8      
000016BE  4E92      2220          jsr       (A2)
000016C0  584F      2221          addq.w    #4,A7
                    2222   ; return ;
000016C2  6000 0064 2223          bra       ChangeRegisters_6
                    2224   ChangeRegisters_47:
000016C6  6000 005C 2225          bra       ChangeRegisters_51
                    2226   ChangeRegisters_44:
                    2227   ; }
                    2228   ; }
                    2229   ; else if((reg[0] == (char)('p')) && (c == (char)('c')))  {    // change program counter
000016CA  1013      2230          move.b    (A3),D0
000016CC  0C00 0070 2231          cmp.b     #112,D0
000016D0  6620      2232          bne.s     ChangeRegisters_48
000016D2  0C02 0063 2233          cmp.b     #99,D2
000016D6  661A      2234          bne.s     ChangeRegisters_48
                    2235   ; printf("\r\nPC = ") ;
000016D8  4879 0000 2236          pea       @m68kde~1_50.L
000016DC  4910      
000016DE  4E92      2237          jsr       (A2)
000016E0  584F      2238          addq.w    #4,A7
                    2239   ; PC = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000016E2  42A7      2240          clr.l     -(A7)
000016E4  4E94      2241          jsr       (A4)
000016E6  584F      2242          addq.w    #4,A7
000016E8  23C0 0803 2243          move.l    D0,_PC.L
000016EC  0120      
000016EE  6000 0034 2244          bra       ChangeRegisters_51
                    2245   ChangeRegisters_48:
                    2246   ; }
                    2247   ; else if((reg[0] == (char)('s')) && (c == (char)('r')))  {    // change status register
000016F2  1013      2248          move.b    (A3),D0
000016F4  0C00 0073 2249          cmp.b     #115,D0
000016F8  6620      2250          bne.s     ChangeRegisters_50
000016FA  0C02 0072 2251          cmp.b     #114,D2
000016FE  661A      2252          bne.s     ChangeRegisters_50
                    2253   ; printf("\r\nSR = ") ;
00001700  4879 0000 2254          pea       @m68kde~1_51.L
00001704  4918      
00001706  4E92      2255          jsr       (A2)
00001708  584F      2256          addq.w    #4,A7
                    2257   ; SR = Get4HexDigits(0) ;    // read 16 bit value from user keyboard
0000170A  42A7      2258          clr.l     -(A7)
0000170C  4EB8 0B16 2259          jsr       _Get4HexDigits
00001710  584F      2260          addq.w    #4,A7
00001712  33C0 0803 2261          move.w    D0,_SR.L
00001716  012C      
00001718  600A      2262          bra.s     ChangeRegisters_51
                    2263   ChangeRegisters_50:
                    2264   ; }
                    2265   ; else
                    2266   ; printf("\r\nIllegal Register: Use A0-A7, D0-D7, SSP, USP, PC or SR\r\n") ;
0000171A  4879 0000 2267          pea       @m68kde~1_52.L
0000171E  4920      
00001720  4E92      2268          jsr       (A2)
00001722  584F      2269          addq.w    #4,A7
                    2270   ChangeRegisters_51:
                    2271   ; DumpRegisters() ;
00001724  4EB8 0F82 2272          jsr       _DumpRegisters
                    2273   ChangeRegisters_6:
00001728  4CDF 3C0C 2274          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
0000172C  4E5E      2275          unlk      A6
0000172E  4E75      2276          rts
                    2277   ; }
                    2278   ; void BreakPointDisplay(void)
                    2279   ; {
                    2280   _BreakPointDisplay:
00001730  48E7 3030 2281          movem.l   D2/D3/A2/A3,-(A7)
00001734  45F9 0000 2282          lea       _printf.L,A2
00001738  3B88      
0000173A  47F9 0803 2283          lea       _BreakPointAddress.L,A3
0000173E  012E      
                    2284   ; int i, BreakPointsSet = 0 ;
00001740  4283      2285          clr.l     D3
                    2286   ; // any break points  set
                    2287   ; for(i = 0; i < 8; i++)  {
00001742  4282      2288          clr.l     D2
                    2289   BreakPointDisplay_1:
00001744  0C82 0000 2290          cmp.l     #8,D2
00001748  0008      
0000174A  6C1C      2291          bge.s     BreakPointDisplay_3
                    2292   ; if(BreakPointSetOrCleared[i] == 1)
0000174C  2002      2293          move.l    D2,D0
0000174E  E588      2294          lsl.l     #2,D0
00001750  41F9 0803 2295          lea       _BreakPointSetOrCleared.L,A0
00001754  015E      
00001756  2030 0800 2296          move.l    0(A0,D0.L),D0
0000175A  0C80 0000 2297          cmp.l     #1,D0
0000175E  0001      
00001760  6602      2298          bne.s     BreakPointDisplay_4
                    2299   ; BreakPointsSet = 1;
00001762  7601      2300          moveq     #1,D3
                    2301   BreakPointDisplay_4:
00001764  5282      2302          addq.l    #1,D2
00001766  60DC      2303          bra       BreakPointDisplay_1
                    2304   BreakPointDisplay_3:
                    2305   ; }
                    2306   ; if(BreakPointsSet == 1) {
00001768  0C83 0000 2307          cmp.l     #1,D3
0000176C  0001      
0000176E  6616      2308          bne.s     BreakPointDisplay_6
                    2309   ; printf("\r\n\r\nNum     Address      Instruction") ;
00001770  4879 0000 2310          pea       @m68kde~1_53.L
00001774  495C      
00001776  4E92      2311          jsr       (A2)
00001778  584F      2312          addq.w    #4,A7
                    2313   ; printf("\r\n---     ---------    -----------") ;
0000177A  4879 0000 2314          pea       @m68kde~1_54.L
0000177E  4982      
00001780  4E92      2315          jsr       (A2)
00001782  584F      2316          addq.w    #4,A7
00001784  600A      2317          bra.s     BreakPointDisplay_7
                    2318   BreakPointDisplay_6:
                    2319   ; }
                    2320   ; else
                    2321   ; printf("\r\nNo BreakPoints Set") ;
00001786  4879 0000 2322          pea       @m68kde~1_55.L
0000178A  49A6      
0000178C  4E92      2323          jsr       (A2)
0000178E  584F      2324          addq.w    #4,A7
                    2325   BreakPointDisplay_7:
                    2326   ; for(i = 0; i < 8; i++)  {
00001790  4282      2327          clr.l     D2
                    2328   BreakPointDisplay_8:
00001792  0C82 0000 2329          cmp.l     #8,D2
00001796  0008      
00001798  6C00 005A 2330          bge       BreakPointDisplay_10
                    2331   ; // put opcode back, then put break point back
                    2332   ; if(BreakPointSetOrCleared[i] == 1)  {
0000179C  2002      2333          move.l    D2,D0
0000179E  E588      2334          lsl.l     #2,D0
000017A0  41F9 0803 2335          lea       _BreakPointSetOrCleared.L,A0
000017A4  015E      
000017A6  2030 0800 2336          move.l    0(A0,D0.L),D0
000017AA  0C80 0000 2337          cmp.l     #1,D0
000017AE  0001      
000017B0  6600 003E 2338          bne       BreakPointDisplay_11
                    2339   ; *(unsigned short int *)(BreakPointAddress[i]) = BreakPointInstruction[i];
000017B4  2002      2340          move.l    D2,D0
000017B6  E388      2341          lsl.l     #1,D0
000017B8  41F9 0803 2342          lea       _BreakPointInstruction.L,A0
000017BC  014E      
000017BE  2202      2343          move.l    D2,D1
000017C0  E589      2344          lsl.l     #2,D1
000017C2  2233 1800 2345          move.l    0(A3,D1.L),D1
000017C6  2241      2346          move.l    D1,A1
000017C8  32B0 0800 2347          move.w    0(A0,D0.L),(A1)
                    2348   ; *(unsigned short int *)(BreakPointAddress[i]) = (unsigned short int)(0x4e4e) ;
000017CC  2002      2349          move.l    D2,D0
000017CE  E588      2350          lsl.l     #2,D0
000017D0  2033 0800 2351          move.l    0(A3,D0.L),D0
000017D4  2040      2352          move.l    D0,A0
000017D6  30BC 4E4E 2353          move.w    #20046,(A0)
                    2354   ; printf("\r\n%3d     $%08x",i, BreakPointAddress[i]) ;
000017DA  2202      2355          move.l    D2,D1
000017DC  E589      2356          lsl.l     #2,D1
000017DE  2F33 1800 2357          move.l    0(A3,D1.L),-(A7)
000017E2  2F02      2358          move.l    D2,-(A7)
000017E4  4879 0000 2359          pea       @m68kde~1_56.L
000017E8  49BC      
000017EA  4E92      2360          jsr       (A2)
000017EC  DEFC 000C 2361          add.w     #12,A7
                    2362   BreakPointDisplay_11:
000017F0  5282      2363          addq.l    #1,D2
000017F2  609E      2364          bra       BreakPointDisplay_8
                    2365   BreakPointDisplay_10:
                    2366   ; }
                    2367   ; }
                    2368   ; printf("\r\n") ;
000017F4  4879 0000 2369          pea       @m68kde~1_6.L
000017F8  44D8      
000017FA  4E92      2370          jsr       (A2)
000017FC  584F      2371          addq.w    #4,A7
000017FE  4CDF 0C0C 2372          movem.l   (A7)+,D2/D3/A2/A3
00001802  4E75      2373          rts
                    2374   ; }
                    2375   ; void WatchPointDisplay(void)
                    2376   ; {
                    2377   _WatchPointDisplay:
00001804  48E7 3020 2378          movem.l   D2/D3/A2,-(A7)
00001808  45F9 0000 2379          lea       _printf.L,A2
0000180C  3B88      
                    2380   ; int i ;
                    2381   ; int WatchPointsSet = 0 ;
0000180E  4283      2382          clr.l     D3
                    2383   ; // any watchpoints set
                    2384   ; for(i = 0; i < 8; i++)  {
00001810  4282      2385          clr.l     D2
                    2386   WatchPointDisplay_1:
00001812  0C82 0000 2387          cmp.l     #8,D2
00001816  0008      
00001818  6C1C      2388          bge.s     WatchPointDisplay_3
                    2389   ; if(WatchPointSetOrCleared[i] == 1)
0000181A  2002      2390          move.l    D2,D0
0000181C  E588      2391          lsl.l     #2,D0
0000181E  41F9 0803 2392          lea       _WatchPointSetOrCleared.L,A0
00001822  01A2      
00001824  2030 0800 2393          move.l    0(A0,D0.L),D0
00001828  0C80 0000 2394          cmp.l     #1,D0
0000182C  0001      
0000182E  6602      2395          bne.s     WatchPointDisplay_4
                    2396   ; WatchPointsSet = 1;
00001830  7601      2397          moveq     #1,D3
                    2398   WatchPointDisplay_4:
00001832  5282      2399          addq.l    #1,D2
00001834  60DC      2400          bra       WatchPointDisplay_1
                    2401   WatchPointDisplay_3:
                    2402   ; }
                    2403   ; if(WatchPointsSet == 1) {
00001836  0C83 0000 2404          cmp.l     #1,D3
0000183A  0001      
0000183C  6616      2405          bne.s     WatchPointDisplay_6
                    2406   ; printf("\r\nNum     Address") ;
0000183E  4879 0000 2407          pea       @m68kde~1_57.L
00001842  49CC      
00001844  4E92      2408          jsr       (A2)
00001846  584F      2409          addq.w    #4,A7
                    2410   ; printf("\r\n---     ---------") ;
00001848  4879 0000 2411          pea       @m68kde~1_58.L
0000184C  49DE      
0000184E  4E92      2412          jsr       (A2)
00001850  584F      2413          addq.w    #4,A7
00001852  600A      2414          bra.s     WatchPointDisplay_7
                    2415   WatchPointDisplay_6:
                    2416   ; }
                    2417   ; else
                    2418   ; printf("\r\nNo WatchPoints Set") ;
00001854  4879 0000 2419          pea       @m68kde~1_59.L
00001858  49F2      
0000185A  4E92      2420          jsr       (A2)
0000185C  584F      2421          addq.w    #4,A7
                    2422   WatchPointDisplay_7:
                    2423   ; for(i = 0; i < 8; i++)  {
0000185E  4282      2424          clr.l     D2
                    2425   WatchPointDisplay_8:
00001860  0C82 0000 2426          cmp.l     #8,D2
00001864  0008      
00001866  6C00 0038 2427          bge       WatchPointDisplay_10
                    2428   ; if(WatchPointSetOrCleared[i] == 1)
0000186A  2002      2429          move.l    D2,D0
0000186C  E588      2430          lsl.l     #2,D0
0000186E  41F9 0803 2431          lea       _WatchPointSetOrCleared.L,A0
00001872  01A2      
00001874  2030 0800 2432          move.l    0(A0,D0.L),D0
00001878  0C80 0000 2433          cmp.l     #1,D0
0000187C  0001      
0000187E  661C      2434          bne.s     WatchPointDisplay_11
                    2435   ; printf("\r\n%3d     $%08x",i, WatchPointAddress[i]) ;
00001880  2202      2436          move.l    D2,D1
00001882  E589      2437          lsl.l     #2,D1
00001884  41F9 0803 2438          lea       _WatchPointAddress.L,A0
00001888  0182      
0000188A  2F30 1800 2439          move.l    0(A0,D1.L),-(A7)
0000188E  2F02      2440          move.l    D2,-(A7)
00001890  4879 0000 2441          pea       @m68kde~1_56.L
00001894  49BC      
00001896  4E92      2442          jsr       (A2)
00001898  DEFC 000C 2443          add.w     #12,A7
                    2444   WatchPointDisplay_11:
0000189C  5282      2445          addq.l    #1,D2
0000189E  60C0      2446          bra       WatchPointDisplay_8
                    2447   WatchPointDisplay_10:
                    2448   ; }
                    2449   ; printf("\r\n") ;
000018A0  4879 0000 2450          pea       @m68kde~1_6.L
000018A4  44D8      
000018A6  4E92      2451          jsr       (A2)
000018A8  584F      2452          addq.w    #4,A7
000018AA  4CDF 040C 2453          movem.l   (A7)+,D2/D3/A2
000018AE  4E75      2454          rts
                    2455   ; }
                    2456   ; void BreakPointClear(void)
                    2457   ; {
                    2458   _BreakPointClear:
000018B0  4E56 FFFC 2459          link      A6,#-4
000018B4  48E7 2020 2460          movem.l   D2/A2,-(A7)
000018B8  45F9 0000 2461          lea       _printf.L,A2
000018BC  3B88      
                    2462   ; unsigned int i ;
                    2463   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2464   ; BreakPointDisplay() ;
000018BE  4EB8 1730 2465          jsr       _BreakPointDisplay
                    2466   ; printf("\r\nEnter Break Point Number: ") ;
000018C2  4879 0000 2467          pea       @m68kde~1_60.L
000018C6  4A08      
000018C8  4E92      2468          jsr       (A2)
000018CA  584F      2469          addq.w    #4,A7
                    2470   ; i = xtod(_getch()) ;           // get break pointer number
000018CC  2F00      2471          move.l    D0,-(A7)
000018CE  4EB8 0A26 2472          jsr       __getch
000018D2  2200      2473          move.l    D0,D1
000018D4  201F      2474          move.l    (A7)+,D0
000018D6  2F01      2475          move.l    D1,-(A7)
000018D8  4EB8 0A90 2476          jsr       _xtod
000018DC  584F      2477          addq.w    #4,A7
000018DE  C0BC 0000 2478          and.l     #255,D0
000018E2  00FF      
000018E4  2400      2479          move.l    D0,D2
                    2480   ; if((i < 0) || (i > 7))   {
000018E6  0C82 0000 2481          cmp.l     #0,D2
000018EA  0000      
000018EC  6508      2482          blo.s     BreakPointClear_3
000018EE  0C82 0000 2483          cmp.l     #7,D2
000018F2  0007      
000018F4  630E      2484          bls.s     BreakPointClear_1
                    2485   BreakPointClear_3:
                    2486   ; printf("\r\nIllegal Range : Use 0 - 7") ;
000018F6  4879 0000 2487          pea       @m68kde~1_61.L
000018FA  4A26      
000018FC  4E92      2488          jsr       (A2)
000018FE  584F      2489          addq.w    #4,A7
                    2490   ; return ;
00001900  6000 0080 2491          bra       BreakPointClear_4
                    2492   BreakPointClear_1:
                    2493   ; }
                    2494   ; if(BreakPointSetOrCleared[i] == 1)  {       // if break point set
00001904  2002      2495          move.l    D2,D0
00001906  E588      2496          lsl.l     #2,D0
00001908  41F9 0803 2497          lea       _BreakPointSetOrCleared.L,A0
0000190C  015E      
0000190E  2030 0800 2498          move.l    0(A0,D0.L),D0
00001912  0C80 0000 2499          cmp.l     #1,D0
00001916  0001      
00001918  6600 005A 2500          bne       BreakPointClear_5
                    2501   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program we are about to change
0000191C  2002      2502          move.l    D2,D0
0000191E  E588      2503          lsl.l     #2,D0
00001920  41F9 0803 2504          lea       _BreakPointAddress.L,A0
00001924  012E      
00001926  2D70 0800 2505          move.l    0(A0,D0.L),-4(A6)
0000192A  FFFC      
                    2506   ; BreakPointAddress[i] = 0 ;
0000192C  2002      2507          move.l    D2,D0
0000192E  E588      2508          lsl.l     #2,D0
00001930  41F9 0803 2509          lea       _BreakPointAddress.L,A0
00001934  012E      
00001936  42B0 0800 2510          clr.l     0(A0,D0.L)
                    2511   ; BreakPointSetOrCleared[i] = 0 ;
0000193A  2002      2512          move.l    D2,D0
0000193C  E588      2513          lsl.l     #2,D0
0000193E  41F9 0803 2514          lea       _BreakPointSetOrCleared.L,A0
00001942  015E      
00001944  42B0 0800 2515          clr.l     0(A0,D0.L)
                    2516   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
00001948  2002      2517          move.l    D2,D0
0000194A  E388      2518          lsl.l     #1,D0
0000194C  41F9 0803 2519          lea       _BreakPointInstruction.L,A0
00001950  014E      
00001952  226E FFFC 2520          move.l    -4(A6),A1
00001956  32B0 0800 2521          move.w    0(A0,D0.L),(A1)
                    2522   ; BreakPointInstruction[i] = 0 ;
0000195A  2002      2523          move.l    D2,D0
0000195C  E388      2524          lsl.l     #1,D0
0000195E  41F9 0803 2525          lea       _BreakPointInstruction.L,A0
00001962  014E      
00001964  4270 0800 2526          clr.w     0(A0,D0.L)
                    2527   ; printf("\r\nBreak Point Cleared.....\r\n") ;
00001968  4879 0000 2528          pea       @m68kde~1_62.L
0000196C  4A42      
0000196E  4E92      2529          jsr       (A2)
00001970  584F      2530          addq.w    #4,A7
00001972  600A      2531          bra.s     BreakPointClear_6
                    2532   BreakPointClear_5:
                    2533   ; }
                    2534   ; else
                    2535   ; printf("\r\nBreak Point wasn't Set.....") ;
00001974  4879 0000 2536          pea       @m68kde~1_63.L
00001978  4A60      
0000197A  4E92      2537          jsr       (A2)
0000197C  584F      2538          addq.w    #4,A7
                    2539   BreakPointClear_6:
                    2540   ; BreakPointDisplay() ;
0000197E  4EB8 1730 2541          jsr       _BreakPointDisplay
                    2542   ; return ;
                    2543   BreakPointClear_4:
00001982  4CDF 0404 2544          movem.l   (A7)+,D2/A2
00001986  4E5E      2545          unlk      A6
00001988  4E75      2546          rts
                    2547   ; }
                    2548   ; void WatchPointClear(void)
                    2549   ; {
                    2550   _WatchPointClear:
0000198A  48E7 2020 2551          movem.l   D2/A2,-(A7)
0000198E  45F9 0000 2552          lea       _printf.L,A2
00001992  3B88      
                    2553   ; unsigned int i ;
                    2554   ; WatchPointDisplay() ;
00001994  4EB8 1804 2555          jsr       _WatchPointDisplay
                    2556   ; printf("\r\nEnter Watch Point Number: ") ;
00001998  4879 0000 2557          pea       @m68kde~1_64.L
0000199C  4A7E      
0000199E  4E92      2558          jsr       (A2)
000019A0  584F      2559          addq.w    #4,A7
                    2560   ; i = xtod(_getch()) ;           // get watch pointer number
000019A2  2F00      2561          move.l    D0,-(A7)
000019A4  4EB8 0A26 2562          jsr       __getch
000019A8  2200      2563          move.l    D0,D1
000019AA  201F      2564          move.l    (A7)+,D0
000019AC  2F01      2565          move.l    D1,-(A7)
000019AE  4EB8 0A90 2566          jsr       _xtod
000019B2  584F      2567          addq.w    #4,A7
000019B4  C0BC 0000 2568          and.l     #255,D0
000019B8  00FF      
000019BA  2400      2569          move.l    D0,D2
                    2570   ; if((i < 0) || (i > 7))   {
000019BC  0C82 0000 2571          cmp.l     #0,D2
000019C0  0000      
000019C2  6508      2572          blo.s     WatchPointClear_3
000019C4  0C82 0000 2573          cmp.l     #7,D2
000019C8  0007      
000019CA  630E      2574          bls.s     WatchPointClear_1
                    2575   WatchPointClear_3:
                    2576   ; printf("\r\nIllegal Range : Use 0 - 7") ;
000019CC  4879 0000 2577          pea       @m68kde~1_61.L
000019D0  4A26      
000019D2  4E92      2578          jsr       (A2)
000019D4  584F      2579          addq.w    #4,A7
                    2580   ; return ;
000019D6  6000 004E 2581          bra       WatchPointClear_4
                    2582   WatchPointClear_1:
                    2583   ; }
                    2584   ; if(WatchPointSetOrCleared[i] == 1)  {       // if watch point set
000019DA  2002      2585          move.l    D2,D0
000019DC  E588      2586          lsl.l     #2,D0
000019DE  41F9 0803 2587          lea       _WatchPointSetOrCleared.L,A0
000019E2  01A2      
000019E4  2030 0800 2588          move.l    0(A0,D0.L),D0
000019E8  0C80 0000 2589          cmp.l     #1,D0
000019EC  0001      
000019EE  6628      2590          bne.s     WatchPointClear_5
                    2591   ; WatchPointAddress[i] = 0 ;
000019F0  2002      2592          move.l    D2,D0
000019F2  E588      2593          lsl.l     #2,D0
000019F4  41F9 0803 2594          lea       _WatchPointAddress.L,A0
000019F8  0182      
000019FA  42B0 0800 2595          clr.l     0(A0,D0.L)
                    2596   ; WatchPointSetOrCleared[i] = 0 ;
000019FE  2002      2597          move.l    D2,D0
00001A00  E588      2598          lsl.l     #2,D0
00001A02  41F9 0803 2599          lea       _WatchPointSetOrCleared.L,A0
00001A06  01A2      
00001A08  42B0 0800 2600          clr.l     0(A0,D0.L)
                    2601   ; printf("\r\nWatch Point Cleared.....\r\n") ;
00001A0C  4879 0000 2602          pea       @m68kde~1_65.L
00001A10  4A9C      
00001A12  4E92      2603          jsr       (A2)
00001A14  584F      2604          addq.w    #4,A7
00001A16  600A      2605          bra.s     WatchPointClear_6
                    2606   WatchPointClear_5:
                    2607   ; }
                    2608   ; else
                    2609   ; printf("\r\nWatch Point Was not Set.....") ;
00001A18  4879 0000 2610          pea       @m68kde~1_66.L
00001A1C  4ABA      
00001A1E  4E92      2611          jsr       (A2)
00001A20  584F      2612          addq.w    #4,A7
                    2613   WatchPointClear_6:
                    2614   ; WatchPointDisplay() ;
00001A22  4EB8 1804 2615          jsr       _WatchPointDisplay
                    2616   ; return ;
                    2617   WatchPointClear_4:
00001A26  4CDF 0404 2618          movem.l   (A7)+,D2/A2
00001A2A  4E75      2619          rts
                    2620   ; }
                    2621   ; void DisableBreakPoints(void)
                    2622   ; {
                    2623   _DisableBreakPoints:
00001A2C  4E56 FFFC 2624          link      A6,#-4
00001A30  2F02      2625          move.l    D2,-(A7)
                    2626   ; int i ;
                    2627   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2628   ; for(i = 0; i < 8; i++)  {
00001A32  4282      2629          clr.l     D2
                    2630   DisableBreakPoints_1:
00001A34  0C82 0000 2631          cmp.l     #8,D2
00001A38  0008      
00001A3A  6C00 003E 2632          bge       DisableBreakPoints_3
                    2633   ; if(BreakPointSetOrCleared[i] == 1)    {                                                    // if break point set
00001A3E  2002      2634          move.l    D2,D0
00001A40  E588      2635          lsl.l     #2,D0
00001A42  41F9 0803 2636          lea       _BreakPointSetOrCleared.L,A0
00001A46  015E      
00001A48  2030 0800 2637          move.l    0(A0,D0.L),D0
00001A4C  0C80 0000 2638          cmp.l     #1,D0
00001A50  0001      
00001A52  6622      2639          bne.s     DisableBreakPoints_4
                    2640   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001A54  2002      2641          move.l    D2,D0
00001A56  E588      2642          lsl.l     #2,D0
00001A58  41F9 0803 2643          lea       _BreakPointAddress.L,A0
00001A5C  012E      
00001A5E  2D70 0800 2644          move.l    0(A0,D0.L),-4(A6)
00001A62  FFFC      
                    2645   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program overwritting the $4e4e
00001A64  2002      2646          move.l    D2,D0
00001A66  E388      2647          lsl.l     #1,D0
00001A68  41F9 0803 2648          lea       _BreakPointInstruction.L,A0
00001A6C  014E      
00001A6E  226E FFFC 2649          move.l    -4(A6),A1
00001A72  32B0 0800 2650          move.w    0(A0,D0.L),(A1)
                    2651   DisableBreakPoints_4:
00001A76  5282      2652          addq.l    #1,D2
00001A78  60BA      2653          bra       DisableBreakPoints_1
                    2654   DisableBreakPoints_3:
00001A7A  241F      2655          move.l    (A7)+,D2
00001A7C  4E5E      2656          unlk      A6
00001A7E  4E75      2657          rts
                    2658   ; }
                    2659   ; }
                    2660   ; }
                    2661   ; void EnableBreakPoints(void)
                    2662   ; {
                    2663   _EnableBreakPoints:
00001A80  4E56 FFFC 2664          link      A6,#-4
00001A84  2F02      2665          move.l    D2,-(A7)
                    2666   ; int i ;
                    2667   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2668   ; for(i = 0; i < 8; i++)  {
00001A86  4282      2669          clr.l     D2
                    2670   EnableBreakPoints_1:
00001A88  0C82 0000 2671          cmp.l     #8,D2
00001A8C  0008      
00001A8E  6C32      2672          bge.s     EnableBreakPoints_3
                    2673   ; if(BreakPointSetOrCleared[i] == 1)    {                                                     // if break point set
00001A90  2002      2674          move.l    D2,D0
00001A92  E588      2675          lsl.l     #2,D0
00001A94  41F9 0803 2676          lea       _BreakPointSetOrCleared.L,A0
00001A98  015E      
00001A9A  2030 0800 2677          move.l    0(A0,D0.L),D0
00001A9E  0C80 0000 2678          cmp.l     #1,D0
00001AA2  0001      
00001AA4  6618      2679          bne.s     EnableBreakPoints_4
                    2680   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001AA6  2002      2681          move.l    D2,D0
00001AA8  E588      2682          lsl.l     #2,D0
00001AAA  41F9 0803 2683          lea       _BreakPointAddress.L,A0
00001AAE  012E      
00001AB0  2D70 0800 2684          move.l    0(A0,D0.L),-4(A6)
00001AB4  FFFC      
                    2685   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e);                              // put the breakpoint back in user program
00001AB6  206E FFFC 2686          move.l    -4(A6),A0
00001ABA  30BC 4E4E 2687          move.w    #20046,(A0)
                    2688   EnableBreakPoints_4:
00001ABE  5282      2689          addq.l    #1,D2
00001AC0  60C6      2690          bra       EnableBreakPoints_1
                    2691   EnableBreakPoints_3:
00001AC2  241F      2692          move.l    (A7)+,D2
00001AC4  4E5E      2693          unlk      A6
00001AC6  4E75      2694          rts
                    2695   ; }
                    2696   ; }
                    2697   ; }
                    2698   ; void KillAllBreakPoints(void)
                    2699   ; {
                    2700   _KillAllBreakPoints:
00001AC8  4E56 FFFC 2701          link      A6,#-4
00001ACC  2F02      2702          move.l    D2,-(A7)
                    2703   ; int i ;
                    2704   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2705   ; for(i = 0; i < 8; i++)  {
00001ACE  4282      2706          clr.l     D2
                    2707   KillAllBreakPoints_1:
00001AD0  0C82 0000 2708          cmp.l     #8,D2
00001AD4  0008      
00001AD6  6C00 0052 2709          bge       KillAllBreakPoints_3
                    2710   ; // clear BP
                    2711   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001ADA  2002      2712          move.l    D2,D0
00001ADC  E588      2713          lsl.l     #2,D0
00001ADE  41F9 0803 2714          lea       _BreakPointAddress.L,A0
00001AE2  012E      
00001AE4  2D70 0800 2715          move.l    0(A0,D0.L),-4(A6)
00001AE8  FFFC      
                    2716   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program
00001AEA  2002      2717          move.l    D2,D0
00001AEC  E388      2718          lsl.l     #1,D0
00001AEE  41F9 0803 2719          lea       _BreakPointInstruction.L,A0
00001AF2  014E      
00001AF4  226E FFFC 2720          move.l    -4(A6),A1
00001AF8  32B0 0800 2721          move.w    0(A0,D0.L),(A1)
                    2722   ; BreakPointAddress[i] = 0 ;                                                             // set BP address to NULL
00001AFC  2002      2723          move.l    D2,D0
00001AFE  E588      2724          lsl.l     #2,D0
00001B00  41F9 0803 2725          lea       _BreakPointAddress.L,A0
00001B04  012E      
00001B06  42B0 0800 2726          clr.l     0(A0,D0.L)
                    2727   ; BreakPointInstruction[i] = 0 ;
00001B0A  2002      2728          move.l    D2,D0
00001B0C  E388      2729          lsl.l     #1,D0
00001B0E  41F9 0803 2730          lea       _BreakPointInstruction.L,A0
00001B12  014E      
00001B14  4270 0800 2731          clr.w     0(A0,D0.L)
                    2732   ; BreakPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00001B18  2002      2733          move.l    D2,D0
00001B1A  E588      2734          lsl.l     #2,D0
00001B1C  41F9 0803 2735          lea       _BreakPointSetOrCleared.L,A0
00001B20  015E      
00001B22  42B0 0800 2736          clr.l     0(A0,D0.L)
00001B26  5282      2737          addq.l    #1,D2
00001B28  60A6      2738          bra       KillAllBreakPoints_1
                    2739   KillAllBreakPoints_3:
00001B2A  241F      2740          move.l    (A7)+,D2
00001B2C  4E5E      2741          unlk      A6
00001B2E  4E75      2742          rts
                    2743   ; }
                    2744   ; //BreakPointDisplay() ;       // display the break points
                    2745   ; }
                    2746   ; void KillAllWatchPoints(void)
                    2747   ; {
                    2748   _KillAllWatchPoints:
00001B30  2F02      2749          move.l    D2,-(A7)
                    2750   ; int i ;
                    2751   ; for(i = 0; i < 8; i++)  {
00001B32  4282      2752          clr.l     D2
                    2753   KillAllWatchPoints_1:
00001B34  0C82 0000 2754          cmp.l     #8,D2
00001B38  0008      
00001B3A  6C20      2755          bge.s     KillAllWatchPoints_3
                    2756   ; WatchPointAddress[i] = 0 ;                                                             // set BP address to NULL
00001B3C  2002      2757          move.l    D2,D0
00001B3E  E588      2758          lsl.l     #2,D0
00001B40  41F9 0803 2759          lea       _WatchPointAddress.L,A0
00001B44  0182      
00001B46  42B0 0800 2760          clr.l     0(A0,D0.L)
                    2761   ; WatchPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00001B4A  2002      2762          move.l    D2,D0
00001B4C  E588      2763          lsl.l     #2,D0
00001B4E  41F9 0803 2764          lea       _WatchPointSetOrCleared.L,A0
00001B52  01A2      
00001B54  42B0 0800 2765          clr.l     0(A0,D0.L)
00001B58  5282      2766          addq.l    #1,D2
00001B5A  60D8      2767          bra       KillAllWatchPoints_1
                    2768   KillAllWatchPoints_3:
00001B5C  241F      2769          move.l    (A7)+,D2
00001B5E  4E75      2770          rts
                    2771   ; }
                    2772   ; //WatchPointDisplay() ;       // display the break points
                    2773   ; }
                    2774   ; void SetBreakPoint(void)
                    2775   ; {
                    2776   _SetBreakPoint:
00001B60  4E56 FFFC 2777          link      A6,#-4
00001B64  48E7 3830 2778          movem.l   D2/D3/D4/A2/A3,-(A7)
00001B68  45F9 0000 2779          lea       _printf.L,A2
00001B6C  3B88      
00001B6E  47F9 0803 2780          lea       _BreakPointSetOrCleared.L,A3
00001B72  015E      
                    2781   ; int i ;
                    2782   ; int BPNumber;
                    2783   ; int BPAddress;
                    2784   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2785   ; // see if any free break points
                    2786   ; for(i = 0; i < 8; i ++) {
00001B74  4282      2787          clr.l     D2
                    2788   SetBreakPoint_1:
00001B76  0C82 0000 2789          cmp.l     #8,D2
00001B7A  0008      
00001B7C  6C10      2790          bge.s     SetBreakPoint_3
                    2791   ; if( BreakPointSetOrCleared[i] == 0)
00001B7E  2002      2792          move.l    D2,D0
00001B80  E588      2793          lsl.l     #2,D0
00001B82  2033 0800 2794          move.l    0(A3,D0.L),D0
00001B86  6602      2795          bne.s     SetBreakPoint_4
                    2796   ; break ;         // if spare BP found allow user to set it
00001B88  6004      2797          bra.s     SetBreakPoint_3
                    2798   SetBreakPoint_4:
00001B8A  5282      2799          addq.l    #1,D2
00001B8C  60E8      2800          bra       SetBreakPoint_1
                    2801   SetBreakPoint_3:
                    2802   ; }
                    2803   ; if(i == 8) {
00001B8E  0C82 0000 2804          cmp.l     #8,D2
00001B92  0008      
00001B94  660E      2805          bne.s     SetBreakPoint_6
                    2806   ; printf("\r\nNo FREE Break Points.....") ;
00001B96  4879 0000 2807          pea       @m68kde~1_67.L
00001B9A  4ADA      
00001B9C  4E92      2808          jsr       (A2)
00001B9E  584F      2809          addq.w    #4,A7
                    2810   ; return ;
00001BA0  6000 00D6 2811          bra       SetBreakPoint_15
                    2812   SetBreakPoint_6:
                    2813   ; }
                    2814   ; printf("\r\nBreak Point Address: ") ;
00001BA4  4879 0000 2815          pea       @m68kde~1_68.L
00001BA8  4AF6      
00001BAA  4E92      2816          jsr       (A2)
00001BAC  584F      2817          addq.w    #4,A7
                    2818   ; BPAddress = Get8HexDigits(0) ;
00001BAE  42A7      2819          clr.l     -(A7)
00001BB0  4EB8 0B62 2820          jsr       _Get8HexDigits
00001BB4  584F      2821          addq.w    #4,A7
00001BB6  2600      2822          move.l    D0,D3
                    2823   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BPAddress) ;     // point to the instruction in the user program we are about to change
00001BB8  2803      2824          move.l    D3,D4
                    2825   ; if((BPAddress & 0x00000001) == 0x00000001)  {   // cannot set BP at an odd address
00001BBA  2003      2826          move.l    D3,D0
00001BBC  C0BC 0000 2827          and.l     #1,D0
00001BC0  0001      
00001BC2  0C80 0000 2828          cmp.l     #1,D0
00001BC6  0001      
00001BC8  660E      2829          bne.s     SetBreakPoint_9
                    2830   ; printf("\r\nError : Break Points CANNOT be set at ODD addresses") ;
00001BCA  4879 0000 2831          pea       @m68kde~1_69.L
00001BCE  4B0E      
00001BD0  4E92      2832          jsr       (A2)
00001BD2  584F      2833          addq.w    #4,A7
                    2834   ; return ;
00001BD4  6000 00A2 2835          bra       SetBreakPoint_15
                    2836   SetBreakPoint_9:
                    2837   ; }
                    2838   ; if(BPAddress < 0x00008000)  {   // cannot set BP in ROM
00001BD8  0C83 0000 2839          cmp.l     #32768,D3
00001BDC  8000      
00001BDE  640E      2840          bhs.s     SetBreakPoint_11
                    2841   ; printf("\r\nError : Break Points CANNOT be set for ROM in Range : [$0-$00007FFF]") ;
00001BE0  4879 0000 2842          pea       @m68kde~1_70.L
00001BE4  4B44      
00001BE6  4E92      2843          jsr       (A2)
00001BE8  584F      2844          addq.w    #4,A7
                    2845   ; return ;
00001BEA  6000 008C 2846          bra       SetBreakPoint_15
                    2847   SetBreakPoint_11:
                    2848   ; }
                    2849   ; // search for first free bp or existing same BP
                    2850   ; for(i = 0; i < 8; i++)  {
00001BEE  4282      2851          clr.l     D2
                    2852   SetBreakPoint_13:
00001BF0  0C82 0000 2853          cmp.l     #8,D2
00001BF4  0008      
00001BF6  6C00 0080 2854          bge       SetBreakPoint_15
                    2855   ; if(BreakPointAddress[i] == BPAddress)   {
00001BFA  2002      2856          move.l    D2,D0
00001BFC  E588      2857          lsl.l     #2,D0
00001BFE  41F9 0803 2858          lea       _BreakPointAddress.L,A0
00001C02  012E      
00001C04  B6B0 0800 2859          cmp.l     0(A0,D0.L),D3
00001C08  6610      2860          bne.s     SetBreakPoint_16
                    2861   ; printf("\r\nError: Break Point Already Exists at Address : %08x\r\n", BPAddress) ;
00001C0A  2F03      2862          move.l    D3,-(A7)
00001C0C  4879 0000 2863          pea       @m68kde~1_71.L
00001C10  4B8C      
00001C12  4E92      2864          jsr       (A2)
00001C14  504F      2865          addq.w    #8,A7
                    2866   ; return ;
00001C16  6000 0060 2867          bra       SetBreakPoint_15
                    2868   SetBreakPoint_16:
                    2869   ; }
                    2870   ; if(BreakPointSetOrCleared[i] == 0) {
00001C1A  2002      2871          move.l    D2,D0
00001C1C  E588      2872          lsl.l     #2,D0
00001C1E  2033 0800 2873          move.l    0(A3,D0.L),D0
00001C22  6600 004E 2874          bne       SetBreakPoint_18
                    2875   ; // set BP here
                    2876   ; BreakPointSetOrCleared[i] = 1 ;                                 // mark this breakpoint as set
00001C26  2002      2877          move.l    D2,D0
00001C28  E588      2878          lsl.l     #2,D0
00001C2A  27BC 0000 2879          move.l    #1,0(A3,D0.L)
00001C2E  0001 0800 
                    2880   ; BreakPointInstruction[i] = *ProgramBreakPointAddress ;          // copy the user program instruction here so we can put it back afterwards
00001C32  2044      2881          move.l    D4,A0
00001C34  2002      2882          move.l    D2,D0
00001C36  E388      2883          lsl.l     #1,D0
00001C38  43F9 0803 2884          lea       _BreakPointInstruction.L,A1
00001C3C  014E      
00001C3E  3390 0800 2885          move.w    (A0),0(A1,D0.L)
                    2886   ; printf("\r\nBreak Point Set at Address: [$%08x]", ProgramBreakPointAddress) ;
00001C42  2F04      2887          move.l    D4,-(A7)
00001C44  4879 0000 2888          pea       @m68kde~1_72.L
00001C48  4BC4      
00001C4A  4E92      2889          jsr       (A2)
00001C4C  504F      2890          addq.w    #8,A7
                    2891   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e)    ;   // put a Trap14 instruction at the user specified address
00001C4E  2044      2892          move.l    D4,A0
00001C50  30BC 4E4E 2893          move.w    #20046,(A0)
                    2894   ; BreakPointAddress[i] = BPAddress ;                              // record the address of this break point in the debugger
00001C54  2002      2895          move.l    D2,D0
00001C56  E588      2896          lsl.l     #2,D0
00001C58  41F9 0803 2897          lea       _BreakPointAddress.L,A0
00001C5C  012E      
00001C5E  2183 0800 2898          move.l    D3,0(A0,D0.L)
                    2899   ; printf("\r\n") ;
00001C62  4879 0000 2900          pea       @m68kde~1_6.L
00001C66  44D8      
00001C68  4E92      2901          jsr       (A2)
00001C6A  584F      2902          addq.w    #4,A7
                    2903   ; BreakPointDisplay() ;       // display the break points
00001C6C  4EB8 1730 2904          jsr       _BreakPointDisplay
                    2905   ; return ;
00001C70  6006      2906          bra.s     SetBreakPoint_15
                    2907   SetBreakPoint_18:
00001C72  5282      2908          addq.l    #1,D2
00001C74  6000 FF7A 2909          bra       SetBreakPoint_13
                    2910   SetBreakPoint_15:
00001C78  4CDF 0C1C 2911          movem.l   (A7)+,D2/D3/D4/A2/A3
00001C7C  4E5E      2912          unlk      A6
00001C7E  4E75      2913          rts
                    2914   ; }
                    2915   ; }
                    2916   ; }
                    2917   ; void SetWatchPoint(void)
                    2918   ; {
                    2919   _SetWatchPoint:
00001C80  4E56 FFF8 2920          link      A6,#-8
00001C84  48E7 3030 2921          movem.l   D2/D3/A2/A3,-(A7)
00001C88  45F9 0000 2922          lea       _printf.L,A2
00001C8C  3B88      
00001C8E  47F9 0803 2923          lea       _WatchPointSetOrCleared.L,A3
00001C92  01A2      
                    2924   ; int i ;
                    2925   ; int WPNumber;
                    2926   ; int WPAddress;
                    2927   ; volatile unsigned short int *ProgramWatchPointAddress ;
                    2928   ; // see if any free break points
                    2929   ; for(i = 0; i < 8; i ++) {
00001C94  4282      2930          clr.l     D2
                    2931   SetWatchPoint_1:
00001C96  0C82 0000 2932          cmp.l     #8,D2
00001C9A  0008      
00001C9C  6C10      2933          bge.s     SetWatchPoint_3
                    2934   ; if( WatchPointSetOrCleared[i] == 0)
00001C9E  2002      2935          move.l    D2,D0
00001CA0  E588      2936          lsl.l     #2,D0
00001CA2  2033 0800 2937          move.l    0(A3,D0.L),D0
00001CA6  6602      2938          bne.s     SetWatchPoint_4
                    2939   ; break ;         // if spare WP found allow user to set it
00001CA8  6004      2940          bra.s     SetWatchPoint_3
                    2941   SetWatchPoint_4:
00001CAA  5282      2942          addq.l    #1,D2
00001CAC  60E8      2943          bra       SetWatchPoint_1
                    2944   SetWatchPoint_3:
                    2945   ; }
                    2946   ; if(i == 8) {
00001CAE  0C82 0000 2947          cmp.l     #8,D2
00001CB2  0008      
00001CB4  660E      2948          bne.s     SetWatchPoint_6
                    2949   ; printf("\r\nNo FREE Watch Points.....") ;
00001CB6  4879 0000 2950          pea       @m68kde~1_73.L
00001CBA  4BEA      
00001CBC  4E92      2951          jsr       (A2)
00001CBE  584F      2952          addq.w    #4,A7
                    2953   ; return ;
00001CC0  6000 008C 2954          bra       SetWatchPoint_11
                    2955   SetWatchPoint_6:
                    2956   ; }
                    2957   ; printf("\r\nWatch Point Address: ") ;
00001CC4  4879 0000 2958          pea       @m68kde~1_74.L
00001CC8  4C06      
00001CCA  4E92      2959          jsr       (A2)
00001CCC  584F      2960          addq.w    #4,A7
                    2961   ; WPAddress = Get8HexDigits(0) ;
00001CCE  42A7      2962          clr.l     -(A7)
00001CD0  4EB8 0B62 2963          jsr       _Get8HexDigits
00001CD4  584F      2964          addq.w    #4,A7
00001CD6  2600      2965          move.l    D0,D3
                    2966   ; // search for first free wp or existing same wp
                    2967   ; for(i = 0; i < 8; i++)  {
00001CD8  4282      2968          clr.l     D2
                    2969   SetWatchPoint_9:
00001CDA  0C82 0000 2970          cmp.l     #8,D2
00001CDE  0008      
00001CE0  6C00 006C 2971          bge       SetWatchPoint_11
                    2972   ; if(WatchPointAddress[i] == WPAddress && WPAddress != 0)   {     //so we can set a wp at 0
00001CE4  2002      2973          move.l    D2,D0
00001CE6  E588      2974          lsl.l     #2,D0
00001CE8  41F9 0803 2975          lea       _WatchPointAddress.L,A0
00001CEC  0182      
00001CEE  B6B0 0800 2976          cmp.l     0(A0,D0.L),D3
00001CF2  6614      2977          bne.s     SetWatchPoint_12
00001CF4  4A83      2978          tst.l     D3
00001CF6  6710      2979          beq.s     SetWatchPoint_12
                    2980   ; printf("\r\nError: Watch Point Already Set at Address : %08x\r\n", WPAddress) ;
00001CF8  2F03      2981          move.l    D3,-(A7)
00001CFA  4879 0000 2982          pea       @m68kde~1_75.L
00001CFE  4C1E      
00001D00  4E92      2983          jsr       (A2)
00001D02  504F      2984          addq.w    #8,A7
                    2985   ; return ;
00001D04  6000 0048 2986          bra       SetWatchPoint_11
                    2987   SetWatchPoint_12:
                    2988   ; }
                    2989   ; if(WatchPointSetOrCleared[i] == 0) {
00001D08  2002      2990          move.l    D2,D0
00001D0A  E588      2991          lsl.l     #2,D0
00001D0C  2033 0800 2992          move.l    0(A3,D0.L),D0
00001D10  6600 0038 2993          bne       SetWatchPoint_14
                    2994   ; WatchPointSetOrCleared[i] = 1 ;                                 // mark this watchpoint as set
00001D14  2002      2995          move.l    D2,D0
00001D16  E588      2996          lsl.l     #2,D0
00001D18  27BC 0000 2997          move.l    #1,0(A3,D0.L)
00001D1C  0001 0800 
                    2998   ; printf("\r\nWatch Point Set at Address: [$%08x]", WPAddress) ;
00001D20  2F03      2999          move.l    D3,-(A7)
00001D22  4879 0000 3000          pea       @m68kde~1_76.L
00001D26  4C54      
00001D28  4E92      3001          jsr       (A2)
00001D2A  504F      3002          addq.w    #8,A7
                    3003   ; WatchPointAddress[i] = WPAddress ;                              // record the address of this watch point in the debugger
00001D2C  2002      3004          move.l    D2,D0
00001D2E  E588      3005          lsl.l     #2,D0
00001D30  41F9 0803 3006          lea       _WatchPointAddress.L,A0
00001D34  0182      
00001D36  2183 0800 3007          move.l    D3,0(A0,D0.L)
                    3008   ; printf("\r\n") ;
00001D3A  4879 0000 3009          pea       @m68kde~1_6.L
00001D3E  44D8      
00001D40  4E92      3010          jsr       (A2)
00001D42  584F      3011          addq.w    #4,A7
                    3012   ; WatchPointDisplay() ;       // display the break points
00001D44  4EB8 1804 3013          jsr       _WatchPointDisplay
                    3014   ; return ;
00001D48  6004      3015          bra.s     SetWatchPoint_11
                    3016   SetWatchPoint_14:
00001D4A  5282      3017          addq.l    #1,D2
00001D4C  608C      3018          bra       SetWatchPoint_9
                    3019   SetWatchPoint_11:
00001D4E  4CDF 0C0C 3020          movem.l   (A7)+,D2/D3/A2/A3
00001D52  4E5E      3021          unlk      A6
00001D54  4E75      3022          rts
                    3023   ; }
                    3024   ; }
                    3025   ; }
                    3026   ; void HandleBreakPoint(void)
                    3027   ; {
                    3028   _HandleBreakPoint:
00001D56  4E56 FFFC 3029          link      A6,#-4
00001D5A  48E7 0038 3030          movem.l   A2/A3/A4,-(A7)
00001D5E  45F9 0803 3031          lea       _i.L,A2
00001D62  00C4      
00001D64  47F9 0000 3032          lea       _printf.L,A3
00001D68  3B88      
00001D6A  49F9 0803 3033          lea       _PC.L,A4
00001D6E  0120      
                    3034   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3035   ; // now we have to put the break point back to run the instruction
                    3036   ; // PC will contain the address of the TRAP instruction but advanced by two bytes so lets play with that
                    3037   ; PC = PC - 2 ;  // ready for user to resume after reaching breakpoint
00001D70  5594      3038          subq.l    #2,(A4)
                    3039   ; printf("\r\n\r\n\r\n\r\n@BREAKPOINT") ;
00001D72  4879 0000 3040          pea       @m68kde~1_77.L
00001D76  4C7A      
00001D78  4E93      3041          jsr       (A3)
00001D7A  584F      3042          addq.w    #4,A7
                    3043   ; printf("\r\nSingle Step : [ON]") ;
00001D7C  4879 0000 3044          pea       @m68kde~1_78.L
00001D80  4C8E      
00001D82  4E93      3045          jsr       (A3)
00001D84  584F      3046          addq.w    #4,A7
                    3047   ; printf("\r\nBreakPoints : [Enabled]") ;
00001D86  4879 0000 3048          pea       @m68kde~1_79.L
00001D8A  4CA4      
00001D8C  4E93      3049          jsr       (A3)
00001D8E  584F      3050          addq.w    #4,A7
                    3051   ; // now clear the break point (put original instruction back)
                    3052   ; ProgramBreakPointAddress = PC ;
00001D90  2D54 FFFC 3053          move.l    (A4),-4(A6)
                    3054   ; for(i = 0; i < 8; i ++) {
00001D94  4292      3055          clr.l     (A2)
                    3056   HandleBreakPoint_1:
00001D96  2012      3057          move.l    (A2),D0
00001D98  0C80 0000 3058          cmp.l     #8,D0
00001D9C  0008      
00001D9E  6400 0056 3059          bhs       HandleBreakPoint_3
                    3060   ; if(BreakPointAddress[i] == PC) {        // if we have found the breakpoint
00001DA2  2012      3061          move.l    (A2),D0
00001DA4  E588      3062          lsl.l     #2,D0
00001DA6  41F9 0803 3063          lea       _BreakPointAddress.L,A0
00001DAA  012E      
00001DAC  2230 0800 3064          move.l    0(A0,D0.L),D1
00001DB0  B294      3065          cmp.l     (A4),D1
00001DB2  6600 003E 3066          bne       HandleBreakPoint_4
                    3067   ; BreakPointAddress[i] = 0 ;
00001DB6  2012      3068          move.l    (A2),D0
00001DB8  E588      3069          lsl.l     #2,D0
00001DBA  41F9 0803 3070          lea       _BreakPointAddress.L,A0
00001DBE  012E      
00001DC0  42B0 0800 3071          clr.l     0(A0,D0.L)
                    3072   ; BreakPointSetOrCleared[i] = 0 ;
00001DC4  2012      3073          move.l    (A2),D0
00001DC6  E588      3074          lsl.l     #2,D0
00001DC8  41F9 0803 3075          lea       _BreakPointSetOrCleared.L,A0
00001DCC  015E      
00001DCE  42B0 0800 3076          clr.l     0(A0,D0.L)
                    3077   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
00001DD2  2012      3078          move.l    (A2),D0
00001DD4  E388      3079          lsl.l     #1,D0
00001DD6  41F9 0803 3080          lea       _BreakPointInstruction.L,A0
00001DDA  014E      
00001DDC  226E FFFC 3081          move.l    -4(A6),A1
00001DE0  32B0 0800 3082          move.w    0(A0,D0.L),(A1)
                    3083   ; BreakPointInstruction[i] = 0 ;
00001DE4  2012      3084          move.l    (A2),D0
00001DE6  E388      3085          lsl.l     #1,D0
00001DE8  41F9 0803 3086          lea       _BreakPointInstruction.L,A0
00001DEC  014E      
00001DEE  4270 0800 3087          clr.w     0(A0,D0.L)
                    3088   HandleBreakPoint_4:
00001DF2  5292      3089          addq.l    #1,(A2)
00001DF4  60A0      3090          bra       HandleBreakPoint_1
                    3091   HandleBreakPoint_3:
                    3092   ; }
                    3093   ; }
                    3094   ; DumpRegisters() ;
00001DF6  4EB8 0F82 3095          jsr       _DumpRegisters
                    3096   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
00001DFA  4879 0000 3097          pea       @m68kde~1_41.L
00001DFE  4820      
00001E00  4E93      3098          jsr       (A3)
00001E02  584F      3099          addq.w    #4,A7
                    3100   ; printf("\r\nPress <ESC> to Resume User Program\r\n") ;
00001E04  4879 0000 3101          pea       @m68kde~1_80.L
00001E08  4CBE      
00001E0A  4E93      3102          jsr       (A3)
00001E0C  584F      3103          addq.w    #4,A7
                    3104   ; menu() ;
00001E0E  4EB9 0000 3105          jsr       _menu
00001E12  1FD6      
00001E14  4CDF 1C00 3106          movem.l   (A7)+,A2/A3/A4
00001E18  4E5E      3107          unlk      A6
00001E1A  4E75      3108          rts
                    3109   ; }
                    3110   ; void UnknownCommand()
                    3111   ; {
                    3112   _UnknownCommand:
                    3113   ; printf("\r\nUnknown Command.....\r\n") ;
00001E1C  4879 0000 3114          pea       @m68kde~1_81.L
00001E20  4CE6      
00001E22  4EB9 0000 3115          jsr       _printf
00001E26  3B88      
00001E28  584F      3116          addq.w    #4,A7
                    3117   ; Help() ;
00001E2A  4EB9 0000 3118          jsr       _Help
00001E2E  1F40      
00001E30  4E75      3119          rts
                    3120   ; }
                    3121   ; // system when the users program executes a TRAP #15 instruction to halt program and return to debug monitor
                    3122   ; void CallDebugMonitor(void)
                    3123   ; {
                    3124   _CallDebugMonitor:
                    3125   ; printf("\r\nProgram Ended (TRAP #15)....") ;
00001E32  4879 0000 3126          pea       @m68kde~1_82.L
00001E36  4D00      
00001E38  4EB9 0000 3127          jsr       _printf
00001E3C  3B88      
00001E3E  584F      3128          addq.w    #4,A7
                    3129   ; menu();
00001E40  4EB9 0000 3130          jsr       _menu
00001E44  1FD6      
00001E46  4E75      3131          rts
                    3132   ; }
                    3133   ; void Breakpoint(void)
                    3134   ; {
                    3135   _Breakpoint:
00001E48  2F02      3136          move.l    D2,-(A7)
                    3137   ; char c;
                    3138   ; c = toupper(_getch());
00001E4A  2F00      3139          move.l    D0,-(A7)
00001E4C  4EB8 0A26 3140          jsr       __getch
00001E50  2200      3141          move.l    D0,D1
00001E52  201F      3142          move.l    (A7)+,D0
00001E54  2F01      3143          move.l    D1,-(A7)
00001E56  4EB9 0000 3144          jsr       _toupper
00001E5A  3B5C      
00001E5C  584F      3145          addq.w    #4,A7
00001E5E  1400      3146          move.b    D0,D2
                    3147   ; if( c == (char)('D'))                                      // BreakPoint Display
00001E60  0C02 0044 3148          cmp.b     #68,D2
00001E64  6608      3149          bne.s     Breakpoint_1
                    3150   ; BreakPointDisplay() ;
00001E66  4EB8 1730 3151          jsr       _BreakPointDisplay
00001E6A  6000 0054 3152          bra       Breakpoint_10
                    3153   Breakpoint_1:
                    3154   ; else if(c == (char)('K')) {                                 // breakpoint Kill
00001E6E  0C02 004B 3155          cmp.b     #75,D2
00001E72  6630      3156          bne.s     Breakpoint_3
                    3157   ; printf("\r\nKill All Break Points...(y/n)?") ;
00001E74  4879 0000 3158          pea       @m68kde~1_83.L
00001E78  4D20      
00001E7A  4EB9 0000 3159          jsr       _printf
00001E7E  3B88      
00001E80  584F      3160          addq.w    #4,A7
                    3161   ; c = toupper(_getch());
00001E82  2F00      3162          move.l    D0,-(A7)
00001E84  4EB8 0A26 3163          jsr       __getch
00001E88  2200      3164          move.l    D0,D1
00001E8A  201F      3165          move.l    (A7)+,D0
00001E8C  2F01      3166          move.l    D1,-(A7)
00001E8E  4EB9 0000 3167          jsr       _toupper
00001E92  3B5C      
00001E94  584F      3168          addq.w    #4,A7
00001E96  1400      3169          move.b    D0,D2
                    3170   ; if(c == (char)('Y'))
00001E98  0C02 0059 3171          cmp.b     #89,D2
00001E9C  6604      3172          bne.s     Breakpoint_5
                    3173   ; KillAllBreakPoints() ;
00001E9E  4EB8 1AC8 3174          jsr       _KillAllBreakPoints
                    3175   Breakpoint_5:
00001EA2  601C      3176          bra.s     Breakpoint_10
                    3177   Breakpoint_3:
                    3178   ; }
                    3179   ; else if(c == (char)('S')) {
00001EA4  0C02 0053 3180          cmp.b     #83,D2
00001EA8  6606      3181          bne.s     Breakpoint_7
                    3182   ; SetBreakPoint() ;
00001EAA  4EB8 1B60 3183          jsr       _SetBreakPoint
00001EAE  6010      3184          bra.s     Breakpoint_10
                    3185   Breakpoint_7:
                    3186   ; }
                    3187   ; else if(c == (char)('C')) {
00001EB0  0C02 0043 3188          cmp.b     #67,D2
00001EB4  6606      3189          bne.s     Breakpoint_9
                    3190   ; BreakPointClear() ;
00001EB6  4EB8 18B0 3191          jsr       _BreakPointClear
00001EBA  6004      3192          bra.s     Breakpoint_10
                    3193   Breakpoint_9:
                    3194   ; }
                    3195   ; else
                    3196   ; UnknownCommand() ;
00001EBC  4EB8 1E1C 3197          jsr       _UnknownCommand
                    3198   Breakpoint_10:
00001EC0  241F      3199          move.l    (A7)+,D2
00001EC2  4E75      3200          rts
                    3201   ; }
                    3202   ; void Watchpoint(void)
                    3203   ; {
                    3204   _Watchpoint:
00001EC4  2F02      3205          move.l    D2,-(A7)
                    3206   ; char c;
                    3207   ; c = toupper(_getch());
00001EC6  2F00      3208          move.l    D0,-(A7)
00001EC8  4EB8 0A26 3209          jsr       __getch
00001ECC  2200      3210          move.l    D0,D1
00001ECE  201F      3211          move.l    (A7)+,D0
00001ED0  2F01      3212          move.l    D1,-(A7)
00001ED2  4EB9 0000 3213          jsr       _toupper
00001ED6  3B5C      
00001ED8  584F      3214          addq.w    #4,A7
00001EDA  1400      3215          move.b    D0,D2
                    3216   ; if( c == (char)('D'))                                      // WatchPoint Display
00001EDC  0C02 0044 3217          cmp.b     #68,D2
00001EE0  6608      3218          bne.s     Watchpoint_1
                    3219   ; WatchPointDisplay() ;
00001EE2  4EB8 1804 3220          jsr       _WatchPointDisplay
00001EE6  6000 0054 3221          bra       Watchpoint_10
                    3222   Watchpoint_1:
                    3223   ; else if(c == (char)('K')) {                                 // wtahcpoint Kill
00001EEA  0C02 004B 3224          cmp.b     #75,D2
00001EEE  6630      3225          bne.s     Watchpoint_3
                    3226   ; printf("\r\nKill All Watch Points...(y/n)?") ;
00001EF0  4879 0000 3227          pea       @m68kde~1_84.L
00001EF4  4D42      
00001EF6  4EB9 0000 3228          jsr       _printf
00001EFA  3B88      
00001EFC  584F      3229          addq.w    #4,A7
                    3230   ; c = toupper(_getch());
00001EFE  2F00      3231          move.l    D0,-(A7)
00001F00  4EB8 0A26 3232          jsr       __getch
00001F04  2200      3233          move.l    D0,D1
00001F06  201F      3234          move.l    (A7)+,D0
00001F08  2F01      3235          move.l    D1,-(A7)
00001F0A  4EB9 0000 3236          jsr       _toupper
00001F0E  3B5C      
00001F10  584F      3237          addq.w    #4,A7
00001F12  1400      3238          move.b    D0,D2
                    3239   ; if(c == (char)('Y'))
00001F14  0C02 0059 3240          cmp.b     #89,D2
00001F18  6604      3241          bne.s     Watchpoint_5
                    3242   ; KillAllWatchPoints() ;
00001F1A  4EB8 1B30 3243          jsr       _KillAllWatchPoints
                    3244   Watchpoint_5:
00001F1E  601C      3245          bra.s     Watchpoint_10
                    3246   Watchpoint_3:
                    3247   ; }
                    3248   ; else if(c == (char)('S')) {
00001F20  0C02 0053 3249          cmp.b     #83,D2
00001F24  6606      3250          bne.s     Watchpoint_7
                    3251   ; SetWatchPoint() ;
00001F26  4EB8 1C80 3252          jsr       _SetWatchPoint
00001F2A  6010      3253          bra.s     Watchpoint_10
                    3254   Watchpoint_7:
                    3255   ; }
                    3256   ; else if(c == (char)('C')) {
00001F2C  0C02 0043 3257          cmp.b     #67,D2
00001F30  6606      3258          bne.s     Watchpoint_9
                    3259   ; WatchPointClear() ;
00001F32  4EB8 198A 3260          jsr       _WatchPointClear
00001F36  6004      3261          bra.s     Watchpoint_10
                    3262   Watchpoint_9:
                    3263   ; }
                    3264   ; else
                    3265   ; UnknownCommand() ;
00001F38  4EB8 1E1C 3266          jsr       _UnknownCommand
                    3267   Watchpoint_10:
00001F3C  241F      3268          move.l    (A7)+,D2
00001F3E  4E75      3269          rts
                    3270   ; }
                    3271   ; void Help(void)
                    3272   ; {
                    3273   _Help:
00001F40  48E7 2020 3274          movem.l   D2/A2,-(A7)
00001F44  45F9 0000 3275          lea       _printf.L,A2
00001F48  3B88      
                    3276   ; char *banner = "\r\n----------------------------------------------------------------" ;
00001F4A  41F9 0000 3277          lea       @m68kde~1_85.L,A0
00001F4E  4D64      
00001F50  2408      3278          move.l    A0,D2
                    3279   ; printf(banner) ;
00001F52  2F02      3280          move.l    D2,-(A7)
00001F54  4E92      3281          jsr       (A2)
00001F56  584F      3282          addq.w    #4,A7
                    3283   ; printf("\r\n  Final Project") ;
00001F58  4879 0000 3284          pea       @m68kde~1_86.L
00001F5C  4DA8      
00001F5E  4E92      3285          jsr       (A2)
00001F60  584F      3286          addq.w    #4,A7
                    3287   ; printf(banner) ;
00001F62  2F02      3288          move.l    D2,-(A7)
00001F64  4E92      3289          jsr       (A2)
00001F66  584F      3290          addq.w    #4,A7
                    3291   ; printf("\r\n  H    - Say Hello World") ;
00001F68  4879 0000 3292          pea       @m68kde~1_87.L
00001F6C  4DBA      
00001F6E  4E92      3293          jsr       (A2)
00001F70  584F      3294          addq.w    #4,A7
                    3295   ; printf(banner) ;
00001F72  2F02      3296          move.l    D2,-(A7)
00001F74  4E92      3297          jsr       (A2)
00001F76  584F      3298          addq.w    #4,A7
                    3299   ; printf("\r\n  T    - Run Tetris Game") ;
00001F78  4879 0000 3300          pea       @m68kde~1_88.L
00001F7C  4DD6      
00001F7E  4E92      3301          jsr       (A2)
00001F80  584F      3302          addq.w    #4,A7
                    3303   ; printf(banner) ;
00001F82  2F02      3304          move.l    D2,-(A7)
00001F84  4E92      3305          jsr       (A2)
00001F86  584F      3306          addq.w    #4,A7
00001F88  4CDF 0404 3307          movem.l   (A7)+,D2/A2
00001F8C  4E75      3308          rts
                    3309   ; }
                    3310   ; void writeVGA_debug(int addr, char data, char z) {
                    3311   _writeVGA_debug:
00001F8E  4E56 0000 3312          link      A6,#0
00001F92  2F02      3313          move.l    D2,-(A7)
                    3314   ; char *VGA = (char *)(VGA_ADDRESS + addr * 2);
00001F94  203C FFFF 3315          move.l    #-65536,D0
00001F98  0000      
00001F9A  2F2E 0008 3316          move.l    8(A6),-(A7)
00001F9E  4878 0002 3317          pea       2
00001FA2  4EB9 0000 3318          jsr       LMUL
00001FA6  3A28      
00001FA8  2217      3319          move.l    (A7),D1
00001FAA  504F      3320          addq.w    #8,A7
00001FAC  D081      3321          add.l     D1,D0
00001FAE  2400      3322          move.l    D0,D2
                    3323   ; *(char *)(0xFF030000) = (0xF2 & 0xF8) | z;
00001FB0  303C 00F0 3324          move.w    #240,D0
00001FB4  122E 0013 3325          move.b    19(A6),D1
00001FB8  4881      3326          ext.w     D1
00001FBA  8041      3327          or.w      D1,D0
00001FBC  13C0 FF03 3328          move.b    D0,-16580608
00001FC0  0000      
                    3329   ; *(VGA) = data;
00001FC2  2042      3330          move.l    D2,A0
00001FC4  10AE 000F 3331          move.b    15(A6),(A0)
                    3332   ; *(VGA + 1) = data;
00001FC8  2042      3333          move.l    D2,A0
00001FCA  116E 000F 3334          move.b    15(A6),1(A0)
00001FCE  0001      
00001FD0  241F      3335          move.l    (A7)+,D2
00001FD2  4E5E      3336          unlk      A6
00001FD4  4E75      3337          rts
                    3338   ; }
                    3339   ; void menu(void)
                    3340   ; {
                    3341   _menu:
00001FD6  4E56 FFF4 3342          link      A6,#-12
00001FDA  48E7 3C20 3343          movem.l   D2/D3/D4/D5/A2,-(A7)
00001FDE  45F9 0000 3344          lea       _printf.L,A2
00001FE2  3B88      
                    3345   ; char c, data, z;
                    3346   ; int c1 ;
                    3347   ; int addr, i, j;
                    3348   ; while(1)    {
                    3349   menu_1:
                    3350   ; FlushKeyboard() ;               // dump unread characters from keyboard
00001FE4  4EB8 0A64 3351          jsr       _FlushKeyboard
                    3352   ; printf("\r\n#") ;
00001FE8  4879 0000 3353          pea       @m68kde~1_89.L
00001FEC  4DF2      
00001FEE  4E92      3354          jsr       (A2)
00001FF0  584F      3355          addq.w    #4,A7
                    3356   ; c = toupper(_getch());
00001FF2  2F00      3357          move.l    D0,-(A7)
00001FF4  4EB8 0A26 3358          jsr       __getch
00001FF8  2200      3359          move.l    D0,D1
00001FFA  201F      3360          move.l    (A7)+,D0
00001FFC  2F01      3361          move.l    D1,-(A7)
00001FFE  4EB9 0000 3362          jsr       _toupper
00002002  3B5C      
00002004  584F      3363          addq.w    #4,A7
00002006  1A00      3364          move.b    D0,D5
                    3365   ; if ( c == (char)('T'))  {
00002008  0C05 0054 3366          cmp.b     #84,D5
0000200C  6614      3367          bne.s     menu_4
                    3368   ; printf("\nRunning Tetris Game\n");
0000200E  4879 0000 3369          pea       @m68kde~1_90.L
00002012  4DF6      
00002014  4E92      3370          jsr       (A2)
00002016  584F      3371          addq.w    #4,A7
                    3372   ; tetris_main();
00002018  4EB9 0000 3373          jsr       _tetris_main
0000201C  3676      
                    3374   ; continue;
0000201E  6000 00BE 3375          bra       menu_2
                    3376   menu_4:
                    3377   ; }
                    3378   ; if ( c == (char)('H'))  {
00002022  0C05 0048 3379          cmp.b     #72,D5
00002026  6616      3380          bne.s     menu_6
                    3381   ; printf("\nSaying Hello World\n");
00002028  4879 0000 3382          pea       @m68kde~1_91.L
0000202C  4E0C      
0000202E  4E92      3383          jsr       (A2)
00002030  584F      3384          addq.w    #4,A7
                    3385   ; say_hello();
00002032  4EB8 098A 3386          jsr       _say_hello
                    3387   ; say_world();
00002036  4EB8 09B0 3388          jsr       _say_world
                    3389   ; continue;
0000203A  6000 00A2 3390          bra       menu_2
                    3391   menu_6:
                    3392   ; }
                    3393   ; if ( c == (char)('V'))  {
0000203E  0C05 0056 3394          cmp.b     #86,D5
00002042  6600 007A 3395          bne       menu_8
                    3396   ; printf("\nMemory Change in VGA\n");
00002046  4879 0000 3397          pea       @m68kde~1_92.L
0000204A  4E22      
0000204C  4E92      3398          jsr       (A2)
0000204E  584F      3399          addq.w    #4,A7
                    3400   ; // while (1) {
                    3401   ; //     printf("\nAddress: 0x0000 to 0x0FFF");
                    3402   ; //     addr = Get4HexDigits(0);
                    3403   ; //     printf("\nData: ");
                    3404   ; //     data = Get2HexDigits(0);
                    3405   ; //     writeVGA(addr, data);
                    3406   ; // }
                    3407   ; j = 0;
00002050  4282      3408          clr.l     D2
                    3409   ; z = 0;
00002052  4204      3410          clr.b     D4
                    3411   ; // 一排80个
                    3412   ; // 一共40排
                    3413   ; for (i = 0; i <= 0xFFF; i++) {
00002054  4283      3414          clr.l     D3
                    3415   menu_10:
00002056  0C83 0000 3416          cmp.l     #4095,D3
0000205A  0FFF      
0000205C  6E00 005E 3417          bgt       menu_12
                    3418   ; data = (j + 'A');
00002060  2002      3419          move.l    D2,D0
00002062  0680 0000 3420          add.l     #65,D0
00002066  0041      
00002068  1D40 FFF7 3421          move.b    D0,-9(A6)
                    3422   ; writeVGA_debug(i, data, z);
0000206C  4884      3423          ext.w     D4
0000206E  48C4      3424          ext.l     D4
00002070  2F04      3425          move.l    D4,-(A7)
00002072  122E FFF7 3426          move.b    -9(A6),D1
00002076  4881      3427          ext.w     D1
00002078  48C1      3428          ext.l     D1
0000207A  2F01      3429          move.l    D1,-(A7)
0000207C  2F03      3430          move.l    D3,-(A7)
0000207E  4EB8 1F8E 3431          jsr       _writeVGA_debug
00002082  DEFC 000C 3432          add.w     #12,A7
                    3433   ; ++j; ++z;
00002086  5282      3434          addq.l    #1,D2
00002088  5204      3435          addq.b    #1,D4
                    3436   ; if (z == 8) z = 1;
0000208A  0C04 0008 3437          cmp.b     #8,D4
0000208E  6602      3438          bne.s     menu_13
00002090  7801      3439          moveq     #1,D4
                    3440   menu_13:
                    3441   ; if (j == 26) j = 0;
00002092  0C82 0000 3442          cmp.l     #26,D2
00002096  001A      
00002098  6602      3443          bne.s     menu_15
0000209A  4282      3444          clr.l     D2
                    3445   menu_15:
                    3446   ; printf("\nAddress: 0x%04X, Data: %c", i, j + 'A');
0000209C  2202      3447          move.l    D2,D1
0000209E  0681 0000 3448          add.l     #65,D1
000020A2  0041      
000020A4  2F01      3449          move.l    D1,-(A7)
000020A6  2F03      3450          move.l    D3,-(A7)
000020A8  4879 0000 3451          pea       @m68kde~1_93.L
000020AC  4E3A      
000020AE  4E92      3452          jsr       (A2)
000020B0  DEFC 000C 3453          add.w     #12,A7
                    3454   ; Wait1ms();
000020B4  4EB8 08C6 3455          jsr       _Wait1ms
000020B8  5283      3456          addq.l    #1,D3
000020BA  609A      3457          bra       menu_10
                    3458   menu_12:
                    3459   ; }
                    3460   ; continue;
000020BC  6020      3461          bra.s     menu_2
                    3462   menu_8:
                    3463   ; }
                    3464   ; if ( c == (char)('M'))  {
000020BE  0C05 004D 3465          cmp.b     #77,D5
000020C2  6616      3466          bne.s     menu_17
                    3467   ; while (1){
                    3468   menu_19:
                    3469   ; *(char *)(VGA_ADDRESS) = 0x41;
000020C4  11FC 0041 3470          move.b    #65,-65536
000020C8  0000      
                    3471   ; printf("\nAddress: %ld", VGA_ADDRESS);
000020CA  4878 0000 3472          pea       -65536
000020CE  4879 0000 3473          pea       @m68kde~1_94.L
000020D2  4E56      
000020D4  4E92      3474          jsr       (A2)
000020D6  504F      3475          addq.w    #8,A7
000020D8  60EA      3476          bra       menu_19
                    3477   menu_17:
                    3478   ; }
                    3479   ; continue;
                    3480   ; }
                    3481   ; // if ( c == (char)('S'))  {
                    3482   ; //     printf("\nSasha\n");
                    3483   ; //     say_Sasha();
                    3484   ; //     cursor_x = cx;
                    3485   ; //     cursor_y = cy;
                    3486   ; //     while (1) {
                    3487   ; //         FlushKeyboard() ;               // dump unread characters from keyboard
                    3488   ; //         printf("\r\n#") ;
                    3489   ; //         c = toupper(_getch());
                    3490   ; //         if (c == (char)('W')) {
                    3491   ; //             cy -= 1;
                    3492   ; //             printf("\nMove Up, cy = %d\n", cy);
                    3493   ; //             cursor_y = cy;
                    3494   ; //             continue;
                    3495   ; //         }
                    3496   ; //         if (c == (char)('S')) {
                    3497   ; //             cy += 1;
                    3498   ; //             printf("\nMove Down, cy = %d\n", cy);
                    3499   ; //             cursor_y = cy;
                    3500   ; //             continue;
                    3501   ; //         }
                    3502   ; //         if (c == (char)('A')) {
                    3503   ; //             cx -= 1;
                    3504   ; //             printf("\nMove Left, cx = %d\n", cx);
                    3505   ; //             cursor_x = cx;
                    3506   ; //             continue;
                    3507   ; //         }
                    3508   ; //         if (c == (char)('D')) {
                    3509   ; //             cx += 1;
                    3510   ; //             printf("\nMove Right, cx = %d\n", cx);
                    3511   ; //             cursor_x = cx;
                    3512   ; //             continue;
                    3513   ; //         }
                    3514   ; //     }
                    3515   ; //     continue;
                    3516   ; // }
                    3517   ; UnknownCommand() ;
000020DA  4EB8 1E1C 3518          jsr       _UnknownCommand
                    3519   menu_2:
000020DE  6000 FF04 3520          bra       menu_1
                    3521   ; }
                    3522   ; }
                    3523   ; void PrintErrorMessageandAbort(char *string) {
                    3524   _PrintErrorMessageandAbort:
000020E2  4E56 0000 3525          link      A6,#0
                    3526   ; printf("\r\n\r\nProgram ABORT !!!!!!\r\n") ;
000020E6  4879 0000 3527          pea       @m68kde~1_95.L
000020EA  4E64      
000020EC  4EB9 0000 3528          jsr       _printf
000020F0  3B88      
000020F2  584F      3529          addq.w    #4,A7
                    3530   ; printf("%s\r\n", string) ;
000020F4  2F2E 0008 3531          move.l    8(A6),-(A7)
000020F8  4879 0000 3532          pea       @m68kde~1_96.L
000020FC  4E80      
000020FE  4EB9 0000 3533          jsr       _printf
00002102  3B88      
00002104  504F      3534          addq.w    #8,A7
                    3535   ; menu() ;
00002106  4EB8 1FD6 3536          jsr       _menu
0000210A  4E5E      3537          unlk      A6
0000210C  4E75      3538          rts
                    3539   ; }
                    3540   ; void IRQMessage(int level) {
                    3541   _IRQMessage:
0000210E  4E56 0000 3542          link      A6,#0
                    3543   ; printf("\r\n\r\nProgram ABORT !!!!!");
00002112  4879 0000 3544          pea       @m68kde~1_97.L
00002116  4E86      
00002118  4EB9 0000 3545          jsr       _printf
0000211C  3B88      
0000211E  584F      3546          addq.w    #4,A7
                    3547   ; printf("\r\nUnhandled Interrupt: IRQ%d !!!!!", level) ;
00002120  2F2E 0008 3548          move.l    8(A6),-(A7)
00002124  4879 0000 3549          pea       @m68kde~1_98.L
00002128  4E9E      
0000212A  4EB9 0000 3550          jsr       _printf
0000212E  3B88      
00002130  504F      3551          addq.w    #8,A7
                    3552   ; menu() ;
00002132  4EB8 1FD6 3553          jsr       _menu
00002136  4E5E      3554          unlk      A6
00002138  4E75      3555          rts
                    3556   ; }
                    3557   ; void UnhandledIRQ1(void) {
                    3558   _UnhandledIRQ1:
                    3559   ; IRQMessage(1);
0000213A  4878 0001 3560          pea       1
0000213E  4EB8 210E 3561          jsr       _IRQMessage
00002142  584F      3562          addq.w    #4,A7
00002144  4E75      3563          rts
                    3564   ; }
                    3565   ; void UnhandledIRQ2(void) {
                    3566   _UnhandledIRQ2:
                    3567   ; IRQMessage(2);
00002146  4878 0002 3568          pea       2
0000214A  4EB8 210E 3569          jsr       _IRQMessage
0000214E  584F      3570          addq.w    #4,A7
00002150  4E75      3571          rts
                    3572   ; }
                    3573   ; void UnhandledIRQ3(void){
                    3574   _UnhandledIRQ3:
                    3575   ; IRQMessage(3);
00002152  4878 0003 3576          pea       3
00002156  4EB8 210E 3577          jsr       _IRQMessage
0000215A  584F      3578          addq.w    #4,A7
0000215C  4E75      3579          rts
                    3580   ; }
                    3581   ; void UnhandledIRQ4(void) {
                    3582   _UnhandledIRQ4:
                    3583   ; IRQMessage(4);
0000215E  4878 0004 3584          pea       4
00002162  4EB8 210E 3585          jsr       _IRQMessage
00002166  584F      3586          addq.w    #4,A7
00002168  4E75      3587          rts
                    3588   ; }
                    3589   ; void UnhandledIRQ5(void) {
                    3590   _UnhandledIRQ5:
                    3591   ; IRQMessage(5);
0000216A  4878 0005 3592          pea       5
0000216E  4EB8 210E 3593          jsr       _IRQMessage
00002172  584F      3594          addq.w    #4,A7
00002174  4E75      3595          rts
                    3596   ; }
                    3597   ; void UnhandledIRQ6(void) {
                    3598   _UnhandledIRQ6:
                    3599   ; PrintErrorMessageandAbort("ADDRESS ERROR: 16 or 32 Bit Transfer to/from an ODD Address....") ;
00002176  4879 0000 3600          pea       @m68kde~1_99.L
0000217A  4EC2      
0000217C  4EB8 20E2 3601          jsr       _PrintErrorMessageandAbort
00002180  584F      3602          addq.w    #4,A7
                    3603   ; menu() ;
00002182  4EB8 1FD6 3604          jsr       _menu
00002186  4E75      3605          rts
                    3606   ; }
                    3607   ; void UnhandledIRQ7(void) {
                    3608   _UnhandledIRQ7:
                    3609   ; IRQMessage(7);
00002188  4878 0007 3610          pea       7
0000218C  4EB8 210E 3611          jsr       _IRQMessage
00002190  584F      3612          addq.w    #4,A7
00002192  4E75      3613          rts
                    3614   ; }
                    3615   ; void UnhandledTrap(void) {
                    3616   _UnhandledTrap:
                    3617   ; PrintErrorMessageandAbort("Unhandled Trap !!!!!") ;
00002194  4879 0000 3618          pea       @m68kde~1_100.L
00002198  4F02      
0000219A  4EB8 20E2 3619          jsr       _PrintErrorMessageandAbort
0000219E  584F      3620          addq.w    #4,A7
000021A0  4E75      3621          rts
                    3622   ; }
                    3623   ; void BusError() {
                    3624   _BusError:
                    3625   ; PrintErrorMessageandAbort("BUS Error!") ;
000021A2  4879 0000 3626          pea       @m68kde~1_101.L
000021A6  4F18      
000021A8  4EB8 20E2 3627          jsr       _PrintErrorMessageandAbort
000021AC  584F      3628          addq.w    #4,A7
000021AE  4E75      3629          rts
                    3630   ; }
                    3631   ; void AddressError() {
                    3632   _AddressError:
                    3633   ; PrintErrorMessageandAbort("ADDRESS Error!") ;
000021B0  4879 0000 3634          pea       @m68kde~1_102.L
000021B4  4F24      
000021B6  4EB8 20E2 3635          jsr       _PrintErrorMessageandAbort
000021BA  584F      3636          addq.w    #4,A7
000021BC  4E75      3637          rts
                    3638   ; }
                    3639   ; void IllegalInstruction() {
                    3640   _IllegalInstruction:
                    3641   ; PrintErrorMessageandAbort("ILLEGAL INSTRUCTION") ;
000021BE  4879 0000 3642          pea       @m68kde~1_103.L
000021C2  4F34      
000021C4  4EB8 20E2 3643          jsr       _PrintErrorMessageandAbort
000021C8  584F      3644          addq.w    #4,A7
000021CA  4E75      3645          rts
                    3646   ; }
                    3647   ; void Dividebyzero() {
                    3648   _Dividebyzero:
                    3649   ; PrintErrorMessageandAbort("DIVIDE BY ZERO") ;
000021CC  4879 0000 3650          pea       @m68kde~1_104.L
000021D0  4F48      
000021D2  4EB8 20E2 3651          jsr       _PrintErrorMessageandAbort
000021D6  584F      3652          addq.w    #4,A7
000021D8  4E75      3653          rts
                    3654   ; }
                    3655   ; void Check() {
                    3656   _Check:
                    3657   ; PrintErrorMessageandAbort("'CHK' INSTRUCTION") ;
000021DA  4879 0000 3658          pea       @m68kde~1_105.L
000021DE  4F58      
000021E0  4EB8 20E2 3659          jsr       _PrintErrorMessageandAbort
000021E4  584F      3660          addq.w    #4,A7
000021E6  4E75      3661          rts
                    3662   ; }
                    3663   ; void Trapv() {
                    3664   _Trapv:
                    3665   ; PrintErrorMessageandAbort("TRAPV INSTRUCTION") ;
000021E8  4879 0000 3666          pea       @m68kde~1_106.L
000021EC  4F6A      
000021EE  4EB8 20E2 3667          jsr       _PrintErrorMessageandAbort
000021F2  584F      3668          addq.w    #4,A7
000021F4  4E75      3669          rts
                    3670   ; }
                    3671   ; void PrivError() {
                    3672   _PrivError:
                    3673   ; PrintErrorMessageandAbort("PRIVILEGE VIOLATION") ;
000021F6  4879 0000 3674          pea       @m68kde~1_107.L
000021FA  4F7C      
000021FC  4EB8 20E2 3675          jsr       _PrintErrorMessageandAbort
00002200  584F      3676          addq.w    #4,A7
00002202  4E75      3677          rts
                    3678   ; }
                    3679   ; void UnitIRQ() {
                    3680   _UnitIRQ:
                    3681   ; PrintErrorMessageandAbort("UNINITIALISED IRQ") ;
00002204  4879 0000 3682          pea       @m68kde~1_108.L
00002208  4F90      
0000220A  4EB8 20E2 3683          jsr       _PrintErrorMessageandAbort
0000220E  584F      3684          addq.w    #4,A7
00002210  4E75      3685          rts
                    3686   ; }
                    3687   ; void Spurious() {
                    3688   _Spurious:
                    3689   ; PrintErrorMessageandAbort("SPURIOUS IRQ") ;
00002212  4879 0000 3690          pea       @m68kde~1_109.L
00002216  4FA2      
00002218  4EB8 20E2 3691          jsr       _PrintErrorMessageandAbort
0000221C  584F      3692          addq.w    #4,A7
0000221E  4E75      3693          rts
                    3694   ; }
                    3695   ; void main(void)
                    3696   ; {
                    3697   _main:
00002220  4E56 FFF0 3698          link      A6,#-16
00002224  48E7 2020 3699          movem.l   D2/A2,-(A7)
00002228  45F8 093A 3700          lea       _InstallExceptionHandler.L,A2
                    3701   ; char c ;
                    3702   ; int i, j ;
                    3703   ; char *BugMessage = "CPEN 412 2023W2\r\nTom Wang, 76340348";
0000222C  41F9 0000 3704          lea       @m68kde~1_110.L,A0
00002230  4FB0      
00002232  2D48 FFF8 3705          move.l    A0,-8(A6)
                    3706   ; char *CopyrightMessage = "Copyright (C) PJ Davies 2016";
00002236  41F9 0000 3707          lea       @m68kde~1_111.L,A0
0000223A  4FD4      
0000223C  2D48 FFFC 3708          move.l    A0,-4(A6)
                    3709   ; KillAllBreakPoints() ;
00002240  4EB8 1AC8 3710          jsr       _KillAllBreakPoints
                    3711   ; i = x = y = z = PortA_Count = 0;
00002244  42B9 0803 3712          clr.l     _PortA_Count.L
00002248  00D4      
0000224A  42B9 0803 3713          clr.l     _z.L
0000224E  00D0      
00002250  42B9 0803 3714          clr.l     _y.L
00002254  00CC      
00002256  42B9 0803 3715          clr.l     _x.L
0000225A  00C8      
0000225C  4282      3716          clr.l     D2
                    3717   ; Trace = GoFlag = 0;                       // used in tracing/single stepping
0000225E  42B9 0803 3718          clr.l     _GoFlag.L
00002262  00DC      
00002264  42B9 0803 3719          clr.l     _Trace.L
00002268  00D8      
                    3720   ; Echo = 1 ;
0000226A  23FC 0000 3721          move.l    #1,_Echo.L
0000226E  0001 0803 
00002272  00E0      
                    3722   ; // Initialise Breakpoint variables
                    3723   ; for(i = 0; i < 8; i++)  {
00002274  4282      3724          clr.l     D2
                    3725   main_1:
00002276  0C82 0000 3726          cmp.l     #8,D2
0000227A  0008      
0000227C  6C00 004C 3727          bge       main_3
                    3728   ; BreakPointAddress[i] = 0;               //array of 8 breakpoint addresses
00002280  2002      3729          move.l    D2,D0
00002282  E588      3730          lsl.l     #2,D0
00002284  41F9 0803 3731          lea       _BreakPointAddress.L,A0
00002288  012E      
0000228A  42B0 0800 3732          clr.l     0(A0,D0.L)
                    3733   ; WatchPointAddress[i] = 0 ;
0000228E  2002      3734          move.l    D2,D0
00002290  E588      3735          lsl.l     #2,D0
00002292  41F9 0803 3736          lea       _WatchPointAddress.L,A0
00002296  0182      
00002298  42B0 0800 3737          clr.l     0(A0,D0.L)
                    3738   ; BreakPointInstruction[i] = 0;           // to hold the instruction at the break point
0000229C  2002      3739          move.l    D2,D0
0000229E  E388      3740          lsl.l     #1,D0
000022A0  41F9 0803 3741          lea       _BreakPointInstruction.L,A0
000022A4  014E      
000022A6  4270 0800 3742          clr.w     0(A0,D0.L)
                    3743   ; BreakPointSetOrCleared[i] = 0;          // indicates if break point set
000022AA  2002      3744          move.l    D2,D0
000022AC  E588      3745          lsl.l     #2,D0
000022AE  41F9 0803 3746          lea       _BreakPointSetOrCleared.L,A0
000022B2  015E      
000022B4  42B0 0800 3747          clr.l     0(A0,D0.L)
                    3748   ; WatchPointSetOrCleared[i] = 0;
000022B8  2002      3749          move.l    D2,D0
000022BA  E588      3750          lsl.l     #2,D0
000022BC  41F9 0803 3751          lea       _WatchPointSetOrCleared.L,A0
000022C0  01A2      
000022C2  42B0 0800 3752          clr.l     0(A0,D0.L)
000022C6  5282      3753          addq.l    #1,D2
000022C8  60AC      3754          bra       main_1
                    3755   main_3:
                    3756   ; }
                    3757   ; Init_RS232() ;     // initialise the RS232 port
000022CA  4EB8 09D0 3758          jsr       _Init_RS232
                    3759   ; for( i = 32; i < 48; i++)
000022CE  7420      3760          moveq     #32,D2
                    3761   main_4:
000022D0  0C82 0000 3762          cmp.l     #48,D2
000022D4  0030      
000022D6  6C0E      3763          bge.s     main_6
                    3764   ; InstallExceptionHandler(UnhandledTrap, i) ;		        // install Trap exception handler on vector 32-47
000022D8  2F02      3765          move.l    D2,-(A7)
000022DA  4878 2194 3766          pea       _UnhandledTrap.L
000022DE  4E92      3767          jsr       (A2)
000022E0  504F      3768          addq.w    #8,A7
000022E2  5282      3769          addq.l    #1,D2
000022E4  60EA      3770          bra       main_4
                    3771   main_6:
                    3772   ; InstallExceptionHandler(menu, 47) ;		                   // TRAP #15 call debug and end program
000022E6  4878 002F 3773          pea       47
000022EA  4878 1FD6 3774          pea       _menu.L
000022EE  4E92      3775          jsr       (A2)
000022F0  504F      3776          addq.w    #8,A7
                    3777   ; InstallExceptionHandler(UnhandledIRQ1, 25) ;		      // install handler for interrupts
000022F2  4878 0019 3778          pea       25
000022F6  4878 213A 3779          pea       _UnhandledIRQ1.L
000022FA  4E92      3780          jsr       (A2)
000022FC  504F      3781          addq.w    #8,A7
                    3782   ; InstallExceptionHandler(UnhandledIRQ2, 26) ;		      // install handler for interrupts
000022FE  4878 001A 3783          pea       26
00002302  4878 2146 3784          pea       _UnhandledIRQ2.L
00002306  4E92      3785          jsr       (A2)
00002308  504F      3786          addq.w    #8,A7
                    3787   ; InstallExceptionHandler(UnhandledIRQ3, 27) ;		      // install handler for interrupts
0000230A  4878 001B 3788          pea       27
0000230E  4878 2152 3789          pea       _UnhandledIRQ3.L
00002312  4E92      3790          jsr       (A2)
00002314  504F      3791          addq.w    #8,A7
                    3792   ; InstallExceptionHandler(UnhandledIRQ4, 28) ;		      // install handler for interrupts
00002316  4878 001C 3793          pea       28
0000231A  4878 215E 3794          pea       _UnhandledIRQ4.L
0000231E  4E92      3795          jsr       (A2)
00002320  504F      3796          addq.w    #8,A7
                    3797   ; InstallExceptionHandler(UnhandledIRQ5, 29) ;		      // install handler for interrupts
00002322  4878 001D 3798          pea       29
00002326  4878 216A 3799          pea       _UnhandledIRQ5.L
0000232A  4E92      3800          jsr       (A2)
0000232C  504F      3801          addq.w    #8,A7
                    3802   ; InstallExceptionHandler(UnhandledIRQ6, 30) ;		      // install handler for interrupts
0000232E  4878 001E 3803          pea       30
00002332  4878 2176 3804          pea       _UnhandledIRQ6.L
00002336  4E92      3805          jsr       (A2)
00002338  504F      3806          addq.w    #8,A7
                    3807   ; InstallExceptionHandler(UnhandledIRQ7, 31) ;		      // install handler for interrupts
0000233A  4878 001F 3808          pea       31
0000233E  4878 2188 3809          pea       _UnhandledIRQ7.L
00002342  4E92      3810          jsr       (A2)
00002344  504F      3811          addq.w    #8,A7
                    3812   ; InstallExceptionHandler(HandleBreakPoint, 46) ;		           // install Trap 14 Break Point exception handler on vector 46
00002346  4878 002E 3813          pea       46
0000234A  4878 1D56 3814          pea       _HandleBreakPoint.L
0000234E  4E92      3815          jsr       (A2)
00002350  504F      3816          addq.w    #8,A7
                    3817   ; InstallExceptionHandler(DumpRegistersandPause, 29) ;		   // install TRACE handler for IRQ5 on vector 29
00002352  4878 001D 3818          pea       29
00002356  4878 1436 3819          pea       _DumpRegistersandPause.L
0000235A  4E92      3820          jsr       (A2)
0000235C  504F      3821          addq.w    #8,A7
                    3822   ; InstallExceptionHandler(BusError,2) ;                          // install Bus error handler
0000235E  4878 0002 3823          pea       2
00002362  4878 21A2 3824          pea       _BusError.L
00002366  4E92      3825          jsr       (A2)
00002368  504F      3826          addq.w    #8,A7
                    3827   ; InstallExceptionHandler(AddressError,3) ;                      // install address error handler (doesn't work on soft core 68k implementation)
0000236A  4878 0003 3828          pea       3
0000236E  4878 21B0 3829          pea       _AddressError.L
00002372  4E92      3830          jsr       (A2)
00002374  504F      3831          addq.w    #8,A7
                    3832   ; InstallExceptionHandler(IllegalInstruction,4) ;                // install illegal instruction exception handler
00002376  4878 0004 3833          pea       4
0000237A  4878 21BE 3834          pea       _IllegalInstruction.L
0000237E  4E92      3835          jsr       (A2)
00002380  504F      3836          addq.w    #8,A7
                    3837   ; InstallExceptionHandler(Dividebyzero,5) ;                      // install /0 exception handler
00002382  4878 0005 3838          pea       5
00002386  4878 21CC 3839          pea       _Dividebyzero.L
0000238A  4E92      3840          jsr       (A2)
0000238C  504F      3841          addq.w    #8,A7
                    3842   ; InstallExceptionHandler(Check,6) ;                             // install check instruction exception handler
0000238E  4878 0006 3843          pea       6
00002392  4878 21DA 3844          pea       _Check.L
00002396  4E92      3845          jsr       (A2)
00002398  504F      3846          addq.w    #8,A7
                    3847   ; InstallExceptionHandler(Trapv,7) ;                             // install trapv instruction exception handler
0000239A  4878 0007 3848          pea       7
0000239E  4878 21E8 3849          pea       _Trapv.L
000023A2  4E92      3850          jsr       (A2)
000023A4  504F      3851          addq.w    #8,A7
                    3852   ; InstallExceptionHandler(PrivError,8) ;                         // install Priv Violation exception handler
000023A6  4878 0008 3853          pea       8
000023AA  4878 21F6 3854          pea       _PrivError.L
000023AE  4E92      3855          jsr       (A2)
000023B0  504F      3856          addq.w    #8,A7
                    3857   ; InstallExceptionHandler(UnitIRQ,15) ;                          // install uninitialised IRQ exception handler
000023B2  4878 000F 3858          pea       15
000023B6  4878 2204 3859          pea       _UnitIRQ.L
000023BA  4E92      3860          jsr       (A2)
000023BC  504F      3861          addq.w    #8,A7
                    3862   ; InstallExceptionHandler(Check,24) ;                            // install spurious IRQ exception handler
000023BE  4878 0018 3863          pea       24
000023C2  4878 21DA 3864          pea       _Check.L
000023C6  4E92      3865          jsr       (A2)
000023C8  504F      3866          addq.w    #8,A7
                    3867   ; FlushKeyboard() ;                        // dump unread characters from keyboard
000023CA  4EB8 0A64 3868          jsr       _FlushKeyboard
                    3869   ; TraceException = 0 ;                     // clear trace exception port to remove any software generated single step/trace
000023CE  4239 0040 3870          clr.b     4194314
000023D2  000A      
                    3871   ; printf("\r\n%s", BugMessage) ;
000023D4  2F2E FFF8 3872          move.l    -8(A6),-(A7)
000023D8  4879 0000 3873          pea       @m68kde~1_112.L
000023DC  4FF2      
000023DE  4EB9 0000 3874          jsr       _printf
000023E2  3B88      
000023E4  504F      3875          addq.w    #8,A7
                    3876   ; printf("\r\n%s", CopyrightMessage) ;
000023E6  2F2E FFFC 3877          move.l    -4(A6),-(A7)
000023EA  4879 0000 3878          pea       @m68kde~1_112.L
000023EE  4FF2      
000023F0  4EB9 0000 3879          jsr       _printf
000023F4  3B88      
000023F6  504F      3880          addq.w    #8,A7
                    3881   ; menu();
000023F8  4EB8 1FD6 3882          jsr       _menu
000023FC  4CDF 0404 3883          movem.l   (A7)+,D2/A2
00002400  4E5E      3884          unlk      A6
00002402  4E75      3885          rts
                    3886   ; }
                    3887   ; C:\USERS\10054\ONEDRIVE\CPEN 412 FINAL PROJECT\FINAL_PROJECT_2023_SEM2_STUDENT_TEMPLATE\FINAL_PROJECT_2023_SEM2_STUDENT_TEMPLATE\PROGRAMS\DEBUGMONITORCODE\SAY_PHONEME.C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                    3888   ; #include "say_phoneme.h"
                    3889   ; void talkphonemeAA (){ say_phoneme(phoneme_AA  ) ; };
                    3890   _talkphonemeAA:
00002404  4878 0018 3891          pea       24
00002408  4EB8 095A 3892          jsr       _say_phoneme
0000240C  584F      3893          addq.w    #4,A7
0000240E  4E75      3894          rts
                    3895   ; void talkphonemeAE (){ say_phoneme(phoneme_AE  ) ; };
                    3896   _talkphonemeAE:
00002410  4878 001A 3897          pea       26
00002414  4EB8 095A 3898          jsr       _say_phoneme
00002418  584F      3899          addq.w    #4,A7
0000241A  4E75      3900          rts
                    3901   ; void talkphonemeAO (){ say_phoneme(phoneme_AO  ) ; };
                    3902   _talkphonemeAO:
0000241C  4878 0017 3903          pea       23
00002420  4EB8 095A 3904          jsr       _say_phoneme
00002424  584F      3905          addq.w    #4,A7
00002426  4E75      3906          rts
                    3907   ; void talkphonemeAR (){ say_phoneme(phoneme_AR  ) ; };
                    3908   _talkphonemeAR:
00002428  4878 003B 3909          pea       59
0000242C  4EB8 095A 3910          jsr       _say_phoneme
00002430  584F      3911          addq.w    #4,A7
00002432  4E75      3912          rts
                    3913   ; void talkphonemeAW (){ say_phoneme(phoneme_AW  ) ; };
                    3914   _talkphonemeAW:
00002434  4878 0020 3915          pea       32
00002438  4EB8 095A 3916          jsr       _say_phoneme
0000243C  584F      3917          addq.w    #4,A7
0000243E  4E75      3918          rts
                    3919   ; void talkphonemeAX (){ say_phoneme(phoneme_AX  ) ; };
                    3920   _talkphonemeAX:
00002440  4878 000F 3921          pea       15
00002444  4EB8 095A 3922          jsr       _say_phoneme
00002448  584F      3923          addq.w    #4,A7
0000244A  4E75      3924          rts
                    3925   ; void talkphonemeAY (){ say_phoneme(phoneme_AY  ) ; };
                    3926   _talkphonemeAY:
0000244C  4878 0006 3927          pea       6
00002450  4EB8 095A 3928          jsr       _say_phoneme
00002454  584F      3929          addq.w    #4,A7
00002456  4E75      3930          rts
                    3931   ; void talkphonemeBB1(){ say_phoneme(phoneme_BB1 ) ; };
                    3932   _talkphonemeBB1:
00002458  4878 001C 3933          pea       28
0000245C  4EB8 095A 3934          jsr       _say_phoneme
00002460  584F      3935          addq.w    #4,A7
00002462  4E75      3936          rts
                    3937   ; void talkphonemeBB2(){ say_phoneme(phoneme_BB2 ) ; };
                    3938   _talkphonemeBB2:
00002464  4878 003F 3939          pea       63
00002468  4EB8 095A 3940          jsr       _say_phoneme
0000246C  584F      3941          addq.w    #4,A7
0000246E  4E75      3942          rts
                    3943   ; void talkphonemeCH (){ say_phoneme(phoneme_CH  ) ; };
                    3944   _talkphonemeCH:
00002470  4878 0032 3945          pea       50
00002474  4EB8 095A 3946          jsr       _say_phoneme
00002478  584F      3947          addq.w    #4,A7
0000247A  4E75      3948          rts
                    3949   ; void talkphonemeDD1(){ say_phoneme(phoneme_DD1 ) ; };
                    3950   _talkphonemeDD1:
0000247C  4878 0015 3951          pea       21
00002480  4EB8 095A 3952          jsr       _say_phoneme
00002484  584F      3953          addq.w    #4,A7
00002486  4E75      3954          rts
                    3955   ; void talkphonemeDD2(){ say_phoneme(phoneme_DD2 ) ; };
                    3956   _talkphonemeDD2:
00002488  4878 0021 3957          pea       33
0000248C  4EB8 095A 3958          jsr       _say_phoneme
00002490  584F      3959          addq.w    #4,A7
00002492  4E75      3960          rts
                    3961   ; void talkphonemeDH1(){ say_phoneme(phoneme_DH1 ) ; };
                    3962   _talkphonemeDH1:
00002494  4878 0012 3963          pea       18
00002498  4EB8 095A 3964          jsr       _say_phoneme
0000249C  584F      3965          addq.w    #4,A7
0000249E  4E75      3966          rts
                    3967   ; void talkphonemeDH2(){ say_phoneme(phoneme_DH2 ) ; };
                    3968   _talkphonemeDH2:
000024A0  4878 0036 3969          pea       54
000024A4  4EB8 095A 3970          jsr       _say_phoneme
000024A8  584F      3971          addq.w    #4,A7
000024AA  4E75      3972          rts
                    3973   ; void talkphonemeEH (){ say_phoneme(phoneme_EH  ) ; };
                    3974   _talkphonemeEH:
000024AC  4878 0007 3975          pea       7
000024B0  4EB8 095A 3976          jsr       _say_phoneme
000024B4  584F      3977          addq.w    #4,A7
000024B6  4E75      3978          rts
                    3979   ; void talkphonemeEL (){ say_phoneme(phoneme_EL  ) ; };
                    3980   _talkphonemeEL:
000024B8  4878 003E 3981          pea       62
000024BC  4EB8 095A 3982          jsr       _say_phoneme
000024C0  584F      3983          addq.w    #4,A7
000024C2  4E75      3984          rts
                    3985   ; void talkphonemeER1(){ say_phoneme(phoneme_ER1 ) ; };
                    3986   _talkphonemeER1:
000024C4  4878 0033 3987          pea       51
000024C8  4EB8 095A 3988          jsr       _say_phoneme
000024CC  584F      3989          addq.w    #4,A7
000024CE  4E75      3990          rts
                    3991   ; void talkphonemeER2(){ say_phoneme(phoneme_ER2 ) ; };
                    3992   _talkphonemeER2:
000024D0  4878 0034 3993          pea       52
000024D4  4EB8 095A 3994          jsr       _say_phoneme
000024D8  584F      3995          addq.w    #4,A7
000024DA  4E75      3996          rts
                    3997   ; void talkphonemeEY (){ say_phoneme(phoneme_EY  ) ; };
                    3998   _talkphonemeEY:
000024DC  4878 0014 3999          pea       20
000024E0  4EB8 095A 4000          jsr       _say_phoneme
000024E4  584F      4001          addq.w    #4,A7
000024E6  4E75      4002          rts
                    4003   ; void talkphonemeFF (){ say_phoneme(phoneme_FF  ) ; };
                    4004   _talkphonemeFF:
000024E8  4878 0028 4005          pea       40
000024EC  4EB8 095A 4006          jsr       _say_phoneme
000024F0  584F      4007          addq.w    #4,A7
000024F2  4E75      4008          rts
                    4009   ; void talkphonemeGG1(){ say_phoneme(phoneme_GG1 ) ; };
                    4010   _talkphonemeGG1:
000024F4  4878 0024 4011          pea       36
000024F8  4EB8 095A 4012          jsr       _say_phoneme
000024FC  584F      4013          addq.w    #4,A7
000024FE  4E75      4014          rts
                    4015   ; void talkphonemeGG2(){ say_phoneme(phoneme_GG2 ) ; };
                    4016   _talkphonemeGG2:
00002500  4878 003D 4017          pea       61
00002504  4EB8 095A 4018          jsr       _say_phoneme
00002508  584F      4019          addq.w    #4,A7
0000250A  4E75      4020          rts
                    4021   ; void talkphonemeGG3(){ say_phoneme(phoneme_GG3 ) ; };
                    4022   _talkphonemeGG3:
0000250C  4878 0022 4023          pea       34
00002510  4EB8 095A 4024          jsr       _say_phoneme
00002514  584F      4025          addq.w    #4,A7
00002516  4E75      4026          rts
                    4027   ; void talkphonemeHH1(){ say_phoneme(phoneme_HH1 ) ; };
                    4028   _talkphonemeHH1:
00002518  4878 001B 4029          pea       27
0000251C  4EB8 095A 4030          jsr       _say_phoneme
00002520  584F      4031          addq.w    #4,A7
00002522  4E75      4032          rts
                    4033   ; void talkphonemeHH2(){ say_phoneme(phoneme_HH2 ) ; };
                    4034   _talkphonemeHH2:
00002524  4878 0039 4035          pea       57
00002528  4EB8 095A 4036          jsr       _say_phoneme
0000252C  584F      4037          addq.w    #4,A7
0000252E  4E75      4038          rts
                    4039   ; void talkphonemeIH (){ say_phoneme(phoneme_IH  ) ; };
                    4040   _talkphonemeIH:
00002530  4878 000C 4041          pea       12
00002534  4EB8 095A 4042          jsr       _say_phoneme
00002538  584F      4043          addq.w    #4,A7
0000253A  4E75      4044          rts
                    4045   ; void talkphonemeIY (){ say_phoneme(phoneme_IY  ) ; };
                    4046   _talkphonemeIY:
0000253C  4878 0013 4047          pea       19
00002540  4EB8 095A 4048          jsr       _say_phoneme
00002544  584F      4049          addq.w    #4,A7
00002546  4E75      4050          rts
                    4051   ; void talkphonemeJH (){ say_phoneme(phoneme_JH  ) ; };
                    4052   _talkphonemeJH:
00002548  4878 000A 4053          pea       10
0000254C  4EB8 095A 4054          jsr       _say_phoneme
00002550  584F      4055          addq.w    #4,A7
00002552  4E75      4056          rts
                    4057   ; void talkphonemeKK1(){ say_phoneme(phoneme_KK1 ) ; };
                    4058   _talkphonemeKK1:
00002554  4878 002A 4059          pea       42
00002558  4EB8 095A 4060          jsr       _say_phoneme
0000255C  584F      4061          addq.w    #4,A7
0000255E  4E75      4062          rts
                    4063   ; void talkphonemeKK2(){ say_phoneme(phoneme_KK2 ) ; };
                    4064   _talkphonemeKK2:
00002560  4878 0029 4065          pea       41
00002564  4EB8 095A 4066          jsr       _say_phoneme
00002568  584F      4067          addq.w    #4,A7
0000256A  4E75      4068          rts
                    4069   ; void talkphonemeKK3(){ say_phoneme(phoneme_KK3 ) ; };
                    4070   _talkphonemeKK3:
0000256C  4878 0008 4071          pea       8
00002570  4EB8 095A 4072          jsr       _say_phoneme
00002574  584F      4073          addq.w    #4,A7
00002576  4E75      4074          rts
                    4075   ; void talkphonemeLL (){ say_phoneme(phoneme_LL  ) ; };
                    4076   _talkphonemeLL:
00002578  4878 002D 4077          pea       45
0000257C  4EB8 095A 4078          jsr       _say_phoneme
00002580  584F      4079          addq.w    #4,A7
00002582  4E75      4080          rts
                    4081   ; void talkphonemeMM (){ say_phoneme(phoneme_MM  ) ; };
                    4082   _talkphonemeMM:
00002584  4878 0010 4083          pea       16
00002588  4EB8 095A 4084          jsr       _say_phoneme
0000258C  584F      4085          addq.w    #4,A7
0000258E  4E75      4086          rts
                    4087   ; void talkphonemeNG (){ say_phoneme(phoneme_NG  ) ; };
                    4088   _talkphonemeNG:
00002590  4878 002C 4089          pea       44
00002594  4EB8 095A 4090          jsr       _say_phoneme
00002598  584F      4091          addq.w    #4,A7
0000259A  4E75      4092          rts
                    4093   ; void talkphonemeNN1(){ say_phoneme(phoneme_NN1 ) ; };
                    4094   _talkphonemeNN1:
0000259C  4878 000B 4095          pea       11
000025A0  4EB8 095A 4096          jsr       _say_phoneme
000025A4  584F      4097          addq.w    #4,A7
000025A6  4E75      4098          rts
                    4099   ; void talkphonemeNN2(){ say_phoneme(phoneme_NN2 ) ; };
                    4100   _talkphonemeNN2:
000025A8  4878 0038 4101          pea       56
000025AC  4EB8 095A 4102          jsr       _say_phoneme
000025B0  584F      4103          addq.w    #4,A7
000025B2  4E75      4104          rts
                    4105   ; void talkphonemeOR (){ say_phoneme(phoneme_OR  ) ; };
                    4106   _talkphonemeOR:
000025B4  4878 003A 4107          pea       58
000025B8  4EB8 095A 4108          jsr       _say_phoneme
000025BC  584F      4109          addq.w    #4,A7
000025BE  4E75      4110          rts
                    4111   ; void talkphonemeOW (){ say_phoneme(phoneme_OW  ) ; };
                    4112   _talkphonemeOW:
000025C0  4878 0035 4113          pea       53
000025C4  4EB8 095A 4114          jsr       _say_phoneme
000025C8  584F      4115          addq.w    #4,A7
000025CA  4E75      4116          rts
                    4117   ; void talkphonemeOY (){ say_phoneme(phoneme_OY  ) ; };
                    4118   _talkphonemeOY:
000025CC  4878 0005 4119          pea       5
000025D0  4EB8 095A 4120          jsr       _say_phoneme
000025D4  584F      4121          addq.w    #4,A7
000025D6  4E75      4122          rts
                    4123   ; void talkphonemePP (){ say_phoneme(phoneme_PP  ) ; };
                    4124   _talkphonemePP:
000025D8  4878 0009 4125          pea       9
000025DC  4EB8 095A 4126          jsr       _say_phoneme
000025E0  584F      4127          addq.w    #4,A7
000025E2  4E75      4128          rts
                    4129   ; void talkphonemeRR1(){ say_phoneme(phoneme_RR1 ) ; };
                    4130   _talkphonemeRR1:
000025E4  4878 000E 4131          pea       14
000025E8  4EB8 095A 4132          jsr       _say_phoneme
000025EC  584F      4133          addq.w    #4,A7
000025EE  4E75      4134          rts
                    4135   ; void talkphonemeRR2(){ say_phoneme(phoneme_RR2 ) ; };
                    4136   _talkphonemeRR2:
000025F0  4878 0027 4137          pea       39
000025F4  4EB8 095A 4138          jsr       _say_phoneme
000025F8  584F      4139          addq.w    #4,A7
000025FA  4E75      4140          rts
                    4141   ; void talkphonemeSH (){ say_phoneme(phoneme_SH  ) ; };
                    4142   _talkphonemeSH:
000025FC  4878 0025 4143          pea       37
00002600  4EB8 095A 4144          jsr       _say_phoneme
00002604  584F      4145          addq.w    #4,A7
00002606  4E75      4146          rts
                    4147   ; void talkphonemeSS (){ say_phoneme(phoneme_SS  ) ; };
                    4148   _talkphonemeSS:
00002608  4878 0037 4149          pea       55
0000260C  4EB8 095A 4150          jsr       _say_phoneme
00002610  584F      4151          addq.w    #4,A7
00002612  4E75      4152          rts
                    4153   ; void talkphonemeTH (){ say_phoneme(phoneme_TH  ) ; };
                    4154   _talkphonemeTH:
00002614  4878 001D 4155          pea       29
00002618  4EB8 095A 4156          jsr       _say_phoneme
0000261C  584F      4157          addq.w    #4,A7
0000261E  4E75      4158          rts
                    4159   ; void talkphonemeTT1(){ say_phoneme(phoneme_TT1 ) ; };
                    4160   _talkphonemeTT1:
00002620  4878 0011 4161          pea       17
00002624  4EB8 095A 4162          jsr       _say_phoneme
00002628  584F      4163          addq.w    #4,A7
0000262A  4E75      4164          rts
                    4165   ; void talkphonemeTT2(){ say_phoneme(phoneme_TT2 ) ; };
                    4166   _talkphonemeTT2:
0000262C  4878 000D 4167          pea       13
00002630  4EB8 095A 4168          jsr       _say_phoneme
00002634  584F      4169          addq.w    #4,A7
00002636  4E75      4170          rts
                    4171   ; void talkphonemeUH (){ say_phoneme(phoneme_UH  ) ; };
                    4172   _talkphonemeUH:
00002638  4878 001E 4173          pea       30
0000263C  4EB8 095A 4174          jsr       _say_phoneme
00002640  584F      4175          addq.w    #4,A7
00002642  4E75      4176          rts
                    4177   ; void talkphonemeUW1(){ say_phoneme(phoneme_UW1 ) ; };
                    4178   _talkphonemeUW1:
00002644  4878 0016 4179          pea       22
00002648  4EB8 095A 4180          jsr       _say_phoneme
0000264C  584F      4181          addq.w    #4,A7
0000264E  4E75      4182          rts
                    4183   ; void talkphonemeUW2(){ say_phoneme(phoneme_UW2 ) ; };
                    4184   _talkphonemeUW2:
00002650  4878 001F 4185          pea       31
00002654  4EB8 095A 4186          jsr       _say_phoneme
00002658  584F      4187          addq.w    #4,A7
0000265A  4E75      4188          rts
                    4189   ; void talkphonemeVV (){ say_phoneme(phoneme_VV  ) ; };
                    4190   _talkphonemeVV:
0000265C  4878 0023 4191          pea       35
00002660  4EB8 095A 4192          jsr       _say_phoneme
00002664  584F      4193          addq.w    #4,A7
00002666  4E75      4194          rts
                    4195   ; void talkphonemeWH (){ say_phoneme(phoneme_WH  ) ; };
                    4196   _talkphonemeWH:
00002668  4878 0030 4197          pea       48
0000266C  4EB8 095A 4198          jsr       _say_phoneme
00002670  584F      4199          addq.w    #4,A7
00002672  4E75      4200          rts
                    4201   ; void talkphonemeWW (){ say_phoneme(phoneme_WW  ) ; };
                    4202   _talkphonemeWW:
00002674  4878 002E 4203          pea       46
00002678  4EB8 095A 4204          jsr       _say_phoneme
0000267C  584F      4205          addq.w    #4,A7
0000267E  4E75      4206          rts
                    4207   ; void talkphonemeXR (){ say_phoneme(phoneme_XR  ) ; };
                    4208   _talkphonemeXR:
00002680  4878 002F 4209          pea       47
00002684  4EB8 095A 4210          jsr       _say_phoneme
00002688  584F      4211          addq.w    #4,A7
0000268A  4E75      4212          rts
                    4213   ; void talkphonemeYR (){ say_phoneme(phoneme_YR  ) ; };
                    4214   _talkphonemeYR:
0000268C  4878 003C 4215          pea       60
00002690  4EB8 095A 4216          jsr       _say_phoneme
00002694  584F      4217          addq.w    #4,A7
00002696  4E75      4218          rts
                    4219   ; void talkphonemeYY1(){ say_phoneme(phoneme_YY1 ) ; };
                    4220   _talkphonemeYY1:
00002698  4878 0031 4221          pea       49
0000269C  4EB8 095A 4222          jsr       _say_phoneme
000026A0  584F      4223          addq.w    #4,A7
000026A2  4E75      4224          rts
                    4225   ; void talkphonemeYY2(){ say_phoneme(phoneme_YY2 ) ; };
                    4226   _talkphonemeYY2:
000026A4  4878 0019 4227          pea       25
000026A8  4EB8 095A 4228          jsr       _say_phoneme
000026AC  584F      4229          addq.w    #4,A7
000026AE  4E75      4230          rts
                    4231   ; void talkphonemeZH (){ say_phoneme(phoneme_ZH  ) ; };
                    4232   _talkphonemeZH:
000026B0  4878 0026 4233          pea       38
000026B4  4EB8 095A 4234          jsr       _say_phoneme
000026B8  584F      4235          addq.w    #4,A7
000026BA  4E75      4236          rts
                    4237   ; void talkphonemeZZ (){ say_phoneme(phoneme_ZZ  ) ; };
                    4238   _talkphonemeZZ:
000026BC  4878 002B 4239          pea       43
000026C0  4EB8 095A 4240          jsr       _say_phoneme
000026C4  584F      4241          addq.w    #4,A7
000026C6  4E75      4242          rts
                    4243   ; void talkphonemePA1(){ say_phoneme(phoneme_PA1 ) ; };
                    4244   _talkphonemePA1:
000026C8  42A7      4245          clr.l     -(A7)
000026CA  4EB8 095A 4246          jsr       _say_phoneme
000026CE  584F      4247          addq.w    #4,A7
000026D0  4E75      4248          rts
                    4249   ; void talkphonemePA2(){ say_phoneme(phoneme_PA2 ) ; };
                    4250   _talkphonemePA2:
000026D2  4878 0001 4251          pea       1
000026D6  4EB8 095A 4252          jsr       _say_phoneme
000026DA  584F      4253          addq.w    #4,A7
000026DC  4E75      4254          rts
                    4255   ; void talkphonemePA3(){ say_phoneme(phoneme_PA3 ) ; };
                    4256   _talkphonemePA3:
000026DE  4878 0002 4257          pea       2
000026E2  4EB8 095A 4258          jsr       _say_phoneme
000026E6  584F      4259          addq.w    #4,A7
000026E8  4E75      4260          rts
                    4261   ; void talkphonemePA4(){ say_phoneme(phoneme_PA4 ) ; };
                    4262   _talkphonemePA4:
000026EA  4878 0003 4263          pea       3
000026EE  4EB8 095A 4264          jsr       _say_phoneme
000026F2  584F      4265          addq.w    #4,A7
000026F4  4E75      4266          rts
                    4267   ; void talkphonemePA5(){ say_phoneme(phoneme_PA5 ) ; };
                    4268   _talkphonemePA5:
000026F6  4878 0004 4269          pea       4
000026FA  4EB8 095A 4270          jsr       _say_phoneme
000026FE  584F      4271          addq.w    #4,A7
00002700  4E75      4272          rts
                    4273   ; void talkword0() {
                    4274   _talkword0:
                    4275   ; talkphonemeZZ  ()   ;
00002702  4EB8 26BC 4276          jsr       _talkphonemeZZ
                    4277   ; talkphonemeEH  ()   ;
00002706  4EB8 24AC 4278          jsr       _talkphonemeEH
                    4279   ; talkphonemeRR2 ()   ;
0000270A  4EB8 25F0 4280          jsr       _talkphonemeRR2
                    4281   ; talkphonemeOW  ()   ;
0000270E  4EB8 25C0 4282          jsr       _talkphonemeOW
00002712  4E75      4283          rts
                    4284   ; }
                    4285   ; void talkword1() {
                    4286   _talkword1:
                    4287   ; talkphonemeWW    ()  ;
00002714  4EB8 2674 4288          jsr       _talkphonemeWW
                    4289   ; talkphonemeAO    ()  ;
00002718  4EB8 241C 4290          jsr       _talkphonemeAO
                    4291   ; talkphonemeNN1   ()  ;
0000271C  4EB8 259C 4292          jsr       _talkphonemeNN1
00002720  4E75      4293          rts
                    4294   ; }
                    4295   ; void talkword2() {
                    4296   _talkword2:
                    4297   ; talkphonemeTT2();
00002722  4EB8 262C 4298          jsr       _talkphonemeTT2
                    4299   ; talkphonemeUW2();
00002726  4EB8 2650 4300          jsr       _talkphonemeUW2
0000272A  4E75      4301          rts
                    4302   ; }
                    4303   ; void talkword3() {
                    4304   _talkword3:
                    4305   ; talkphonemeTH ();
0000272C  4EB8 2614 4306          jsr       _talkphonemeTH
                    4307   ; talkphonemeRR2();
00002730  4EB8 25F0 4308          jsr       _talkphonemeRR2
                    4309   ; talkphonemeIY ();
00002734  4EB8 253C 4310          jsr       _talkphonemeIY
00002738  4E75      4311          rts
                    4312   ; }
                    4313   ; void talkword4() {
                    4314   _talkword4:
                    4315   ; talkphonemeFF  ();
0000273A  4EB8 24E8 4316          jsr       _talkphonemeFF
                    4317   ; talkphonemeOR  ();
0000273E  4EB8 25B4 4318          jsr       _talkphonemeOR
00002742  4E75      4319          rts
                    4320   ; }
                    4321   ; void talkword5() {
                    4322   _talkword5:
                    4323   ; talkphonemeFF();
00002744  4EB8 24E8 4324          jsr       _talkphonemeFF
                    4325   ; talkphonemeAY();
00002748  4EB8 244C 4326          jsr       _talkphonemeAY
                    4327   ; talkphonemeVV();
0000274C  4EB8 265C 4328          jsr       _talkphonemeVV
00002750  4E75      4329          rts
                    4330   ; }
                    4331   ; void talkword6() {
                    4332   _talkword6:
00002752  2F0A      4333          move.l    A2,-(A7)
00002754  45F8 2608 4334          lea       _talkphonemeSS.L,A2
                    4335   ; talkphonemeSS  ();
00002758  4E92      4336          jsr       (A2)
                    4337   ; talkphonemeIH  ();
0000275A  4EB8 2530 4338          jsr       _talkphonemeIH
                    4339   ; talkphonemeKK2 ();
0000275E  4EB8 2560 4340          jsr       _talkphonemeKK2
                    4341   ; talkphonemeSS  ();
00002762  4E92      4342          jsr       (A2)
                    4343   ; talkphonemeSS  ();
00002764  4E92      4344          jsr       (A2)
00002766  245F      4345          move.l    (A7)+,A2
00002768  4E75      4346          rts
                    4347   ; }
                    4348   ; void talkword7() {
                    4349   _talkword7:
                    4350   ; talkphonemeSS    ();
0000276A  4EB8 2608 4351          jsr       _talkphonemeSS
                    4352   ; talkphonemeEH    ();
0000276E  4EB8 24AC 4353          jsr       _talkphonemeEH
                    4354   ; talkphonemeVV    ();
00002772  4EB8 265C 4355          jsr       _talkphonemeVV
                    4356   ; talkphonemeAX    ();
00002776  4EB8 2440 4357          jsr       _talkphonemeAX
                    4358   ; talkphonemeNN1   ();
0000277A  4EB8 259C 4359          jsr       _talkphonemeNN1
0000277E  4E75      4360          rts
                    4361   ; }
                    4362   ; void talkword8() {
                    4363   _talkword8:
                    4364   ; talkphonemeEY  ();
00002780  4EB8 24DC 4365          jsr       _talkphonemeEY
                    4366   ; talkphonemeTT1 ();
00002784  4EB8 2620 4367          jsr       _talkphonemeTT1
00002788  4E75      4368          rts
                    4369   ; }
                    4370   ; void talkword9() {
                    4371   _talkword9:
                    4372   ; talkphonemeNN2();
0000278A  4EB8 25A8 4373          jsr       _talkphonemeNN2
                    4374   ; talkphonemeAY ();
0000278E  4EB8 244C 4375          jsr       _talkphonemeAY
                    4376   ; talkphonemeNN1();
00002792  4EB8 259C 4377          jsr       _talkphonemeNN1
00002796  4E75      4378          rts
                    4379   ; }
                    4380   ; void talkword10() {
                    4381   _talkword10:
                    4382   ; talkphonemeTT2 ();
00002798  4EB8 262C 4383          jsr       _talkphonemeTT2
                    4384   ; talkphonemeEH  ();
0000279C  4EB8 24AC 4385          jsr       _talkphonemeEH
                    4386   ; talkphonemeNN1 ();
000027A0  4EB8 259C 4387          jsr       _talkphonemeNN1
000027A4  4E75      4388          rts
                    4389   ; }
                    4390   ; void talkword11() {
                    4391   _talkword11:
                    4392   ; talkphonemeIH ();
000027A6  4EB8 2530 4393          jsr       _talkphonemeIH
                    4394   ; talkphonemeLL ();
000027AA  4EB8 2578 4395          jsr       _talkphonemeLL
                    4396   ; talkphonemeEH ();
000027AE  4EB8 24AC 4397          jsr       _talkphonemeEH
                    4398   ; talkphonemeVV ();
000027B2  4EB8 265C 4399          jsr       _talkphonemeVV
                    4400   ; talkphonemeEH ();
000027B6  4EB8 24AC 4401          jsr       _talkphonemeEH
                    4402   ; talkphonemeNN1();
000027BA  4EB8 259C 4403          jsr       _talkphonemeNN1
000027BE  4E75      4404          rts
                    4405   ; }
                    4406   ; void talkword12() {
                    4407   _talkword12:
                    4408   ; talkphonemeTT2 ();
000027C0  4EB8 262C 4409          jsr       _talkphonemeTT2
                    4410   ; talkphonemeWW  ();
000027C4  4EB8 2674 4411          jsr       _talkphonemeWW
                    4412   ; talkphonemeEH  ();
000027C8  4EB8 24AC 4413          jsr       _talkphonemeEH
                    4414   ; talkphonemeEL  ();
000027CC  4EB8 24B8 4415          jsr       _talkphonemeEL
                    4416   ; talkphonemeVV  ();
000027D0  4EB8 265C 4417          jsr       _talkphonemeVV
000027D4  4E75      4418          rts
                    4419   ; }
                    4420   ; void talkword13() {
                    4421   _talkword13:
                    4422   ; talkphonemeTH  ();
000027D6  4EB8 2614 4423          jsr       _talkphonemeTH
                    4424   ; talkphonemeER2 ();
000027DA  4EB8 24D0 4425          jsr       _talkphonemeER2
000027DE  4E75      4426          rts
                    4427   ; }
                    4428   ; void talkwordteen() {
                    4429   _talkwordteen:
                    4430   ; talkphonemeTT2   ();
000027E0  4EB8 262C 4431          jsr       _talkphonemeTT2
                    4432   ; talkphonemeIY    ();
000027E4  4EB8 253C 4433          jsr       _talkphonemeIY
                    4434   ; talkphonemeNN1   ();
000027E8  4EB8 259C 4435          jsr       _talkphonemeNN1
000027EC  4E75      4436          rts
                    4437   ; }
                    4438   ; void talkword14() {
                    4439   _talkword14:
                    4440   ; talkword4();
000027EE  4EB8 273A 4441          jsr       _talkword4
                    4442   ; talkwordteen();
000027F2  4EB8 27E0 4443          jsr       _talkwordteen
000027F6  4E75      4444          rts
                    4445   ; }
                    4446   ; void talkword15() {
                    4447   _talkword15:
                    4448   ; talkphonemeFF ();
000027F8  4EB8 24E8 4449          jsr       _talkphonemeFF
                    4450   ; talkphonemeIH ();
000027FC  4EB8 2530 4451          jsr       _talkphonemeIH
                    4452   ; talkphonemeFF ();
00002800  4EB8 24E8 4453          jsr       _talkphonemeFF
                    4454   ; talkwordteen  ();
00002804  4EB8 27E0 4455          jsr       _talkwordteen
00002808  4E75      4456          rts
                    4457   ; }
                    4458   ; void talkword16() {
                    4459   _talkword16:
                    4460   ; talkword6    ();
0000280A  4EB8 2752 4461          jsr       _talkword6
                    4462   ; talkwordteen ();
0000280E  4EB8 27E0 4463          jsr       _talkwordteen
00002812  4E75      4464          rts
                    4465   ; }
                    4466   ; void talkword17() {
                    4467   _talkword17:
                    4468   ; talkword7      ();
00002814  4EB8 276A 4469          jsr       _talkword7
                    4470   ; talkwordteen   ();
00002818  4EB8 27E0 4471          jsr       _talkwordteen
0000281C  4E75      4472          rts
                    4473   ; }
                    4474   ; void talkword18() {
                    4475   _talkword18:
                    4476   ; talkword8    ();
0000281E  4EB8 2780 4477          jsr       _talkword8
                    4478   ; talkwordteen ();
00002822  4EB8 27E0 4479          jsr       _talkwordteen
00002826  4E75      4480          rts
                    4481   ; }
                    4482   ; void talkword19() {
                    4483   _talkword19:
                    4484   ; talkword9     ();
00002828  4EB8 278A 4485          jsr       _talkword9
                    4486   ; talkwordteen  ();
0000282C  4EB8 27E0 4487          jsr       _talkwordteen
00002830  4E75      4488          rts
                    4489   ; }
                    4490   ; void talkword20() {
                    4491   _talkword20:
                    4492   ; talkphonemeTT2 ();
00002832  4EB8 262C 4493          jsr       _talkphonemeTT2
                    4494   ; talkphonemeWW  ();
00002836  4EB8 2674 4495          jsr       _talkphonemeWW
                    4496   ; talkphonemeEH  ();
0000283A  4EB8 24AC 4497          jsr       _talkphonemeEH
                    4498   ; talkphonemeNN1 ();
0000283E  4EB8 259C 4499          jsr       _talkphonemeNN1
00002842  4E75      4500          rts
                    4501   ; }
                    4502   ; void talkwordty() {
                    4503   _talkwordty:
                    4504   ; talkphonemeTT2 ();
00002844  4EB8 262C 4505          jsr       _talkphonemeTT2
                    4506   ; talkphonemeIY  ();
00002848  4EB8 253C 4507          jsr       _talkphonemeIY
0000284C  4E75      4508          rts
                    4509   ; }
                    4510   ; void talkword30() {
                    4511   _talkword30:
                    4512   ; talkphonemeTH  ();
0000284E  4EB8 2614 4513          jsr       _talkphonemeTH
                    4514   ; talkphonemeER1 ();
00002852  4EB8 24C4 4515          jsr       _talkphonemeER1
                    4516   ; talkwordty     ();
00002856  4EB8 2844 4517          jsr       _talkwordty
0000285A  4E75      4518          rts
                    4519   ; }
                    4520   ; void talkword40() {
                    4521   _talkword40:
                    4522   ; talkword4  ();
0000285C  4EB8 273A 4523          jsr       _talkword4
                    4524   ; talkwordty ();
00002860  4EB8 2844 4525          jsr       _talkwordty
00002864  4E75      4526          rts
                    4527   ; }
                    4528   ; void talkword50() {
                    4529   _talkword50:
                    4530   ; talkphonemeFF ();
00002866  4EB8 24E8 4531          jsr       _talkphonemeFF
                    4532   ; talkphonemeIH ();
0000286A  4EB8 2530 4533          jsr       _talkphonemeIH
                    4534   ; talkphonemeFF ();
0000286E  4EB8 24E8 4535          jsr       _talkphonemeFF
                    4536   ; talkwordty    ();
00002872  4EB8 2844 4537          jsr       _talkwordty
00002876  4E75      4538          rts
                    4539   ; }
                    4540   ; void talkword60() {
                    4541   _talkword60:
                    4542   ; talkword6  ();
00002878  4EB8 2752 4543          jsr       _talkword6
                    4544   ; talkwordty ();
0000287C  4EB8 2844 4545          jsr       _talkwordty
00002880  4E75      4546          rts
                    4547   ; }
                    4548   ; void talkword70() {
                    4549   _talkword70:
                    4550   ; talkword7  ();
00002882  4EB8 276A 4551          jsr       _talkword7
                    4552   ; talkwordty ();
00002886  4EB8 2844 4553          jsr       _talkwordty
0000288A  4E75      4554          rts
                    4555   ; }
                    4556   ; void talkword80() {
                    4557   _talkword80:
                    4558   ; talkword8   ();
0000288C  4EB8 2780 4559          jsr       _talkword8
                    4560   ; talkwordty  ();
00002890  4EB8 2844 4561          jsr       _talkwordty
00002894  4E75      4562          rts
                    4563   ; }
                    4564   ; void talkword90() {
                    4565   _talkword90:
                    4566   ; talkword9   ();
00002896  4EB8 278A 4567          jsr       _talkword9
                    4568   ; talkwordty  ();
0000289A  4EB8 2844 4569          jsr       _talkwordty
0000289E  4E75      4570          rts
                    4571   ; }
                    4572   ; void talkwordhundred() {
                    4573   _talkwordhundred:
                    4574   ; talkphonemeHH2  ();
000028A0  4EB8 2524 4575          jsr       _talkphonemeHH2
                    4576   ; talkphonemeAX   ();
000028A4  4EB8 2440 4577          jsr       _talkphonemeAX
                    4578   ; talkphonemeNN1  ();
000028A8  4EB8 259C 4579          jsr       _talkphonemeNN1
                    4580   ; talkphonemeDD2  ();
000028AC  4EB8 2488 4581          jsr       _talkphonemeDD2
                    4582   ; talkphonemeRR2  ();
000028B0  4EB8 25F0 4583          jsr       _talkphonemeRR2
                    4584   ; talkphonemeDD1  ();
000028B4  4EB8 247C 4585          jsr       _talkphonemeDD1
000028B8  4E75      4586          rts
                    4587   ; }
                    4588   ; void talkworddepth() {
                    4589   _talkworddepth:
                    4590   ; talkphonemeDD2   ();
000028BA  4EB8 2488 4591          jsr       _talkphonemeDD2
                    4592   ; talkphonemeEH    ();
000028BE  4EB8 24AC 4593          jsr       _talkphonemeEH
                    4594   ; talkphonemeEH    ();
000028C2  4EB8 24AC 4595          jsr       _talkphonemeEH
                    4596   ; talkphonemePP    ();
000028C6  4EB8 25D8 4597          jsr       _talkphonemePP
                    4598   ; talkphonemeTH    ();
000028CA  4EB8 2614 4599          jsr       _talkphonemeTH
                    4600   ; endword          ();
000028CE  4EB9 0000 4601          jsr       _endword
000028D2  2AAA      
000028D4  4E75      4602          rts
                    4603   ; }
                    4604   ; void talkwordpoint() {
                    4605   _talkwordpoint:
                    4606   ; talkphonemePP   ();
000028D6  4EB8 25D8 4607          jsr       _talkphonemePP
                    4608   ; talkphonemeOY   ();
000028DA  4EB8 25CC 4609          jsr       _talkphonemeOY
                    4610   ; talkphonemeTT1  ();
000028DE  4EB8 2620 4611          jsr       _talkphonemeTT1
                    4612   ; endword         ();
000028E2  4EB9 0000 4613          jsr       _endword
000028E6  2AAA      
000028E8  4E75      4614          rts
                    4615   ; }
                    4616   ; void talkwordanchor() {
                    4617   _talkwordanchor:
                    4618   ; talkphonemeEY   ();
000028EA  4EB8 24DC 4619          jsr       _talkphonemeEY
                    4620   ; talkphonemeKK3  ();
000028EE  4EB8 256C 4621          jsr       _talkphonemeKK3
                    4622   ; talkphonemeAE   ();
000028F2  4EB8 2410 4623          jsr       _talkphonemeAE
                    4624   ; endword         ();
000028F6  4EB9 0000 4625          jsr       _endword
000028FA  2AAA      
000028FC  4E75      4626          rts
                    4627   ; }
                    4628   ; void talkwordalarm() {
                    4629   _talkwordalarm:
                    4630   ; talkphonemeAE  ();
000028FE  4EB8 2410 4631          jsr       _talkphonemeAE
                    4632   ; talkphonemeLL  ();
00002902  4EB8 2578 4633          jsr       _talkphonemeLL
                    4634   ; talkphonemeAR  ();
00002906  4EB8 2428 4635          jsr       _talkphonemeAR
                    4636   ; talkphonemeMM  ();
0000290A  4EB8 2584 4637          jsr       _talkphonemeMM
                    4638   ; endword        ();
0000290E  4EB9 0000 4639          jsr       _endword
00002912  2AAA      
00002914  4E75      4640          rts
                    4641   ; }
                    4642   ; void talkwordon() {
                    4643   _talkwordon:
                    4644   ; talkphonemeAO ();
00002916  4EB8 241C 4645          jsr       _talkphonemeAO
                    4646   ; talkphonemeNG ();
0000291A  4EB8 2590 4647          jsr       _talkphonemeNG
                    4648   ; endword       ();
0000291E  4EB9 0000 4649          jsr       _endword
00002922  2AAA      
00002924  4E75      4650          rts
                    4651   ; }
                    4652   ; void talkwordoff() {
                    4653   _talkwordoff:
                    4654   ; talkphonemeAO  ();
00002926  4EB8 241C 4655          jsr       _talkphonemeAO
                    4656   ; talkphonemeFF  ();
0000292A  4EB8 24E8 4657          jsr       _talkphonemeFF
                    4658   ; talkphonemeFF  ();
0000292E  4EB8 24E8 4659          jsr       _talkphonemeFF
                    4660   ; endword        ();
00002932  4EB9 0000 4661          jsr       _endword
00002936  2AAA      
00002938  4E75      4662          rts
                    4663   ; }
                    4664   ; void talkwordshallow() {
                    4665   _talkwordshallow:
                    4666   ; talkphonemeSH ();
0000293A  4EB8 25FC 4667          jsr       _talkphonemeSH
                    4668   ; talkphonemeAE ();
0000293E  4EB8 2410 4669          jsr       _talkphonemeAE
                    4670   ; talkphonemeLL ();
00002942  4EB8 2578 4671          jsr       _talkphonemeLL
                    4672   ; talkphonemeOW ();
00002946  4EB8 25C0 4673          jsr       _talkphonemeOW
                    4674   ; endword       ();
0000294A  4EB9 0000 4675          jsr       _endword
0000294E  2AAA      
00002950  4E75      4676          rts
                    4677   ; }
                    4678   ; void talkwordand() {
                    4679   _talkwordand:
                    4680   ; talkphonemeIH    ();
00002952  4EB8 2530 4681          jsr       _talkphonemeIH
                    4682   ; talkphonemeIH    ();
00002956  4EB8 2530 4683          jsr       _talkphonemeIH
                    4684   ; talkphonemeNN1   ();
0000295A  4EB8 259C 4685          jsr       _talkphonemeNN1
                    4686   ; talkphonemeDD2   ();
0000295E  4EB8 2488 4687          jsr       _talkphonemeDD2
                    4688   ; endword          ();
00002962  4EB9 0000 4689          jsr       _endword
00002966  2AAA      
00002968  4E75      4690          rts
                    4691   ; }
                    4692   ; void talkwordwatch() {
                    4693   _talkwordwatch:
                    4694   ; talkphonemeWW  ();
0000296A  4EB8 2674 4695          jsr       _talkphonemeWW
                    4696   ; talkphonemeAO  ();
0000296E  4EB8 241C 4697          jsr       _talkphonemeAO
                    4698   ; talkphonemeTT1 ();
00002972  4EB8 2620 4699          jsr       _talkphonemeTT1
                    4700   ; talkphonemeCH  ();
00002976  4EB8 2470 4701          jsr       _talkphonemeCH
                    4702   ; endword        ();
0000297A  4EB9 0000 4703          jsr       _endword
0000297E  2AAA      
00002980  4E75      4704          rts
                    4705   ; }
                    4706   ; void talkwordlimit() {
                    4707   _talkwordlimit:
                    4708   ; talkphonemeLL   ();
00002982  4EB8 2578 4709          jsr       _talkphonemeLL
                    4710   ; talkphonemeIH   ();
00002986  4EB8 2530 4711          jsr       _talkphonemeIH
                    4712   ; talkphonemeMM   ();
0000298A  4EB8 2584 4713          jsr       _talkphonemeMM
                    4714   ; talkphonemeIH   ();
0000298E  4EB8 2530 4715          jsr       _talkphonemeIH
                    4716   ; talkphonemeTT1  ();
00002992  4EB8 2620 4717          jsr       _talkphonemeTT1
                    4718   ; endword         ();
00002996  4EB9 0000 4719          jsr       _endword
0000299A  2AAA      
0000299C  4E75      4720          rts
                    4721   ; }
                    4722   ; void talkwordset()  {
                    4723   _talkwordset:
                    4724   ; talkphonemeSS    ();
0000299E  4EB8 2608 4725          jsr       _talkphonemeSS
                    4726   ; talkphonemeSS    ();
000029A2  4EB8 2608 4727          jsr       _talkphonemeSS
                    4728   ; talkphonemeEH    ();
000029A6  4EB8 24AC 4729          jsr       _talkphonemeEH
                    4730   ; talkphonemeTT2   ();
000029AA  4EB8 262C 4731          jsr       _talkphonemeTT2
                    4732   ; endword          ();
000029AE  4EB9 0000 4733          jsr       _endword
000029B2  2AAA      
000029B4  4E75      4734          rts
                    4735   ; }
                    4736   ; void talkwordheading() {
                    4737   _talkwordheading:
                    4738   ; talkphonemeHH1   ();
000029B6  4EB8 2518 4739          jsr       _talkphonemeHH1
                    4740   ; talkphonemeEH    ();
000029BA  4EB8 24AC 4741          jsr       _talkphonemeEH
                    4742   ; talkphonemeDD2   ();
000029BE  4EB8 2488 4743          jsr       _talkphonemeDD2
                    4744   ; talkphonemeIH    ();
000029C2  4EB8 2530 4745          jsr       _talkphonemeIH
                    4746   ; talkphonemeNG    ();
000029C6  4EB8 2590 4747          jsr       _talkphonemeNG
                    4748   ; endword          ();
000029CA  4EB9 0000 4749          jsr       _endword
000029CE  2AAA      
000029D0  4E75      4750          rts
                    4751   ; }
                    4752   ; void talkwordgps() {
                    4753   _talkwordgps:
                    4754   ; talkphonemeJH  ();
000029D2  4EB8 2548 4755          jsr       _talkphonemeJH
                    4756   ; talkphonemeIY  ();
000029D6  4EB8 253C 4757          jsr       _talkphonemeIY
                    4758   ; talkphonemePP  ();
000029DA  4EB8 25D8 4759          jsr       _talkphonemePP
                    4760   ; talkphonemeIY  ();
000029DE  4EB8 253C 4761          jsr       _talkphonemeIY
                    4762   ; talkphonemeEH  ();
000029E2  4EB8 24AC 4763          jsr       _talkphonemeEH
                    4764   ; talkphonemeSS  ();
000029E6  4EB8 2608 4765          jsr       _talkphonemeSS
                    4766   ; talkphonemeSS  ();
000029EA  4EB8 2608 4767          jsr       _talkphonemeSS
                    4768   ; endword        ();
000029EE  4EB9 0000 4769          jsr       _endword
000029F2  2AAA      
000029F4  4E75      4770          rts
                    4771   ; }
                    4772   ; void talkwordno() {
                    4773   _talkwordno:
                    4774   ; talkphonemeNN2  ();
000029F6  4EB8 25A8 4775          jsr       _talkphonemeNN2
                    4776   ; talkphonemeOW   ();
000029FA  4EB8 25C0 4777          jsr       _talkphonemeOW
                    4778   ; endword         ();
000029FE  4EB9 0000 4779          jsr       _endword
00002A02  2AAA      
00002A04  4E75      4780          rts
                    4781   ; }
                    4782   ; void talkworddata() {
                    4783   _talkworddata:
                    4784   ; talkphonemeDD2   ();
00002A06  4EB8 2488 4785          jsr       _talkphonemeDD2
                    4786   ; talkphonemeEY    ();
00002A0A  4EB8 24DC 4787          jsr       _talkphonemeEY
                    4788   ; talkphonemeTT2   ();
00002A0E  4EB8 262C 4789          jsr       _talkphonemeTT2
                    4790   ; talkphonemeAX    ();
00002A12  4EB8 2440 4791          jsr       _talkphonemeAX
                    4792   ; endword          ();
00002A16  4EB9 0000 4793          jsr       _endword
00002A1A  2AAA      
00002A1C  4E75      4794          rts
                    4795   ; }
                    4796   ; void talkwordnorth() {
                    4797   _talkwordnorth:
                    4798   ; talkphonemeNN2 ();
00002A1E  4EB8 25A8 4799          jsr       _talkphonemeNN2
                    4800   ; talkphonemeOR  ();
00002A22  4EB8 25B4 4801          jsr       _talkphonemeOR
                    4802   ; talkphonemeHH1 ();
00002A26  4EB8 2518 4803          jsr       _talkphonemeHH1
                    4804   ; endword        ();
00002A2A  4EB9 0000 4805          jsr       _endword
00002A2E  2AAA      
00002A30  4E75      4806          rts
                    4807   ; }
                    4808   ; void talkwordsouth() {
                    4809   _talkwordsouth:
                    4810   ; talkphonemeSS();
00002A32  4EB8 2608 4811          jsr       _talkphonemeSS
                    4812   ; talkphonemeSS();
00002A36  4EB8 2608 4813          jsr       _talkphonemeSS
                    4814   ; talkphonemeAW();
00002A3A  4EB8 2434 4815          jsr       _talkphonemeAW
                    4816   ; talkphonemeTH();
00002A3E  4EB8 2614 4817          jsr       _talkphonemeTH
                    4818   ; talkphonemeTH();
00002A42  4EB8 2614 4819          jsr       _talkphonemeTH
00002A46  4E75      4820          rts
                    4821   ; }
                    4822   ; void talkwordeast() {
                    4823   _talkwordeast:
                    4824   ; talkphonemeIY   ();
00002A48  4EB8 253C 4825          jsr       _talkphonemeIY
                    4826   ; talkphonemeSS   ();
00002A4C  4EB8 2608 4827          jsr       _talkphonemeSS
                    4828   ; talkphonemeSS   ();
00002A50  4EB8 2608 4829          jsr       _talkphonemeSS
                    4830   ; talkphonemeTT2  ();
00002A54  4EB8 262C 4831          jsr       _talkphonemeTT2
                    4832   ; endword         ();
00002A58  4EB9 0000 4833          jsr       _endword
00002A5C  2AAA      
00002A5E  4E75      4834          rts
                    4835   ; }
                    4836   ; void talkwordwest() {
                    4837   _talkwordwest:
                    4838   ; talkphonemeWW     ();
00002A60  4EB8 2674 4839          jsr       _talkphonemeWW
                    4840   ; talkphonemeEH     ();
00002A64  4EB8 24AC 4841          jsr       _talkphonemeEH
                    4842   ; talkphonemeSS     ();
00002A68  4EB8 2608 4843          jsr       _talkphonemeSS
                    4844   ; talkphonemeSS     ();
00002A6C  4EB8 2608 4845          jsr       _talkphonemeSS
                    4846   ; talkphonemeTT2    ();
00002A70  4EB8 262C 4847          jsr       _talkphonemeTT2
                    4848   ; endword           ();
00002A74  4EB9 0000 4849          jsr       _endword
00002A78  2AAA      
00002A7A  4E75      4850          rts
                    4851   ; }
                    4852   ; void talkwordposition() {
                    4853   _talkwordposition:
                    4854   ; talkphonemePP   ();
00002A7C  4EB8 25D8 4855          jsr       _talkphonemePP
                    4856   ; talkphonemeIH   ();
00002A80  4EB8 2530 4857          jsr       _talkphonemeIH
                    4858   ; talkphonemeZZ   ();
00002A84  4EB8 26BC 4859          jsr       _talkphonemeZZ
                    4860   ; talkphonemeIH   ();
00002A88  4EB8 2530 4861          jsr       _talkphonemeIH
                    4862   ; talkphonemeSH   ();
00002A8C  4EB8 25FC 4863          jsr       _talkphonemeSH
                    4864   ; talkphonemeNN1  ();
00002A90  4EB8 259C 4865          jsr       _talkphonemeNN1
                    4866   ; endword         ();
00002A94  4EB9 0000 4867          jsr       _endword
00002A98  2AAA      
00002A9A  4E75      4868          rts
                    4869   ; }
                    4870   ; void talkphonemePA6() {
                    4871   _talkphonemePA6:
                    4872   ; talkphonemePA5();
00002A9C  4EB8 26F6 4873          jsr       _talkphonemePA5
                    4874   ; talkphonemePA5();
00002AA0  4EB8 26F6 4875          jsr       _talkphonemePA5
                    4876   ; talkphonemePA4();
00002AA4  4EB8 26EA 4877          jsr       _talkphonemePA4
00002AA8  4E75      4878          rts
                    4879   ; }
                    4880   ; void endword() {
                    4881   _endword:
                    4882   ; talkphonemePA5();
00002AAA  4EB8 26F6 4883          jsr       _talkphonemePA5
                    4884   ; talkphonemePA4();
00002AAE  4EB8 26EA 4885          jsr       _talkphonemePA4
00002AB2  4E75      4886          rts
                    4887   ; }
                    4888   ; C:\USERS\10054\ONEDRIVE\CPEN 412 FINAL PROJECT\FINAL_PROJECT_2023_SEM2_STUDENT_TEMPLATE\FINAL_PROJECT_2023_SEM2_STUDENT_TEMPLATE\PROGRAMS\DEBUGMONITORCODE\TETRIS.C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                    4889   ; #include <stdio.h>
                    4890   ; #include <stdlib.h>
                    4891   ; #include <limits.h>
                    4892   ; #include "tetris.h"
                    4893   ; #include "say_phoneme.h"
                    4894   ; #define Timer1Data *(volatile unsigned char *)(0x00400030)
                    4895   ; #define Timer1Control *(volatile unsigned char *)(0x00400032)
                    4896   ; #define Timer1Status *(volatile unsigned char *)(0x00400032)
                    4897   ; #define octlAddress1 *(char *)(0xFF030001)
                    4898   ; #define octlAddress *(char *)(0xFF030000)
                    4899   ; char Table[TETRIS_ROWS][TETRIS_COLS];
                    4900   ; int tetris_score;
                    4901   ; char GameOn;
                    4902   ; int tetris_timer;
                    4903   ; char octl;
                    4904   ; typedef struct {
                    4905   ; char array[MAX_SHAPE_SIZE][MAX_SHAPE_SIZE];
                    4906   ; int width, row, col;
                    4907   ; } Shape;
                    4908   ; Shape current;
                    4909   ; Shape ShapesArray[NUM_SHAPES];
                    4910   ; struct
                    4911   ; {
                    4912   ; int speed;
                    4913   ; int speed_increase;
                    4914   ; } Tetris_Speed;
                    4915   ; int printw_x;  //hint: could be a useful variable
                    4916   ; int printw_y;  //hint: could be a useful variable
                    4917   ; int cx, cy, cl;
                    4918   ; int timer_count;
                    4919   ; /* Compute x mod y using binary long division. */
                    4920   ; int mod_bld(int x, int y)
                    4921   ; {
                    4922   _mod_bld:
00002AB4  4E56 0000 4923          link      A6,#0
00002AB8  48E7 3000 4924          movem.l   D2/D3,-(A7)
                    4925   ; int modulus = x, divisor = y;
00002ABC  262E 0008 4926          move.l    8(A6),D3
00002AC0  242E 000C 4927          move.l    12(A6),D2
                    4928   ; while (divisor <= modulus && divisor <= 16384)
                    4929   mod_bld_1:
00002AC4  B483      4930          cmp.l     D3,D2
00002AC6  6E0C      4931          bgt.s     mod_bld_3
00002AC8  0C82 0000 4932          cmp.l     #16384,D2
00002ACC  4000      
00002ACE  6E04      4933          bgt.s     mod_bld_3
                    4934   ; divisor <<= 1;
00002AD0  E382      4935          asl.l     #1,D2
00002AD2  60F0      4936          bra       mod_bld_1
                    4937   mod_bld_3:
                    4938   ; while (modulus >= y) {
                    4939   mod_bld_4:
00002AD4  B6AE 000C 4940          cmp.l     12(A6),D3
00002AD8  6D0C      4941          blt.s     mod_bld_6
                    4942   ; while (divisor > modulus)
                    4943   mod_bld_7:
00002ADA  B483      4944          cmp.l     D3,D2
00002ADC  6F04      4945          ble.s     mod_bld_9
                    4946   ; divisor >>= 1;
00002ADE  E282      4947          asr.l     #1,D2
00002AE0  60F8      4948          bra       mod_bld_7
                    4949   mod_bld_9:
                    4950   ; modulus -= divisor;
00002AE2  9682      4951          sub.l     D2,D3
00002AE4  60EE      4952          bra       mod_bld_4
                    4953   mod_bld_6:
                    4954   ; }
                    4955   ; return modulus;
00002AE6  2003      4956          move.l    D3,D0
00002AE8  4CDF 000C 4957          movem.l   (A7)+,D2/D3
00002AEC  4E5E      4958          unlk      A6
00002AEE  4E75      4959          rts
                    4960   ; }
                    4961   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    4962   ; //
                    4963   ; //
                    4964   ; //                        functions to implement
                    4965   ; //
                    4966   ; //
                    4967   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    4968   ; void Timer_ISR() {
                    4969   _Timer_ISR:
                    4970   ; ++timer_count;
00002AF0  52B9 0803 4971          addq.l    #1,_timer_count.L
00002AF4  077A      
                    4972   ; printf("Timer ISR, %d\n", timer_count);
00002AF6  2F39 0803 4973          move.l    _timer_count.L,-(A7)
00002AFA  077A      
00002AFC  4879 0000 4974          pea       @tetris_1.L
00002B00  4FF8      
00002B02  4EB9 0000 4975          jsr       _printf
00002B06  3B88      
00002B08  504F      4976          addq.w    #8,A7
00002B0A  4E75      4977          rts
                    4978   ; }
                    4979   ; // #define StartOfExceptionVectorTable 0x08030000
                    4980   ; // void InstallExceptionHandler(void (*function_ptr)(), int level)
                    4981   ; // {
                    4982   ; //     volatile long int *RamVectorAddress = (volatile long int *)(StartOfExceptionVectorTable); // pointer to the Ram based interrupt vector table created in Cstart in debug monitor
                    4983   ; //     RamVectorAddress[level] = (long int *)(function_ptr); // install the address of our function into the exception table
                    4984   ; // }
                    4985   ; void Wait1ms_here(void)
                    4986   ; {
                    4987   _Wait1ms_here:
00002B0C  2F02      4988          move.l    D2,-(A7)
                    4989   ; int what;
                    4990   ; for (what = 0; what < 1000; what++)
00002B0E  4282      4991          clr.l     D2
                    4992   Wait1ms_here_1:
00002B10  0C82 0000 4993          cmp.l     #1000,D2
00002B14  03E8      
00002B16  6C04      4994          bge.s     Wait1ms_here_3
00002B18  5282      4995          addq.l    #1,D2
00002B1A  60F4      4996          bra       Wait1ms_here_1
                    4997   Wait1ms_here_3:
00002B1C  241F      4998          move.l    (A7)+,D2
00002B1E  4E75      4999          rts
                    5000   ; ;
                    5001   ; }
                    5002   ; void Wait250ms_here(void)
                    5003   ; {
                    5004   _Wait250ms_here:
00002B20  2F02      5005          move.l    D2,-(A7)
                    5006   ; int what;
                    5007   ; for (what = 0; what < 250; what++)
00002B22  4282      5008          clr.l     D2
                    5009   Wait250ms_here_1:
00002B24  0C82 0000 5010          cmp.l     #250,D2
00002B28  00FA      
00002B2A  6C08      5011          bge.s     Wait250ms_here_3
                    5012   ; Wait1ms_here();
00002B2C  4EB8 2B0C 5013          jsr       _Wait1ms_here
00002B30  5282      5014          addq.l    #1,D2
00002B32  60F0      5015          bra       Wait250ms_here_1
                    5016   Wait250ms_here_3:
00002B34  241F      5017          move.l    (A7)+,D2
00002B36  4E75      5018          rts
                    5019   ; }
                    5020   ; void changeChar(int addr, char c){
                    5021   _changeChar:
00002B38  4E56 0000 5022          link      A6,#0
                    5023   ; *(char*)(VGA_ADDRESS + addr * 2 + 1) = c;
00002B3C  203C FFFF 5024          move.l    #-65536,D0
00002B40  0000      
00002B42  2F2E 0008 5025          move.l    8(A6),-(A7)
00002B46  4878 0002 5026          pea       2
00002B4A  4EB9 0000 5027          jsr       LMUL
00002B4E  3A28      
00002B50  2217      5028          move.l    (A7),D1
00002B52  504F      5029          addq.w    #8,A7
00002B54  5281      5030          addq.l    #1,D1
00002B56  D081      5031          add.l     D1,D0
00002B58  2040      5032          move.l    D0,A0
00002B5A  10AE 000F 5033          move.b    15(A6),(A0)
00002B5E  4E5E      5034          unlk      A6
00002B60  4E75      5035          rts
                    5036   ; // *(char*)(VGA_ADDRESS + addr * 2) = c;
                    5037   ; }
                    5038   ; void changeColor(int addr, char color){
                    5039   _changeColor:
00002B62  4E56 0000 5040          link      A6,#0
00002B66  2F02      5041          move.l    D2,-(A7)
                    5042   ; char change = octl & 0xF8;
00002B68  1039 0803 5043          move.b    _octl.L,D0
00002B6C  067C      
00002B6E  4880      5044          ext.w     D0
00002B70  C07C 00F8 5045          and.w     #248,D0
00002B74  1400      5046          move.b    D0,D2
                    5047   ; change |= color;
00002B76  102E 000F 5048          move.b    15(A6),D0
00002B7A  8400      5049          or.b      D0,D2
                    5050   ; octlAddress = change;
00002B7C  13C2 FF03 5051          move.b    D2,-16580608
00002B80  0000      
                    5052   ; octlAddress1 = change;
00002B82  13C2 FF03 5053          move.b    D2,-16580607
00002B86  0001      
00002B88  241F      5054          move.l    (A7)+,D2
00002B8A  4E5E      5055          unlk      A6
00002B8C  4E75      5056          rts
                    5057   ; }
                    5058   ; void updateChar(int x, int y, char c){
                    5059   _updateChar:
00002B8E  4E56 0000 5060          link      A6,#0
                    5061   ; changeChar(y * screen_width + x, c);
00002B92  122E 0013 5062          move.b    19(A6),D1
00002B96  4881      5063          ext.w     D1
00002B98  48C1      5064          ext.l     D1
00002B9A  2F01      5065          move.l    D1,-(A7)
00002B9C  2F2E 000C 5066          move.l    12(A6),-(A7)
00002BA0  4878 0050 5067          pea       80
00002BA4  4EB9 0000 5068          jsr       LMUL
00002BA8  3A28      
00002BAA  2217      5069          move.l    (A7),D1
00002BAC  504F      5070          addq.w    #8,A7
00002BAE  D2AE 0008 5071          add.l     8(A6),D1
00002BB2  2F01      5072          move.l    D1,-(A7)
00002BB4  4EB8 2B38 5073          jsr       _changeChar
00002BB8  504F      5074          addq.w    #8,A7
00002BBA  4E5E      5075          unlk      A6
00002BBC  4E75      5076          rts
                    5077   ; }
                    5078   ; void updateColor(int x, int y, char color){
                    5079   _updateColor:
00002BBE  4E56 0000 5080          link      A6,#0
                    5081   ; changeColor(y * screen_width + x, color);
00002BC2  122E 0013 5082          move.b    19(A6),D1
00002BC6  4881      5083          ext.w     D1
00002BC8  48C1      5084          ext.l     D1
00002BCA  2F01      5085          move.l    D1,-(A7)
00002BCC  2F2E 000C 5086          move.l    12(A6),-(A7)
00002BD0  4878 0050 5087          pea       80
00002BD4  4EB9 0000 5088          jsr       LMUL
00002BD8  3A28      
00002BDA  2217      5089          move.l    (A7),D1
00002BDC  504F      5090          addq.w    #8,A7
00002BDE  D2AE 0008 5091          add.l     8(A6),D1
00002BE2  2F01      5092          move.l    D1,-(A7)
00002BE4  4EB8 2B62 5093          jsr       _changeColor
00002BE8  504F      5094          addq.w    #8,A7
00002BEA  4E5E      5095          unlk      A6
00002BEC  4E75      5096          rts
                    5097   ; }
                    5098   ; void charWithSetColor(int x, int y, char c){
                    5099   _charWithSetColor:
00002BEE  4E56 0000 5100          link      A6,#0
                    5101   ; updateColor(x, y, octl);
00002BF2  1239 0803 5102          move.b    _octl.L,D1
00002BF6  067C      
00002BF8  4881      5103          ext.w     D1
00002BFA  48C1      5104          ext.l     D1
00002BFC  2F01      5105          move.l    D1,-(A7)
00002BFE  2F2E 000C 5106          move.l    12(A6),-(A7)
00002C02  2F2E 0008 5107          move.l    8(A6),-(A7)
00002C06  4EB8 2BBE 5108          jsr       _updateColor
00002C0A  DEFC 000C 5109          add.w     #12,A7
                    5110   ; updateChar(x, y, c);
00002C0E  122E 0013 5111          move.b    19(A6),D1
00002C12  4881      5112          ext.w     D1
00002C14  48C1      5113          ext.l     D1
00002C16  2F01      5114          move.l    D1,-(A7)
00002C18  2F2E 000C 5115          move.l    12(A6),-(A7)
00002C1C  2F2E 0008 5116          move.l    8(A6),-(A7)
00002C20  4EB8 2B8E 5117          jsr       _updateChar
00002C24  DEFC 000C 5118          add.w     #12,A7
00002C28  4E5E      5119          unlk      A6
00002C2A  4E75      5120          rts
                    5121   ; }
                    5122   ; void writeVGA(int addr, char c , char color){
                    5123   _writeVGA:
00002C2C  4E56 0000 5124          link      A6,#0
                    5125   ; changeColor(addr, color);
00002C30  122E 0013 5126          move.b    19(A6),D1
00002C34  4881      5127          ext.w     D1
00002C36  48C1      5128          ext.l     D1
00002C38  2F01      5129          move.l    D1,-(A7)
00002C3A  2F2E 0008 5130          move.l    8(A6),-(A7)
00002C3E  4EB8 2B62 5131          jsr       _changeColor
00002C42  504F      5132          addq.w    #8,A7
                    5133   ; changeChar(addr, c);
00002C44  122E 000F 5134          move.b    15(A6),D1
00002C48  4881      5135          ext.w     D1
00002C4A  48C1      5136          ext.l     D1
00002C4C  2F01      5137          move.l    D1,-(A7)
00002C4E  2F2E 0008 5138          move.l    8(A6),-(A7)
00002C52  4EB8 2B38 5139          jsr       _changeChar
00002C56  504F      5140          addq.w    #8,A7
00002C58  4E5E      5141          unlk      A6
00002C5A  4E75      5142          rts
                    5143   ; }
                    5144   ; void updateVGA(int x, int y, char c, char color){
                    5145   _updateVGA:
00002C5C  4E56 0000 5146          link      A6,#0
                    5147   ; writeVGA(y * screen_width + x, c, color);
00002C60  122E 0017 5148          move.b    23(A6),D1
00002C64  4881      5149          ext.w     D1
00002C66  48C1      5150          ext.l     D1
00002C68  2F01      5151          move.l    D1,-(A7)
00002C6A  122E 0013 5152          move.b    19(A6),D1
00002C6E  4881      5153          ext.w     D1
00002C70  48C1      5154          ext.l     D1
00002C72  2F01      5155          move.l    D1,-(A7)
00002C74  2F2E 000C 5156          move.l    12(A6),-(A7)
00002C78  4878 0050 5157          pea       80
00002C7C  4EB9 0000 5158          jsr       LMUL
00002C80  3A28      
00002C82  2217      5159          move.l    (A7),D1
00002C84  504F      5160          addq.w    #8,A7
00002C86  D2AE 0008 5161          add.l     8(A6),D1
00002C8A  2F01      5162          move.l    D1,-(A7)
00002C8C  4EB8 2C2C 5163          jsr       _writeVGA
00002C90  DEFC 000C 5164          add.w     #12,A7
00002C94  4E5E      5165          unlk      A6
00002C96  4E75      5166          rts
                    5167   ; }
                    5168   ; void update_cursor(int x, int y){
                    5169   _update_cursor:
00002C98  4E56 0000 5170          link      A6,#0
                    5171   ; cx = x;
00002C9C  23EE 0008 5172          move.l    8(A6),_cx.L
00002CA0  0803 076E 
                    5173   ; cy = y;
00002CA4  23EE 000C 5174          move.l    12(A6),_cy.L
00002CA8  0803 0772 
                    5175   ; cursor_x = cx;
00002CAC  2039 0803 5176          move.l    _cx.L,D0
00002CB0  076E      
00002CB2  13C0 FF01 5177          move.b    D0,-16711680
00002CB6  0000      
                    5178   ; cursor_x1 = cx;
00002CB8  2039 0803 5179          move.l    _cx.L,D0
00002CBC  076E      
00002CBE  13C0 FF01 5180          move.b    D0,-16711679
00002CC2  0001      
                    5181   ; cursor_y = cy;
00002CC4  2039 0803 5182          move.l    _cy.L,D0
00002CC8  0772      
00002CCA  13C0 FF01 5183          move.b    D0,-16711678
00002CCE  0002      
                    5184   ; cursor_y1 = cy;
00002CD0  2039 0803 5185          move.l    _cy.L,D0
00002CD4  0772      
00002CD6  13C0 FF01 5186          move.b    D0,-16711677
00002CDA  0003      
00002CDC  4E5E      5187          unlk      A6
00002CDE  4E75      5188          rts
                    5189   ; }
                    5190   ; void go_to_top_corner()
                    5191   ; {
                    5192   _go_to_top_corner:
                    5193   ; update_cursor(0,0);
00002CE0  42A7      5194          clr.l     -(A7)
00002CE2  42A7      5195          clr.l     -(A7)
00002CE4  4EB8 2C98 5196          jsr       _update_cursor
00002CE8  504F      5197          addq.w    #8,A7
00002CEA  4E75      5198          rts
                    5199   ; };
                    5200   ; void clear_screen()
                    5201   ; {
                    5202   _clear_screen:
00002CEC  2F02      5203          move.l    D2,-(A7)
                    5204   ; int i;
                    5205   ; for (i = 0; i <= 0xFFF; i++) {
00002CEE  4282      5206          clr.l     D2
                    5207   clear_screen_1:
00002CF0  0C82 0000 5208          cmp.l     #4095,D2
00002CF4  0FFF      
00002CF6  6E32      5209          bgt.s     clear_screen_3
                    5210   ; writeVGA(i, ' ', octl & 0x07);
00002CF8  1239 0803 5211          move.b    _octl.L,D1
00002CFC  067C      
00002CFE  C23C 0007 5212          and.b     #7,D1
00002D02  4881      5213          ext.w     D1
00002D04  48C1      5214          ext.l     D1
00002D06  2F01      5215          move.l    D1,-(A7)
00002D08  4878 0020 5216          pea       32
00002D0C  2F02      5217          move.l    D2,-(A7)
00002D0E  4EB8 2C2C 5218          jsr       _writeVGA
00002D12  DEFC 000C 5219          add.w     #12,A7
                    5220   ; printf("%d\n", i);
00002D16  2F02      5221          move.l    D2,-(A7)
00002D18  4879 0000 5222          pea       @tetris_2.L
00002D1C  5008      
00002D1E  4EB9 0000 5223          jsr       _printf
00002D22  3B88      
00002D24  504F      5224          addq.w    #8,A7
00002D26  5282      5225          addq.l    #1,D2
00002D28  60C6      5226          bra       clear_screen_1
                    5227   clear_screen_3:
00002D2A  241F      5228          move.l    (A7)+,D2
00002D2C  4E75      5229          rts
                    5230   ; }
                    5231   ; // int iiii, jjjjj;
                    5232   ; // for(iiii = 0; iiii < screen_height; iiii++){
                    5233   ; // 	for(jjjjj = 0; jjjjj < screen_width; jjjjj++){
                    5234   ; // 		printf("i: %d, j: %d\n", iiii, jjjjj);
                    5235   ; // 		updateVGA(jjjjj, iiii, 'C', 4);
                    5236   ; // 	}
                    5237   ; // }
                    5238   ; };
                    5239   ; void say_awesome() {
                    5240   _say_awesome:
                    5241   ; talkphonemeAO();
00002D2E  4EB8 241C 5242          jsr       _talkphonemeAO
                    5243   ; talkphonemeSS();
00002D32  4EB8 2608 5244          jsr       _talkphonemeSS
                    5245   ; talkphonemeOW();
00002D36  4EB8 25C0 5246          jsr       _talkphonemeOW
                    5247   ; talkphonemeMM();
00002D3A  4EB8 2584 5248          jsr       _talkphonemeMM
                    5249   ; endword();
00002D3E  4EB8 2AAA 5250          jsr       _endword
00002D42  4E75      5251          rts
                    5252   ; }
                    5253   ; void say_cool() {
                    5254   _say_cool:
                    5255   ; talkphonemeKK1();
00002D44  4EB8 2554 5256          jsr       _talkphonemeKK1
                    5257   ; talkphonemeUH();
00002D48  4EB8 2638 5258          jsr       _talkphonemeUH
                    5259   ; talkphonemeEL();
00002D4C  4EB8 24B8 5260          jsr       _talkphonemeEL
                    5261   ; endword();
00002D50  4EB8 2AAA 5262          jsr       _endword
00002D54  4E75      5263          rts
                    5264   ; }
                    5265   ; void say_yeah() {
                    5266   _say_yeah:
                    5267   ; talkphonemeYY2();
00002D56  4EB8 26A4 5268          jsr       _talkphonemeYY2
                    5269   ; talkphonemeEH();
00002D5A  4EB8 24AC 5270          jsr       _talkphonemeEH
                    5271   ; endword();
00002D5E  4EB8 2AAA 5272          jsr       _endword
00002D62  4E75      5273          rts
                    5274   ; }
                    5275   ; void putcharxy(int x, int y, char ch,char* error_message) {
                    5276   _putcharxy:
00002D64  4E56 0000 5277          link      A6,#0
00002D68  48E7 3000 5278          movem.l   D2/D3,-(A7)
00002D6C  242E 000C 5279          move.l    12(A6),D2
00002D70  262E 0008 5280          move.l    8(A6),D3
                    5281   ; //Put the character "ch" in row x, column y on the screen.
                    5282   ; //The parameter "error_message" can be used to print out
                    5283   ; //an error message in Hyperterminal during debugging if, 
                    5284   ; //for example, x or y are out of range
                    5285   ; if (x < 0 || x >= screen_height || y < 0 || y >= screen_width) {
00002D74  0C83 0000 5286          cmp.l     #0,D3
00002D78  0000      
00002D7A  6D18      5287          blt.s     putcharxy_3
00002D7C  0C83 0000 5288          cmp.l     #40,D3
00002D80  0028      
00002D82  6C10      5289          bge.s     putcharxy_3
00002D84  0C82 0000 5290          cmp.l     #0,D2
00002D88  0000      
00002D8A  6D08      5291          blt.s     putcharxy_3
00002D8C  0C82 0000 5292          cmp.l     #80,D2
00002D90  0050      
00002D92  6D14      5293          blt.s     putcharxy_1
                    5294   putcharxy_3:
                    5295   ; printf("%s\n", error_message);
00002D94  2F2E 0014 5296          move.l    20(A6),-(A7)
00002D98  4879 0000 5297          pea       @tetris_3.L
00002D9C  500C      
00002D9E  4EB9 0000 5298          jsr       _printf
00002DA2  3B88      
00002DA4  504F      5299          addq.w    #8,A7
00002DA6  6026      5300          bra.s     putcharxy_2
                    5301   putcharxy_1:
                    5302   ; // printf("x: %d, y: %d\n", x, y);
                    5303   ; } else {
                    5304   ; updateVGA(x, y, ch, octl & 0x07);
00002DA8  1239 0803 5305          move.b    _octl.L,D1
00002DAC  067C      
00002DAE  C23C 0007 5306          and.b     #7,D1
00002DB2  4881      5307          ext.w     D1
00002DB4  48C1      5308          ext.l     D1
00002DB6  2F01      5309          move.l    D1,-(A7)
00002DB8  122E 0013 5310          move.b    19(A6),D1
00002DBC  4881      5311          ext.w     D1
00002DBE  48C1      5312          ext.l     D1
00002DC0  2F01      5313          move.l    D1,-(A7)
00002DC2  2F02      5314          move.l    D2,-(A7)
00002DC4  2F03      5315          move.l    D3,-(A7)
00002DC6  4EB8 2C5C 5316          jsr       _updateVGA
00002DCA  DEFC 0010 5317          add.w     #16,A7
                    5318   putcharxy_2:
00002DCE  4CDF 000C 5319          movem.l   (A7)+,D2/D3
00002DD2  4E5E      5320          unlk      A6
00002DD4  4E75      5321          rts
                    5322   ; }
                    5323   ; }
                    5324   ; void gotoxy(int x, int y)
                    5325   ; {
                    5326   _gotoxy:
00002DD6  4E56 0000 5327          link      A6,#0
                    5328   ; update_cursor(x,y);
00002DDA  2F2E 000C 5329          move.l    12(A6),-(A7)
00002DDE  2F2E 0008 5330          move.l    8(A6),-(A7)
00002DE2  4EB8 2C98 5331          jsr       _update_cursor
00002DE6  504F      5332          addq.w    #8,A7
00002DE8  4E5E      5333          unlk      A6
00002DEA  4E75      5334          rts
                    5335   ; };
                    5336   ; void set_vga_control_reg(char x) {
                    5337   _set_vga_control_reg:
00002DEC  4E56 0000 5338          link      A6,#0
                    5339   ; //Set the value of the control register in the VGA core
                    5340   ; //write this function
                    5341   ; octl = x & 0xF8;
00002DF0  102E 000B 5342          move.b    11(A6),D0
00002DF4  4880      5343          ext.w     D0
00002DF6  C07C 00F8 5344          and.w     #248,D0
00002DFA  13C0 0803 5345          move.b    D0,_octl.L
00002DFE  067C      
00002E00  4E5E      5346          unlk      A6
00002E02  4E75      5347          rts
                    5348   ; }
                    5349   ; char get_vga_control_reg() {
                    5350   _get_vga_control_reg:
                    5351   ; //Get the value of the control register in the VGA core
                    5352   ; //write this function
                    5353   ; return octl;
00002E04  1039 0803 5354          move.b    _octl.L,D0
00002E08  067C      
00002E0A  4E75      5355          rts
                    5356   ; }
                    5357   ; void set_color(int color) {
                    5358   _set_color:
00002E0C  4E56 0000 5359          link      A6,#0
                    5360   ; octl &= 0xF8; //8'b1111_1000
00002E10  0239 00F8 5361          and.b     #248,_octl.L
00002E14  0803 067C 
                    5362   ; octl |= color;
00002E18  202E 0008 5363          move.l    8(A6),D0
00002E1C  8139 0803 5364          or.b      D0,_octl.L
00002E20  067C      
00002E22  4E5E      5365          unlk      A6
00002E24  4E75      5366          rts
                    5367   ; }
                    5368   ; int clock() {
                    5369   _clock:
                    5370   ; //Returns time in milliseconds since the timer was initialized
                    5371   ; //write this function
                    5372   ; return timer_count * 100;
00002E26  2F39 0803 5373          move.l    _timer_count.L,-(A7)
00002E2A  077A      
00002E2C  4878 0064 5374          pea       100
00002E30  4EB9 0000 5375          jsr       LMUL
00002E34  3A28      
00002E36  2017      5376          move.l    (A7),D0
00002E38  504F      5377          addq.w    #8,A7
00002E3A  4E75      5378          rts
                    5379   ; }
                    5380   ; void printw(const char* str,char* error_message) {
                    5381   _printw:
00002E3C  4E56 0000 5382          link      A6,#0
00002E40  48E7 3020 5383          movem.l   D2/D3/A2,-(A7)
00002E44  45F9 0803 5384          lea       _printw_x.L,A2
00002E48  0766      
00002E4A  262E 0008 5385          move.l    8(A6),D3
                    5386   ; //like "printf", just on the VGA screen
                    5387   ; //a newline character ("\n") causes the location
                    5388   ; //to move to the beginning of a new line
                    5389   ; //prints the string in the parameter "str", 
                    5390   ; //the parameter "error_message" can be used for debugging
                    5391   ; //hint: maybe this function could use the function  putcharxy(int x, int y, char ch,char* error_message)
                    5392   ; int index = 0;
00002E4E  4282      5393          clr.l     D2
                    5394   ; while (str[index] != '\0') {
                    5395   printw_1:
00002E50  2043      5396          move.l    D3,A0
00002E52  1030 2800 5397          move.b    0(A0,D2.L),D0
00002E56  6700 003E 5398          beq       printw_3
                    5399   ; if (str[index] == '\n') {
00002E5A  2043      5400          move.l    D3,A0
00002E5C  1030 2800 5401          move.b    0(A0,D2.L),D0
00002E60  0C00 000A 5402          cmp.b     #10,D0
00002E64  660A      5403          bne.s     printw_4
                    5404   ; printw_x = 0;
00002E66  4292      5405          clr.l     (A2)
                    5406   ; printw_y++;
00002E68  52B9 0803 5407          addq.l    #1,_printw_y.L
00002E6C  076A      
00002E6E  6022      5408          bra.s     printw_5
                    5409   printw_4:
                    5410   ; // printf("newline\n");
                    5411   ; } else {
                    5412   ; putcharxy(printw_x, printw_y, str[index], error_message);
00002E70  2F2E 000C 5413          move.l    12(A6),-(A7)
00002E74  2043      5414          move.l    D3,A0
00002E76  1230 2800 5415          move.b    0(A0,D2.L),D1
00002E7A  4881      5416          ext.w     D1
00002E7C  48C1      5417          ext.l     D1
00002E7E  2F01      5418          move.l    D1,-(A7)
00002E80  2F39 0803 5419          move.l    _printw_y.L,-(A7)
00002E84  076A      
00002E86  2F12      5420          move.l    (A2),-(A7)
00002E88  4EB8 2D64 5421          jsr       _putcharxy
00002E8C  DEFC 0010 5422          add.w     #16,A7
                    5423   ; printw_x++;
00002E90  5292      5424          addq.l    #1,(A2)
                    5425   printw_5:
                    5426   ; }
                    5427   ; index++;
00002E92  5282      5428          addq.l    #1,D2
00002E94  60BA      5429          bra       printw_1
                    5430   printw_3:
00002E96  4CDF 040C 5431          movem.l   (A7)+,D2/D3/A2
00002E9A  4E5E      5432          unlk      A6
00002E9C  4E75      5433          rts
                    5434   ; }
                    5435   ; }
                    5436   ; void display_game_over(char *str, int x, int y) {
                    5437   _display_game_over:
00002E9E  4E56 0000 5438          link      A6,#0
00002EA2  48E7 3000 5439          movem.l   D2/D3,-(A7)
00002EA6  262E 000C 5440          move.l    12(A6),D3
                    5441   ; int num;
                    5442   ; num = 0;
00002EAA  4282      5443          clr.l     D2
                    5444   ; while (str[num] != '\0') {
                    5445   display_game_over_1:
00002EAC  206E 0008 5446          move.l    8(A6),A0
00002EB0  1030 2800 5447          move.b    0(A0,D2.L),D0
00002EB4  6700 003A 5448          beq       display_game_over_3
                    5449   ; update_cursor(x, y);
00002EB8  2F2E 0010 5450          move.l    16(A6),-(A7)
00002EBC  2F03      5451          move.l    D3,-(A7)
00002EBE  4EB8 2C98 5452          jsr       _update_cursor
00002EC2  504F      5453          addq.w    #8,A7
                    5454   ; putcharxy(x, y, str[num], "game over");
00002EC4  4879 0000 5455          pea       @tetris_4.L
00002EC8  5010      
00002ECA  206E 0008 5456          move.l    8(A6),A0
00002ECE  1230 2800 5457          move.b    0(A0,D2.L),D1
00002ED2  4881      5458          ext.w     D1
00002ED4  48C1      5459          ext.l     D1
00002ED6  2F01      5460          move.l    D1,-(A7)
00002ED8  2F2E 0010 5461          move.l    16(A6),-(A7)
00002EDC  2F03      5462          move.l    D3,-(A7)
00002EDE  4EB8 2D64 5463          jsr       _putcharxy
00002EE2  DEFC 0010 5464          add.w     #16,A7
                    5465   ; x++;
00002EE6  5283      5466          addq.l    #1,D3
                    5467   ; num++;
00002EE8  5282      5468          addq.l    #1,D2
                    5469   ; Wait250ms_here();
00002EEA  4EB8 2B20 5470          jsr       _Wait250ms_here
00002EEE  60BC      5471          bra       display_game_over_1
                    5472   display_game_over_3:
00002EF0  4CDF 000C 5473          movem.l   (A7)+,D2/D3
00002EF4  4E5E      5474          unlk      A6
00002EF6  4E75      5475          rts
                    5476   ; }
                    5477   ; }
                    5478   ; void gameOver()
                    5479   ; {
                    5480   _gameOver:
00002EF8  4E56 FF80 5481          link      A6,#-128
00002EFC  48E7 3038 5482          movem.l   D2/D3/A2/A3/A4,-(A7)
00002F00  45F9 0803 5483          lea       _printw_y.L,A2
00002F04  076A      
00002F06  47F9 0803 5484          lea       _printw_x.L,A3
00002F0A  0766      
00002F0C  49EE FF80 5485          lea       -128(A6),A4
                    5486   ; // 36, 20: Game over!
                    5487   ; char *game_over = "Game over!";
00002F10  41F9 0000 5488          lea       @tetris_5.L,A0
00002F14  501A      
00002F16  2608      5489          move.l    A0,D3
                    5490   ; char score_str[128];
                    5491   ; char num;
                    5492   ; num = 1;
00002F18  7401      5493          moveq     #1,D2
                    5494   ; sprintf(score_str,"Score: %d",tetris_score);
00002F1A  2F39 0803 5495          move.l    _tetris_score.L,-(A7)
00002F1E  0672      
00002F20  4879 0000 5496          pea       @tetris_6.L
00002F24  5026      
00002F26  2F0C      5497          move.l    A4,-(A7)
00002F28  4EB9 0000 5498          jsr       _sprintf
00002F2C  3B12      
00002F2E  DEFC 000C 5499          add.w     #12,A7
                    5500   ; // 36, 22: Score: %d
                    5501   ; printw_x = 36;
00002F32  26BC 0000 5502          move.l    #36,(A3)
00002F36  0024      
                    5503   ; printw_y = 20;
00002F38  24BC 0000 5504          move.l    #20,(A2)
00002F3C  0014      
                    5505   ; display_game_over(game_over, printw_x, printw_y);
00002F3E  2F12      5506          move.l    (A2),-(A7)
00002F40  2F13      5507          move.l    (A3),-(A7)
00002F42  2F03      5508          move.l    D3,-(A7)
00002F44  4EB8 2E9E 5509          jsr       _display_game_over
00002F48  DEFC 000C 5510          add.w     #12,A7
                    5511   ; printw_x = 36;
00002F4C  26BC 0000 5512          move.l    #36,(A3)
00002F50  0024      
                    5513   ; printw_y = 22;
00002F52  24BC 0000 5514          move.l    #22,(A2)
00002F56  0016      
                    5515   ; display_game_over(score_str, printw_x, printw_y);
00002F58  2F12      5516          move.l    (A2),-(A7)
00002F5A  2F13      5517          move.l    (A3),-(A7)
00002F5C  2F0C      5518          move.l    A4,-(A7)
00002F5E  4EB8 2E9E 5519          jsr       _display_game_over
00002F62  DEFC 000C 5520          add.w     #12,A7
                    5521   ; set_vga_control_reg(0xF0);
00002F66  4878 00F0 5522          pea       240
00002F6A  4EB8 2DEC 5523          jsr       _set_vga_control_reg
00002F6E  584F      5524          addq.w    #4,A7
                    5525   ; while (1) {
                    5526   gameOver_1:
                    5527   ; printw_x = 36;
00002F70  26BC 0000 5528          move.l    #36,(A3)
00002F74  0024      
                    5529   ; printw_y = 20;
00002F76  24BC 0000 5530          move.l    #20,(A2)
00002F7A  0014      
                    5531   ; set_color(num);
00002F7C  4882      5532          ext.w     D2
00002F7E  48C2      5533          ext.l     D2
00002F80  2F02      5534          move.l    D2,-(A7)
00002F82  4EB8 2E0C 5535          jsr       _set_color
00002F86  584F      5536          addq.w    #4,A7
                    5537   ; printw(game_over, "game over");
00002F88  4879 0000 5538          pea       @tetris_4.L
00002F8C  5010      
00002F8E  2F03      5539          move.l    D3,-(A7)
00002F90  4EB8 2E3C 5540          jsr       _printw
00002F94  504F      5541          addq.w    #8,A7
                    5542   ; printw_x = 36;
00002F96  26BC 0000 5543          move.l    #36,(A3)
00002F9A  0024      
                    5544   ; printw_y = 22;
00002F9C  24BC 0000 5545          move.l    #22,(A2)
00002FA0  0016      
                    5546   ; printw(score_str, "score");
00002FA2  4879 0000 5547          pea       @tetris_7.L
00002FA6  5030      
00002FA8  2F0C      5548          move.l    A4,-(A7)
00002FAA  4EB8 2E3C 5549          jsr       _printw
00002FAE  504F      5550          addq.w    #8,A7
                    5551   ; Wait250ms_here();
00002FB0  4EB8 2B20 5552          jsr       _Wait250ms_here
                    5553   ; ++num;
00002FB4  5202      5554          addq.b    #1,D2
00002FB6  60B8      5555          bra       gameOver_1
                    5556   ; }
                    5557   ; set_vga_control_reg(0xA2);
                    5558   ; }
                    5559   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    5560   ; //
                    5561   ; //
                    5562   ; //                      end  functions to implement
                    5563   ; //
                    5564   ; //
                    5565   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    5566   ; void delay_ms(int num_ms) {
                    5567   _delay_ms:
00002FB8  4E56 0000 5568          link      A6,#0
00002FBC  48E7 3000 5569          movem.l   D2/D3,-(A7)
                    5570   ; int start_time;
                    5571   ; int current_time;
                    5572   ; start_time = clock();
00002FC0  4EB8 2E26 5573          jsr       _clock
00002FC4  2400      5574          move.l    D0,D2
                    5575   ; do {
                    5576   delay_ms_1:
                    5577   ; current_time = clock();
00002FC6  4EB8 2E26 5578          jsr       _clock
00002FCA  2600      5579          move.l    D0,D3
                    5580   ; if (current_time < start_time) { //handle wraparound
00002FCC  B682      5581          cmp.l     D2,D3
00002FCE  6C0E      5582          bge.s     delay_ms_3
                    5583   ; num_ms = num_ms - (INT_MAX-start_time);
00002FD0  203C 7FFF 5584          move.l    #2147483647,D0
00002FD4  FFFF      
00002FD6  9082      5585          sub.l     D2,D0
00002FD8  91AE 0008 5586          sub.l     D0,8(A6)
                    5587   ; start_time = current_time;
00002FDC  2403      5588          move.l    D3,D2
                    5589   delay_ms_3:
00002FDE  2003      5590          move.l    D3,D0
00002FE0  9082      5591          sub.l     D2,D0
00002FE2  B0AE 0008 5592          cmp.l     8(A6),D0
00002FE6  6DDE      5593          blt       delay_ms_1
00002FE8  4CDF 000C 5594          movem.l   (A7)+,D2/D3
00002FEC  4E5E      5595          unlk      A6
00002FEE  4E75      5596          rts
                    5597   ; }
                    5598   ; } while ((current_time - start_time) < num_ms);
                    5599   ; }
                    5600   ; int tetris_rand() {
                    5601   _tetris_rand:
                    5602   ; return ((clock() >> 4)& 0xFFFF); //divide by 4 because clock increases by 10 every interrupt, ensure last digit is "random" too
00002FF0  4EB8 2E26 5603          jsr       _clock
00002FF4  E880      5604          asr.l     #4,D0
00002FF6  C0BC 0000 5605          and.l     #65535,D0
00002FFA  FFFF      
00002FFC  4E75      5606          rts
                    5607   ; }
                    5608   ; void CopyShape(Shape* shape, Shape* new_shape){
                    5609   _CopyShape:
00002FFE  4E56 0000 5610          link      A6,#0
00003002  48E7 3C00 5611          movem.l   D2/D3/D4/D5,-(A7)
00003006  242E 000C 5612          move.l    12(A6),D2
0000300A  2A2E 0008 5613          move.l    8(A6),D5
                    5614   ; int i;
                    5615   ; int j;
                    5616   ; new_shape->width = shape->width;
0000300E  2045      5617          move.l    D5,A0
00003010  2242      5618          move.l    D2,A1
00003012  2368 0010 5619          move.l    16(A0),16(A1)
00003016  0010      
                    5620   ; new_shape->row = shape->row;
00003018  2045      5621          move.l    D5,A0
0000301A  2242      5622          move.l    D2,A1
0000301C  2368 0014 5623          move.l    20(A0),20(A1)
00003020  0014      
                    5624   ; new_shape->col = shape->col;
00003022  2045      5625          move.l    D5,A0
00003024  2242      5626          move.l    D2,A1
00003026  2368 0018 5627          move.l    24(A0),24(A1)
0000302A  0018      
                    5628   ; for(i = 0; i < new_shape->width; i++){
0000302C  4284      5629          clr.l     D4
                    5630   CopyShape_1:
0000302E  2042      5631          move.l    D2,A0
00003030  B8A8 0010 5632          cmp.l     16(A0),D4
00003034  6C00 002A 5633          bge       CopyShape_3
                    5634   ; for(j=0; j < new_shape->width; j++) {
00003038  4283      5635          clr.l     D3
                    5636   CopyShape_4:
0000303A  2042      5637          move.l    D2,A0
0000303C  B6A8 0010 5638          cmp.l     16(A0),D3
00003040  6C1A      5639          bge.s     CopyShape_6
                    5640   ; new_shape->array[i][j] = shape->array[i][j];
00003042  2045      5641          move.l    D5,A0
00003044  2004      5642          move.l    D4,D0
00003046  E588      5643          lsl.l     #2,D0
00003048  D1C0      5644          add.l     D0,A0
0000304A  2242      5645          move.l    D2,A1
0000304C  2004      5646          move.l    D4,D0
0000304E  E588      5647          lsl.l     #2,D0
00003050  D3C0      5648          add.l     D0,A1
00003052  13B0 3800 5649          move.b    0(A0,D3.L),0(A1,D3.L)
00003056  3800      
00003058  5283      5650          addq.l    #1,D3
0000305A  60DE      5651          bra       CopyShape_4
                    5652   CopyShape_6:
0000305C  5284      5653          addq.l    #1,D4
0000305E  60CE      5654          bra       CopyShape_1
                    5655   CopyShape_3:
00003060  4CDF 003C 5656          movem.l   (A7)+,D2/D3/D4/D5
00003064  4E5E      5657          unlk      A6
00003066  4E75      5658          rts
                    5659   ; }
                    5660   ; }
                    5661   ; }
                    5662   ; int CheckPosition(Shape* shape){ //Check the position of the copied shape
                    5663   _CheckPosition:
00003068  4E56 0000 5664          link      A6,#0
0000306C  48E7 3800 5665          movem.l   D2/D3/D4,-(A7)
00003070  242E 0008 5666          move.l    8(A6),D2
                    5667   ; int i, j;
                    5668   ; for(i = 0; i < shape->width;i++) {
00003074  4284      5669          clr.l     D4
                    5670   CheckPosition_1:
00003076  2042      5671          move.l    D2,A0
00003078  B8A8 0010 5672          cmp.l     16(A0),D4
0000307C  6C00 0096 5673          bge       CheckPosition_3
                    5674   ; for(j = 0; j < shape->width ;j++){
00003080  4283      5675          clr.l     D3
                    5676   CheckPosition_4:
00003082  2042      5677          move.l    D2,A0
00003084  B6A8 0010 5678          cmp.l     16(A0),D3
00003088  6C00 0084 5679          bge       CheckPosition_6
                    5680   ; if((shape->col+j < 0 || shape->col+j >= TETRIS_COLS || shape->row+i >= TETRIS_ROWS)){ //Out of borders
0000308C  2042      5681          move.l    D2,A0
0000308E  2028 0018 5682          move.l    24(A0),D0
00003092  D083      5683          add.l     D3,D0
00003094  0C80 0000 5684          cmp.l     #0,D0
00003098  0000      
0000309A  6D20      5685          blt.s     CheckPosition_9
0000309C  2042      5686          move.l    D2,A0
0000309E  2028 0018 5687          move.l    24(A0),D0
000030A2  D083      5688          add.l     D3,D0
000030A4  0C80 0000 5689          cmp.l     #15,D0
000030A8  000F      
000030AA  6C10      5690          bge.s     CheckPosition_9
000030AC  2042      5691          move.l    D2,A0
000030AE  2028 0014 5692          move.l    20(A0),D0
000030B2  D084      5693          add.l     D4,D0
000030B4  0C80 0000 5694          cmp.l     #20,D0
000030B8  0014      
000030BA  6D18      5695          blt.s     CheckPosition_7
                    5696   CheckPosition_9:
                    5697   ; if(shape->array[i][j]) //but is it just a phantom?
000030BC  2042      5698          move.l    D2,A0
000030BE  2004      5699          move.l    D4,D0
000030C0  E588      5700          lsl.l     #2,D0
000030C2  D1C0      5701          add.l     D0,A0
000030C4  4A30 3800 5702          tst.b     0(A0,D3.L)
000030C8  6706      5703          beq.s     CheckPosition_10
                    5704   ; return FALSE;
000030CA  4280      5705          clr.l     D0
000030CC  6000 0048 5706          bra       CheckPosition_12
                    5707   CheckPosition_10:
000030D0  6000 0036 5708          bra       CheckPosition_13
                    5709   CheckPosition_7:
                    5710   ; }
                    5711   ; else if(Table[shape->row+i][shape->col+j] && shape->array[i][j])
000030D4  2042      5712          move.l    D2,A0
000030D6  2028 0014 5713          move.l    20(A0),D0
000030DA  D084      5714          add.l     D4,D0
000030DC  C1FC 000F 5715          muls      #15,D0
000030E0  41F9 0803 5716          lea       _Table.L,A0
000030E4  0546      
000030E6  D1C0      5717          add.l     D0,A0
000030E8  2242      5718          move.l    D2,A1
000030EA  2029 0018 5719          move.l    24(A1),D0
000030EE  D083      5720          add.l     D3,D0
000030F0  4A30 0800 5721          tst.b     0(A0,D0.L)
000030F4  6712      5722          beq.s     CheckPosition_13
000030F6  2042      5723          move.l    D2,A0
000030F8  2004      5724          move.l    D4,D0
000030FA  E588      5725          lsl.l     #2,D0
000030FC  D1C0      5726          add.l     D0,A0
000030FE  4A30 3800 5727          tst.b     0(A0,D3.L)
00003102  6704      5728          beq.s     CheckPosition_13
                    5729   ; return FALSE;
00003104  4280      5730          clr.l     D0
00003106  600E      5731          bra.s     CheckPosition_12
                    5732   CheckPosition_13:
00003108  5283      5733          addq.l    #1,D3
0000310A  6000 FF76 5734          bra       CheckPosition_4
                    5735   CheckPosition_6:
0000310E  5284      5736          addq.l    #1,D4
00003110  6000 FF64 5737          bra       CheckPosition_1
                    5738   CheckPosition_3:
                    5739   ; }
                    5740   ; }
                    5741   ; return TRUE;
00003114  7001      5742          moveq     #1,D0
                    5743   CheckPosition_12:
00003116  4CDF 001C 5744          movem.l   (A7)+,D2/D3/D4
0000311A  4E5E      5745          unlk      A6
0000311C  4E75      5746          rts
                    5747   ; }
                    5748   ; void SetNewRandomShape(){ //updates [current] with new shape
                    5749   _SetNewRandomShape:
0000311E  2F0A      5750          move.l    A2,-(A7)
00003120  45F9 0803 5751          lea       _current.L,A2
00003124  067E      
                    5752   ; CopyShape(&ShapesArray[mod_bld(tetris_rand(),NUM_SHAPES)],&current);
00003126  2F0A      5753          move.l    A2,-(A7)
00003128  4879 0803 5754          pea       _ShapesArray.L
0000312C  069A      
0000312E  2F00      5755          move.l    D0,-(A7)
00003130  4878 0007 5756          pea       7
00003134  2F01      5757          move.l    D1,-(A7)
00003136  4EB8 2FF0 5758          jsr       _tetris_rand
0000313A  221F      5759          move.l    (A7)+,D1
0000313C  2F00      5760          move.l    D0,-(A7)
0000313E  4EB8 2AB4 5761          jsr       _mod_bld
00003142  504F      5762          addq.w    #8,A7
00003144  2200      5763          move.l    D0,D1
00003146  201F      5764          move.l    (A7)+,D0
00003148  205F      5765          move.l    (A7)+,A0
0000314A  C3FC 001C 5766          muls      #28,D1
0000314E  D1C1      5767          add.l     D1,A0
00003150  2F08      5768          move.l    A0,-(A7)
00003152  4EB8 2FFE 5769          jsr       _CopyShape
00003156  504F      5770          addq.w    #8,A7
                    5771   ; current.col = mod_bld(tetris_rand(),(TETRIS_COLS-current.width+1));
00003158  720F      5772          moveq     #15,D1
0000315A  4881      5773          ext.w     D1
0000315C  48C1      5774          ext.l     D1
0000315E  92AA 0010 5775          sub.l     16(A2),D1
00003162  5281      5776          addq.l    #1,D1
00003164  2F01      5777          move.l    D1,-(A7)
00003166  2F00      5778          move.l    D0,-(A7)
00003168  4EB8 2FF0 5779          jsr       _tetris_rand
0000316C  2200      5780          move.l    D0,D1
0000316E  201F      5781          move.l    (A7)+,D0
00003170  2F01      5782          move.l    D1,-(A7)
00003172  4EB8 2AB4 5783          jsr       _mod_bld
00003176  504F      5784          addq.w    #8,A7
00003178  2540 0018 5785          move.l    D0,24(A2)
                    5786   ; current.row = 0;
0000317C  42AA 0014 5787          clr.l     20(A2)
                    5788   ; if(!CheckPosition(&current)){
00003180  2F0A      5789          move.l    A2,-(A7)
00003182  4EB8 3068 5790          jsr       _CheckPosition
00003186  584F      5791          addq.w    #4,A7
00003188  4A80      5792          tst.l     D0
0000318A  6606      5793          bne.s     SetNewRandomShape_1
                    5794   ; GameOn = FALSE;
0000318C  4239 0803 5795          clr.b     _GameOn.L
00003190  0676      
                    5796   SetNewRandomShape_1:
00003192  245F      5797          move.l    (A7)+,A2
00003194  4E75      5798          rts
                    5799   ; //printf("Game on = false\n");
                    5800   ; }
                    5801   ; }
                    5802   ; void RotateShape(Shape* shape){ //rotates clockwise
                    5803   _RotateShape:
00003196  4E56 FFE4 5804          link      A6,#-28
0000319A  48E7 3E00 5805          movem.l   D2/D3/D4/D5/D6,-(A7)
0000319E  2C2E 0008 5806          move.l    8(A6),D6
                    5807   ; Shape temp;
                    5808   ; int i, j, k, width;
                    5809   ; CopyShape(shape,&temp);
000031A2  486E FFE4 5810          pea       -28(A6)
000031A6  2F06      5811          move.l    D6,-(A7)
000031A8  4EB8 2FFE 5812          jsr       _CopyShape
000031AC  504F      5813          addq.w    #8,A7
                    5814   ; width = shape->width;
000031AE  2046      5815          move.l    D6,A0
000031B0  2828 0010 5816          move.l    16(A0),D4
                    5817   ; for(i = 0; i < width ; i++){
000031B4  4282      5818          clr.l     D2
                    5819   RotateShape_1:
000031B6  B484      5820          cmp.l     D4,D2
000031B8  6C00 0030 5821          bge       RotateShape_3
                    5822   ; for(j = 0, k = width-1; j < width ; j++, k--){
000031BC  4283      5823          clr.l     D3
000031BE  2004      5824          move.l    D4,D0
000031C0  5380      5825          subq.l    #1,D0
000031C2  2A00      5826          move.l    D0,D5
                    5827   RotateShape_4:
000031C4  B684      5828          cmp.l     D4,D3
000031C6  6C1E      5829          bge.s     RotateShape_6
                    5830   ; shape->array[i][j] = temp.array[k][i];
000031C8  41EE FFE4 5831          lea       -28(A6),A0
000031CC  2005      5832          move.l    D5,D0
000031CE  E588      5833          lsl.l     #2,D0
000031D0  D1C0      5834          add.l     D0,A0
000031D2  2246      5835          move.l    D6,A1
000031D4  2002      5836          move.l    D2,D0
000031D6  E588      5837          lsl.l     #2,D0
000031D8  D3C0      5838          add.l     D0,A1
000031DA  13B0 2800 5839          move.b    0(A0,D2.L),0(A1,D3.L)
000031DE  3800      
000031E0  5283      5840          addq.l    #1,D3
000031E2  5385      5841          subq.l    #1,D5
000031E4  60DE      5842          bra       RotateShape_4
                    5843   RotateShape_6:
000031E6  5282      5844          addq.l    #1,D2
000031E8  60CC      5845          bra       RotateShape_1
                    5846   RotateShape_3:
000031EA  4CDF 007C 5847          movem.l   (A7)+,D2/D3/D4/D5/D6
000031EE  4E5E      5848          unlk      A6
000031F0  4E75      5849          rts
                    5850   ; }
                    5851   ; }
                    5852   ; }
                    5853   ; void WriteToTable(){
                    5854   _WriteToTable:
000031F2  48E7 3020 5855          movem.l   D2/D3/A2,-(A7)
000031F6  45F9 0803 5856          lea       _current.L,A2
000031FA  067E      
                    5857   ; int i, j;
                    5858   ; for(i = 0; i < current.width ;i++){
000031FC  4283      5859          clr.l     D3
                    5860   WriteToTable_1:
000031FE  B6AA 0010 5861          cmp.l     16(A2),D3
00003202  6C00 0048 5862          bge       WriteToTable_3
                    5863   ; for(j = 0; j < current.width ; j++){
00003206  4282      5864          clr.l     D2
                    5865   WriteToTable_4:
00003208  B4AA 0010 5866          cmp.l     16(A2),D2
0000320C  6C00 003A 5867          bge       WriteToTable_6
                    5868   ; if(current.array[i][j])
00003210  2003      5869          move.l    D3,D0
00003212  E588      5870          lsl.l     #2,D0
00003214  41F2 0800 5871          lea       0(A2,D0.L),A0
00003218  4A30 2800 5872          tst.b     0(A0,D2.L)
0000321C  6726      5873          beq.s     WriteToTable_7
                    5874   ; Table[current.row+i][current.col+j] = current.array[i][j];
0000321E  2003      5875          move.l    D3,D0
00003220  E588      5876          lsl.l     #2,D0
00003222  41F2 0800 5877          lea       0(A2,D0.L),A0
00003226  202A 0014 5878          move.l    20(A2),D0
0000322A  D083      5879          add.l     D3,D0
0000322C  C1FC 000F 5880          muls      #15,D0
00003230  43F9 0803 5881          lea       _Table.L,A1
00003234  0546      
00003236  D3C0      5882          add.l     D0,A1
00003238  202A 0018 5883          move.l    24(A2),D0
0000323C  D082      5884          add.l     D2,D0
0000323E  13B0 2800 5885          move.b    0(A0,D2.L),0(A1,D0.L)
00003242  0800      
                    5886   WriteToTable_7:
00003244  5282      5887          addq.l    #1,D2
00003246  60C0      5888          bra       WriteToTable_4
                    5889   WriteToTable_6:
00003248  5283      5890          addq.l    #1,D3
0000324A  60B2      5891          bra       WriteToTable_1
                    5892   WriteToTable_3:
0000324C  4CDF 040C 5893          movem.l   (A7)+,D2/D3/A2
00003250  4E75      5894          rts
                    5895   ; }
                    5896   ; }
                    5897   ; }
                    5898   ; void RemoveFullRowsAndUpdateScore(){
                    5899   _RemoveFullRowsAndUpdateScore:
00003252  4E56 FFFC 5900          link      A6,#-4
00003256  48E7 3F30 5901          movem.l   D2/D3/D4/D5/D6/D7/A2/A3,-(A7)
0000325A  45F9 0803 5902          lea       _Table.L,A2
0000325E  0546      
00003260  47F9 0803 5903          lea       _Tetris_Speed.L,A3
00003264  075E      
                    5904   ; int i, j, sum, count=0;
00003266  7E00      5905          moveq     #0,D7
                    5906   ; int l, k;
                    5907   ; int compliment_to_say;
                    5908   ; for(i=0;i<TETRIS_ROWS;i++){
00003268  4284      5909          clr.l     D4
                    5910   RemoveFullRowsAndUpdateScore_1:
0000326A  0C84 0000 5911          cmp.l     #20,D4
0000326E  0014      
00003270  6C00 00E2 5912          bge       RemoveFullRowsAndUpdateScore_3
                    5913   ; sum = 0;
00003274  4286      5914          clr.l     D6
                    5915   ; for(j=0;j< TETRIS_COLS;j++) {
00003276  4285      5916          clr.l     D5
                    5917   RemoveFullRowsAndUpdateScore_4:
00003278  0C85 0000 5918          cmp.l     #15,D5
0000327C  000F      
0000327E  6C18      5919          bge.s     RemoveFullRowsAndUpdateScore_6
                    5920   ; sum+=Table[i][j];
00003280  2004      5921          move.l    D4,D0
00003282  C1FC 000F 5922          muls      #15,D0
00003286  41F2 0800 5923          lea       0(A2,D0.L),A0
0000328A  1030 5800 5924          move.b    0(A0,D5.L),D0
0000328E  4880      5925          ext.w     D0
00003290  48C0      5926          ext.l     D0
00003292  DC80      5927          add.l     D0,D6
00003294  5285      5928          addq.l    #1,D5
00003296  60E0      5929          bra       RemoveFullRowsAndUpdateScore_4
                    5930   RemoveFullRowsAndUpdateScore_6:
                    5931   ; }
                    5932   ; if(sum==TETRIS_COLS){
00003298  0C86 0000 5933          cmp.l     #15,D6
0000329C  000F      
0000329E  6600 00AE 5934          bne       RemoveFullRowsAndUpdateScore_7
                    5935   ; count++;
000032A2  5287      5936          addq.l    #1,D7
                    5937   ; for(k = i;k >=1;k--)
000032A4  2604      5938          move.l    D4,D3
                    5939   RemoveFullRowsAndUpdateScore_9:
000032A6  0C83 0000 5940          cmp.l     #1,D3
000032AA  0001      
000032AC  6D2E      5941          blt.s     RemoveFullRowsAndUpdateScore_11
                    5942   ; for(l=0;l<TETRIS_COLS;l++)
000032AE  4282      5943          clr.l     D2
                    5944   RemoveFullRowsAndUpdateScore_12:
000032B0  0C82 0000 5945          cmp.l     #15,D2
000032B4  000F      
000032B6  6C20      5946          bge.s     RemoveFullRowsAndUpdateScore_14
                    5947   ; Table[k][l]=Table[k-1][l];
000032B8  2003      5948          move.l    D3,D0
000032BA  5380      5949          subq.l    #1,D0
000032BC  C1FC 000F 5950          muls      #15,D0
000032C0  41F2 0800 5951          lea       0(A2,D0.L),A0
000032C4  2003      5952          move.l    D3,D0
000032C6  C1FC 000F 5953          muls      #15,D0
000032CA  43F2 0800 5954          lea       0(A2,D0.L),A1
000032CE  13B0 2800 5955          move.b    0(A0,D2.L),0(A1,D2.L)
000032D2  2800      
000032D4  5282      5956          addq.l    #1,D2
000032D6  60D8      5957          bra       RemoveFullRowsAndUpdateScore_12
                    5958   RemoveFullRowsAndUpdateScore_14:
000032D8  5383      5959          subq.l    #1,D3
000032DA  60CA      5960          bra       RemoveFullRowsAndUpdateScore_9
                    5961   RemoveFullRowsAndUpdateScore_11:
                    5962   ; for(l=0;l<TETRIS_COLS;l++)
000032DC  4282      5963          clr.l     D2
                    5964   RemoveFullRowsAndUpdateScore_15:
000032DE  0C82 0000 5965          cmp.l     #15,D2
000032E2  000F      
000032E4  6C12      5966          bge.s     RemoveFullRowsAndUpdateScore_17
                    5967   ; Table[k][l]=0;
000032E6  2003      5968          move.l    D3,D0
000032E8  C1FC 000F 5969          muls      #15,D0
000032EC  41F2 0800 5970          lea       0(A2,D0.L),A0
000032F0  4230 2800 5971          clr.b     0(A0,D2.L)
000032F4  5282      5972          addq.l    #1,D2
000032F6  60E6      5973          bra       RemoveFullRowsAndUpdateScore_15
                    5974   RemoveFullRowsAndUpdateScore_17:
                    5975   ; compliment_to_say = mod_bld(tetris_rand(),NUM_LINE_SUCCESS_MESSAGES);
000032F8  4878 0003 5976          pea       3
000032FC  2F00      5977          move.l    D0,-(A7)
000032FE  4EB8 2FF0 5978          jsr       _tetris_rand
00003302  2200      5979          move.l    D0,D1
00003304  201F      5980          move.l    (A7)+,D0
00003306  2F01      5981          move.l    D1,-(A7)
00003308  4EB8 2AB4 5982          jsr       _mod_bld
0000330C  504F      5983          addq.w    #8,A7
0000330E  2D40 FFFC 5984          move.l    D0,-4(A6)
                    5985   ; switch (compliment_to_say) {
00003312  202E FFFC 5986          move.l    -4(A6),D0
00003316  0C80 0000 5987          cmp.l     #1,D0
0000331A  0001      
0000331C  6718      5988          beq.s     RemoveFullRowsAndUpdateScore_21
0000331E  6E06      5989          bgt.s     RemoveFullRowsAndUpdateScore_24
00003320  4A80      5990          tst.l     D0
00003322  670C      5991          beq.s     RemoveFullRowsAndUpdateScore_20
00003324  601C      5992          bra.s     RemoveFullRowsAndUpdateScore_18
                    5993   RemoveFullRowsAndUpdateScore_24:
00003326  0C80 0000 5994          cmp.l     #2,D0
0000332A  0002      
0000332C  670E      5995          beq.s     RemoveFullRowsAndUpdateScore_22
0000332E  6012      5996          bra.s     RemoveFullRowsAndUpdateScore_18
                    5997   RemoveFullRowsAndUpdateScore_20:
                    5998   ; case 0:  say_awesome(); break;
00003330  4EB8 2D2E 5999          jsr       _say_awesome
00003334  6010      6000          bra.s     RemoveFullRowsAndUpdateScore_19
                    6001   RemoveFullRowsAndUpdateScore_21:
                    6002   ; case 1:  say_cool(); break;
00003336  4EB8 2D44 6003          jsr       _say_cool
0000333A  600A      6004          bra.s     RemoveFullRowsAndUpdateScore_19
                    6005   RemoveFullRowsAndUpdateScore_22:
                    6006   ; case 2:  say_yeah(); break;
0000333C  4EB8 2D56 6007          jsr       _say_yeah
00003340  6004      6008          bra.s     RemoveFullRowsAndUpdateScore_19
                    6009   RemoveFullRowsAndUpdateScore_18:
                    6010   ; default: say_yeah(); break;
00003342  4EB8 2D56 6011          jsr       _say_yeah
                    6012   RemoveFullRowsAndUpdateScore_19:
                    6013   ; }
                    6014   ; Tetris_Speed.speed = Tetris_Speed.speed + Tetris_Speed.speed_increase;
00003346  2013      6015          move.l    (A3),D0
00003348  D0AB 0004 6016          add.l     4(A3),D0
0000334C  2680      6017          move.l    D0,(A3)
                    6018   RemoveFullRowsAndUpdateScore_7:
0000334E  5284      6019          addq.l    #1,D4
00003350  6000 FF18 6020          bra       RemoveFullRowsAndUpdateScore_1
                    6021   RemoveFullRowsAndUpdateScore_3:
                    6022   ; }
                    6023   ; }
                    6024   ; tetris_score += 100*count;
00003354  2F07      6025          move.l    D7,-(A7)
00003356  4878 0064 6026          pea       100
0000335A  4EB9 0000 6027          jsr       LMUL
0000335E  3A28      
00003360  2017      6028          move.l    (A7),D0
00003362  504F      6029          addq.w    #8,A7
00003364  D1B9 0803 6030          add.l     D0,_tetris_score.L
00003368  0672      
0000336A  4CDF 0CFC 6031          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3
0000336E  4E5E      6032          unlk      A6
00003370  4E75      6033          rts
                    6034   ; }
                    6035   ; void PrintTable(){
                    6036   _PrintTable:
00003372  4E56 FE54 6037          link      A6,#-428
00003376  48E7 3038 6038          movem.l   D2/D3/A2/A3/A4,-(A7)
0000337A  45F8 2E3C 6039          lea       _printw.L,A2
0000337E  47F9 0803 6040          lea       _current.L,A3
00003382  067E      
00003384  49EE FED4 6041          lea       -300(A6),A4
                    6042   ; int i, j;
                    6043   ; char score_str[128];
                    6044   ; char Buffer[TETRIS_ROWS][TETRIS_COLS];
                    6045   ; printw_x = 0;
00003388  42B9 0803 6046          clr.l     _printw_x.L
0000338C  0766      
                    6047   ; printw_y = 0;
0000338E  42B9 0803 6048          clr.l     _printw_y.L
00003392  076A      
                    6049   ; for(i = 0; i < TETRIS_ROWS ;i++){
00003394  4282      6050          clr.l     D2
                    6051   PrintTable_1:
00003396  0C82 0000 6052          cmp.l     #20,D2
0000339A  0014      
0000339C  6C20      6053          bge.s     PrintTable_3
                    6054   ; for(j = 0; j < TETRIS_COLS ; j++){
0000339E  4283      6055          clr.l     D3
                    6056   PrintTable_4:
000033A0  0C83 0000 6057          cmp.l     #15,D3
000033A4  000F      
000033A6  6C12      6058          bge.s     PrintTable_6
                    6059   ; Buffer[i][j] = 0;
000033A8  2002      6060          move.l    D2,D0
000033AA  C1FC 000F 6061          muls      #15,D0
000033AE  41F4 0800 6062          lea       0(A4,D0.L),A0
000033B2  4230 3800 6063          clr.b     0(A0,D3.L)
000033B6  5283      6064          addq.l    #1,D3
000033B8  60E6      6065          bra       PrintTable_4
                    6066   PrintTable_6:
000033BA  5282      6067          addq.l    #1,D2
000033BC  60D8      6068          bra       PrintTable_1
                    6069   PrintTable_3:
                    6070   ; }
                    6071   ; }
                    6072   ; for(i = 0; i < current.width ;i++){
000033BE  4282      6073          clr.l     D2
                    6074   PrintTable_7:
000033C0  B4AB 0010 6075          cmp.l     16(A3),D2
000033C4  6C00 0044 6076          bge       PrintTable_9
                    6077   ; for(j = 0; j < current.width ; j++){
000033C8  4283      6078          clr.l     D3
                    6079   PrintTable_10:
000033CA  B6AB 0010 6080          cmp.l     16(A3),D3
000033CE  6C00 0036 6081          bge       PrintTable_12
                    6082   ; if(current.array[i][j])
000033D2  2002      6083          move.l    D2,D0
000033D4  E588      6084          lsl.l     #2,D0
000033D6  41F3 0800 6085          lea       0(A3,D0.L),A0
000033DA  4A30 3800 6086          tst.b     0(A0,D3.L)
000033DE  6722      6087          beq.s     PrintTable_13
                    6088   ; Buffer[current.row+i][current.col+j] = current.array[i][j];
000033E0  2002      6089          move.l    D2,D0
000033E2  E588      6090          lsl.l     #2,D0
000033E4  41F3 0800 6091          lea       0(A3,D0.L),A0
000033E8  202B 0014 6092          move.l    20(A3),D0
000033EC  D082      6093          add.l     D2,D0
000033EE  C1FC 000F 6094          muls      #15,D0
000033F2  43F4 0800 6095          lea       0(A4,D0.L),A1
000033F6  202B 0018 6096          move.l    24(A3),D0
000033FA  D083      6097          add.l     D3,D0
000033FC  13B0 3800 6098          move.b    0(A0,D3.L),0(A1,D0.L)
00003400  0800      
                    6099   PrintTable_13:
00003402  5283      6100          addq.l    #1,D3
00003404  60C4      6101          bra       PrintTable_10
                    6102   PrintTable_12:
00003406  5282      6103          addq.l    #1,D2
00003408  60B6      6104          bra       PrintTable_7
                    6105   PrintTable_9:
                    6106   ; }
                    6107   ; }
                    6108   ; go_to_top_corner();
0000340A  4EB8 2CE0 6109          jsr       _go_to_top_corner
                    6110   ; printw("\n\n\n","initial_newline");
0000340E  4879 0000 6111          pea       @tetris_9.L
00003412  503A      
00003414  4879 0000 6112          pea       @tetris_8.L
00003418  5036      
0000341A  4E92      6113          jsr       (A2)
0000341C  504F      6114          addq.w    #8,A7
                    6115   ; for(i=0; i<TETRIS_COLS-9; i++) {
0000341E  4282      6116          clr.l     D2
                    6117   PrintTable_15:
00003420  0C82 0000 6118          cmp.l     #6,D2
00003424  0006      
00003426  6C14      6119          bge.s     PrintTable_17
                    6120   ; printw(" ","space");
00003428  4879 0000 6121          pea       @tetris_11.L
0000342C  504C      
0000342E  4879 0000 6122          pea       @tetris_10.L
00003432  504A      
00003434  4E92      6123          jsr       (A2)
00003436  504F      6124          addq.w    #8,A7
00003438  5282      6125          addq.l    #1,D2
0000343A  60E4      6126          bra       PrintTable_15
                    6127   PrintTable_17:
                    6128   ; }
                    6129   ; printw("CPEN412 Tetris\n","title");
0000343C  4879 0000 6130          pea       @tetris_13.L
00003440  5062      
00003442  4879 0000 6131          pea       @tetris_12.L
00003446  5052      
00003448  4E92      6132          jsr       (A2)
0000344A  504F      6133          addq.w    #8,A7
                    6134   ; for(i = 0; i < TETRIS_ROWS ;i++){
0000344C  4282      6135          clr.l     D2
                    6136   PrintTable_18:
0000344E  0C82 0000 6137          cmp.l     #20,D2
00003452  0014      
00003454  6C00 006A 6138          bge       PrintTable_20
                    6139   ; for(j = 0; j < TETRIS_COLS ; j++){
00003458  4283      6140          clr.l     D3
                    6141   PrintTable_21:
0000345A  0C83 0000 6142          cmp.l     #15,D3
0000345E  000F      
00003460  6C00 004A 6143          bge       PrintTable_23
                    6144   ; if (Table[i][j] + Buffer[i][j]) {
00003464  2002      6145          move.l    D2,D0
00003466  C1FC 000F 6146          muls      #15,D0
0000346A  41F9 0803 6147          lea       _Table.L,A0
0000346E  0546      
00003470  D1C0      6148          add.l     D0,A0
00003472  1030 3800 6149          move.b    0(A0,D3.L),D0
00003476  2202      6150          move.l    D2,D1
00003478  C3FC 000F 6151          muls      #15,D1
0000347C  41F4 1800 6152          lea       0(A4,D1.L),A0
00003480  D030 3800 6153          add.b     0(A0,D3.L),D0
00003484  6712      6154          beq.s     PrintTable_24
                    6155   ; printw("#","table#");
00003486  4879 0000 6156          pea       @tetris_15.L
0000348A  506A      
0000348C  4879 0000 6157          pea       @tetris_14.L
00003490  5068      
00003492  4E92      6158          jsr       (A2)
00003494  504F      6159          addq.w    #8,A7
00003496  6010      6160          bra.s     PrintTable_25
                    6161   PrintTable_24:
                    6162   ; } else {
                    6163   ; printw(".","table.");
00003498  4879 0000 6164          pea       @tetris_17.L
0000349C  5074      
0000349E  4879 0000 6165          pea       @tetris_16.L
000034A2  5072      
000034A4  4E92      6166          jsr       (A2)
000034A6  504F      6167          addq.w    #8,A7
                    6168   PrintTable_25:
000034A8  5283      6169          addq.l    #1,D3
000034AA  60AE      6170          bra       PrintTable_21
                    6171   PrintTable_23:
                    6172   ; }
                    6173   ; //printw(" ","space2");
                    6174   ; }
                    6175   ; printw("\n","newline1");
000034AC  4879 0000 6176          pea       @tetris_19.L
000034B0  507E      
000034B2  4879 0000 6177          pea       @tetris_18.L
000034B6  507C      
000034B8  4E92      6178          jsr       (A2)
000034BA  504F      6179          addq.w    #8,A7
000034BC  5282      6180          addq.l    #1,D2
000034BE  608E      6181          bra       PrintTable_18
                    6182   PrintTable_20:
                    6183   ; }
                    6184   ; sprintf(score_str,"\nScore: %d\n",tetris_score);
000034C0  2F39 0803 6185          move.l    _tetris_score.L,-(A7)
000034C4  0672      
000034C6  4879 0000 6186          pea       @tetris_20.L
000034CA  5088      
000034CC  486E FE54 6187          pea       -428(A6)
000034D0  4EB9 0000 6188          jsr       _sprintf
000034D4  3B12      
000034D6  DEFC 000C 6189          add.w     #12,A7
                    6190   ; printw(score_str,"scoreprint");
000034DA  4879 0000 6191          pea       @tetris_21.L
000034DE  5094      
000034E0  486E FE54 6192          pea       -428(A6)
000034E4  4E92      6193          jsr       (A2)
000034E6  504F      6194          addq.w    #8,A7
000034E8  4CDF 1C0C 6195          movem.l   (A7)+,D2/D3/A2/A3/A4
000034EC  4E5E      6196          unlk      A6
000034EE  4E75      6197          rts
                    6198   ; }
                    6199   ; void ManipulateCurrent(int action){
                    6200   _ManipulateCurrent:
000034F0  4E56 FFE4 6201          link      A6,#-28
000034F4  48E7 0038 6202          movem.l   A2/A3/A4,-(A7)
000034F8  45EE FFE4 6203          lea       -28(A6),A2
000034FC  47F9 0803 6204          lea       _current.L,A3
00003500  067E      
00003502  49F8 3068 6205          lea       _CheckPosition.L,A4
                    6206   ; Shape temp;
                    6207   ; CopyShape(&current,&temp);
00003506  2F0A      6208          move.l    A2,-(A7)
00003508  2F0B      6209          move.l    A3,-(A7)
0000350A  4EB8 2FFE 6210          jsr       _CopyShape
0000350E  504F      6211          addq.w    #8,A7
                    6212   ; switch(action){
00003510  202E 0008 6213          move.l    8(A6),D0
00003514  0C80 0000 6214          cmp.l     #115,D0
00003518  0073      
0000351A  672C      6215          beq.s     ManipulateCurrent_3
0000351C  6E1C      6216          bgt.s     ManipulateCurrent_7
0000351E  0C80 0000 6217          cmp.l     #100,D0
00003522  0064      
00003524  6700 0056 6218          beq       ManipulateCurrent_4
00003528  6E00 00B6 6219          bgt       ManipulateCurrent_2
0000352C  0C80 0000 6220          cmp.l     #97,D0
00003530  0061      
00003532  6700 006E 6221          beq       ManipulateCurrent_5
00003536  6000 00A8 6222          bra       ManipulateCurrent_2
                    6223   ManipulateCurrent_7:
0000353A  0C80 0000 6224          cmp.l     #119,D0
0000353E  0077      
00003540  6700 0084 6225          beq       ManipulateCurrent_6
00003544  6000 009A 6226          bra       ManipulateCurrent_2
                    6227   ManipulateCurrent_3:
                    6228   ; case 's':
                    6229   ; temp.row++;  //move down
00003548  200A      6230          move.l    A2,D0
0000354A  0680 0000 6231          add.l     #20,D0
0000354E  0014      
00003550  2040      6232          move.l    D0,A0
00003552  5290      6233          addq.l    #1,(A0)
                    6234   ; if(CheckPosition(&temp)) {
00003554  2F0A      6235          move.l    A2,-(A7)
00003556  4E94      6236          jsr       (A4)
00003558  584F      6237          addq.w    #4,A7
0000355A  4A80      6238          tst.l     D0
0000355C  670E      6239          beq.s     ManipulateCurrent_8
                    6240   ; current.row++;
0000355E  200B      6241          move.l    A3,D0
00003560  0680 0000 6242          add.l     #20,D0
00003564  0014      
00003566  2040      6243          move.l    D0,A0
00003568  5290      6244          addq.l    #1,(A0)
0000356A  600C      6245          bra.s     ManipulateCurrent_9
                    6246   ManipulateCurrent_8:
                    6247   ; } else {
                    6248   ; WriteToTable();
0000356C  4EB8 31F2 6249          jsr       _WriteToTable
                    6250   ; RemoveFullRowsAndUpdateScore();
00003570  4EB8 3252 6251          jsr       _RemoveFullRowsAndUpdateScore
                    6252   ; SetNewRandomShape();
00003574  4EB8 311E 6253          jsr       _SetNewRandomShape
                    6254   ManipulateCurrent_9:
                    6255   ; }
                    6256   ; break;
00003578  6000 0066 6257          bra       ManipulateCurrent_2
                    6258   ManipulateCurrent_4:
                    6259   ; case 'd':
                    6260   ; temp.col++;  //move right
0000357C  200A      6261          move.l    A2,D0
0000357E  0680 0000 6262          add.l     #24,D0
00003582  0018      
00003584  2040      6263          move.l    D0,A0
00003586  5290      6264          addq.l    #1,(A0)
                    6265   ; if(CheckPosition(&temp))
00003588  2F0A      6266          move.l    A2,-(A7)
0000358A  4E94      6267          jsr       (A4)
0000358C  584F      6268          addq.w    #4,A7
0000358E  4A80      6269          tst.l     D0
00003590  670C      6270          beq.s     ManipulateCurrent_10
                    6271   ; current.col++;
00003592  200B      6272          move.l    A3,D0
00003594  0680 0000 6273          add.l     #24,D0
00003598  0018      
0000359A  2040      6274          move.l    D0,A0
0000359C  5290      6275          addq.l    #1,(A0)
                    6276   ManipulateCurrent_10:
                    6277   ; break;
0000359E  6000 0040 6278          bra       ManipulateCurrent_2
                    6279   ManipulateCurrent_5:
                    6280   ; case 'a':
                    6281   ; temp.col--;  //move left
000035A2  200A      6282          move.l    A2,D0
000035A4  0680 0000 6283          add.l     #24,D0
000035A8  0018      
000035AA  2040      6284          move.l    D0,A0
000035AC  5390      6285          subq.l    #1,(A0)
                    6286   ; if(CheckPosition(&temp))
000035AE  2F0A      6287          move.l    A2,-(A7)
000035B0  4E94      6288          jsr       (A4)
000035B2  584F      6289          addq.w    #4,A7
000035B4  4A80      6290          tst.l     D0
000035B6  670C      6291          beq.s     ManipulateCurrent_12
                    6292   ; current.col--;
000035B8  200B      6293          move.l    A3,D0
000035BA  0680 0000 6294          add.l     #24,D0
000035BE  0018      
000035C0  2040      6295          move.l    D0,A0
000035C2  5390      6296          subq.l    #1,(A0)
                    6297   ManipulateCurrent_12:
                    6298   ; break;
000035C4  601A      6299          bra.s     ManipulateCurrent_2
                    6300   ManipulateCurrent_6:
                    6301   ; case 'w':
                    6302   ; RotateShape(&temp); // rotate clockwise
000035C6  2F0A      6303          move.l    A2,-(A7)
000035C8  4EB8 3196 6304          jsr       _RotateShape
000035CC  584F      6305          addq.w    #4,A7
                    6306   ; if(CheckPosition(&temp))
000035CE  2F0A      6307          move.l    A2,-(A7)
000035D0  4E94      6308          jsr       (A4)
000035D2  584F      6309          addq.w    #4,A7
000035D4  4A80      6310          tst.l     D0
000035D6  6708      6311          beq.s     ManipulateCurrent_14
                    6312   ; RotateShape(&current);
000035D8  2F0B      6313          move.l    A3,-(A7)
000035DA  4EB8 3196 6314          jsr       _RotateShape
000035DE  584F      6315          addq.w    #4,A7
                    6316   ManipulateCurrent_14:
                    6317   ; break;
                    6318   ManipulateCurrent_2:
                    6319   ; }
                    6320   ; PrintTable();
000035E0  4EB8 3372 6321          jsr       _PrintTable
000035E4  4CDF 1C00 6322          movem.l   (A7)+,A2/A3/A4
000035E8  4E5E      6323          unlk      A6
000035EA  4E75      6324          rts
                    6325   ; }
                    6326   ; void initTetris_Speed()
                    6327   ; {
                    6328   _initTetris_Speed:
                    6329   ; Tetris_Speed.speed          = INITIAL_TETRIS_SPEED ;
000035EC  23FC 0000 6330          move.l    #2,_Tetris_Speed.L
000035F0  0002 0803 
000035F4  075E      
                    6331   ; Tetris_Speed.speed_increase = TETRIS_SPEED_INCREASE;
000035F6  23FC 0000 6332          move.l    #1,_Tetris_Speed+4.L
000035FA  0001 0803 
000035FE  0762      
00003600  4E75      6333          rts
                    6334   ; }
                    6335   ; void tetris_mainloop()
                    6336   ; {
                    6337   _tetris_mainloop:
00003602  4E56 FFFC 6338          link      A6,#-4
00003606  2F02      6339          move.l    D2,-(A7)
                    6340   ; int current_time;
                    6341   ; int got_game_over;
                    6342   ; while(1){
                    6343   tetris_mainloop_1:
                    6344   ; current_time = clock();
00003608  4EB8 2E26 6345          jsr       _clock
0000360C  2400      6346          move.l    D0,D2
                    6347   ; if (kbhit()) {
0000360E  4EB8 09E2 6348          jsr       _kbhit
00003612  4A80      6349          tst.l     D0
00003614  6720      6350          beq.s     tetris_mainloop_6
                    6351   ; ManipulateCurrent(getch());
00003616  2F00      6352          move.l    D0,-(A7)
00003618  4EB9 0000 6353          jsr       _getch
0000361C  3BBA      
0000361E  2200      6354          move.l    D0,D1
00003620  201F      6355          move.l    (A7)+,D0
00003622  2F01      6356          move.l    D1,-(A7)
00003624  4EB8 34F0 6357          jsr       _ManipulateCurrent
00003628  584F      6358          addq.w    #4,A7
                    6359   ; if (!GameOn) {
0000362A  4A39 0803 6360          tst.b     _GameOn.L
0000362E  0676      
00003630  6604      6361          bne.s     tetris_mainloop_6
                    6362   ; break;
00003632  6000 003C 6363          bra       tetris_mainloop_3
                    6364   tetris_mainloop_6:
                    6365   ; }
                    6366   ; }
                    6367   ; if (current_time >= ((MILLISECONDS_PER_SEC/Tetris_Speed.speed) + tetris_timer)) {
00003636  4878 03E8 6368          pea       1000
0000363A  2F39 0803 6369          move.l    _Tetris_Speed.L,-(A7)
0000363E  075E      
00003640  4EB9 0000 6370          jsr       LDIV
00003644  394A      
00003646  2017      6371          move.l    (A7),D0
00003648  504F      6372          addq.w    #8,A7
0000364A  D0B9 0803 6373          add.l     _tetris_timer.L,D0
0000364E  0678      
00003650  B480      6374          cmp.l     D0,D2
00003652  6D1A      6375          blt.s     tetris_mainloop_8
                    6376   ; ManipulateCurrent('s');
00003654  4878 0073 6377          pea       115
00003658  4EB8 34F0 6378          jsr       _ManipulateCurrent
0000365C  584F      6379          addq.w    #4,A7
                    6380   ; if (!GameOn) {
0000365E  4A39 0803 6381          tst.b     _GameOn.L
00003662  0676      
00003664  6602      6382          bne.s     tetris_mainloop_10
                    6383   ; break;
00003666  6008      6384          bra.s     tetris_mainloop_3
                    6385   tetris_mainloop_10:
                    6386   ; }
                    6387   ; tetris_timer = current_time;
00003668  23C2 0803 6388          move.l    D2,_tetris_timer.L
0000366C  0678      
                    6389   tetris_mainloop_8:
0000366E  6098      6390          bra       tetris_mainloop_1
                    6391   tetris_mainloop_3:
00003670  241F      6392          move.l    (A7)+,D2
00003672  4E5E      6393          unlk      A6
00003674  4E75      6394          rts
                    6395   ; }
                    6396   ; }
                    6397   ; }
                    6398   ; // void test(){
                    6399   ; // 	printf("Testing\n");
                    6400   ; // 	while (1){
                    6401   ; // 		octlAddress = 0xF3;
                    6402   ; // 		octlAddress1 = 0xE2;
                    6403   ; // 	}
                    6404   ; // }
                    6405   ; int tetris_main() {
                    6406   _tetris_main:
00003676  4E56 FF7C 6407          link      A6,#-132
0000367A  48E7 3030 6408          movem.l   D2/D3/A2/A3,-(A7)
0000367E  45F9 0803 6409          lea       _ShapesArray.L,A2
00003682  069A      
00003684  47F9 0000 6410          lea       _printf.L,A3
00003688  3B88      
                    6411   ; int i, j;
                    6412   ; int test1;
                    6413   ; char score_str[128];
                    6414   ; // test();
                    6415   ; timer_count = 0;
0000368A  42B9 0803 6416          clr.l     _timer_count.L
0000368E  077A      
                    6417   ; printw_x = 0;
00003690  42B9 0803 6418          clr.l     _printw_x.L
00003694  0766      
                    6419   ; printw_y = 0;
00003696  42B9 0803 6420          clr.l     _printw_y.L
0000369A  076A      
                    6421   ; GameOn = TRUE;
0000369C  13FC 0001 6422          move.b    #1,_GameOn.L
000036A0  0803 0676 
                    6423   ; InstallExceptionHandler(Timer_ISR, 30);
000036A4  4878 001E 6424          pea       30
000036A8  4878 2AF0 6425          pea       _Timer_ISR.L
000036AC  4EB8 093A 6426          jsr       _InstallExceptionHandler
000036B0  504F      6427          addq.w    #8,A7
                    6428   ; // Timer1Data = 0x25;  // 100 ms
                    6429   ; // Timer1Control = 3;  // enable timer, periodic mode
                    6430   ; // InstallExceptionHandler(Timer_ISR, 29);
                    6431   ; // InstallExceptionHandler(Timer_ISR, 28);
                    6432   ; // InstallExceptionHandler(Timer_ISR, 27);
                    6433   ; // InstallExceptionHandler(Timer_ISR, 26);
                    6434   ; // InstallExceptionHandler(Timer_ISR, 25);
                    6435   ; octl = OCTL_TETRIS_DEFAULT;
000036B2  13FC 00A2 6436          move.b    #162,_octl.L
000036B6  0803 067C 
                    6437   ; octlAddress = octl;
000036BA  13F9 0803 6438          move.b    _octl.L,-16580608
000036BE  067C FF03 
000036C2  0000      
                    6439   ; for(i = 0; i < TETRIS_ROWS ;i++){
000036C4  4283      6440          clr.l     D3
                    6441   tetris_main_1:
000036C6  0C83 0000 6442          cmp.l     #20,D3
000036CA  0014      
000036CC  6C24      6443          bge.s     tetris_main_3
                    6444   ; for(j = 0; j < TETRIS_COLS ; j++){
000036CE  4282      6445          clr.l     D2
                    6446   tetris_main_4:
000036D0  0C82 0000 6447          cmp.l     #15,D2
000036D4  000F      
000036D6  6C16      6448          bge.s     tetris_main_6
                    6449   ; Table[i][j] = 0;
000036D8  2003      6450          move.l    D3,D0
000036DA  C1FC 000F 6451          muls      #15,D0
000036DE  41F9 0803 6452          lea       _Table.L,A0
000036E2  0546      
000036E4  D1C0      6453          add.l     D0,A0
000036E6  4230 2800 6454          clr.b     0(A0,D2.L)
000036EA  5282      6455          addq.l    #1,D2
000036EC  60E2      6456          bra       tetris_main_4
                    6457   tetris_main_6:
000036EE  5283      6458          addq.l    #1,D3
000036F0  60D4      6459          bra       tetris_main_1
                    6460   tetris_main_3:
                    6461   ; }
                    6462   ; }
                    6463   ; //S shape
                    6464   ; ShapesArray[0].array[0][0] = 	0;
000036F2  4212      6465          clr.b     (A2)
                    6466   ; ShapesArray[0].array[0][1] = 	1;
000036F4  157C 0001 6467          move.b    #1,1(A2)
000036F8  0001      
                    6468   ; ShapesArray[0].array[0][2] = 	1;
000036FA  157C 0001 6469          move.b    #1,2(A2)
000036FE  0002      
                    6470   ; ShapesArray[0].array[1][0] = 	1;
00003700  157C 0001 6471          move.b    #1,4(A2)
00003704  0004      
                    6472   ; ShapesArray[0].array[1][1] = 	1;
00003706  157C 0001 6473          move.b    #1,4+1(A2)
0000370A  0005      
                    6474   ; ShapesArray[0].array[1][2] = 	0;
0000370C  422A 0006 6475          clr.b     4+2(A2)
                    6476   ; ShapesArray[0].array[2][0] = 	0;
00003710  422A 0008 6477          clr.b     8(A2)
                    6478   ; ShapesArray[0].array[2][1] = 	0;
00003714  422A 0009 6479          clr.b     8+1(A2)
                    6480   ; ShapesArray[0].array[2][2] = 	0;
00003718  422A 000A 6481          clr.b     8+2(A2)
                    6482   ; ShapesArray[0].width       = 	3;
0000371C  257C 0000 6483          move.l    #3,16(A2)
00003720  0003 0010 
                    6484   ; //Z shape
                    6485   ; ShapesArray[1].array[0][0] = 	1;
00003724  157C 0001 6486          move.b    #1,28(A2)
00003728  001C      
                    6487   ; ShapesArray[1].array[0][1] = 	1;
0000372A  157C 0001 6488          move.b    #1,28+1(A2)
0000372E  001D      
                    6489   ; ShapesArray[1].array[0][2] = 	0;
00003730  422A 001E 6490          clr.b     28+2(A2)
                    6491   ; ShapesArray[1].array[1][0] = 	0;
00003734  422A 0020 6492          clr.b     28+4(A2)
                    6493   ; ShapesArray[1].array[1][1] = 	1;
00003738  157C 0001 6494          move.b    #1,28+4+1(A2)
0000373C  0021      
                    6495   ; ShapesArray[1].array[1][2] = 	1;
0000373E  157C 0001 6496          move.b    #1,28+4+2(A2)
00003742  0022      
                    6497   ; ShapesArray[1].array[2][0] = 	0;
00003744  422A 0024 6498          clr.b     28+8(A2)
                    6499   ; ShapesArray[1].array[2][1] = 	0;
00003748  422A 0025 6500          clr.b     28+8+1(A2)
                    6501   ; ShapesArray[1].array[2][2] = 	0;
0000374C  422A 0026 6502          clr.b     28+8+2(A2)
                    6503   ; ShapesArray[1].width       = 	3;
00003750  257C 0000 6504          move.l    #3,44(A2)
00003754  0003 002C 
                    6505   ; //T shape
                    6506   ; ShapesArray[2].array[0][0] = 	0;
00003758  422A 0038 6507          clr.b     56(A2)
                    6508   ; ShapesArray[2].array[0][1] = 	1;
0000375C  157C 0001 6509          move.b    #1,56+1(A2)
00003760  0039      
                    6510   ; ShapesArray[2].array[0][2] = 	0;
00003762  422A 003A 6511          clr.b     56+2(A2)
                    6512   ; ShapesArray[2].array[1][0] = 	1;
00003766  157C 0001 6513          move.b    #1,56+4(A2)
0000376A  003C      
                    6514   ; ShapesArray[2].array[1][1] = 	1;
0000376C  157C 0001 6515          move.b    #1,56+4+1(A2)
00003770  003D      
                    6516   ; ShapesArray[2].array[1][2] = 	1;
00003772  157C 0001 6517          move.b    #1,56+4+2(A2)
00003776  003E      
                    6518   ; ShapesArray[2].array[2][0] = 	0;
00003778  422A 0040 6519          clr.b     56+8(A2)
                    6520   ; ShapesArray[2].array[2][1] = 	0;
0000377C  422A 0041 6521          clr.b     56+8+1(A2)
                    6522   ; ShapesArray[2].array[2][2] = 	0;
00003780  422A 0042 6523          clr.b     56+8+2(A2)
                    6524   ; ShapesArray[2].width       = 	3;
00003784  257C 0000 6525          move.l    #3,72(A2)
00003788  0003 0048 
                    6526   ; //L shape
                    6527   ; ShapesArray[3].array[0][0] = 	0;
0000378C  422A 0054 6528          clr.b     84(A2)
                    6529   ; ShapesArray[3].array[0][1] = 	0;
00003790  422A 0055 6530          clr.b     84+1(A2)
                    6531   ; ShapesArray[3].array[0][2] = 	1;
00003794  157C 0001 6532          move.b    #1,84+2(A2)
00003798  0056      
                    6533   ; ShapesArray[3].array[1][0] = 	1;
0000379A  157C 0001 6534          move.b    #1,84+4(A2)
0000379E  0058      
                    6535   ; ShapesArray[3].array[1][1] = 	1;
000037A0  157C 0001 6536          move.b    #1,84+4+1(A2)
000037A4  0059      
                    6537   ; ShapesArray[3].array[1][2] = 	1;
000037A6  157C 0001 6538          move.b    #1,84+4+2(A2)
000037AA  005A      
                    6539   ; ShapesArray[3].array[2][0] = 	0;
000037AC  422A 005C 6540          clr.b     84+8(A2)
                    6541   ; ShapesArray[3].array[2][1] = 	0;
000037B0  422A 005D 6542          clr.b     84+8+1(A2)
                    6543   ; ShapesArray[3].array[2][2] = 	0;
000037B4  422A 005E 6544          clr.b     84+8+2(A2)
                    6545   ; ShapesArray[3].width       = 	3;
000037B8  257C 0000 6546          move.l    #3,100(A2)
000037BC  0003 0064 
                    6547   ; //flipped L shape
                    6548   ; ShapesArray[4].array[0][0] = 	1;
000037C0  157C 0001 6549          move.b    #1,112(A2)
000037C4  0070      
                    6550   ; ShapesArray[4].array[0][1] = 	0;
000037C6  422A 0071 6551          clr.b     112+1(A2)
                    6552   ; ShapesArray[4].array[0][2] = 	0;
000037CA  422A 0072 6553          clr.b     112+2(A2)
                    6554   ; ShapesArray[4].array[1][0] = 	1;
000037CE  157C 0001 6555          move.b    #1,112+4(A2)
000037D2  0074      
                    6556   ; ShapesArray[4].array[1][1] = 	1;
000037D4  157C 0001 6557          move.b    #1,112+4+1(A2)
000037D8  0075      
                    6558   ; ShapesArray[4].array[1][2] = 	1;
000037DA  157C 0001 6559          move.b    #1,112+4+2(A2)
000037DE  0076      
                    6560   ; ShapesArray[4].array[2][0] = 	0;
000037E0  422A 0078 6561          clr.b     112+8(A2)
                    6562   ; ShapesArray[4].array[2][1] = 	0;
000037E4  422A 0079 6563          clr.b     112+8+1(A2)
                    6564   ; ShapesArray[4].array[2][2] = 	0;
000037E8  422A 007A 6565          clr.b     112+8+2(A2)
                    6566   ; ShapesArray[4].width       = 	3;
000037EC  257C 0000 6567          move.l    #3,128(A2)
000037F0  0003 0080 
                    6568   ; //square shape
                    6569   ; ShapesArray[5].array[0][0] = 	1;
000037F4  157C 0001 6570          move.b    #1,140(A2)
000037F8  008C      
                    6571   ; ShapesArray[5].array[0][1] = 	1;
000037FA  157C 0001 6572          move.b    #1,140+1(A2)
000037FE  008D      
                    6573   ; ShapesArray[5].array[1][0] = 	1;
00003800  157C 0001 6574          move.b    #1,140+4(A2)
00003804  0090      
                    6575   ; ShapesArray[5].array[1][1] = 	1;
00003806  157C 0001 6576          move.b    #1,140+4+1(A2)
0000380A  0091      
                    6577   ; ShapesArray[5].width       = 	2;
0000380C  257C 0000 6578          move.l    #2,156(A2)
00003810  0002 009C 
                    6579   ; //long bar shape
                    6580   ; ShapesArray[6].array[0][0] = 	0;
00003814  422A 00A8 6581          clr.b     168(A2)
                    6582   ; ShapesArray[6].array[0][1] = 	0;
00003818  422A 00A9 6583          clr.b     168+1(A2)
                    6584   ; ShapesArray[6].array[0][2] = 	0;
0000381C  422A 00AA 6585          clr.b     168+2(A2)
                    6586   ; ShapesArray[6].array[0][3] = 	0;
00003820  422A 00AB 6587          clr.b     168+3(A2)
                    6588   ; ShapesArray[6].array[1][0] = 	1;
00003824  157C 0001 6589          move.b    #1,168+4(A2)
00003828  00AC      
                    6590   ; ShapesArray[6].array[1][1] = 	1;
0000382A  157C 0001 6591          move.b    #1,168+4+1(A2)
0000382E  00AD      
                    6592   ; ShapesArray[6].array[1][2] = 	1;
00003830  157C 0001 6593          move.b    #1,168+4+2(A2)
00003834  00AE      
                    6594   ; ShapesArray[6].array[1][3] = 	1;
00003836  157C 0001 6595          move.b    #1,168+4+3(A2)
0000383A  00AF      
                    6596   ; ShapesArray[6].array[2][0] = 	0;
0000383C  422A 00B0 6597          clr.b     168+8(A2)
                    6598   ; ShapesArray[6].array[2][1] = 	0;
00003840  422A 00B1 6599          clr.b     168+8+1(A2)
                    6600   ; ShapesArray[6].array[2][2] = 	0;
00003844  422A 00B2 6601          clr.b     168+8+2(A2)
                    6602   ; ShapesArray[6].array[2][3] = 	0;
00003848  422A 00B3 6603          clr.b     168+8+3(A2)
                    6604   ; ShapesArray[6].array[3][0] = 	0;
0000384C  422A 00B4 6605          clr.b     168+12(A2)
                    6606   ; ShapesArray[6].array[3][1] = 	0;
00003850  422A 00B5 6607          clr.b     168+12+1(A2)
                    6608   ; ShapesArray[6].array[3][2] = 	0;
00003854  422A 00B6 6609          clr.b     168+12+2(A2)
                    6610   ; ShapesArray[6].array[3][3] = 	0;
00003858  422A 00B7 6611          clr.b     168+12+3(A2)
                    6612   ; ShapesArray[6].width       = 	4;
0000385C  257C 0000 6613          move.l    #4,184(A2)
00003860  0004 00B8 
                    6614   ; set_color(1);
00003864  4878 0001 6615          pea       1
00003868  4EB8 2E0C 6616          jsr       _set_color
0000386C  584F      6617          addq.w    #4,A7
                    6618   ; set_vga_control_reg(OCTL_TETRIS_DEFAULT);
0000386E  4878 00A2 6619          pea       162
00003872  4EB8 2DEC 6620          jsr       _set_vga_control_reg
00003876  584F      6621          addq.w    #4,A7
                    6622   ; tetris_score = 0;
00003878  42B9 0803 6623          clr.l     _tetris_score.L
0000387C  0672      
                    6624   ; initTetris_Speed();
0000387E  4EB8 35EC 6625          jsr       _initTetris_Speed
                    6626   ; clear_screen();
00003882  4EB8 2CEC 6627          jsr       _clear_screen
                    6628   ; tetris_timer = clock();
00003886  4EB8 2E26 6629          jsr       _clock
0000388A  23C0 0803 6630          move.l    D0,_tetris_timer.L
0000388E  0678      
                    6631   ; SetNewRandomShape();
00003890  4EB8 311E 6632          jsr       _SetNewRandomShape
                    6633   ; PrintTable();	
00003894  4EB8 3372 6634          jsr       _PrintTable
                    6635   ; tetris_mainloop();
00003898  4EB8 3602 6636          jsr       _tetris_mainloop
                    6637   ; gameOver();
0000389C  4EB8 2EF8 6638          jsr       _gameOver
                    6639   ; for(i = 0; i < TETRIS_ROWS ;i++){
000038A0  4283      6640          clr.l     D3
                    6641   tetris_main_7:
000038A2  0C83 0000 6642          cmp.l     #20,D3
000038A6  0014      
000038A8  6C00 0048 6643          bge       tetris_main_9
                    6644   ; for(j = 0; j < TETRIS_COLS ; j++){
000038AC  4282      6645          clr.l     D2
                    6646   tetris_main_10:
000038AE  0C82 0000 6647          cmp.l     #15,D2
000038B2  000F      
000038B4  6C2E      6648          bge.s     tetris_main_12
                    6649   ; if (Table[i][j]) {
000038B6  2003      6650          move.l    D3,D0
000038B8  C1FC 000F 6651          muls      #15,D0
000038BC  41F9 0803 6652          lea       _Table.L,A0
000038C0  0546      
000038C2  D1C0      6653          add.l     D0,A0
000038C4  4A30 2800 6654          tst.b     0(A0,D2.L)
000038C8  670C      6655          beq.s     tetris_main_13
                    6656   ; printf("#");
000038CA  4879 0000 6657          pea       @tetris_14.L
000038CE  5068      
000038D0  4E93      6658          jsr       (A3)
000038D2  584F      6659          addq.w    #4,A7
000038D4  600A      6660          bra.s     tetris_main_14
                    6661   tetris_main_13:
                    6662   ; } else {
                    6663   ; printf(".");
000038D6  4879 0000 6664          pea       @tetris_16.L
000038DA  5072      
000038DC  4E93      6665          jsr       (A3)
000038DE  584F      6666          addq.w    #4,A7
                    6667   tetris_main_14:
000038E0  5282      6668          addq.l    #1,D2
000038E2  60CA      6669          bra       tetris_main_10
                    6670   tetris_main_12:
                    6671   ; }
                    6672   ; }
                    6673   ; printf("\n");
000038E4  4879 0000 6674          pea       @tetris_18.L
000038E8  507C      
000038EA  4E93      6675          jsr       (A3)
000038EC  584F      6676          addq.w    #4,A7
000038EE  5283      6677          addq.l    #1,D3
000038F0  60B0      6678          bra       tetris_main_7
                    6679   tetris_main_9:
                    6680   ; }
                    6681   ; printf("\nGame over!\n");
000038F2  4879 0000 6682          pea       @tetris_22.L
000038F6  50A0      
000038F8  4E93      6683          jsr       (A3)
000038FA  584F      6684          addq.w    #4,A7
                    6685   ; sprintf(score_str,"\nScore: %d\n",tetris_score);
000038FC  2F39 0803 6686          move.l    _tetris_score.L,-(A7)
00003900  0672      
00003902  4879 0000 6687          pea       @tetris_20.L
00003906  5088      
00003908  486E FF80 6688          pea       -128(A6)
0000390C  4EB9 0000 6689          jsr       _sprintf
00003910  3B12      
00003912  DEFC 000C 6690          add.w     #12,A7
                    6691   ; printf(score_str);
00003916  486E FF80 6692          pea       -128(A6)
0000391A  4E93      6693          jsr       (A3)
0000391C  584F      6694          addq.w    #4,A7
                    6695   ; return 0;
0000391E  4280      6696          clr.l     D0
00003920  4CDF 0C0C 6697          movem.l   (A7)+,D2/D3/A2/A3
00003924  4E5E      6698          unlk      A6
00003926  4E75      6699          rts
                    6700   ; }
                    6701   _strcpy:
00003928  206F 0004 6702          move.l    (4,A7),A0
0000392C  226F 0008 6703          move.l    (8,A7),A1
00003930  2008      6704          move.l    A0,D0
                    6705   strcpy_1:
00003932  10D9      6706          move.b    (A1)+,(A0)+
00003934  66FC      6707          bne       strcpy_1
00003936  4E75      6708          rts
                    6709   ULDIV:
00003938  4E56 0000 6710          link    A6,#0
0000393C  48E7 C000 6711          movem.l D0/D1,-(A7)
00003940  222E 0008 6712          move.l  8(A6),D1
00003944  202E 000C 6713          move.l  12(A6),D0
00003948  6036      6714          bra.s   ldiv_3
                    6715   LDIV:
0000394A  4E56 0000 6716          link    A6,#0
0000394E  48E7 C000 6717          movem.l D0/D1,-(A7)
00003952  222E 0008 6718          move.l  8(A6),D1
00003956  202E 000C 6719          move.l  12(A6),D0
0000395A  4A80      6720          tst.l   D0
0000395C  6A0E      6721          bpl.s   ldiv_1
0000395E  4480      6722          neg.l   D0
00003960  4A81      6723          tst.l   D1
00003962  6A14      6724          bpl.s   ldiv_2
00003964  4481      6725          neg.l   D1
00003966  612A      6726          bsr.s   dodiv
00003968  4481      6727          neg.l   D1
0000396A  6016      6728          bra.s   ldiv_4
                    6729   ldiv_1:
0000396C  4A81      6730          tst.l   D1
0000396E  6A10      6731          bpl.s   ldiv_3
00003970  4481      6732          neg.l   D1
00003972  611E      6733          bsr.s   dodiv
00003974  4480      6734          neg.l   D0
00003976  600A      6735          bra.s   ldiv_4
                    6736   ldiv_2:
00003978  6118      6737          bsr.s   dodiv
0000397A  4480      6738          neg.l   D0
0000397C  4481      6739          neg.l   D1
0000397E  6002      6740          bra.s   ldiv_4
                    6741   ldiv_3:
00003980  6110      6742          bsr.s   dodiv
                    6743   ldiv_4:
00003982  2D40 0008 6744          move.l  D0,8(A6)
00003986  2D41 000C 6745          move.l  D1,12(A6)
0000398A  4CDF 0003 6746          movem.l (A7)+,D0/D1
0000398E  4E5E      6747          unlk    A6
00003990  4E75      6748          rts
                    6749   dodiv:
00003992  0C81 0000 6750          cmpi.l  #$FFFF,D1
00003996  FFFF      
00003998  6236      6751          bhi.s   dodiv_2
0000399A  0C80 0000 6752          cmpi.l  #$FFFF,D0
0000399E  FFFF      
000039A0  6210      6753          bhi.s   dodiv_1
000039A2  80C1      6754          divu    D1,D0
000039A4  2200      6755          move.l  D0,D1
000039A6  4241      6756          clr.w   D1
000039A8  4841      6757          swap    D1
000039AA  0280 0000 6758          andi.l  #$FFFF,D0
000039AE  FFFF      
000039B0  4E75      6759          rts
                    6760   dodiv_1:
000039B2  48A7 A000 6761          movem.w D0/D2,-(A7)
000039B6  4240      6762          clr.w   D0
000039B8  4840      6763          swap    D0
000039BA  80C1      6764          divu    D1,D0
000039BC  3400      6765          move.w  D0,D2
000039BE  301F      6766          move.w  (A7)+,D0
000039C0  80C1      6767          divu    D1,D0
000039C2  4840      6768          swap    D0
000039C4  4281      6769          clr.l   D1
000039C6  3200      6770          move.w  D0,D1
000039C8  3002      6771          move.w  D2,D0
000039CA  4840      6772          swap    D0
000039CC  341F      6773          move.w  (A7)+,D2
000039CE  4E75      6774          rts
                    6775   dodiv_2:
000039D0  48E7 3800 6776          movem.l D2/D3/D4,-(A7)
000039D4  2401      6777          move.l  D1,D2
000039D6  4242      6778          clr.w   D2
000039D8  4842      6779          swap    D2
000039DA  5282      6780          addq.l  #1,D2
000039DC  2600      6781          move.l  D0,D3
000039DE  2801      6782          move.l  D1,D4
000039E0  2202      6783          move.l  D2,D1
000039E2  61CE      6784          bsr.s   dodiv_1
000039E4  2204      6785          move.l  D4,D1
000039E6  82C2      6786          divu    D2,D1
000039E8  80C1      6787          divu    D1,D0
000039EA  0280 0000 6788          andi.l  #$FFFF,D0
000039EE  FFFF      
                    6789   dodiv_3:
000039F0  2204      6790          move.l  D4,D1
000039F2  2404      6791          move.l  D4,D2
000039F4  4842      6792          swap    D2
000039F6  C2C0      6793          mulu    D0,D1
000039F8  C4C0      6794          mulu    D0,D2
000039FA  4842      6795          swap    D2
000039FC  D282      6796          add.l   D2,D1
000039FE  9283      6797          sub.l   D3,D1
00003A00  620A      6798          bhi.s   dodiv_4
00003A02  4481      6799          neg.l   D1
00003A04  B881      6800          cmp.l   D1,D4
00003A06  6208      6801          bhi.s   dodiv_5
00003A08  5280      6802          addq.l  #1,D0
00003A0A  60E4      6803          bra.s   dodiv_3
                    6804   dodiv_4:
00003A0C  5380      6805          subq.l  #1,D0
00003A0E  60E0      6806          bra.s   dodiv_3
                    6807   dodiv_5:
00003A10  4CDF 001C 6808          movem.l (A7)+,D2/D3/D4
00003A14  4E75      6809          rts
                    6810   ULMUL:
00003A16  4E56 0000 6811          link    A6,#0
00003A1A  48E7 C000 6812          movem.l D0/D1,-(A7)
00003A1E  222E 0008 6813          move.l  8(A6),D1
00003A22  202E 000C 6814          move.l  12(A6),D0
00003A26  602C      6815          bra.s   lmul_3
                    6816   LMUL:
00003A28  4E56 0000 6817          link    A6,#0
00003A2C  48E7 C000 6818          movem.l D0/D1,-(A7)
00003A30  222E 0008 6819          move.l  8(A6),D1
00003A34  202E 000C 6820          move.l  12(A6),D0
00003A38  4A80      6821          tst.l   D0
00003A3A  6A0A      6822          bpl.s   lmul_1
00003A3C  4480      6823          neg.l   D0
00003A3E  4A81      6824          tst.l   D1
00003A40  6A0A      6825          bpl.s   lmul_2
00003A42  4481      6826          neg.l   D1
00003A44  600E      6827          bra.s   lmul_3
                    6828   lmul_1:
00003A46  4A81      6829          tst.l   D1
00003A48  6A0A      6830          bpl.s   lmul_3
00003A4A  4481      6831          neg.l   D1
                    6832   lmul_2:
00003A4C  6114      6833          bsr.s   domul
00003A4E  4481      6834          neg.l   D1
00003A50  4080      6835          negx.l  D0
00003A52  6002      6836          bra.s   lmul_4
                    6837   lmul_3:
00003A54  610C      6838          bsr.s   domul
                    6839   lmul_4:
00003A56  2D41 0008 6840          move.l  D1,8(A6)
00003A5A  4CDF 0003 6841          movem.l (A7)+,D0/D1
00003A5E  4E5E      6842          unlk    A6
00003A60  4E75      6843          rts
                    6844   domul:
00003A62  0C81 0000 6845          cmpi.l  #$FFFF,D1
00003A66  FFFF      
00003A68  620C      6846          bhi.s   domul_1
00003A6A  0C80 0000 6847          cmpi.l  #$FFFF,D0
00003A6E  FFFF      
00003A70  620E      6848          bhi.s   domul_2
00003A72  C2C0      6849          mulu    D0,D1
00003A74  4E75      6850          rts
                    6851   domul_1:
00003A76  0C80 0000 6852          cmpi.l  #$FFFF,D0
00003A7A  FFFF      
00003A7C  6218      6853          bhi.s   domul_4
00003A7E  6002      6854          bra.s   domul_3
                    6855   domul_2
00003A80  C141      6856          exg     D0,D1
                    6857   domul_3:
00003A82  2F02      6858          move.l  D2,-(A7)
00003A84  2401      6859          move.l  D1,D2
00003A86  4842      6860          swap    D2
00003A88  C2C0      6861          mulu    D0,D1
00003A8A  C4C0      6862          mulu    D0,D2
00003A8C  4842      6863          swap    D2
00003A8E  4242      6864          clr.w   D2
00003A90  D282      6865          add.l   D2,D1
00003A92  241F      6866          move.l  (A7)+,D2
00003A94  4E75      6867          rts
                    6868   domul_4:
00003A96  48E7 3000 6869          movem.l D2/D3,-(A7)
00003A9A  2401      6870          move.l  D1,D2
00003A9C  2601      6871          move.l  D1,D3
00003A9E  C2C0      6872          mulu    D0,D1
00003AA0  4842      6873          swap    D2
00003AA2  C4C0      6874          mulu    D0,D2
00003AA4  4840      6875          swap    D0
00003AA6  C6C0      6876          mulu    D0,D3
00003AA8  D483      6877          add.l   D3,D2
00003AAA  4842      6878          swap    D2
00003AAC  4242      6879          clr.w   D2
00003AAE  D282      6880          add.l   D2,D1
00003AB0  4CDF 000C 6881          movem.l (A7)+,D2/D3
00003AB4  4E75      6882          rts
                    6883   _putch:
00003AB6  4E56 0000 6884          link      A6,#0
00003ABA  48E7 2000 6885          movem.l   D2,-(A7)
00003ABE  242E 0008 6886          move.l    8(A6),D2
00003AC2  0C82 0000 6887          cmp.l     #10,D2
00003AC6  000A      
00003AC8  660A      6888          bne.s     putch_1
00003ACA  4878 000D 6889          pea       13
00003ACE  6100 CF2A 6890          bsr       __putch
00003AD2  584F      6891          addq.w    #4,A7
                    6892   putch_1:
00003AD4  2F02      6893          move.l    D2,-(A7)
00003AD6  6100 CF22 6894          bsr       __putch
00003ADA  584F      6895          addq.w    #4,A7
00003ADC  2002      6896          move.l    D2,D0
00003ADE  4CDF 0004 6897          movem.l   (A7)+,D2
00003AE2  4E5E      6898          unlk      A6
00003AE4  4E75      6899          rts
                    6900   _tolower:
00003AE6  4E56 0000 6901          link      A6,#0
00003AEA  48E7 2000 6902          movem.l   D2,-(A7)
00003AEE  242E 0008 6903          move.l    8(A6),D2
00003AF2  0C82 0000 6904          cmp.l     #65,D2
00003AF6  0041      
00003AF8  6D0E      6905          blt.s     tolower_1
00003AFA  0C82 0000 6906          cmp.l     #90,D2
00003AFE  005A      
00003B00  6E06      6907          bgt.s     tolower_1
00003B02  84BC 0000 6908          or.l      #32,D2
00003B06  0020      
                    6909   tolower_1:
00003B08  2002      6910          move.l    D2,D0
00003B0A  4CDF 0004 6911          movem.l   (A7)+,D2
00003B0E  4E5E      6912          unlk      A6
00003B10  4E75      6913          rts
                    6914   _sprintf:
00003B12  4E56 FFFC 6915          link      A6,#-4
00003B16  48E7 2000 6916          movem.l   D2,-(A7)
00003B1A  41EE 000C 6917          lea       12(A6),A0
00003B1E  5848      6918          addq.w    #4,A0
00003B20  2408      6919          move.l    A0,D2
00003B22  2F02      6920          move.l    D2,-(A7)
00003B24  2F2E 000C 6921          move.l    12(A6),-(A7)
00003B28  2F2E 0008 6922          move.l    8(A6),-(A7)
00003B2C  6100 017A 6923          bsr       _vsprintf
00003B30  DEFC 000C 6924          add.w     #12,A7
00003B34  2D40 FFFC 6925          move.l    D0,-4(A6)
00003B38  4282      6926          clr.l     D2
00003B3A  202E FFFC 6927          move.l    -4(A6),D0
00003B3E  4CDF 0004 6928          movem.l   (A7)+,D2
00003B42  4E5E      6929          unlk      A6
00003B44  4E75      6930          rts
                    6931   _strcat:
00003B46  206F 0004 6932          move.l    (4,A7),A0	
00003B4A  226F 0008 6933          move.l    (8,A7),A1	
00003B4E  2008      6934          move.l    A0,D0		
                    6935   strcat_0:
00003B50  4A18      6936          tst.b     (A0)+
00003B52  66FC      6937          bne       strcat_0
00003B54  5348      6938          subq      #1,A0
                    6939   strcat_1:
00003B56  10D9      6940          move.b    (A1)+,(A0)+
00003B58  66FC      6941          bne       strcat_1
00003B5A  4E75      6942          rts
                    6943   _toupper:
00003B5C  4E56 0000 6944          link      A6,#0
00003B60  48E7 2000 6945          movem.l   D2,-(A7)
00003B64  242E 0008 6946          move.l    8(A6),D2
00003B68  0C82 0000 6947          cmp.l     #97,D2
00003B6C  0061      
00003B6E  6D0E      6948          blt.s     toupper_1
00003B70  0C82 0000 6949          cmp.l     #122,D2
00003B74  007A      
00003B76  6E06      6950          bgt.s     toupper_1
00003B78  C4BC 0000 6951          and.l     #95,D2
00003B7C  005F      
                    6952   toupper_1:
00003B7E  2002      6953          move.l    D2,D0
00003B80  4CDF 0004 6954          movem.l   (A7)+,D2
00003B84  4E5E      6955          unlk      A6
00003B86  4E75      6956          rts
                    6957   _printf:
00003B88  4E56 FFFC 6958          link      A6,#-4
00003B8C  48E7 2000 6959          movem.l   D2,-(A7)
00003B90  41EE 0008 6960          lea       8(A6),A0
00003B94  5848      6961          addq.w    #4,A0
00003B96  2408      6962          move.l    A0,D2
00003B98  2F02      6963          move.l    D2,-(A7)
00003B9A  2F2E 0008 6964          move.l    8(A6),-(A7)
00003B9E  42A7      6965          clr.l     -(A7)
00003BA0  6100 0106 6966          bsr       _vsprintf
00003BA4  DEFC 000C 6967          add.w     #12,A7
00003BA8  2D40 FFFC 6968          move.l    D0,-4(A6)
00003BAC  4282      6969          clr.l     D2
00003BAE  202E FFFC 6970          move.l    -4(A6),D0
00003BB2  4CDF 0004 6971          movem.l   (A7)+,D2
00003BB6  4E5E      6972          unlk      A6
00003BB8  4E75      6973          rts
                    6974   _getch:
00003BBA  48E7 2000 6975          movem.l   D2,-(A7)
00003BBE  2439 0803 6976          move.l    __ungetbuf,D2
00003BC2  00C0      
00003BC4  2039 0803 6977          move.l    __ungetbuf,D0
00003BC8  00C0      
00003BCA  0C80 FFFF 6978          cmp.l     #-1,D0
00003BCE  FFFF      
00003BD0  670C      6979          beq.s     getch_1
00003BD2  23FC FFFF 6980          move.l    #-1,__ungetbuf
00003BD6  FFFF 0803 
00003BDA  00C0      
00003BDC  6010      6981          bra.s     getch_3
                    6982   getch_1:
00003BDE  6100 CE46 6983          bsr       __getch
00003BE2  2400      6984          move.l    D0,D2
00003BE4  0C80 0000 6985          cmp.l     #13,D0
00003BE8  000D      
00003BEA  6602      6986          bne.s     getch_3
00003BEC  740A      6987          moveq     #10,D2
                    6988   getch_3:
00003BEE  2002      6989          move.l    D2,D0
00003BF0  4CDF 0004 6990          movem.l   (A7)+,D2
00003BF4  4E75      6991          rts
                    6992   @vsprintf_copy:
00003BF6  4E56 0000 6993          link      A6,#0
00003BFA  206E 0008 6994          move.l    8(A6),A0
00003BFE  4A90      6995          tst.l     (A0)
00003C00  6710      6996          beq.s     @vsprintf_copy_1
00003C02  202E 000C 6997          move.l    12(A6),D0
00003C06  206E 0008 6998          move.l    8(A6),A0
00003C0A  2250      6999          move.l    (A0),A1
00003C0C  5290      7000          addq.l    #1,(A0)
00003C0E  1280      7001          move.b    D0,(A1)
00003C10  600A      7002          bra.s     @vsprintf_copy_2
                    7003   @vsprintf_copy_1:
00003C12  2F2E 000C 7004          move.l    12(A6),-(A7)
00003C16  6100 FE9E 7005          bsr       _putch
00003C1A  584F      7006          addq.w    #4,A7
                    7007   @vsprintf_copy_2:
00003C1C  4E5E      7008          unlk      A6
00003C1E  4E75      7009          rts
                    7010   @vsprintf_getval:
00003C20  4E56 0000 7011          link      A6,#0
00003C24  48E7 3000 7012          movem.l   D2/D3,-(A7)
00003C28  242E 0008 7013          move.l    8(A6),D2
00003C2C  4283      7014          clr.l     D3
00003C2E  2042      7015          move.l    D2,A0
00003C30  2050      7016          move.l    (A0),A0
00003C32  1010      7017          move.b    (A0),D0
00003C34  4880      7018          ext.w     D0
00003C36  48C0      7019          ext.l     D0
00003C38  0C80 0000 7020          cmp.l     #42,D0
00003C3C  002A      
00003C3E  6612      7021          bne.s     @vsprintf_getval_1
00003C40  206E 000C 7022          move.l    12(A6),A0
00003C44  2250      7023          move.l    (A0),A1
00003C46  5890      7024          addq.l    #4,(A0)
00003C48  2611      7025          move.l    (A1),D3
00003C4A  2042      7026          move.l    D2,A0
00003C4C  5290      7027          addq.l    #1,(A0)
00003C4E  6000 004E 7028          bra       @vsprintf_getval_5
                    7029   @vsprintf_getval_1:
00003C52  2042      7030          move.l    D2,A0
00003C54  2050      7031          move.l    (A0),A0
00003C56  1010      7032          move.b    (A0),D0
00003C58  4880      7033          ext.w     D0
00003C5A  48C0      7034          ext.l     D0
00003C5C  0C80 0000 7035          cmp.l     #48,D0
00003C60  0030      
00003C62  6D00 003A 7036          blt       @vsprintf_getval_5
00003C66  2042      7037          move.l    D2,A0
00003C68  2050      7038          move.l    (A0),A0
00003C6A  1010      7039          move.b    (A0),D0
00003C6C  4880      7040          ext.w     D0
00003C6E  48C0      7041          ext.l     D0
00003C70  0C80 0000 7042          cmp.l     #57,D0
00003C74  0039      
00003C76  6E26      7043          bgt.s     @vsprintf_getval_5
00003C78  2F03      7044          move.l    D3,-(A7)
00003C7A  4878 000A 7045          pea       10
00003C7E  6100 FDA8 7046          bsr       LMUL
00003C82  2017      7047          move.l    (A7),D0
00003C84  504F      7048          addq.w    #8,A7
00003C86  2042      7049          move.l    D2,A0
00003C88  2250      7050          move.l    (A0),A1
00003C8A  5290      7051          addq.l    #1,(A0)
00003C8C  1211      7052          move.b    (A1),D1
00003C8E  4881      7053          ext.w     D1
00003C90  48C1      7054          ext.l     D1
00003C92  D081      7055          add.l     D1,D0
00003C94  0480 0000 7056          sub.l     #48,D0
00003C98  0030      
00003C9A  2600      7057          move.l    D0,D3
00003C9C  60B4      7058          bra       @vsprintf_getval_1
                    7059   @vsprintf_getval_5:
00003C9E  2003      7060          move.l    D3,D0
00003CA0  4CDF 000C 7061          movem.l   (A7)+,D2/D3
00003CA4  4E5E      7062          unlk      A6
00003CA6  4E75      7063          rts
                    7064   _vsprintf:
00003CA8  4E56 FFCC 7065          link      A6,#-52
00003CAC  48E7 3F3C 7066          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00003CB0  45EE 0008 7067          lea       8(A6),A2
00003CB4  47F8 3BF6 7068          lea       @vsprintf_copy,A3
00003CB8  49F9 0000 7069          lea       _ultoa,A4
00003CBC  4400      
00003CBE  4286      7070          clr.l     D6
                    7071   vsprintf_1:
00003CC0  206E 000C 7072          move.l    12(A6),A0
00003CC4  4A10      7073          tst.b     (A0)
00003CC6  6700 0624 7074          beq       vsprintf_3
00003CCA  206E 000C 7075          move.l    12(A6),A0
00003CCE  1010      7076          move.b    (A0),D0
00003CD0  4880      7077          ext.w     D0
00003CD2  48C0      7078          ext.l     D0
00003CD4  0C80 0000 7079          cmp.l     #37,D0
00003CD8  0025      
00003CDA  671C      7080          beq.s     vsprintf_4
00003CDC  206E 000C 7081          move.l    12(A6),A0
00003CE0  52AE 000C 7082          addq.l    #1,12(A6)
00003CE4  1210      7083          move.b    (A0),D1
00003CE6  4881      7084          ext.w     D1
00003CE8  48C1      7085          ext.l     D1
00003CEA  2F01      7086          move.l    D1,-(A7)
00003CEC  2F0A      7087          move.l    A2,-(A7)
00003CEE  4E93      7088          jsr       (A3)
00003CF0  504F      7089          addq.w    #8,A7
00003CF2  5286      7090          addq.l    #1,D6
00003CF4  6000 05F2 7091          bra       vsprintf_2
                    7092   vsprintf_4:
00003CF8  52AE 000C 7093          addq.l    #1,12(A6)
00003CFC  422E FFD3 7094          clr.b     -45(A6)
00003D00  422E FFD2 7095          clr.b     -46(A6)
00003D04  422E FFD0 7096          clr.b     -48(A6)
00003D08  422E FFCF 7097          clr.b     -49(A6)
00003D0C  422E FFCE 7098          clr.b     -50(A6)
00003D10  422E FFCD 7099          clr.b     -51(A6)
00003D14  42AE FFFC 7100          clr.l     -4(A6)
00003D18  7AFF      7101          moveq     #-1,D5
00003D1A  41EE FFDC 7102          lea       -36(A6),A0
00003D1E  2608      7103          move.l    A0,D3
00003D20  2408      7104          move.l    A0,D2
                    7105   vsprintf_6:
00003D22  206E 000C 7106          move.l    12(A6),A0
00003D26  1010      7107          move.b    (A0),D0
00003D28  4880      7108          ext.w     D0
00003D2A  48C0      7109          ext.l     D0
00003D2C  0C80 0000 7110          cmp.l     #43,D0
00003D30  002B      
00003D32  6730      7111          beq.s     vsprintf_12
00003D34  6E18      7112          bgt.s     vsprintf_15
00003D36  0C80 0000 7113          cmp.l     #35,D0
00003D3A  0023      
00003D3C  6700 003E 7114          beq       vsprintf_14
00003D40  6E00 0046 7115          bgt       vsprintf_9
00003D44  0C80 0000 7116          cmp.l     #32,D0
00003D48  0020      
00003D4A  6724      7117          beq.s     vsprintf_13
00003D4C  603A      7118          bra.s     vsprintf_9
                    7119   vsprintf_15:
00003D4E  0C80 0000 7120          cmp.l     #45,D0
00003D52  002D      
00003D54  6702      7121          beq.s     vsprintf_11
00003D56  6030      7122          bra.s     vsprintf_9
                    7123   vsprintf_11:
00003D58  1D7C 0001 7124          move.b    #1,-51(A6)
00003D5C  FFCD      
00003D5E  52AE 000C 7125          addq.l    #1,12(A6)
00003D62  6026      7126          bra.s     vsprintf_7
                    7127   vsprintf_12:
00003D64  1D7C 0001 7128          move.b    #1,-50(A6)
00003D68  FFCE      
00003D6A  52AE 000C 7129          addq.l    #1,12(A6)
00003D6E  601A      7130          bra.s     vsprintf_7
                    7131   vsprintf_13:
00003D70  1D7C 0001 7132          move.b    #1,-49(A6)
00003D74  FFCF      
00003D76  52AE 000C 7133          addq.l    #1,12(A6)
00003D7A  600E      7134          bra.s     vsprintf_7
                    7135   vsprintf_14:
00003D7C  1D7C 0001 7136          move.b    #1,-48(A6)
00003D80  FFD0      
00003D82  52AE 000C 7137          addq.l    #1,12(A6)
00003D86  6002      7138          bra.s     vsprintf_7
                    7139   vsprintf_9:
00003D88  6002      7140          bra.s     vsprintf_8
                    7141   vsprintf_7:
00003D8A  6096      7142          bra       vsprintf_6
                    7143   vsprintf_8:
00003D8C  206E 000C 7144          move.l    12(A6),A0
00003D90  1010      7145          move.b    (A0),D0
00003D92  4880      7146          ext.w     D0
00003D94  48C0      7147          ext.l     D0
00003D96  0C80 0000 7148          cmp.l     #48,D0
00003D9A  0030      
00003D9C  660A      7149          bne.s     vsprintf_16
00003D9E  52AE 000C 7150          addq.l    #1,12(A6)
00003DA2  1D7C 0001 7151          move.b    #1,-46(A6)
00003DA6  FFD2      
                    7152   vsprintf_16:
00003DA8  486E 0010 7153          pea       16(A6)
00003DAC  486E 000C 7154          pea       12(A6)
00003DB0  6100 FE6E 7155          bsr       @vsprintf_getval
00003DB4  504F      7156          addq.w    #8,A7
00003DB6  2A40      7157          move.l    D0,A5
00003DB8  206E 000C 7158          move.l    12(A6),A0
00003DBC  1010      7159          move.b    (A0),D0
00003DBE  4880      7160          ext.w     D0
00003DC0  48C0      7161          ext.l     D0
00003DC2  0C80 0000 7162          cmp.l     #46,D0
00003DC6  002E      
00003DC8  6614      7163          bne.s     vsprintf_18
00003DCA  52AE 000C 7164          addq.l    #1,12(A6)
00003DCE  486E 0010 7165          pea       16(A6)
00003DD2  486E 000C 7166          pea       12(A6)
00003DD6  6100 FE48 7167          bsr       @vsprintf_getval
00003DDA  504F      7168          addq.w    #8,A7
00003DDC  2A00      7169          move.l    D0,D5
                    7170   vsprintf_18:
00003DDE  206E 000C 7171          move.l    12(A6),A0
00003DE2  1010      7172          move.b    (A0),D0
00003DE4  4880      7173          ext.w     D0
00003DE6  48C0      7174          ext.l     D0
00003DE8  0C80 0000 7175          cmp.l     #108,D0
00003DEC  006C      
00003DEE  660A      7176          bne.s     vsprintf_20
00003DF0  52AE 000C 7177          addq.l    #1,12(A6)
00003DF4  1D7C 0001 7178          move.b    #1,-45(A6)
00003DF8  FFD3      
                    7179   vsprintf_20:
00003DFA  206E 000C 7180          move.l    12(A6),A0
00003DFE  1010      7181          move.b    (A0),D0
00003E00  4880      7182          ext.w     D0
00003E02  48C0      7183          ext.l     D0
00003E04  0C80 0000 7184          cmp.l     #111,D0
00003E08  006F      
00003E0A  6700 00D4 7185          beq       vsprintf_27
00003E0E  6E34      7186          bgt.s     vsprintf_33
00003E10  0C80 0000 7187          cmp.l     #100,D0
00003E14  0064      
00003E16  6700 0054 7188          beq       vsprintf_24
00003E1A  6E1C      7189          bgt.s     vsprintf_34
00003E1C  0C80 0000 7190          cmp.l     #99,D0
00003E20  0063      
00003E22  6700 012C 7191          beq       vsprintf_30
00003E26  6E00 016A 7192          bgt       vsprintf_22
00003E2A  0C80 0000 7193          cmp.l     #88,D0
00003E2E  0058      
00003E30  6700 00E6 7194          beq       vsprintf_28
00003E34  6000 015C 7195          bra       vsprintf_22
                    7196   vsprintf_34:
00003E38  0C80 0000 7197          cmp.l     #105,D0
00003E3C  0069      
00003E3E  672C      7198          beq.s     vsprintf_24
00003E40  6000 0150 7199          bra       vsprintf_22
                    7200   vsprintf_33:
00003E44  0C80 0000 7201          cmp.l     #117,D0
00003E48  0075      
00003E4A  6700 005C 7202          beq       vsprintf_26
00003E4E  6E0E      7203          bgt.s     vsprintf_35
00003E50  0C80 0000 7204          cmp.l     #115,D0
00003E54  0073      
00003E56  6700 011C 7205          beq       vsprintf_31
00003E5A  6000 0136 7206          bra       vsprintf_22
                    7207   vsprintf_35:
00003E5E  0C80 0000 7208          cmp.l     #120,D0
00003E62  0078      
00003E64  6700 00B2 7209          beq       vsprintf_28
00003E68  6000 0128 7210          bra       vsprintf_22
                    7211   vsprintf_24:
00003E6C  4A2E FFD3 7212          tst.b     -45(A6)
00003E70  671A      7213          beq.s     vsprintf_36
00003E72  4878 000A 7214          pea       10
00003E76  2F03      7215          move.l    D3,-(A7)
00003E78  206E 0010 7216          move.l    16(A6),A0
00003E7C  58AE 0010 7217          addq.l    #4,16(A6)
00003E80  2F10      7218          move.l    (A0),-(A7)
00003E82  6100 04F8 7219          bsr       _ltoa
00003E86  DEFC 000C 7220          add.w     #12,A7
00003E8A  6018      7221          bra.s     vsprintf_37
                    7222   vsprintf_36:
00003E8C  4878 000A 7223          pea       10
00003E90  2F03      7224          move.l    D3,-(A7)
00003E92  206E 0010 7225          move.l    16(A6),A0
00003E96  58AE 0010 7226          addq.l    #4,16(A6)
00003E9A  2F10      7227          move.l    (A0),-(A7)
00003E9C  6100 04DE 7228          bsr       _ltoa
00003EA0  DEFC 000C 7229          add.w     #12,A7
                    7230   vsprintf_37:
00003EA4  6000 00FA 7231          bra       vsprintf_23
                    7232   vsprintf_26:
00003EA8  4A2E FFD3 7233          tst.b     -45(A6)
00003EAC  6718      7234          beq.s     vsprintf_38
00003EAE  4878 000A 7235          pea       10
00003EB2  2F03      7236          move.l    D3,-(A7)
00003EB4  206E 0010 7237          move.l    16(A6),A0
00003EB8  58AE 0010 7238          addq.l    #4,16(A6)
00003EBC  2F10      7239          move.l    (A0),-(A7)
00003EBE  4E94      7240          jsr       (A4)
00003EC0  DEFC 000C 7241          add.w     #12,A7
00003EC4  6016      7242          bra.s     vsprintf_39
                    7243   vsprintf_38:
00003EC6  4878 000A 7244          pea       10
00003ECA  2F03      7245          move.l    D3,-(A7)
00003ECC  206E 0010 7246          move.l    16(A6),A0
00003ED0  58AE 0010 7247          addq.l    #4,16(A6)
00003ED4  2F10      7248          move.l    (A0),-(A7)
00003ED6  4E94      7249          jsr       (A4)
00003ED8  DEFC 000C 7250          add.w     #12,A7
                    7251   vsprintf_39:
00003EDC  6000 00C2 7252          bra       vsprintf_23
                    7253   vsprintf_27:
00003EE0  4A2E FFD3 7254          tst.b     -45(A6)
00003EE4  6718      7255          beq.s     vsprintf_40
00003EE6  4878 0008 7256          pea       8
00003EEA  2F03      7257          move.l    D3,-(A7)
00003EEC  206E 0010 7258          move.l    16(A6),A0
00003EF0  58AE 0010 7259          addq.l    #4,16(A6)
00003EF4  2F10      7260          move.l    (A0),-(A7)
00003EF6  4E94      7261          jsr       (A4)
00003EF8  DEFC 000C 7262          add.w     #12,A7
00003EFC  6016      7263          bra.s     vsprintf_41
                    7264   vsprintf_40:
00003EFE  4878 0008 7265          pea       8
00003F02  2F03      7266          move.l    D3,-(A7)
00003F04  206E 0010 7267          move.l    16(A6),A0
00003F08  58AE 0010 7268          addq.l    #4,16(A6)
00003F0C  2F10      7269          move.l    (A0),-(A7)
00003F0E  4E94      7270          jsr       (A4)
00003F10  DEFC 000C 7271          add.w     #12,A7
                    7272   vsprintf_41:
00003F14  6000 008A 7273          bra       vsprintf_23
                    7274   vsprintf_28:
00003F18  4A2E FFD3 7275          tst.b     -45(A6)
00003F1C  6718      7276          beq.s     vsprintf_42
00003F1E  4878 0010 7277          pea       16
00003F22  2F03      7278          move.l    D3,-(A7)
00003F24  206E 0010 7279          move.l    16(A6),A0
00003F28  58AE 0010 7280          addq.l    #4,16(A6)
00003F2C  2F10      7281          move.l    (A0),-(A7)
00003F2E  4E94      7282          jsr       (A4)
00003F30  DEFC 000C 7283          add.w     #12,A7
00003F34  6016      7284          bra.s     vsprintf_43
                    7285   vsprintf_42:
00003F36  4878 0010 7286          pea       16
00003F3A  2F03      7287          move.l    D3,-(A7)
00003F3C  206E 0010 7288          move.l    16(A6),A0
00003F40  58AE 0010 7289          addq.l    #4,16(A6)
00003F44  2F10      7290          move.l    (A0),-(A7)
00003F46  4E94      7291          jsr       (A4)
00003F48  DEFC 000C 7292          add.w     #12,A7
                    7293   vsprintf_43:
00003F4C  6000 0052 7294          bra       vsprintf_23
                    7295   vsprintf_30:
00003F50  206E 0010 7296          move.l    16(A6),A0
00003F54  58AE 0010 7297          addq.l    #4,16(A6)
00003F58  2010      7298          move.l    (A0),D0
00003F5A  2042      7299          move.l    D2,A0
00003F5C  5282      7300          addq.l    #1,D2
00003F5E  1080      7301          move.b    D0,(A0)
00003F60  2042      7302          move.l    D2,A0
00003F62  4210      7303          clr.b     (A0)
00003F64  200D      7304          move.l    A5,D0
00003F66  6704      7305          beq.s     vsprintf_44
00003F68  200D      7306          move.l    A5,D0
00003F6A  6002      7307          bra.s     vsprintf_45
                    7308   vsprintf_44:
00003F6C  7001      7309          moveq     #1,D0
                    7310   vsprintf_45:
00003F6E  2A00      7311          move.l    D0,D5
00003F70  6000 002E 7312          bra       vsprintf_23
                    7313   vsprintf_31:
00003F74  206E 0010 7314          move.l    16(A6),A0
00003F78  58AE 0010 7315          addq.l    #4,16(A6)
00003F7C  2610      7316          move.l    (A0),D3
00003F7E  0C85 FFFF 7317          cmp.l     #-1,D5
00003F82  FFFF      
00003F84  660A      7318          bne.s     vsprintf_46
00003F86  2F03      7319          move.l    D3,-(A7)
00003F88  6100 04D8 7320          bsr       _strlen
00003F8C  584F      7321          addq.w    #4,A7
00003F8E  2A00      7322          move.l    D0,D5
                    7323   vsprintf_46:
00003F90  600E      7324          bra.s     vsprintf_23
                    7325   vsprintf_22:
00003F92  206E 000C 7326          move.l    12(A6),A0
00003F96  2242      7327          move.l    D2,A1
00003F98  5282      7328          addq.l    #1,D2
00003F9A  1290      7329          move.b    (A0),(A1)
00003F9C  2042      7330          move.l    D2,A0
00003F9E  4210      7331          clr.b     (A0)
                    7332   vsprintf_23:
00003FA0  2F03      7333          move.l    D3,-(A7)
00003FA2  6100 04BE 7334          bsr       _strlen
00003FA6  584F      7335          addq.w    #4,A7
00003FA8  1800      7336          move.b    D0,D4
00003FAA  206E 000C 7337          move.l    12(A6),A0
00003FAE  1010      7338          move.b    (A0),D0
00003FB0  4880      7339          ext.w     D0
00003FB2  48C0      7340          ext.l     D0
00003FB4  0C80 0000 7341          cmp.l     #115,D0
00003FB8  0073      
00003FBA  6618      7342          bne.s     vsprintf_48
00003FBC  0C85 0000 7343          cmp.l     #0,D5
00003FC0  0000      
00003FC2  6D10      7344          blt.s     vsprintf_48
00003FC4  4884      7345          ext.w     D4
00003FC6  48C4      7346          ext.l     D4
00003FC8  B885      7347          cmp.l     D5,D4
00003FCA  6F04      7348          ble.s     vsprintf_50
00003FCC  1005      7349          move.b    D5,D0
00003FCE  6002      7350          bra.s     vsprintf_51
                    7351   vsprintf_50:
00003FD0  1004      7352          move.b    D4,D0
                    7353   vsprintf_51:
00003FD2  1800      7354          move.b    D0,D4
                    7355   vsprintf_48:
00003FD4  206E 000C 7356          move.l    12(A6),A0
00003FD8  1010      7357          move.b    (A0),D0
00003FDA  4880      7358          ext.w     D0
00003FDC  48C0      7359          ext.l     D0
00003FDE  0C80 0000 7360          cmp.l     #88,D0
00003FE2  0058      
00003FE4  6600 0026 7361          bne       vsprintf_56
00003FE8  41EE FFDC 7362          lea       -36(A6),A0
00003FEC  2408      7363          move.l    A0,D2
                    7364   vsprintf_54:
00003FEE  2042      7365          move.l    D2,A0
00003FF0  4A10      7366          tst.b     (A0)
00003FF2  6718      7367          beq.s     vsprintf_56
00003FF4  2042      7368          move.l    D2,A0
00003FF6  1210      7369          move.b    (A0),D1
00003FF8  4881      7370          ext.w     D1
00003FFA  48C1      7371          ext.l     D1
00003FFC  2F01      7372          move.l    D1,-(A7)
00003FFE  6100 FB5C 7373          bsr       _toupper
00004002  584F      7374          addq.w    #4,A7
00004004  2042      7375          move.l    D2,A0
00004006  1080      7376          move.b    D0,(A0)
00004008  5282      7377          addq.l    #1,D2
0000400A  60E2      7378          bra       vsprintf_54
                    7379   vsprintf_56:
0000400C  7E00      7380          moveq     #0,D7
0000400E  41EE FFD4 7381          lea       -44(A6),A0
00004012  2408      7382          move.l    A0,D2
00004014  206E 000C 7383          move.l    12(A6),A0
00004018  1010      7384          move.b    (A0),D0
0000401A  4880      7385          ext.w     D0
0000401C  48C0      7386          ext.l     D0
0000401E  0C80 0000 7387          cmp.l     #100,D0
00004022  0064      
00004024  6714      7388          beq.s     vsprintf_59
00004026  206E 000C 7389          move.l    12(A6),A0
0000402A  1010      7390          move.b    (A0),D0
0000402C  4880      7391          ext.w     D0
0000402E  48C0      7392          ext.l     D0
00004030  0C80 0000 7393          cmp.l     #105,D0
00004034  0069      
00004036  6600 0076 7394          bne       vsprintf_65
                    7395   vsprintf_59:
0000403A  4A2E FFCE 7396          tst.b     -50(A6)
0000403E  6612      7397          bne.s     vsprintf_62
00004040  2043      7398          move.l    D3,A0
00004042  1010      7399          move.b    (A0),D0
00004044  4880      7400          ext.w     D0
00004046  48C0      7401          ext.l     D0
00004048  0C80 0000 7402          cmp.l     #45,D0
0000404C  002D      
0000404E  6600 002E 7403          bne       vsprintf_60
                    7404   vsprintf_62:
00004052  2043      7405          move.l    D3,A0
00004054  1010      7406          move.b    (A0),D0
00004056  4880      7407          ext.w     D0
00004058  48C0      7408          ext.l     D0
0000405A  0C80 0000 7409          cmp.l     #45,D0
0000405E  002D      
00004060  660E      7410          bne.s     vsprintf_63
00004062  2043      7411          move.l    D3,A0
00004064  5283      7412          addq.l    #1,D3
00004066  2242      7413          move.l    D2,A1
00004068  5282      7414          addq.l    #1,D2
0000406A  1290      7415          move.b    (A0),(A1)
0000406C  5304      7416          subq.b    #1,D4
0000406E  6008      7417          bra.s     vsprintf_64
                    7418   vsprintf_63:
00004070  2042      7419          move.l    D2,A0
00004072  5282      7420          addq.l    #1,D2
00004074  10BC 002B 7421          move.b    #43,(A0)
                    7422   vsprintf_64:
00004078  5287      7423          addq.l    #1,D7
0000407A  6000 0032 7424          bra       vsprintf_65
                    7425   vsprintf_60:
0000407E  4A2E FFCF 7426          tst.b     -49(A6)
00004082  6700 002A 7427          beq       vsprintf_65
00004086  2043      7428          move.l    D3,A0
00004088  1010      7429          move.b    (A0),D0
0000408A  4880      7430          ext.w     D0
0000408C  48C0      7431          ext.l     D0
0000408E  0C80 0000 7432          cmp.l     #45,D0
00004092  002D      
00004094  660E      7433          bne.s     vsprintf_67
00004096  2043      7434          move.l    D3,A0
00004098  5283      7435          addq.l    #1,D3
0000409A  2242      7436          move.l    D2,A1
0000409C  5282      7437          addq.l    #1,D2
0000409E  1290      7438          move.b    (A0),(A1)
000040A0  5304      7439          subq.b    #1,D4
000040A2  6008      7440          bra.s     vsprintf_68
                    7441   vsprintf_67:
000040A4  2042      7442          move.l    D2,A0
000040A6  5282      7443          addq.l    #1,D2
000040A8  10BC 0020 7444          move.b    #32,(A0)
                    7445   vsprintf_68:
000040AC  5287      7446          addq.l    #1,D7
                    7447   vsprintf_65:
000040AE  4A2E FFD0 7448          tst.b     -48(A6)
000040B2  6700 0066 7449          beq       vsprintf_77
000040B6  206E 000C 7450          move.l    12(A6),A0
000040BA  1010      7451          move.b    (A0),D0
000040BC  4880      7452          ext.w     D0
000040BE  48C0      7453          ext.l     D0
000040C0  0C80 0000 7454          cmp.l     #111,D0
000040C4  006F      
000040C6  671A      7455          beq.s     vsprintf_73
000040C8  6E0C      7456          bgt.s     vsprintf_76
000040CA  0C80 0000 7457          cmp.l     #88,D0
000040CE  0058      
000040D0  6710      7458          beq.s     vsprintf_73
000040D2  6000 0046 7459          bra       vsprintf_77
                    7460   vsprintf_76:
000040D6  0C80 0000 7461          cmp.l     #120,D0
000040DA  0078      
000040DC  6704      7462          beq.s     vsprintf_73
000040DE  6000 003A 7463          bra       vsprintf_77
                    7464   vsprintf_73:
000040E2  2042      7465          move.l    D2,A0
000040E4  5282      7466          addq.l    #1,D2
000040E6  10BC 0030 7467          move.b    #48,(A0)
000040EA  5287      7468          addq.l    #1,D7
000040EC  206E 000C 7469          move.l    12(A6),A0
000040F0  1010      7470          move.b    (A0),D0
000040F2  4880      7471          ext.w     D0
000040F4  48C0      7472          ext.l     D0
000040F6  0C80 0000 7473          cmp.l     #120,D0
000040FA  0078      
000040FC  6712      7474          beq.s     vsprintf_79
000040FE  206E 000C 7475          move.l    12(A6),A0
00004102  1010      7476          move.b    (A0),D0
00004104  4880      7477          ext.w     D0
00004106  48C0      7478          ext.l     D0
00004108  0C80 0000 7479          cmp.l     #88,D0
0000410C  0058      
0000410E  660A      7480          bne.s     vsprintf_77
                    7481   vsprintf_79:
00004110  2042      7482          move.l    D2,A0
00004112  5282      7483          addq.l    #1,D2
00004114  10BC 0078 7484          move.b    #120,(A0)
00004118  5287      7485          addq.l    #1,D7
                    7486   vsprintf_77:
0000411A  2042      7487          move.l    D2,A0
0000411C  4210      7488          clr.b     (A0)
0000411E  206E 000C 7489          move.l    12(A6),A0
00004122  1010      7490          move.b    (A0),D0
00004124  4880      7491          ext.w     D0
00004126  48C0      7492          ext.l     D0
00004128  0C80 0000 7493          cmp.l     #105,D0
0000412C  0069      
0000412E  6700 0076 7494          beq       vsprintf_82
00004132  6E42      7495          bgt.s     vsprintf_93
00004134  0C80 0000 7496          cmp.l     #99,D0
00004138  0063      
0000413A  6700 0084 7497          beq       vsprintf_96
0000413E  6E1C      7498          bgt.s     vsprintf_94
00004140  0C80 0000 7499          cmp.l     #88,D0
00004144  0058      
00004146  6700 005E 7500          beq       vsprintf_82
0000414A  6E00 0184 7501          bgt       vsprintf_80
0000414E  0C80 0000 7502          cmp.l     #69,D0
00004152  0045      
00004154  6700 0050 7503          beq       vsprintf_82
00004158  6000 0176 7504          bra       vsprintf_80
                    7505   vsprintf_94:
0000415C  0C80 0000 7506          cmp.l     #101,D0
00004160  0065      
00004162  6700 0042 7507          beq       vsprintf_82
00004166  6E00 0168 7508          bgt       vsprintf_80
0000416A  0C80 0000 7509          cmp.l     #100,D0
0000416E  0064      
00004170  6734      7510          beq.s     vsprintf_82
00004172  6000 015C 7511          bra       vsprintf_80
                    7512   vsprintf_93:
00004176  0C80 0000 7513          cmp.l     #117,D0
0000417A  0075      
0000417C  6728      7514          beq.s     vsprintf_82
0000417E  6E1A      7515          bgt.s     vsprintf_95
00004180  0C80 0000 7516          cmp.l     #115,D0
00004184  0073      
00004186  6700 0038 7517          beq       vsprintf_96
0000418A  6E00 0144 7518          bgt       vsprintf_80
0000418E  0C80 0000 7519          cmp.l     #111,D0
00004192  006F      
00004194  6710      7520          beq.s     vsprintf_82
00004196  6000 0138 7521          bra       vsprintf_80
                    7522   vsprintf_95:
0000419A  0C80 0000 7523          cmp.l     #120,D0
0000419E  0078      
000041A0  6704      7524          beq.s     vsprintf_82
000041A2  6000 012C 7525          bra       vsprintf_80
                    7526   vsprintf_82:
000041A6  4A2E FFD2 7527          tst.b     -46(A6)
000041AA  6714      7528          beq.s     vsprintf_96
000041AC  4A2E FFCD 7529          tst.b     -51(A6)
000041B0  660E      7530          bne.s     vsprintf_96
000041B2  200D      7531          move.l    A5,D0
000041B4  9087      7532          sub.l     D7,D0
000041B6  4884      7533          ext.w     D4
000041B8  48C4      7534          ext.l     D4
000041BA  9084      7535          sub.l     D4,D0
000041BC  2D40 FFFC 7536          move.l    D0,-4(A6)
                    7537   vsprintf_96:
000041C0  202E FFFC 7538          move.l    -4(A6),D0
000041C4  0C80 0000 7539          cmp.l     #0,D0
000041C8  0000      
000041CA  6C04      7540          bge.s     vsprintf_98
000041CC  42AE FFFC 7541          clr.l     -4(A6)
                    7542   vsprintf_98:
000041D0  4A2E FFCD 7543          tst.b     -51(A6)
000041D4  6600 0030 7544          bne       vsprintf_104
000041D8  4884      7545          ext.w     D4
000041DA  48C4      7546          ext.l     D4
000041DC  2004      7547          move.l    D4,D0
000041DE  D0AE FFFC 7548          add.l     -4(A6),D0
000041E2  D087      7549          add.l     D7,D0
000041E4  1D40 FFD1 7550          move.b    D0,-47(A6)
                    7551   vsprintf_102:
000041E8  102E FFD1 7552          move.b    -47(A6),D0
000041EC  4880      7553          ext.w     D0
000041EE  48C0      7554          ext.l     D0
000041F0  220D      7555          move.l    A5,D1
000041F2  534D      7556          subq.w    #1,A5
000041F4  B081      7557          cmp.l     D1,D0
000041F6  6C0E      7558          bge.s     vsprintf_104
000041F8  4878 0020 7559          pea       32
000041FC  2F0A      7560          move.l    A2,-(A7)
000041FE  4E93      7561          jsr       (A3)
00004200  504F      7562          addq.w    #8,A7
00004202  5286      7563          addq.l    #1,D6
00004204  60E2      7564          bra       vsprintf_102
                    7565   vsprintf_104:
00004206  41EE FFD4 7566          lea       -44(A6),A0
0000420A  2408      7567          move.l    A0,D2
                    7568   vsprintf_105:
0000420C  2042      7569          move.l    D2,A0
0000420E  4A10      7570          tst.b     (A0)
00004210  6716      7571          beq.s     vsprintf_107
00004212  2042      7572          move.l    D2,A0
00004214  5282      7573          addq.l    #1,D2
00004216  1210      7574          move.b    (A0),D1
00004218  4881      7575          ext.w     D1
0000421A  48C1      7576          ext.l     D1
0000421C  2F01      7577          move.l    D1,-(A7)
0000421E  2F0A      7578          move.l    A2,-(A7)
00004220  4E93      7579          jsr       (A3)
00004222  504F      7580          addq.w    #8,A7
00004224  5286      7581          addq.l    #1,D6
00004226  60E4      7582          bra       vsprintf_105
                    7583   vsprintf_107:
00004228  202E FFFC 7584          move.l    -4(A6),D0
0000422C  1D40 FFD1 7585          move.b    D0,-47(A6)
                    7586   vsprintf_108:
00004230  102E FFD1 7587          move.b    -47(A6),D0
00004234  532E FFD1 7588          subq.b    #1,-47(A6)
00004238  4A00      7589          tst.b     D0
0000423A  670E      7590          beq.s     vsprintf_110
0000423C  4878 0030 7591          pea       48
00004240  2F0A      7592          move.l    A2,-(A7)
00004242  4E93      7593          jsr       (A3)
00004244  504F      7594          addq.w    #8,A7
00004246  5286      7595          addq.l    #1,D6
00004248  60E6      7596          bra       vsprintf_108
                    7597   vsprintf_110:
0000424A  2043      7598          move.l    D3,A0
0000424C  4A10      7599          tst.b     (A0)
0000424E  6700 0048 7600          beq       vsprintf_113
00004252  206E 000C 7601          move.l    12(A6),A0
00004256  1010      7602          move.b    (A0),D0
00004258  4880      7603          ext.w     D0
0000425A  48C0      7604          ext.l     D0
0000425C  0C80 0000 7605          cmp.l     #115,D0
00004260  0073      
00004262  670C      7606          beq.s     vsprintf_116
00004264  6E18      7607          bgt.s     vsprintf_119
00004266  0C80 0000 7608          cmp.l     #99,D0
0000426A  0063      
0000426C  6702      7609          beq.s     vsprintf_116
0000426E  600E      7610          bra.s     vsprintf_119
                    7611   vsprintf_116:
00004270  2005      7612          move.l    D5,D0
00004272  5385      7613          subq.l    #1,D5
00004274  0C80 0000 7614          cmp.l     #0,D0
00004278  0000      
0000427A  6E02      7615          bgt.s     vsprintf_119
0000427C  6016      7616          bra.s     vsprintf_115
                    7617   vsprintf_119:
0000427E  2043      7618          move.l    D3,A0
00004280  5283      7619          addq.l    #1,D3
00004282  1210      7620          move.b    (A0),D1
00004284  4881      7621          ext.w     D1
00004286  48C1      7622          ext.l     D1
00004288  2F01      7623          move.l    D1,-(A7)
0000428A  2F0A      7624          move.l    A2,-(A7)
0000428C  4E93      7625          jsr       (A3)
0000428E  504F      7626          addq.w    #8,A7
00004290  5286      7627          addq.l    #1,D6
00004292  6002      7628          bra.s     vsprintf_112
                    7629   vsprintf_115:
00004294  6002      7630          bra.s     vsprintf_113
                    7631   vsprintf_112:
00004296  60B2      7632          bra       vsprintf_110
                    7633   vsprintf_113:
00004298  4A2E FFCD 7634          tst.b     -51(A6)
0000429C  6700 0030 7635          beq       vsprintf_125
000042A0  4884      7636          ext.w     D4
000042A2  48C4      7637          ext.l     D4
000042A4  2004      7638          move.l    D4,D0
000042A6  D0AE FFFC 7639          add.l     -4(A6),D0
000042AA  D087      7640          add.l     D7,D0
000042AC  1D40 FFD1 7641          move.b    D0,-47(A6)
                    7642   vsprintf_123:
000042B0  102E FFD1 7643          move.b    -47(A6),D0
000042B4  4880      7644          ext.w     D0
000042B6  48C0      7645          ext.l     D0
000042B8  220D      7646          move.l    A5,D1
000042BA  534D      7647          subq.w    #1,A5
000042BC  B081      7648          cmp.l     D1,D0
000042BE  6C0E      7649          bge.s     vsprintf_125
000042C0  4878 0020 7650          pea       32
000042C4  2F0A      7651          move.l    A2,-(A7)
000042C6  4E93      7652          jsr       (A3)
000042C8  504F      7653          addq.w    #8,A7
000042CA  5386      7654          subq.l    #1,D6
000042CC  60E2      7655          bra       vsprintf_123
                    7656   vsprintf_125:
000042CE  6014      7657          bra.s     vsprintf_81
                    7658   vsprintf_80:
000042D0  206E 000C 7659          move.l    12(A6),A0
000042D4  1210      7660          move.b    (A0),D1
000042D6  4881      7661          ext.w     D1
000042D8  48C1      7662          ext.l     D1
000042DA  2F01      7663          move.l    D1,-(A7)
000042DC  2F0A      7664          move.l    A2,-(A7)
000042DE  4E93      7665          jsr       (A3)
000042E0  504F      7666          addq.w    #8,A7
000042E2  5286      7667          addq.l    #1,D6
                    7668   vsprintf_81:
000042E4  52AE 000C 7669          addq.l    #1,12(A6)
                    7670   vsprintf_2:
000042E8  6000 F9D6 7671          bra       vsprintf_1
                    7672   vsprintf_3:
000042EC  4A92      7673          tst.l     (A2)
000042EE  6710      7674          beq.s     vsprintf_126
000042F0  4201      7675          clr.b     D1
000042F2  C2BC 0000 7676          and.l     #255,D1
000042F6  00FF      
000042F8  2F01      7677          move.l    D1,-(A7)
000042FA  2F0A      7678          move.l    A2,-(A7)
000042FC  4E93      7679          jsr       (A3)
000042FE  504F      7680          addq.w    #8,A7
                    7681   vsprintf_126:
00004300  2006      7682          move.l    D6,D0
00004302  4CDF 3CFC 7683          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00004306  4E5E      7684          unlk      A6
00004308  4E75      7685          rts
                    7686   @itoa_convert:
0000430A  4E56 0000 7687          link      A6,#0
0000430E  48E7 3C00 7688          movem.l   D2/D3/D4/D5,-(A7)
00004312  242E 0008 7689          move.l    8(A6),D2
00004316  262E 0010 7690          move.l    16(A6),D3
0000431A  2A2E 000C 7691          move.l    12(A6),D5
0000431E  2F05      7692          move.l    D5,-(A7)
00004320  2F03      7693          move.l    D3,-(A7)
00004322  6100 F614 7694          bsr       ULDIV
00004326  202F 0004 7695          move.l    4(A7),D0
0000432A  504F      7696          addq.w    #8,A7
0000432C  2800      7697          move.l    D0,D4
0000432E  BA83      7698          cmp.l     D3,D5
00004330  651A      7699          blo.s     @itoa_convert_1
00004332  2F03      7700          move.l    D3,-(A7)
00004334  2F05      7701          move.l    D5,-(A7)
00004336  2F03      7702          move.l    D3,-(A7)
00004338  6100 F5FE 7703          bsr       ULDIV
0000433C  2217      7704          move.l    (A7),D1
0000433E  504F      7705          addq.w    #8,A7
00004340  2F01      7706          move.l    D1,-(A7)
00004342  2F02      7707          move.l    D2,-(A7)
00004344  61C4      7708          bsr       @itoa_convert
00004346  DEFC 000C 7709          add.w     #12,A7
0000434A  2400      7710          move.l    D0,D2
                    7711   @itoa_convert_1:
0000434C  0C84 0000 7712          cmp.l     #9,D4
00004350  0009      
00004352  6E0A      7713          bgt.s     @itoa_convert_3
00004354  2004      7714          move.l    D4,D0
00004356  0680 0000 7715          add.l     #48,D0
0000435A  0030      
0000435C  600E      7716          bra.s     @itoa_convert_4
                    7717   @itoa_convert_3:
0000435E  2004      7718          move.l    D4,D0
00004360  0680 0000 7719          add.l     #97,D0
00004364  0061      
00004366  0480 0000 7720          sub.l     #10,D0
0000436A  000A      
                    7721   @itoa_convert_4:
0000436C  2042      7722          move.l    D2,A0
0000436E  1080      7723          move.b    D0,(A0)
00004370  2002      7724          move.l    D2,D0
00004372  5280      7725          addq.l    #1,D0
00004374  4CDF 003C 7726          movem.l   (A7)+,D2/D3/D4/D5
00004378  4E5E      7727          unlk      A6
0000437A  4E75      7728          rts
                    7729   _ltoa:
0000437C  4E56 0000 7730          link      A6,#0
00004380  48E7 3C00 7731          movem.l   D2/D3/D4/D5,-(A7)
00004384  242E 0008 7732          move.l    8(A6),D2
00004388  262E 000C 7733          move.l    12(A6),D3
0000438C  2A2E 0010 7734          move.l    16(A6),D5
00004390  2803      7735          move.l    D3,D4
00004392  0C85 0000 7736          cmp.l     #2,D5
00004396  0002      
00004398  6D08      7737          blt.s     ltoa_3
0000439A  0C85 0000 7738          cmp.l     #36,D5
0000439E  0024      
000043A0  6F06      7739          ble.s     ltoa_1
                    7740   ltoa_3:
000043A2  2003      7741          move.l    D3,D0
000043A4  6000 0052 7742          bra       ltoa_4
                    7743   ltoa_1:
000043A8  0C85 0000 7744          cmp.l     #10,D5
000043AC  000A      
000043AE  6600 0032 7745          bne       ltoa_5
000043B2  0C82 0000 7746          cmp.l     #0,D2
000043B6  0000      
000043B8  6C28      7747          bge.s     ltoa_5
000043BA  2002      7748          move.l    D2,D0
000043BC  4480      7749          neg.l     D0
000043BE  2400      7750          move.l    D0,D2
000043C0  0C82 0000 7751          cmp.l     #0,D2
000043C4  0000      
000043C6  6C12      7752          bge.s     ltoa_7
000043C8  4879 0000 7753          pea       @itoa_1
000043CC  50AE      
000043CE  2F03      7754          move.l    D3,-(A7)
000043D0  6100 F556 7755          bsr       _strcpy
000043D4  504F      7756          addq.w    #8,A7
000043D6  2003      7757          move.l    D3,D0
000043D8  601E      7758          bra.s     ltoa_4
                    7759   ltoa_7:
000043DA  2044      7760          move.l    D4,A0
000043DC  5284      7761          addq.l    #1,D4
000043DE  10BC 002D 7762          move.b    #45,(A0)
                    7763   ltoa_5:
000043E2  2F05      7764          move.l    D5,-(A7)
000043E4  2F02      7765          move.l    D2,-(A7)
000043E6  2F04      7766          move.l    D4,-(A7)
000043E8  6100 FF20 7767          bsr       @itoa_convert
000043EC  DEFC 000C 7768          add.w     #12,A7
000043F0  2800      7769          move.l    D0,D4
000043F2  2044      7770          move.l    D4,A0
000043F4  4210      7771          clr.b     (A0)
000043F6  2003      7772          move.l    D3,D0
                    7773   ltoa_4:
000043F8  4CDF 003C 7774          movem.l   (A7)+,D2/D3/D4/D5
000043FC  4E5E      7775          unlk      A6
000043FE  4E75      7776          rts
                    7777   _ultoa:
00004400  4E56 0000 7778          link      A6,#0
00004404  48E7 3800 7779          movem.l   D2/D3/D4,-(A7)
00004408  262E 0010 7780          move.l    16(A6),D3
0000440C  282E 000C 7781          move.l    12(A6),D4
00004410  2404      7782          move.l    D4,D2
00004412  0C83 0000 7783          cmp.l     #2,D3
00004416  0002      
00004418  6D08      7784          blt.s     ultoa_3
0000441A  0C83 0000 7785          cmp.l     #36,D3
0000441E  0024      
00004420  6F04      7786          ble.s     ultoa_1
                    7787   ultoa_3:
00004422  2004      7788          move.l    D4,D0
00004424  6018      7789          bra.s     ultoa_4
                    7790   ultoa_1:
00004426  2F03      7791          move.l    D3,-(A7)
00004428  2F2E 0008 7792          move.l    8(A6),-(A7)
0000442C  2F02      7793          move.l    D2,-(A7)
0000442E  6100 FEDA 7794          bsr       @itoa_convert
00004432  DEFC 000C 7795          add.w     #12,A7
00004436  2400      7796          move.l    D0,D2
00004438  2042      7797          move.l    D2,A0
0000443A  4210      7798          clr.b     (A0)
0000443C  2004      7799          move.l    D4,D0
                    7800   ultoa_4:
0000443E  4CDF 001C 7801          movem.l   (A7)+,D2/D3/D4
00004442  4E5E      7802          unlk      A6
00004444  4E75      7803          rts
                    7804   _itoa:
00004446  4E56 0000 7805          link      A6,#0
0000444A  2F2E 0010 7806          move.l    16(A6),-(A7)
0000444E  2F2E 000C 7807          move.l    12(A6),-(A7)
00004452  2F2E 0008 7808          move.l    8(A6),-(A7)
00004456  6100 FF24 7809          bsr       _ltoa
0000445A  DEFC 000C 7810          add.w     #12,A7
0000445E  4E5E      7811          unlk      A6
00004460  4E75      7812          rts
                    7813   _strlen:
00004462  206F 0004 7814          move.l    (4,A7),A0
00004466  2248      7815          move.l    A0,A1
                    7816   strlen_1:
00004468  4A19      7817          tst.b     (A1)+
0000446A  66FC      7818          bne       strlen_1
0000446C  2009      7819          move.l    A1,D0
0000446E  9088      7820          sub.l     A0,D0
00004470  5380      7821          subq.l    #1,D0
00004472  4E75      7822          rts
                    7823          section   const
                    7824   
                    7825   @m68kde~1_1:
00004474  0D0A 4475 7826          dc.b      13,10,68,117,109,112,32,77,101,109,111,114,121
00004478  6D70 204D 
0000447C  656D 6F72 
00004480  79        
00004481  2042 6C6F 7827          dc.b      32,66,108,111,99,107,58,32,60,69,83,67,62,32
00004485  636B 3A20 
00004489  3C45 5343 
0000448D  3E20      
0000448F  746F 2041 7828          dc.b      116,111,32,65,98,111,114,116,44,32,60,83,80
00004493  626F 7274 
00004497  2C20 3C53 
0000449B  50        
0000449C  4143 453E 7829          dc.b      65,67,69,62,32,116,111,32,67,111,110,116,105
000044A0  2074 6F20 
000044A4  436F 6E74 
000044A8  69        
000044A9  6E75 6500 7830          dc.b      110,117,101,0
                    7831   @m68kde~1_2:
000044AE  0D0A 456E 7832          dc.b      13,10,69,110,116,101,114,32,83,116,97,114,116
000044B2  7465 7220 
000044B6  5374 6172 
000044BA  74        
000044BB  2041 6464 7833          dc.b      32,65,100,100,114,101,115,115,58,32,0
000044BF  7265 7373 
000044C3  3A20 00   
                    7834   @m68kde~1_3:
000044C6  0D0A 2530 7835          dc.b      13,10,37,48,56,120,32,0
000044CA  3878 2000 
                    7836   @m68kde~1_4:
000044CE  2530 3258 7837          dc.b      37,48,50,88,0
000044D2  00        
                    7838   @m68kde~1_5:
000044D4  2020 00   7839          dc.b      32,32,0
                    7840   @m68kde~1_6:
000044D8  0D0A 00   7841          dc.b      13,10,0
                    7842   @m68kde~1_7:
000044DC  0D0A 4669 7843          dc.b      13,10,70,105,108,108,32,77,101,109,111,114,121
000044E0  6C6C 204D 
000044E4  656D 6F72 
000044E8  79        
000044E9  2042 6C6F 7844          dc.b      32,66,108,111,99,107,0
000044ED  636B 00   
                    7845   @m68kde~1_8:
000044F0  0D0A 456E 7846          dc.b      13,10,69,110,116,101,114,32,69,110,100,32,65
000044F4  7465 7220 
000044F8  456E 6420 
000044FC  41        
000044FD  6464 7265 7847          dc.b      100,100,114,101,115,115,58,32,0
00004501  7373 3A20 
00004505  00        
                    7848   @m68kde~1_9:
00004506  0D0A 456E 7849          dc.b      13,10,69,110,116,101,114,32,70,105,108,108,32
0000450A  7465 7220 
0000450E  4669 6C6C 
00004512  20        
00004513  4461 7461 7850          dc.b      68,97,116,97,58,32,0
00004517  3A20 00   
                    7851   @m68kde~1_10:
0000451A  0D0A 4669 7852          dc.b      13,10,70,105,108,108,105,110,103,32,65,100,100
0000451E  6C6C 696E 
00004522  6720 4164 
00004526  64        
00004527  7265 7373 7853          dc.b      114,101,115,115,101,115,32,91,36,37,48,56,88
0000452B  6573 205B 
0000452F  2425 3038 
00004533  58        
00004534  202D 2024 7854          dc.b      32,45,32,36,37,48,56,88,93,32,119,105,116,104
00004538  2530 3858 
0000453C  5D20 7769 
00004540  7468      
00004542  2024 2530 7855          dc.b      32,36,37,48,50,88,0
00004546  3258 00   
                    7856   @m68kde~1_11:
0000454A  0D0A 5573 7857          dc.b      13,10,85,115,101,32,72,121,112,101,114,84,101
0000454E  6520 4879 
00004552  7065 7254 
00004556  65        
00004557  726D 696E 7858          dc.b      114,109,105,110,97,108,32,116,111,32,83,101
0000455B  616C 2074 
0000455F  6F20 5365 
00004563  6E64 2054 7859          dc.b      110,100,32,84,101,120,116,32,70,105,108,101
00004567  6578 7420 
0000456B  4669 6C65 
0000456F  2028 2E68 7860          dc.b      32,40,46,104,101,120,41,13,10,0
00004573  6578 290D 
00004577  0A00      
                    7861   @m68kde~1_12:
0000457A  0D0A 4C6F 7862          dc.b      13,10,76,111,97,100,32,70,97,105,108,101,100
0000457E  6164 2046 
00004582  6169 6C65 
00004586  64        
00004587  2061 7420 7863          dc.b      32,97,116,32,65,100,100,114,101,115,115,32,61
0000458B  4164 6472 
0000458F  6573 7320 
00004593  3D        
00004594  205B 2425 7864          dc.b      32,91,36,37,48,56,88,93,13,10,0
00004598  3038 585D 
0000459C  0D0A 00   
                    7865   @m68kde~1_13:
000045A0  0D0A 5375 7866          dc.b      13,10,83,117,99,99,101,115,115,58,32,68,111
000045A4  6363 6573 
000045A8  733A 2044 
000045AC  6F        
000045AD  776E 6C6F 7867          dc.b      119,110,108,111,97,100,101,100,32,37,100,32
000045B1  6164 6564 
000045B5  2025 6420 
000045B9  6279 7465 7868          dc.b      98,121,116,101,115,13,10,0
000045BD  730D 0A00 
                    7869   @m68kde~1_14:
000045C2  0D0A 4578 7870          dc.b      13,10,69,120,97,109,105,110,101,32,97,110,100
000045C6  616D 696E 
000045CA  6520 616E 
000045CE  64        
000045CF  2043 6861 7871          dc.b      32,67,104,97,110,103,101,32,77,101,109,111,114
000045D3  6E67 6520 
000045D7  4D65 6D6F 
000045DB  72        
000045DC  7900      7872          dc.b      121,0
                    7873   @m68kde~1_15:
000045DE  0D0A 3C45 7874          dc.b      13,10,60,69,83,67,62,32,116,111,32,83,116,111
000045E2  5343 3E20 
000045E6  746F 2053 
000045EA  746F      
000045EC  702C 203C 7875          dc.b      112,44,32,60,83,80,65,67,69,62,32,116,111,32
000045F0  5350 4143 
000045F4  453E 2074 
000045F8  6F20      
000045FA  4164 7661 7876          dc.b      65,100,118,97,110,99,101,44,32,39,45,39,32,116
000045FE  6E63 652C 
00004602  2027 2D27 
00004606  2074      
00004608  6F20 476F 7877          dc.b      111,32,71,111,32,66,97,99,107,44,32,60,68,65
0000460C  2042 6163 
00004610  6B2C 203C 
00004614  4441      
00004616  5441 3E20 7878          dc.b      84,65,62,32,116,111,32,99,104,97,110,103,101
0000461A  746F 2063 
0000461E  6861 6E67 
00004622  65        
00004623  00        7879          dc.b      0
                    7880   @m68kde~1_16:
00004624  0D0A 456E 7881          dc.b      13,10,69,110,116,101,114,32,65,100,100,114,101
00004628  7465 7220 
0000462C  4164 6472 
00004630  65        
00004631  7373 3A20 7882          dc.b      115,115,58,32,0
00004635  00        
                    7883   @m68kde~1_17:
00004636  0D0A 5B25 7884          dc.b      13,10,91,37,48,56,120,93,32,58,32,37,48,50,120
0000463A  3038 785D 
0000463E  203A 2025 
00004642  3032 78   
00004645  2020 00   7885          dc.b      32,32,0
                    7886   @m68kde~1_18:
00004648  0D0A 5761 7887          dc.b      13,10,87,97,114,110,105,110,103,32,67,104,97
0000464C  726E 696E 
00004650  6720 4368 
00004654  61        
00004655  6E67 6520 7888          dc.b      110,103,101,32,70,97,105,108,101,100,58,32,87
00004659  4661 696C 
0000465D  6564 3A20 
00004661  57        
00004662  726F 7465 7889          dc.b      114,111,116,101,32,91,37,48,50,120,93,44,32
00004666  205B 2530 
0000466A  3278 5D2C 
0000466E  20        
0000466F  5265 6164 7890          dc.b      82,101,97,100,32,91,37,48,50,120,93,0
00004673  205B 2530 
00004677  3278 5D00 
                    7891   @m68kde~1_19:
0000467C  2425 3038 7892          dc.b      36,37,48,56,88,32,32,0
00004680  5820 2000 
                    7893   @m68kde~1_20:
00004684  2000      7894          dc.b      32,0
                    7895   @m68kde~1_21:
00004686  2E00      7896          dc.b      46,0
                    7897   @m68kde~1_22:
00004688  2563 00   7898          dc.b      37,99,0
                    7899   @m68kde~1_23:
0000468C  00        7900          dc.b      0
                    7901   @m68kde~1_24:
0000468E  0D0A 0D0A 7902          dc.b      13,10,13,10,32,68,48,32,61,32,36,37,48,56,88
00004692  2044 3020 
00004696  3D20 2425 
0000469A  3038 58   
0000469D  2020 4130 7903          dc.b      32,32,65,48,32,61,32,36,37,48,56,88,0
000046A1  203D 2024 
000046A5  2530 3858 
000046A9  00        
                    7904   @m68kde~1_25:
000046AA  0D0A 2044 7905          dc.b      13,10,32,68,49,32,61,32,36,37,48,56,88,32,32
000046AE  3120 3D20 
000046B2  2425 3038 
000046B6  5820 20   
000046B9  4131 203D 7906          dc.b      65,49,32,61,32,36,37,48,56,88,0
000046BD  2024 2530 
000046C1  3858 00   
                    7907   @m68kde~1_26:
000046C4  0D0A 2044 7908          dc.b      13,10,32,68,50,32,61,32,36,37,48,56,88,32,32
000046C8  3220 3D20 
000046CC  2425 3038 
000046D0  5820 20   
000046D3  4132 203D 7909          dc.b      65,50,32,61,32,36,37,48,56,88,0
000046D7  2024 2530 
000046DB  3858 00   
                    7910   @m68kde~1_27:
000046DE  0D0A 2044 7911          dc.b      13,10,32,68,51,32,61,32,36,37,48,56,88,32,32
000046E2  3320 3D20 
000046E6  2425 3038 
000046EA  5820 20   
000046ED  4133 203D 7912          dc.b      65,51,32,61,32,36,37,48,56,88,0
000046F1  2024 2530 
000046F5  3858 00   
                    7913   @m68kde~1_28:
000046F8  0D0A 2044 7914          dc.b      13,10,32,68,52,32,61,32,36,37,48,56,88,32,32
000046FC  3420 3D20 
00004700  2425 3038 
00004704  5820 20   
00004707  4134 203D 7915          dc.b      65,52,32,61,32,36,37,48,56,88,0
0000470B  2024 2530 
0000470F  3858 00   
                    7916   @m68kde~1_29:
00004712  0D0A 2044 7917          dc.b      13,10,32,68,53,32,61,32,36,37,48,56,88,32,32
00004716  3520 3D20 
0000471A  2425 3038 
0000471E  5820 20   
00004721  4135 203D 7918          dc.b      65,53,32,61,32,36,37,48,56,88,0
00004725  2024 2530 
00004729  3858 00   
                    7919   @m68kde~1_30:
0000472C  0D0A 2044 7920          dc.b      13,10,32,68,54,32,61,32,36,37,48,56,88,32,32
00004730  3620 3D20 
00004734  2425 3038 
00004738  5820 20   
0000473B  4136 203D 7921          dc.b      65,54,32,61,32,36,37,48,56,88,0
0000473F  2024 2530 
00004743  3858 00   
                    7922   @m68kde~1_31:
00004746  0D0A 2044 7923          dc.b      13,10,32,68,55,32,61,32,36,37,48,56,88,32,32
0000474A  3720 3D20 
0000474E  2425 3038 
00004752  5820 20   
00004755  4137 203D 7924          dc.b      65,55,32,61,32,36,37,48,56,88,0
00004759  2024 2530 
0000475D  3858 00   
                    7925   @m68kde~1_32:
00004760  0D0A 0D0A 7926          dc.b      13,10,13,10,85,83,80,32,61,32,36,37,48,56,88
00004764  5553 5020 
00004768  3D20 2425 
0000476C  3038 58   
0000476F  2020 2841 7927          dc.b      32,32,40,65,55,41,32,85,115,101,114,32,83,80
00004773  3729 2055 
00004777  7365 7220 
0000477B  5350      
0000477D  00        7928          dc.b      0
                    7929   @m68kde~1_33:
0000477E  0D0A 5353 7930          dc.b      13,10,83,83,80,32,61,32,36,37,48,56,88,32,32
00004782  5020 3D20 
00004786  2425 3038 
0000478A  5820 20   
0000478D  2841 3729 7931          dc.b      40,65,55,41,32,83,117,112,101,114,118,105,115
00004791  2053 7570 
00004795  6572 7669 
00004799  73        
0000479A  6F72 2053 7932          dc.b      111,114,32,83,80,0
0000479E  5000      
                    7933   @m68kde~1_34:
000047A0  0D0A 2053 7934          dc.b      13,10,32,83,82,32,61,32,36,37,48,52,88,32,32
000047A4  5220 3D20 
000047A8  2425 3034 
000047AC  5820 20   
000047AF  2000      7935          dc.b      32,0
                    7936   @m68kde~1_35:
000047B2  2020 205B 7937          dc.b      32,32,32,91,0
000047B6  00        
                    7938   @m68kde~1_36:
000047B8  0D0A 2050 7939          dc.b      13,10,32,80,67,32,61,32,36,37,48,56,88,32,32
000047BC  4320 3D20 
000047C0  2425 3038 
000047C4  5820 20   
000047C7  00        7940          dc.b      0
                    7941   @m68kde~1_37:
000047C8  5B40 2042 7942          dc.b      91,64,32,66,82,69,65,75,80,79,73,78,84,93,0
000047CC  5245 414B 
000047D0  504F 494E 
000047D4  545D 00   
                    7943   @m68kde~1_38:
000047D8  0D0A 5750 7944          dc.b      13,10,87,80,37,100,32,61,32,37,115,0
000047DC  2564 203D 
000047E0  2025 7300 
                    7945   @m68kde~1_39:
000047E4  0D0A 0D0A 7946          dc.b      13,10,13,10,13,10,13,10,13,10,13,10,83,105,110
000047E8  0D0A 0D0A 
000047EC  0D0A 0D0A 
000047F0  5369 6E   
000047F3  676C 6520 7947          dc.b      103,108,101,32,83,116,101,112,32,32,58,91,79
000047F7  5374 6570 
000047FB  2020 3A5B 
000047FF  4F        
00004800  4E5D 00   7948          dc.b      78,93,0
                    7949   @m68kde~1_40:
00004804  0D0A 4272 7950          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004808  6561 6B20 
0000480C  506F 696E 
00004810  74        
00004811  7320 3A5B 7951          dc.b      115,32,58,91,68,105,115,97,98,108,101,100,93
00004815  4469 7361 
00004819  626C 6564 
0000481D  5D        
0000481E  00        7952          dc.b      0
                    7953   @m68kde~1_41:
00004820  0D0A 5072 7954          dc.b      13,10,80,114,101,115,115,32,60,83,80,65,67,69
00004824  6573 7320 
00004828  3C53 5041 
0000482C  4345      
0000482E  3E20 746F 7955          dc.b      62,32,116,111,32,69,120,101,99,117,116,101,32
00004832  2045 7865 
00004836  6375 7465 
0000483A  20        
0000483B  4E65 7874 7956          dc.b      78,101,120,116,32,73,110,115,116,114,117,99
0000483F  2049 6E73 
00004843  7472 7563 
00004847  7469 6F6E 7957          dc.b      116,105,111,110,0
0000484B  00        
                    7958   @m68kde~1_42:
0000484C  0D0A 5072 7959          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00004850  6573 7320 
00004854  3C45 5343 
00004858  3E20      
0000485A  746F 2052 7960          dc.b      116,111,32,82,101,115,117,109,101,32,80,114
0000485E  6573 756D 
00004862  6520 5072 
00004866  6F67 7261 7961          dc.b      111,103,114,97,109,0
0000486A  6D00      
                    7962   @m68kde~1_43:
0000486C  0D0A 496C 7963          dc.b      13,10,73,108,108,101,103,97,108,32,68,97,116
00004870  6C65 6761 
00004874  6C20 4461 
00004878  74        
00004879  6120 5265 7964          dc.b      97,32,82,101,103,105,115,116,101,114,32,58,32
0000487D  6769 7374 
00004881  6572 203A 
00004885  20        
00004886  5573 6520 7965          dc.b      85,115,101,32,68,48,45,68,55,46,46,46,46,46
0000488A  4430 2D44 
0000488E  372E 2E2E 
00004892  2E2E      
00004894  0D0A 00   7966          dc.b      13,10,0
                    7967   @m68kde~1_44:
00004898  0D0A 4425 7968          dc.b      13,10,68,37,99,32,61,32,0
0000489C  6320 3D20 
000048A0  00        
                    7969   @m68kde~1_45:
000048A2  0D0A 496C 7970          dc.b      13,10,73,108,108,101,103,97,108,32,65,100,100
000048A6  6C65 6761 
000048AA  6C20 4164 
000048AE  64        
000048AF  7265 7373 7971          dc.b      114,101,115,115,32,82,101,103,105,115,116,101
000048B3  2052 6567 
000048B7  6973 7465 
000048BB  7220 3A20 7972          dc.b      114,32,58,32,85,115,101,32,65,48,45,65,55,46
000048BF  5573 6520 
000048C3  4130 2D41 
000048C7  372E      
000048C9  2E2E 2E2E 7973          dc.b      46,46,46,46,13,10,0
000048CD  0D0A 00   
                    7974   @m68kde~1_46:
000048D0  0D0A 4125 7975          dc.b      13,10,65,37,99,32,61,32,0
000048D4  6320 3D20 
000048D8  00        
                    7976   @m68kde~1_47:
000048DA  0D0A 5573 7977          dc.b      13,10,85,115,101,114,32,83,80,32,61,32,0
000048DE  6572 2053 
000048E2  5020 3D20 
000048E6  00        
                    7978   @m68kde~1_48:
000048E8  0D0A 496C 7979          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
000048EC  6C65 6761 
000048F0  6C20 5265 
000048F4  67        
000048F5  6973 7465 7980          dc.b      105,115,116,101,114,46,46,46,46,0
000048F9  722E 2E2E 
000048FD  2E00      
                    7981   @m68kde~1_49:
00004900  0D0A 5379 7982          dc.b      13,10,83,121,115,116,101,109,32,83,80,32,61
00004904  7374 656D 
00004908  2053 5020 
0000490C  3D        
0000490D  2000      7983          dc.b      32,0
                    7984   @m68kde~1_50:
00004910  0D0A 5043 7985          dc.b      13,10,80,67,32,61,32,0
00004914  203D 2000 
                    7986   @m68kde~1_51:
00004918  0D0A 5352 7987          dc.b      13,10,83,82,32,61,32,0
0000491C  203D 2000 
                    7988   @m68kde~1_52:
00004920  0D0A 496C 7989          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
00004924  6C65 6761 
00004928  6C20 5265 
0000492C  67        
0000492D  6973 7465 7990          dc.b      105,115,116,101,114,58,32,85,115,101,32,65,48
00004931  723A 2055 
00004935  7365 2041 
00004939  30        
0000493A  2D41 372C 7991          dc.b      45,65,55,44,32,68,48,45,68,55,44,32,83,83,80
0000493E  2044 302D 
00004942  4437 2C20 
00004946  5353 50   
00004949  2C20 5553 7992          dc.b      44,32,85,83,80,44,32,80,67,32,111,114,32,83
0000494D  502C 2050 
00004951  4320 6F72 
00004955  2053      
00004957  520D 0A00 7993          dc.b      82,13,10,0
                    7994   @m68kde~1_53:
0000495C  0D0A 0D0A 7995          dc.b      13,10,13,10,78,117,109,32,32,32,32,32,65,100
00004960  4E75 6D20 
00004964  2020 2020 
00004968  4164      
0000496A  6472 6573 7996          dc.b      100,114,101,115,115,32,32,32,32,32,32,73,110
0000496E  7320 2020 
00004972  2020 2049 
00004976  6E        
00004977  7374 7275 7997          dc.b      115,116,114,117,99,116,105,111,110,0
0000497B  6374 696F 
0000497F  6E00      
                    7998   @m68kde~1_54:
00004982  0D0A 2D2D 7999          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
00004986  2D20 2020 
0000498A  2020 2D2D 
0000498E  2D2D 2D   
00004991  2D2D 2D2D 8000          dc.b      45,45,45,45,32,32,32,32,45,45,45,45,45,45,45
00004995  2020 2020 
00004999  2D2D 2D2D 
0000499D  2D2D 2D   
000049A0  2D2D 2D2D 8001          dc.b      45,45,45,45,0
000049A4  00        
                    8002   @m68kde~1_55:
000049A6  0D0A 4E6F 8003          dc.b      13,10,78,111,32,66,114,101,97,107,80,111,105
000049AA  2042 7265 
000049AE  616B 506F 
000049B2  69        
000049B3  6E74 7320 8004          dc.b      110,116,115,32,83,101,116,0
000049B7  5365 7400 
                    8005   @m68kde~1_56:
000049BC  0D0A 2533 8006          dc.b      13,10,37,51,100,32,32,32,32,32,36,37,48,56,120
000049C0  6420 2020 
000049C4  2020 2425 
000049C8  3038 78   
000049CB  00        8007          dc.b      0
                    8008   @m68kde~1_57:
000049CC  0D0A 4E75 8009          dc.b      13,10,78,117,109,32,32,32,32,32,65,100,100,114
000049D0  6D20 2020 
000049D4  2020 4164 
000049D8  6472      
000049DA  6573 7300 8010          dc.b      101,115,115,0
                    8011   @m68kde~1_58:
000049DE  0D0A 2D2D 8012          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
000049E2  2D20 2020 
000049E6  2020 2D2D 
000049EA  2D2D 2D   
000049ED  2D2D 2D2D 8013          dc.b      45,45,45,45,0
000049F1  00        
                    8014   @m68kde~1_59:
000049F2  0D0A 4E6F 8015          dc.b      13,10,78,111,32,87,97,116,99,104,80,111,105
000049F6  2057 6174 
000049FA  6368 506F 
000049FE  69        
000049FF  6E74 7320 8016          dc.b      110,116,115,32,83,101,116,0
00004A03  5365 7400 
                    8017   @m68kde~1_60:
00004A08  0D0A 456E 8018          dc.b      13,10,69,110,116,101,114,32,66,114,101,97,107
00004A0C  7465 7220 
00004A10  4272 6561 
00004A14  6B        
00004A15  2050 6F69 8019          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
00004A19  6E74 204E 
00004A1D  756D 6265 
00004A21  72        
00004A22  3A20 00   8020          dc.b      58,32,0
                    8021   @m68kde~1_61:
00004A26  0D0A 496C 8022          dc.b      13,10,73,108,108,101,103,97,108,32,82,97,110
00004A2A  6C65 6761 
00004A2E  6C20 5261 
00004A32  6E        
00004A33  6765 203A 8023          dc.b      103,101,32,58,32,85,115,101,32,48,32,45,32,55
00004A37  2055 7365 
00004A3B  2030 202D 
00004A3F  2037      
00004A41  00        8024          dc.b      0
                    8025   @m68kde~1_62:
00004A42  0D0A 4272 8026          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004A46  6561 6B20 
00004A4A  506F 696E 
00004A4E  74        
00004A4F  2043 6C65 8027          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
00004A53  6172 6564 
00004A57  2E2E 2E2E 
00004A5B  2E        
00004A5C  0D0A 00   8028          dc.b      13,10,0
                    8029   @m68kde~1_63:
00004A60  0D0A 4272 8030          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004A64  6561 6B20 
00004A68  506F 696E 
00004A6C  74        
00004A6D  2077 6173 8031          dc.b      32,119,97,115,110,39,116,32,83,101,116,46,46
00004A71  6E27 7420 
00004A75  5365 742E 
00004A79  2E        
00004A7A  2E2E 2E00 8032          dc.b      46,46,46,0
                    8033   @m68kde~1_64:
00004A7E  0D0A 456E 8034          dc.b      13,10,69,110,116,101,114,32,87,97,116,99,104
00004A82  7465 7220 
00004A86  5761 7463 
00004A8A  68        
00004A8B  2050 6F69 8035          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
00004A8F  6E74 204E 
00004A93  756D 6265 
00004A97  72        
00004A98  3A20 00   8036          dc.b      58,32,0
                    8037   @m68kde~1_65:
00004A9C  0D0A 5761 8038          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004AA0  7463 6820 
00004AA4  506F 696E 
00004AA8  74        
00004AA9  2043 6C65 8039          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
00004AAD  6172 6564 
00004AB1  2E2E 2E2E 
00004AB5  2E        
00004AB6  0D0A 00   8040          dc.b      13,10,0
                    8041   @m68kde~1_66:
00004ABA  0D0A 5761 8042          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004ABE  7463 6820 
00004AC2  506F 696E 
00004AC6  74        
00004AC7  2057 6173 8043          dc.b      32,87,97,115,32,110,111,116,32,83,101,116,46
00004ACB  206E 6F74 
00004ACF  2053 6574 
00004AD3  2E        
00004AD4  2E2E 2E2E 8044          dc.b      46,46,46,46,0
00004AD8  00        
                    8045   @m68kde~1_67:
00004ADA  0D0A 4E6F 8046          dc.b      13,10,78,111,32,70,82,69,69,32,66,114,101,97
00004ADE  2046 5245 
00004AE2  4520 4272 
00004AE6  6561      
00004AE8  6B20 506F 8047          dc.b      107,32,80,111,105,110,116,115,46,46,46,46,46
00004AEC  696E 7473 
00004AF0  2E2E 2E2E 
00004AF4  2E        
00004AF5  00        8048          dc.b      0
                    8049   @m68kde~1_68:
00004AF6  0D0A 4272 8050          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004AFA  6561 6B20 
00004AFE  506F 696E 
00004B02  74        
00004B03  2041 6464 8051          dc.b      32,65,100,100,114,101,115,115,58,32,0
00004B07  7265 7373 
00004B0B  3A20 00   
                    8052   @m68kde~1_69:
00004B0E  0D0A 4572 8053          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
00004B12  726F 7220 
00004B16  3A20 4272 
00004B1A  65        
00004B1B  616B 2050 8054          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
00004B1F  6F69 6E74 
00004B23  7320 4341 
00004B27  4E        
00004B28  4E4F 5420 8055          dc.b      78,79,84,32,98,101,32,115,101,116,32,97,116
00004B2C  6265 2073 
00004B30  6574 2061 
00004B34  74        
00004B35  204F 4444 8056          dc.b      32,79,68,68,32,97,100,100,114,101,115,115,101
00004B39  2061 6464 
00004B3D  7265 7373 
00004B41  65        
00004B42  7300      8057          dc.b      115,0
                    8058   @m68kde~1_70:
00004B44  0D0A 4572 8059          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
00004B48  726F 7220 
00004B4C  3A20 4272 
00004B50  65        
00004B51  616B 2050 8060          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
00004B55  6F69 6E74 
00004B59  7320 4341 
00004B5D  4E        
00004B5E  4E4F 5420 8061          dc.b      78,79,84,32,98,101,32,115,101,116,32,102,111
00004B62  6265 2073 
00004B66  6574 2066 
00004B6A  6F        
00004B6B  7220 524F 8062          dc.b      114,32,82,79,77,32,105,110,32,82,97,110,103
00004B6F  4D20 696E 
00004B73  2052 616E 
00004B77  67        
00004B78  6520 3A20 8063          dc.b      101,32,58,32,91,36,48,45,36,48,48,48,48,55,70
00004B7C  5B24 302D 
00004B80  2430 3030 
00004B84  3037 46   
00004B87  4646 5D00 8064          dc.b      70,70,93,0
                    8065   @m68kde~1_71:
00004B8C  0D0A 4572 8066          dc.b      13,10,69,114,114,111,114,58,32,66,114,101,97
00004B90  726F 723A 
00004B94  2042 7265 
00004B98  61        
00004B99  6B20 506F 8067          dc.b      107,32,80,111,105,110,116,32,65,108,114,101
00004B9D  696E 7420 
00004BA1  416C 7265 
00004BA5  6164 7920 8068          dc.b      97,100,121,32,69,120,105,115,116,115,32,97,116
00004BA9  4578 6973 
00004BAD  7473 2061 
00004BB1  74        
00004BB2  2041 6464 8069          dc.b      32,65,100,100,114,101,115,115,32,58,32,37,48
00004BB6  7265 7373 
00004BBA  203A 2025 
00004BBE  30        
00004BBF  3878 0D0A 8070          dc.b      56,120,13,10,0
00004BC3  00        
                    8071   @m68kde~1_72:
00004BC4  0D0A 4272 8072          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004BC8  6561 6B20 
00004BCC  506F 696E 
00004BD0  74        
00004BD1  2053 6574 8073          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
00004BD5  2061 7420 
00004BD9  4164 6472 
00004BDD  65        
00004BDE  7373 3A20 8074          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
00004BE2  5B24 2530 
00004BE6  3878 5D00 
                    8075   @m68kde~1_73:
00004BEA  0D0A 4E6F 8076          dc.b      13,10,78,111,32,70,82,69,69,32,87,97,116,99
00004BEE  2046 5245 
00004BF2  4520 5761 
00004BF6  7463      
00004BF8  6820 506F 8077          dc.b      104,32,80,111,105,110,116,115,46,46,46,46,46
00004BFC  696E 7473 
00004C00  2E2E 2E2E 
00004C04  2E        
00004C05  00        8078          dc.b      0
                    8079   @m68kde~1_74:
00004C06  0D0A 5761 8080          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004C0A  7463 6820 
00004C0E  506F 696E 
00004C12  74        
00004C13  2041 6464 8081          dc.b      32,65,100,100,114,101,115,115,58,32,0
00004C17  7265 7373 
00004C1B  3A20 00   
                    8082   @m68kde~1_75:
00004C1E  0D0A 4572 8083          dc.b      13,10,69,114,114,111,114,58,32,87,97,116,99
00004C22  726F 723A 
00004C26  2057 6174 
00004C2A  63        
00004C2B  6820 506F 8084          dc.b      104,32,80,111,105,110,116,32,65,108,114,101
00004C2F  696E 7420 
00004C33  416C 7265 
00004C37  6164 7920 8085          dc.b      97,100,121,32,83,101,116,32,97,116,32,65,100
00004C3B  5365 7420 
00004C3F  6174 2041 
00004C43  64        
00004C44  6472 6573 8086          dc.b      100,114,101,115,115,32,58,32,37,48,56,120,13
00004C48  7320 3A20 
00004C4C  2530 3878 
00004C50  0D        
00004C51  0A00      8087          dc.b      10,0
                    8088   @m68kde~1_76:
00004C54  0D0A 5761 8089          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004C58  7463 6820 
00004C5C  506F 696E 
00004C60  74        
00004C61  2053 6574 8090          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
00004C65  2061 7420 
00004C69  4164 6472 
00004C6D  65        
00004C6E  7373 3A20 8091          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
00004C72  5B24 2530 
00004C76  3878 5D00 
                    8092   @m68kde~1_77:
00004C7A  0D0A 0D0A 8093          dc.b      13,10,13,10,13,10,13,10,64,66,82,69,65,75,80
00004C7E  0D0A 0D0A 
00004C82  4042 5245 
00004C86  414B 50   
00004C89  4F49 4E54 8094          dc.b      79,73,78,84,0
00004C8D  00        
                    8095   @m68kde~1_78:
00004C8E  0D0A 5369 8096          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00004C92  6E67 6C65 
00004C96  2053 7465 
00004C9A  70        
00004C9B  203A 205B 8097          dc.b      32,58,32,91,79,78,93,0
00004C9F  4F4E 5D00 
                    8098   @m68kde~1_79:
00004CA4  0D0A 4272 8099          dc.b      13,10,66,114,101,97,107,80,111,105,110,116,115
00004CA8  6561 6B50 
00004CAC  6F69 6E74 
00004CB0  73        
00004CB1  203A 205B 8100          dc.b      32,58,32,91,69,110,97,98,108,101,100,93,0
00004CB5  456E 6162 
00004CB9  6C65 645D 
00004CBD  00        
                    8101   @m68kde~1_80:
00004CBE  0D0A 5072 8102          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00004CC2  6573 7320 
00004CC6  3C45 5343 
00004CCA  3E20      
00004CCC  746F 2052 8103          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
00004CD0  6573 756D 
00004CD4  6520 5573 
00004CD8  6572 2050 8104          dc.b      101,114,32,80,114,111,103,114,97,109,13,10,0
00004CDC  726F 6772 
00004CE0  616D 0D0A 
00004CE4  00        
                    8105   @m68kde~1_81:
00004CE6  0D0A 556E 8106          dc.b      13,10,85,110,107,110,111,119,110,32,67,111,109
00004CEA  6B6E 6F77 
00004CEE  6E20 436F 
00004CF2  6D        
00004CF3  6D61 6E64 8107          dc.b      109,97,110,100,46,46,46,46,46,13,10,0
00004CF7  2E2E 2E2E 
00004CFB  2E0D 0A00 
                    8108   @m68kde~1_82:
00004D00  0D0A 5072 8109          dc.b      13,10,80,114,111,103,114,97,109,32,69,110,100
00004D04  6F67 7261 
00004D08  6D20 456E 
00004D0C  64        
00004D0D  6564 2028 8110          dc.b      101,100,32,40,84,82,65,80,32,35,49,53,41,46
00004D11  5452 4150 
00004D15  2023 3135 
00004D19  292E      
00004D1B  2E2E 2E00 8111          dc.b      46,46,46,0
                    8112   @m68kde~1_83:
00004D20  0D0A 4B69 8113          dc.b      13,10,75,105,108,108,32,65,108,108,32,66,114
00004D24  6C6C 2041 
00004D28  6C6C 2042 
00004D2C  72        
00004D2D  6561 6B20 8114          dc.b      101,97,107,32,80,111,105,110,116,115,46,46,46
00004D31  506F 696E 
00004D35  7473 2E2E 
00004D39  2E        
00004D3A  2879 2F6E 8115          dc.b      40,121,47,110,41,63,0
00004D3E  293F 00   
                    8116   @m68kde~1_84:
00004D42  0D0A 4B69 8117          dc.b      13,10,75,105,108,108,32,65,108,108,32,87,97
00004D46  6C6C 2041 
00004D4A  6C6C 2057 
00004D4E  61        
00004D4F  7463 6820 8118          dc.b      116,99,104,32,80,111,105,110,116,115,46,46,46
00004D53  506F 696E 
00004D57  7473 2E2E 
00004D5B  2E        
00004D5C  2879 2F6E 8119          dc.b      40,121,47,110,41,63,0
00004D60  293F 00   
                    8120   @m68kde~1_85:
00004D64  0D0A 2D2D 8121          dc.b      13,10,45,45,45,45,45,45,45,45,45,45,45,45,45
00004D68  2D2D 2D2D 
00004D6C  2D2D 2D2D 
00004D70  2D2D 2D   
00004D73  2D2D 2D2D 8122          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00004D77  2D2D 2D2D 
00004D7B  2D2D 2D2D 
00004D7F  2D2D 2D   
00004D82  2D2D 2D2D 8123          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00004D86  2D2D 2D2D 
00004D8A  2D2D 2D2D 
00004D8E  2D2D 2D   
00004D91  2D2D 2D2D 8124          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00004D95  2D2D 2D2D 
00004D99  2D2D 2D2D 
00004D9D  2D2D 2D   
00004DA0  2D2D 2D2D 8125          dc.b      45,45,45,45,45,45,0
00004DA4  2D2D 00   
                    8126   @m68kde~1_86:
00004DA8  0D0A 2020 8127          dc.b      13,10,32,32,70,105,110,97,108,32,80,114,111
00004DAC  4669 6E61 
00004DB0  6C20 5072 
00004DB4  6F        
00004DB5  6A65 6374 8128          dc.b      106,101,99,116,0
00004DB9  00        
                    8129   @m68kde~1_87:
00004DBA  0D0A 2020 8130          dc.b      13,10,32,32,72,32,32,32,32,45,32,83,97,121,32
00004DBE  4820 2020 
00004DC2  202D 2053 
00004DC6  6179 20   
00004DC9  4865 6C6C 8131          dc.b      72,101,108,108,111,32,87,111,114,108,100,0
00004DCD  6F20 576F 
00004DD1  726C 6400 
                    8132   @m68kde~1_88:
00004DD6  0D0A 2020 8133          dc.b      13,10,32,32,84,32,32,32,32,45,32,82,117,110
00004DDA  5420 2020 
00004DDE  202D 2052 
00004DE2  756E      
00004DE4  2054 6574 8134          dc.b      32,84,101,116,114,105,115,32,71,97,109,101,0
00004DE8  7269 7320 
00004DEC  4761 6D65 
00004DF0  00        
                    8135   @m68kde~1_89:
00004DF2  0D0A 2300 8136          dc.b      13,10,35,0
                    8137   @m68kde~1_90:
00004DF6  0A52 756E 8138          dc.b      10,82,117,110,110,105,110,103,32,84,101,116
00004DFA  6E69 6E67 
00004DFE  2054 6574 
00004E02  7269 7320 8139          dc.b      114,105,115,32,71,97,109,101,10,0
00004E06  4761 6D65 
00004E0A  0A00      
                    8140   @m68kde~1_91:
00004E0C  0A53 6179 8141          dc.b      10,83,97,121,105,110,103,32,72,101,108,108,111
00004E10  696E 6720 
00004E14  4865 6C6C 
00004E18  6F        
00004E19  2057 6F72 8142          dc.b      32,87,111,114,108,100,10,0
00004E1D  6C64 0A00 
                    8143   @m68kde~1_92:
00004E22  0A4D 656D 8144          dc.b      10,77,101,109,111,114,121,32,67,104,97,110,103
00004E26  6F72 7920 
00004E2A  4368 616E 
00004E2E  67        
00004E2F  6520 696E 8145          dc.b      101,32,105,110,32,86,71,65,10,0
00004E33  2056 4741 
00004E37  0A00      
                    8146   @m68kde~1_93:
00004E3A  0A41 6464 8147          dc.b      10,65,100,100,114,101,115,115,58,32,48,120,37
00004E3E  7265 7373 
00004E42  3A20 3078 
00004E46  25        
00004E47  3034 582C 8148          dc.b      48,52,88,44,32,68,97,116,97,58,32,37,99,0
00004E4B  2044 6174 
00004E4F  613A 2025 
00004E53  6300      
                    8149   @m68kde~1_94:
00004E56  0A41 6464 8150          dc.b      10,65,100,100,114,101,115,115,58,32,37,108,100
00004E5A  7265 7373 
00004E5E  3A20 256C 
00004E62  64        
00004E63  00        8151          dc.b      0
                    8152   @m68kde~1_95:
00004E64  0D0A 0D0A 8153          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
00004E68  5072 6F67 
00004E6C  7261 6D20 
00004E70  41        
00004E71  424F 5254 8154          dc.b      66,79,82,84,32,33,33,33,33,33,33,13,10,0
00004E75  2021 2121 
00004E79  2121 210D 
00004E7D  0A00      
                    8155   @m68kde~1_96:
00004E80  2573 0D0A 8156          dc.b      37,115,13,10,0
00004E84  00        
                    8157   @m68kde~1_97:
00004E86  0D0A 0D0A 8158          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
00004E8A  5072 6F67 
00004E8E  7261 6D20 
00004E92  41        
00004E93  424F 5254 8159          dc.b      66,79,82,84,32,33,33,33,33,33,0
00004E97  2021 2121 
00004E9B  2121 00   
                    8160   @m68kde~1_98:
00004E9E  0D0A 556E 8161          dc.b      13,10,85,110,104,97,110,100,108,101,100,32,73
00004EA2  6861 6E64 
00004EA6  6C65 6420 
00004EAA  49        
00004EAB  6E74 6572 8162          dc.b      110,116,101,114,114,117,112,116,58,32,73,82
00004EAF  7275 7074 
00004EB3  3A20 4952 
00004EB7  5125 6420 8163          dc.b      81,37,100,32,33,33,33,33,33,0
00004EBB  2121 2121 
00004EBF  2100      
                    8164   @m68kde~1_99:
00004EC2  4144 4452 8165          dc.b      65,68,68,82,69,83,83,32,69,82,82,79,82,58,32
00004EC6  4553 5320 
00004ECA  4552 524F 
00004ECE  523A 20   
00004ED1  3136 206F 8166          dc.b      49,54,32,111,114,32,51,50,32,66,105,116,32,84
00004ED5  7220 3332 
00004ED9  2042 6974 
00004EDD  2054      
00004EDF  7261 6E73 8167          dc.b      114,97,110,115,102,101,114,32,116,111,47,102
00004EE3  6665 7220 
00004EE7  746F 2F66 
00004EEB  726F 6D20 8168          dc.b      114,111,109,32,97,110,32,79,68,68,32,65,100
00004EEF  616E 204F 
00004EF3  4444 2041 
00004EF7  64        
00004EF8  6472 6573 8169          dc.b      100,114,101,115,115,46,46,46,46,0
00004EFC  732E 2E2E 
00004F00  2E00      
                    8170   @m68kde~1_100:
00004F02  556E 6861 8171          dc.b      85,110,104,97,110,100,108,101,100,32,84,114
00004F06  6E64 6C65 
00004F0A  6420 5472 
00004F0E  6170 2021 8172          dc.b      97,112,32,33,33,33,33,33,0
00004F12  2121 2121 
00004F16  00        
                    8173   @m68kde~1_101:
00004F18  4255 5320 8174          dc.b      66,85,83,32,69,114,114,111,114,33,0
00004F1C  4572 726F 
00004F20  7221 00   
                    8175   @m68kde~1_102:
00004F24  4144 4452 8176          dc.b      65,68,68,82,69,83,83,32,69,114,114,111,114,33
00004F28  4553 5320 
00004F2C  4572 726F 
00004F30  7221      
00004F32  00        8177          dc.b      0
                    8178   @m68kde~1_103:
00004F34  494C 4C45 8179          dc.b      73,76,76,69,71,65,76,32,73,78,83,84,82,85,67
00004F38  4741 4C20 
00004F3C  494E 5354 
00004F40  5255 43   
00004F43  5449 4F4E 8180          dc.b      84,73,79,78,0
00004F47  00        
                    8181   @m68kde~1_104:
00004F48  4449 5649 8182          dc.b      68,73,86,73,68,69,32,66,89,32,90,69,82,79,0
00004F4C  4445 2042 
00004F50  5920 5A45 
00004F54  524F 00   
                    8183   @m68kde~1_105:
00004F58  2743 484B 8184          dc.b      39,67,72,75,39,32,73,78,83,84,82,85,67,84,73
00004F5C  2720 494E 
00004F60  5354 5255 
00004F64  4354 49   
00004F67  4F4E 00   8185          dc.b      79,78,0
                    8186   @m68kde~1_106:
00004F6A  5452 4150 8187          dc.b      84,82,65,80,86,32,73,78,83,84,82,85,67,84,73
00004F6E  5620 494E 
00004F72  5354 5255 
00004F76  4354 49   
00004F79  4F4E 00   8188          dc.b      79,78,0
                    8189   @m68kde~1_107:
00004F7C  5052 4956 8190          dc.b      80,82,73,86,73,76,69,71,69,32,86,73,79,76,65
00004F80  494C 4547 
00004F84  4520 5649 
00004F88  4F4C 41   
00004F8B  5449 4F4E 8191          dc.b      84,73,79,78,0
00004F8F  00        
                    8192   @m68kde~1_108:
00004F90  554E 494E 8193          dc.b      85,78,73,78,73,84,73,65,76,73,83,69,68,32,73
00004F94  4954 4941 
00004F98  4C49 5345 
00004F9C  4420 49   
00004F9F  5251 00   8194          dc.b      82,81,0
                    8195   @m68kde~1_109:
00004FA2  5350 5552 8196          dc.b      83,80,85,82,73,79,85,83,32,73,82,81,0
00004FA6  494F 5553 
00004FAA  2049 5251 
00004FAE  00        
                    8197   @m68kde~1_110:
00004FB0  4350 454E 8198          dc.b      67,80,69,78,32,52,49,50,32,50,48,50,51,87,50
00004FB4  2034 3132 
00004FB8  2032 3032 
00004FBC  3357 32   
00004FBF  0D0A 546F 8199          dc.b      13,10,84,111,109,32,87,97,110,103,44,32,55,54
00004FC3  6D20 5761 
00004FC7  6E67 2C20 
00004FCB  3736      
00004FCD  3334 3033 8200          dc.b      51,52,48,51,52,56,0
00004FD1  3438 00   
                    8201   @m68kde~1_111:
00004FD4  436F 7079 8202          dc.b      67,111,112,121,114,105,103,104,116,32,40,67
00004FD8  7269 6768 
00004FDC  7420 2843 
00004FE0  2920 504A 8203          dc.b      41,32,80,74,32,68,97,118,105,101,115,32,50,48
00004FE4  2044 6176 
00004FE8  6965 7320 
00004FEC  3230      
00004FEE  3136 00   8204          dc.b      49,54,0
                    8205   @m68kde~1_112:
00004FF2  0D0A 2573 8206          dc.b      13,10,37,115,0
00004FF6  00        
                    8207   @tetris_1:
00004FF8  5469 6D65 8208          dc.b      84,105,109,101,114,32,73,83,82,44,32,37,100
00004FFC  7220 4953 
00005000  522C 2025 
00005004  64        
00005005  0A00      8209          dc.b      10,0
                    8210   @tetris_2:
00005008  2564 0A00 8211          dc.b      37,100,10,0
                    8212   @tetris_3:
0000500C  2573 0A00 8213          dc.b      37,115,10,0
                    8214   @tetris_4:
00005010  6761 6D65 8215          dc.b      103,97,109,101,32,111,118,101,114,0
00005014  206F 7665 
00005018  7200      
                    8216   @tetris_5:
0000501A  4761 6D65 8217          dc.b      71,97,109,101,32,111,118,101,114,33,0
0000501E  206F 7665 
00005022  7221 00   
                    8218   @tetris_6:
00005026  5363 6F72 8219          dc.b      83,99,111,114,101,58,32,37,100,0
0000502A  653A 2025 
0000502E  6400      
                    8220   @tetris_7:
00005030  7363 6F72 8221          dc.b      115,99,111,114,101,0
00005034  6500      
                    8222   @tetris_8:
00005036  0A0A 0A00 8223          dc.b      10,10,10,0
                    8224   @tetris_9:
0000503A  696E 6974 8225          dc.b      105,110,105,116,105,97,108,95,110,101,119,108
0000503E  6961 6C5F 
00005042  6E65 776C 
00005046  696E 6500 8226          dc.b      105,110,101,0
                    8227   @tetris_10:
0000504A  2000      8228          dc.b      32,0
                    8229   @tetris_11:
0000504C  7370 6163 8230          dc.b      115,112,97,99,101,0
00005050  6500      
                    8231   @tetris_12:
00005052  4350 454E 8232          dc.b      67,80,69,78,52,49,50,32,84,101,116,114,105,115
00005056  3431 3220 
0000505A  5465 7472 
0000505E  6973      
00005060  0A00      8233          dc.b      10,0
                    8234   @tetris_13:
00005062  7469 746C 8235          dc.b      116,105,116,108,101,0
00005066  6500      
                    8236   @tetris_14:
00005068  2300      8237          dc.b      35,0
                    8238   @tetris_15:
0000506A  7461 626C 8239          dc.b      116,97,98,108,101,35,0
0000506E  6523 00   
                    8240   @tetris_16:
00005072  2E00      8241          dc.b      46,0
                    8242   @tetris_17:
00005074  7461 626C 8243          dc.b      116,97,98,108,101,46,0
00005078  652E 00   
                    8244   @tetris_18:
0000507C  0A00      8245          dc.b      10,0
                    8246   @tetris_19:
0000507E  6E65 776C 8247          dc.b      110,101,119,108,105,110,101,49,0
00005082  696E 6531 
00005086  00        
                    8248   @tetris_20:
00005088  0A53 636F 8249          dc.b      10,83,99,111,114,101,58,32,37,100,10,0
0000508C  7265 3A20 
00005090  2564 0A00 
                    8250   @tetris_21:
00005094  7363 6F72 8251          dc.b      115,99,111,114,101,112,114,105,110,116,0
00005098  6570 7269 
0000509C  6E74 00   
                    8252   @tetris_22:
000050A0  0A47 616D 8253          dc.b      10,71,97,109,101,32,111,118,101,114,33,10,0
000050A4  6520 6F76 
000050A8  6572 210A 
000050AC  00        
                    8254          section   data
000050AE            8255                   align
          0000 50AE 8256   DataStart       equ       *
                    8257   
                    8258   *********************************************************************************************************
                    8259   * Data Section for Initialised Data - these will be placed in rom as constants and have to be copied
                    8260   * to ram as part of the CStart routine in this file
                    8261   *********************************************************************************************************
                    8262   
                    8263   @itoa_1:
000050AE  2D32 3134 8264          dc.b      45,50,49,52,55,52,56,51,54,52,56,0
000050B2  3734 3833 
000050B6  3634 3800 
                    8265          section   bss
000050BA            8266                   align
          0000 50BA 8267   DataEnd         equ     *                       this label will equate to the address of the last byte of global variable in it
                    8268   
                    8269   *********************************************************************************************************
                    8270   * Section for Uninitialised Data held in ROM as constants
                    8271   *********************************************************************************************************
                    8272   
08030000            8273                   org     RamVectorTable          Ram based vector table must be stored here otherwise InstallException Handler will not work
          0000 000C 8274   DataLength      equ     DataEnd-DataStart       length of data needed to copy to Ram on bootup
                    8275   
                    8276   
08030000            8277   bss             org       bss
                    8278   
                    8279   *********************************************************************************************************
                    8280   * Build a ram based vector table for interrupts so we can install our own Exception Handlers in C code at run time
                    8281   * install the exception handler using the C function InstallExceptionHandler()
                    8282   *********************************************************************************************************
                    8283   
                    8284   
                    8285   
08030000            8286   VInitialSP       ds.l    1      dummy as we can't really install a handler for this
08030004            8287   VInitialPC       ds.l    1      dummy as we can't reallin install a handler for this
08030008            8288   VBusError        ds.l    1      storage for address of Bus Error Handler
0803000C            8289   VAddressError    ds.l    1      storage for address of Address Error Handler
08030010            8290   VIllegalInstr    ds.l    1      storage for address of Illegal Instruction handler
08030014            8291   VDividebyZero    ds.l    1      storage for address of divide by zero handler
08030018            8292   VCheck           ds.l    1      ditto
0803001C            8293   VTrapV           ds.l    1      ditto
08030020            8294   VPrivilege       ds.l    1      ditto
08030024            8295   VTrace           ds.l    1
08030028            8296   VLine1010emul    ds.l    1
0803002C            8297   VLine1111emul    ds.l    1
08030030            8298   VUnassigned1     ds.l    1
08030034            8299   VUnassigned2     ds.l    1
08030038            8300   VUnassigned3     ds.l    1
0803003C            8301   VUninit_IRQ      ds.l    1
08030040            8302   VUnassigned4     ds.l    1
08030044            8303   VUnassigned5     ds.l    1
08030048            8304   VUnassigned6     ds.l    1
0803004C            8305   VUnassigned7     ds.l    1
08030050            8306   VUnassigned8     ds.l    1
08030054            8307   VUnassigned9     ds.l    1
08030058            8308   VUnassigned10    ds.l    1
0803005C            8309   VUnassigned11    ds.l    1
08030060            8310   VSpuriousIRQ     ds.l    1
                    8311   
                    8312   * Interrupt handlers Vector 25-31
08030064            8313   VL1IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030068            8314   VL2IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0803006C            8315   VL3IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030070            8316   VL4IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030074            8317   VL5IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030078            8318   VL6IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0803007C            8319   VL7IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
                    8320   
                    8321   * Trap Handler vectors 32-47
08030080            8322   VTrap0           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030084            8323   VTrap1           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030088            8324   VTrap2           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0803008C            8325   VTrap3           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030090            8326   VTrap4           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030094            8327   VTrap5           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030098            8328   VTrap6           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0803009C            8329   VTrap7           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300A0            8330   VTrap8           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300A4            8331   VTrap9           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300A8            8332   VTrap10          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300AC            8333   VTrap11          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300B0            8334   VTrap12          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300B4            8335   VTrap13          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300B8            8336   VTrap14          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300BC            8337   VTrap15          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
                    8338   
                    8339   * the remaining exceptions are unassigned in the 68000 so no need to allocate storage for them here
                    8340   
                    8341   ***********************************************************************************************************
                    8342   * Other Variables
                    8343   ***********************************************************************************************************
                    8344   *__DebugA5       ds.l    1
                    8345   *__UserA5        ds.l    1
                    8346   
                    8347   ***********************************************************************************************************
080300C0            8348   __ungetbuf:     ds.l    1       ; ungetbuffer for stdio functions
080300C4            8349   __allocp:       ds.l    0       ; start of allocation units
080300C4            8350   __heap:         ds.l    0       ; pointers for malloc functions
                    8351   
                    8352   *__himem:       ds.l    himem            ; highest memory location + 1
                    8353   *__stklen:      ds.l    stklen           ; default stack size
                    8354   
                    8355   *********************************************************************************************************
                    8356   * Section for Heap
                    8357   *********************************************************************************************************
                    8358   
                    8359   _i:
080300C4            8360          ds.b      4
                    8361   _x:
080300C8            8362          ds.b      4
                    8363   _y:
080300CC            8364          ds.b      4
                    8365   _z:
080300D0            8366          ds.b      4
                    8367   _PortA_Count:
080300D4            8368          ds.b      4
                    8369   _Trace:
080300D8            8370          ds.b      4
                    8371   _GoFlag:
080300DC            8372          ds.b      4
                    8373   _Echo:
080300E0            8374          ds.b      4
                    8375   _d0:
080300E4            8376          ds.b      4
                    8377   _d1:
080300E8            8378          ds.b      4
                    8379   _d2:
080300EC            8380          ds.b      4
                    8381   _d3:
080300F0            8382          ds.b      4
                    8383   _d4:
080300F4            8384          ds.b      4
                    8385   _d5:
080300F8            8386          ds.b      4
                    8387   _d6:
080300FC            8388          ds.b      4
                    8389   _d7:
08030100            8390          ds.b      4
                    8391   _a0:
08030104            8392          ds.b      4
                    8393   _a1:
08030108            8394          ds.b      4
                    8395   _a2:
0803010C            8396          ds.b      4
                    8397   _a3:
08030110            8398          ds.b      4
                    8399   _a4:
08030114            8400          ds.b      4
                    8401   _a5:
08030118            8402          ds.b      4
                    8403   _a6:
0803011C            8404          ds.b      4
                    8405   _PC:
08030120            8406          ds.b      4
                    8407   _SSP:
08030124            8408          ds.b      4
                    8409   _USP:
08030128            8410          ds.b      4
                    8411   _SR:
0803012C            8412          ds.b      2
                    8413   _BreakPointAddress:
0803012E            8414          ds.b      32
                    8415   _BreakPointInstruction:
0803014E            8416          ds.b      16
                    8417   _BreakPointSetOrCleared:
0803015E            8418          ds.b      32
                    8419   _InstructionSize:
0803017E            8420          ds.b      4
                    8421   _WatchPointAddress:
08030182            8422          ds.b      32
                    8423   _WatchPointSetOrCleared:
080301A2            8424          ds.b      32
                    8425   _WatchPointString:
080301C2            8426          ds.b      800
                    8427   _TempString:
080304E2            8428          ds.b      100
                    8429   _Table:
08030546            8430          ds.b      300
                    8431   _tetris_score:
08030672            8432          ds.b      4
                    8433   _GameOn:
08030676            8434          ds.b      1
                    8435   _tetris_timer:
08030678            8436          ds.b      4
                    8437   _octl:
0803067C            8438          ds.b      1
                    8439   _current:
0803067E            8440          ds.b      28
                    8441   _ShapesArray:
0803069A            8442          ds.b      196
                    8443   _Tetris_Speed:
0803075E            8444          ds.b      8
                    8445   _printw_x:
08030766            8446          ds.b      4
                    8447   _printw_y:
0803076A            8448          ds.b      4
                    8449   _cx:
0803076E            8450          ds.b      4
                    8451   _cy:
08030772            8452          ds.b      4
                    8453   _cl:
08030776            8454          ds.b      4
                    8455   _timer_count:
0803077A            8456          ds.b      4
                    8457          section   heap
0803077E            8458                   align
          0803 077E 8459   bssEnd          equ *                   end of storage space for unitialised variables
                    8460   *                                       we have to copy all initialised variable from rom to here at startup
          0803 077E 8461   heap   equ       *
0803077E            8462                    align
          0000 0000

Assembly errors: 0
