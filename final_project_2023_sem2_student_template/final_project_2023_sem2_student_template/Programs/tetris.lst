680x0 MACRO ASSEMBLER   Version 5.00   (c) 1992-2005 Peter J. Fondse

Date: 12 Apr 2024      Time: 17:16:57          Source: C:\USERS\10054\ONEDRIVE\CPEN 412 FINAL PROJECT\FINAL_PROJECT_2023_SEM2_STUDENT_TEMPLATE\FINAL_PROJECT_2023_SEM2_STUDENT_TEMPLATE\PROGRAMS\TETRIS.SRC

                       1          section   code
                       2   ; for initial stack use $08040000 if your system uses SRAM for main memory (top of 256kbyte SRAM space)
                       3   ; When your system is converted to use DRAM for main memory set this constant to $0C000000 (top of 64MByte DRAM space
                       4   
          0804 0000    5   StackPointerVal     equ $08040000      when using sram
                       6   ;StackPointerVal     equ $0C000000      when using dram
                       7   
                       8   ; define RamVectorTable as $0803000 if your system uses SRAM for main memory
                       9   ; When your system is converted to use DRAM for main memory define RamVectorTable constant as $0B000000 (top of 64MByte DRAM space)
                      10   
          0803 0000   11   RamVectorTable      equ $08030000      when using sram
                      12   ;RamVectorTable      equ $0B000000      when using dram
                      13   
                      14   
                      15   
                      16   ; CSTART.ASM  -  C startup-code for Debug Monitor
00000000              17                   align
                      18   
00000000              19                   org $00000000          ;start of rom based vector table, 68k hard wired to expect this at $0
                      20   
00000000  0804 0000   21   InitialSP       dc.l StackPointerVal   ;initial supervisor state stack pointer(stack decrements first before being used)
00000004  0000 0400   22   InitialPC       dc.l start             ;address of 1st instruction of program after a reset
00000008  0000 0796   23   BusError        dc.l E_BErro           ;bus error - stop program
0000000C  0000 07A8   24   AddressError    dc.l E_AErro           ;address error - stop program
00000010  0000 07BA   25   IllegalInstr    dc.l E_IInst           ;illegal instruction - stop program
00000014  0000 07CC   26   DividebyZero    dc.l E_DZero           ;divide by zero error - stop program
00000018  0000 07DE   27   Check           dc.l E_Check           ;Check instruction - stop program
0000001C  0000 07F0   28   TrapV           dc.l E_Trapv           ;Trapv instruction - stop program
00000020  0000 0802   29   Privilege       dc.l E_Priv            ;privilige violation - stop program
00000024  0000 0814   30   Trace           dc.l E_Trace           ;stop on trace
00000028  0000 0826   31   Line1010emul    dc.l E_1010            ;1010 instructions stop
0000002C  0000 0838   32   Line1111emul    dc.l E_1111            ;1111 instructions stop
00000030  0000 084A   33   Unassigned1     dc.l E_Unnas1           ;unassigned vector
00000034  0000 084A   34   Unassigned2     dc.l E_Unnas2           ;unassigned vector
00000038  0000 084A   35   Unassigned3     dc.l E_Unnas3           ;unassigned vector
0000003C  0000 084A   36   Uninit_IRQ      dc.l E_UnitI           ;uninitialised interrupt
00000040  0000 084A   37   Unassigned4     dc.l E_Unnas4           ;unassigned vector
00000044  0000 084A   38   Unassigned5     dc.l E_Unnas5           ;unassigned vector
00000048  0000 084A   39   Unassigned6     dc.l E_Unnas6           ;unassigned vector
0000004C  0000 084A   40   Unassigned7     dc.l E_Unnas7           ;unassigned vector
00000050  0000 084A   41   Unassigned8     dc.l E_Unnas8           ;unassigned vector
00000054  0000 084A   42   Unassigned9     dc.l E_Unnas9           ;unassigned vector
00000058  0000 084A   43   Unassigned10    dc.l E_Unnas10           ;unassigned vector
0000005C  0000 084A   44   Unassigned11    dc.l E_Unnas11           ;unassigned vector
00000060  0000 084A   45   SpuriousIRQ     dc.l E_Spuri           ;stop on spurious irq
                      46   *
                      47   *
00000064  0000 042E   48   Level1IRQ       dc.l Level1RamISR
00000068  0000 0440   49   Level2IRQ       dc.l Level2RamISR
0000006C  0000 0452   50   Level3IRQ       dc.l Level3RamISR
00000070  0000 0464   51   Level4IRQ       dc.l Level4RamISR
00000074  0000 0476   52   Level5IRQ       dc.l Level5RamISR
00000078  0000 0580   53   Level6IRQ       dc.l Level6RamISR
0000007C  0000 0592   54   Level7IRQ       dc.l Level7RamISR
                      55   *
                      56   *
00000080  0000 05A4   57   Trap0           dc.l Trap0RamISR        ; User installed trap handler
00000084  0000 05B6   58   Trap1           dc.l Trap1RamISR        ; User installed trap handler
00000088  0000 05C8   59   Trap2           dc.l Trap2RamISR        ; User installed trap handler
0000008C  0000 05DA   60   Trap3           dc.l Trap3RamISR        ; User installed trap handler
00000090  0000 05EC   61   Trap4           dc.l Trap4RamISR        ; User installed trap handler
00000094  0000 05FE   62   Trap5           dc.l Trap5RamISR        ; User installed trap handler
00000098  0000 0610   63   Trap6           dc.l Trap6RamISR        ; User installed trap handler
0000009C  0000 0622   64   Trap7           dc.l Trap7RamISR        ; User installed trap handler
000000A0  0000 0634   65   Trap8           dc.l Trap8RamISR        ; User installed trap handler
000000A4  0000 0646   66   Trap9           dc.l Trap9RamISR        ; User installed trap handler
000000A8  0000 0658   67   Trap10          dc.l Trap10RamISR       ; User installed trap handler
000000AC  0000 066A   68   Trap11          dc.l Trap11RamISR       ; User installed trap handler
000000B0  0000 067C   69   Trap12          dc.l Trap12RamISR       ; User installed trap handler
000000B4  0000 068E   70   Trap13          dc.l Trap13RamISR       ; User installed trap handler
000000B8  0000 06A0   71   Trap14          dc.l Trap14RamISR       ; User installed trap handler
000000BC  0000 0790   72   Trap15          dc.l Trap15RamISR       ; User installed trap handler
                      73   
                      74   *
                      75   * Other vectors 64-255 are users vectors for autovectored IO device (not implemented in TG68)
                      76   *
                      77   
00000400              78                   org       $00000400
                      79   
00000400  46FC 2700   80   start:          move.w     #$2700,SR             ;set interrupts to disable until later
                      81   
                      82   *************************************************************************************
                      83   ** add some 68000 instruction to read and write to memory, IO etc. This doesn't do anything
                      84   ** important, it just creates read and write bus cycles to specific addresses which
                      85   ** help with debugging hardware in Quartus simulations
                      86   **************************************************************************************
                      87   
                      88                   ; some important initialisation do not modify
00000404  23FC FFFF   89                   move.l    #-1,__ungetbuf  ; unget-buffer for keyboard input
00000408  FFFF 0803 
0000040C  00C0      
0000040E  23FC 0000   90                   move.l    #0,__allocp     ; pointer to allocated memory for malloc-function
00000412  0000 0803 
00000416  00C4      
00000418  23FC 0803   91                   move.l    #heap,__heap    ; pointer to free memory
0000041C  08B4 0803 
00000420  00C4      
00000422  46FC 2000   92                   move.w    #$2000,SR       ; enable interrupts
                      93   
00000426  4EB9 0000   94   mainloop        jsr       _main
0000042A  2204      
0000042C  60F8        95                   bra       mainloop
                      96   
                      97   *********************************************************************************************************
                      98   * Code to call Ram Based Interrupt handler and other exeception handler code
                      99   *********************************************************************************************************
0000042E  48E7 FFFE  100   Level1RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000432  2079 0803  101                   move.l    VL1IRQ,a0               get ram based address into a0
00000436  0064      
00000438  4E90       102                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000043A  4CDF 7FFF  103                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000043E  4E73       104                   rte
00000440  48E7 FFFE  105   Level2RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000444  2079 0803  106                   move.l    VL2IRQ,a0               get ram based address into a0
00000448  0068      
0000044A  4E90       107                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000044C  4CDF 7FFF  108                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000450  4E73       109                   rte
00000452  48E7 FFFE  110   Level3RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000456  2079 0803  111                   move.l    VL3IRQ,a0               get ram based address into a0
0000045A  006C      
0000045C  4E90       112                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000045E  4CDF 7FFF  113                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000462  4E73       114                   rte
00000464  48E7 FFFE  115   Level4RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000468  2079 0803  116                   move.l    VL4IRQ,a0               get ram based address into a0
0000046C  0070      
0000046E  4E90       117                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
00000470  4CDF 7FFF  118                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000474  4E73       119                   rte
                     120   
                     121   * Trace trap Handler
                     122   
                     123   Level5RamISR
                     124   *
                     125   **         Copy 68000 registers from debug monitor Variables,
                     126   *
                     127   *
00000476  23FC 0000  128                   move.l    #1,_Trace              switch on Trace Mode
0000047A  0001 0803 
0000047E  00D8      
00000480  13FC 0000  129                   move.b    #$0,$0040000A          turn off a trace exception so we don't when generate a trace when disassembling instruction in the register dump (disassembling causes access to use program)
00000484  0040 000A 
00000488  33DF 0803  130                   move.w    (sp)+,_SR              get at the users status register pointed to by stack pointer and copy
0000048C  012C      
0000048E  23DF 0803  131                   move.l    (sp)+,_PC              get at the users program counter and copy
00000492  0120      
                     132   *
00000494  23CF 0803  133                   move.l    SP,_SSP                copy system stack pointer to debug monitor variable
00000498  0124      
0000049A  23C0 0803  134                   move.l    d0,_d0
0000049E  00E4      
000004A0  23C1 0803  135                   move.l    d1,_d1
000004A4  00E8      
000004A6  23C2 0803  136                   move.l    d2,_d2
000004AA  00EC      
000004AC  23C3 0803  137                   move.l    d3,_d3
000004B0  00F0      
000004B2  23C4 0803  138                   move.l    d4,_d4
000004B6  00F4      
000004B8  23C5 0803  139                   move.l    d5,_d5
000004BC  00F8      
000004BE  23C6 0803  140                   move.l    d6,_d6
000004C2  00FC      
000004C4  23C7 0803  141                   move.l    d7,_d7
000004C8  0100      
                     142   *
000004CA  23C8 0803  143                   move.l    a0,_a0
000004CE  0104      
000004D0  23C9 0803  144                   move.l    a1,_a1
000004D4  0108      
000004D6  23CA 0803  145                   move.l    a2,_a2
000004DA  010C      
000004DC  23CB 0803  146                   move.l    a3,_a3
000004E0  0110      
000004E2  23CC 0803  147                   move.l    a4,_a4
000004E6  0114      
000004E8  23CD 0803  148                   move.l    a5,_a5
000004EC  0118      
000004EE  23CE 0803  149                   move.l    a6,_a6
000004F2  011C      
000004F4  4E68       150                   move.l    usp,a0
000004F6  23C8 0803  151                   move.l    a0,_USP
000004FA  0128      
                     152   *
000004FC  2079 0803  153                   move.l    VL5IRQ,a0              get ram based address into a0, trace exception for next instruction will be generated in Menu SPACE command
00000500  0074      
00000502  4E90       154                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     155   
                     156   ** After trace, reload 68000 registers with new values before continuing
                     157   
00000504  2039 0803  158                   move.l   _d0,d0
00000508  00E4      
0000050A  2239 0803  159                   move.l   _d1,d1
0000050E  00E8      
00000510  2439 0803  160                   move.l   _d2,d2
00000514  00EC      
00000516  2639 0803  161                   move.l   _d3,d3
0000051A  00F0      
0000051C  2839 0803  162                   move.l   _d4,d4
00000520  00F4      
00000522  2A39 0803  163                   move.l   _d5,d5
00000526  00F8      
00000528  2C39 0803  164                   move.l   _d6,d6
0000052C  00FC      
0000052E  2E39 0803  165                   move.l   _d7,d7
00000532  0100      
                     166   
00000534  2079 0803  167                   move.l   _USP,a0
00000538  0128      
0000053A  4E60       168                   move.l   a0,USP                     load user stack pointer
0000053C  2079 0803  169                   move.l   _a0,a0
00000540  0104      
00000542  2279 0803  170                   move.l   _a1,a1
00000546  0108      
00000548  2479 0803  171                   move.l   _a2,a2
0000054C  010C      
0000054E  2679 0803  172                   move.l   _a3,a3
00000552  0110      
00000554  2879 0803  173                   move.l   _a4,a4
00000558  0114      
0000055A  2A79 0803  174                   move.l   _a5,a5
0000055E  0118      
00000560  2C79 0803  175                   move.l   _a6,a6
00000564  011C      
                     176   
00000566  2E79 0803  177                   move.l   _SSP,sp
0000056A  0124      
0000056C  2F39 0803  178                   move.l   _PC,-(sp)
00000570  0120      
00000572  3F39 0803  179                   move.w   _SR,-(sp)
00000576  012C      
00000578  11F8 0074  180                   move.b    $00000074,$0	          read trace exception vector after accessing disassembly to reset the trace request causes by disassembling program above
0000057C  0000      
0000057E  4E73       181                   rte
                     182   
                     183   * address trap handler
                     184   
00000580  48E7 FFFE  185   Level6RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000584  2079 0803  186                   move.l    VL6IRQ,a0               get ram based address into a0
00000588  0078      
0000058A  4E90       187                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000058C  4CDF 7FFF  188                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000590  4E73       189                   rte
                     190   
00000592  48E7 FFFE  191   Level7RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000596  2079 0803  192                   move.l    VL7IRQ,a0               get ram based address into a0
0000059A  007C      
0000059C  4E90       193                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000059E  4CDF 7FFF  194                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005A2  4E73       195                   rte
                     196   
                     197   
                     198   ********************************************************************************************************
                     199   * Ram based Trap handler and other exeception handler code
                     200   *********************************************************************************************************
                     201   
000005A4  48E7 FFFE  202   Trap0RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005A8  2079 0803  203                   move.l    VTrap0,a0                get ram based address into a0
000005AC  0080      
000005AE  4E90       204                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000005B0  4CDF 7FFF  205                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005B4  4E73       206                   rte
                     207   
000005B6  48E7 FFFE  208   Trap1RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005BA  2079 0803  209                   move.l    VTrap1,a0                get ram based address into a0
000005BE  0084      
000005C0  4E90       210                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000005C2  4CDF 7FFF  211                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005C6  4E73       212                   rte
                     213   
000005C8  48E7 FFFE  214   Trap2RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005CC  2079 0803  215                   move.l    VTrap2,a0                get ram based address into a0
000005D0  0088      
000005D2  4E90       216                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000005D4  4CDF 7FFF  217                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005D8  4E73       218                   rte
                     219   
000005DA  48E7 FFFE  220   Trap3RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005DE  2079 0803  221                   move.l    VTrap3,a0                get ram based address into a0
000005E2  008C      
000005E4  4E90       222                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000005E6  4CDF 7FFF  223                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005EA  4E73       224                   rte
                     225   
000005EC  48E7 FFFE  226   Trap4RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005F0  2079 0803  227                   move.l    VTrap4,a0                get ram based address into a0
000005F4  0090      
000005F6  4E90       228                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000005F8  4CDF 7FFF  229                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005FC  4E73       230                   rte
                     231   
000005FE  48E7 FFFE  232   Trap5RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000602  2079 0803  233                   move.l    VTrap5,a0                get ram based address into a0
00000606  0094      
00000608  4E90       234                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000060A  4CDF 7FFF  235                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000060E  4E73       236                   rte
                     237   
00000610  48E7 FFFE  238   Trap6RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000614  2079 0803  239                   move.l    VTrap6,a0                get ram based address into a0
00000618  0098      
0000061A  4E90       240                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000061C  4CDF 7FFF  241                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000620  4E73       242                   rte
                     243   
00000622  48E7 FFFE  244   Trap7RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000626  2079 0803  245                   move.l    VTrap7,a0                get ram based address into a0
0000062A  009C      
0000062C  4E90       246                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000062E  4CDF 7FFF  247                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000632  4E73       248                   rte
                     249   
00000634  48E7 FFFE  250   Trap8RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000638  2079 0803  251                   move.l    VTrap8,a0                get ram based address into a0
0000063C  00A0      
0000063E  4E90       252                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000640  4CDF 7FFF  253                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000644  4E73       254                   rte
                     255   
00000646  48E7 FFFE  256   Trap9RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000064A  2079 0803  257                   move.l    VTrap9,a0                get ram based address into a0
0000064E  00A4      
00000650  4E90       258                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000652  4CDF 7FFF  259                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000656  4E73       260                   rte
                     261   
00000658  48E7 FFFE  262   Trap10RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000065C  2079 0803  263                   move.l    VTrap10,a0                get ram based address into a0
00000660  00A8      
00000662  4E90       264                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000664  4CDF 7FFF  265                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000668  4E73       266                   rte
                     267   
0000066A  48E7 FFFE  268   Trap11RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000066E  2079 0803  269                   move.l    VTrap11,a0                get ram based address into a0
00000672  00AC      
00000674  4E90       270                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000676  4CDF 7FFF  271                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000067A  4E73       272                   rte
                     273   
0000067C  48E7 FFFE  274   Trap12RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000680  2079 0803  275                   move.l    VTrap12,a0                get ram based address into a0
00000684  00B0      
00000686  4E90       276                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000688  4CDF 7FFF  277                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000068C  4E73       278                   rte
                     279   
0000068E  48E7 FFFE  280   Trap13RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000692  2079 0803  281                   move.l    VTrap13,a0                get ram based address into a0
00000696  00B4      
00000698  4E90       282                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000069A  4CDF 7FFF  283                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000069E  4E73       284                   rte
                     285   
                     286   Trap14RamISR    ;Break Point Handler
                     287   *
                     288   **         Copy 68000 registers from debug monitor Variables
                     289   *
000006A0  23FC 0000  290                   move.l    #1,_Trace      switch on Trace Mode
000006A4  0001 0803 
000006A8  00D8      
000006AA  33DF 0803  291                   move.w    (sp)+,_SR       get at the users status register pointed to by stack pointer and copy
000006AE  012C      
000006B0  23DF 0803  292                   move.l    (sp)+,_PC      get at the users program counter and copy
000006B4  0120      
                     293   *
000006B6  23C0 0803  294                   move.l    d0,_d0
000006BA  00E4      
000006BC  23C1 0803  295                   move.l    d1,_d1
000006C0  00E8      
000006C2  23C2 0803  296                   move.l    d2,_d2
000006C6  00EC      
000006C8  23C3 0803  297                   move.l    d3,_d3
000006CC  00F0      
000006CE  23C4 0803  298                   move.l    d4,_d4
000006D2  00F4      
000006D4  23C5 0803  299                   move.l    d5,_d5
000006D8  00F8      
000006DA  23C6 0803  300                   move.l    d6,_d6
000006DE  00FC      
000006E0  23C7 0803  301                   move.l    d7,_d7
000006E4  0100      
                     302   *
000006E6  23C8 0803  303                   move.l    a0,_a0
000006EA  0104      
000006EC  23C9 0803  304                   move.l    a1,_a1
000006F0  0108      
000006F2  23CA 0803  305                   move.l    a2,_a2
000006F6  010C      
000006F8  23CB 0803  306                   move.l    a3,_a3
000006FC  0110      
000006FE  23CC 0803  307                   move.l    a4,_a4
00000702  0114      
00000704  23CD 0803  308                   move.l    a5,_a5
00000708  0118      
0000070A  23CE 0803  309                   move.l    a6,_a6
0000070E  011C      
00000710  4E68       310                   move.l    USP,a0
00000712  23C8 0803  311                   move.l    a0,_USP
00000716  0128      
                     312   *
00000718  2079 0803  313                   move.l    VTrap14,a0             get ram based address into a0
0000071C  00B8      
0000071E  4E90       314                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     315   
                     316   ** After breakpoint reload 68000 registers with new values before continuing
                     317   
                     318   *                move.b    #$ff,$0040000A     generate a trace exception for the next instruction
00000720  2039 0803  319                   move.l   _d0,d0
00000724  00E4      
00000726  2239 0803  320                   move.l   _d1,d1
0000072A  00E8      
0000072C  2439 0803  321                   move.l   _d2,d2
00000730  00EC      
00000732  2639 0803  322                   move.l   _d3,d3
00000736  00F0      
00000738  2839 0803  323                   move.l   _d4,d4
0000073C  00F4      
0000073E  2A39 0803  324                   move.l   _d5,d5
00000742  00F8      
00000744  2C39 0803  325                   move.l   _d6,d6
00000748  00FC      
0000074A  2E39 0803  326                   move.l   _d7,d7
0000074E  0100      
                     327   
00000750  2079 0803  328                   move.l   _USP,a0
00000754  0128      
00000756  4E60       329                   move.l   a0,USP        load user stack pointer A7
00000758  2079 0803  330                   move.l   _a0,a0
0000075C  0104      
0000075E  2279 0803  331                   move.l   _a1,a1
00000762  0108      
00000764  2479 0803  332                   move.l   _a2,a2
00000768  010C      
0000076A  2679 0803  333                   move.l   _a3,a3
0000076E  0110      
00000770  2879 0803  334                   move.l   _a4,a4
00000774  0114      
00000776  2A79 0803  335                   move.l   _a5,a5
0000077A  0118      
0000077C  2C79 0803  336                   move.l   _a6,a6
00000780  011C      
                     337   
00000782  2F39 0803  338                   move.l   _PC,-(sp)
00000786  0120      
00000788  3F39 0803  339                   move.w   _SR,-(sp)
0000078C  012C      
0000078E  4E73       340                   rte
                     341   
00000790  4EF9 0000  342   Trap15RamISR    jmp     _CallDebugMonitor
00000794  1E32      
                     343   *                movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                     344   *                move.l    VTrap15,a0                get ram based address into a0
                     345   *                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                     346   *                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                     347   *                rte
                     348   
                     349   *********************************************************************************************************
                     350   *Default exception handler for everything without a specific handler
                     351   *********************************************************************************************************
                     352   
                     353   *
                     354   **              Jump here for each unhandled exception
                     355   **              If you need to, MAKE SURE YOU SAVE ALL IMPORTANT REGISTERS AND RESTORE THEM BEFORE RETURNING (IF APPROPRIATE)
                     356   *
                     357   
00000796  48E7 FFFE  358   E_BErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000079A  2079 0803  359                   move.l    VBusError,a0            get ram based address into a0
0000079E  0008      
000007A0  4E90       360                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000007A2  4CDF 7FFF  361                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000007A6  4E73       362                   rte
000007A8  48E7 FFFE  363   E_AErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000007AC  2079 0803  364                   move.l    VAddressError,a0        get ram based address into a0
000007B0  000C      
000007B2  4E90       365                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000007B4  4CDF 7FFF  366                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000007B8  4E73       367                   rte
000007BA  48E7 FFFE  368   E_IInst         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000007BE  2079 0803  369                   move.l    VIllegalInstr,a0        get ram based address into a0
000007C2  0010      
000007C4  4E90       370                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000007C6  4CDF 7FFF  371                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000007CA  4E73       372                   rte
000007CC  48E7 FFFE  373   E_DZero         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000007D0  2079 0803  374                   move.l    VDividebyZero,a0        get ram based address into a0
000007D4  0014      
000007D6  4E90       375                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000007D8  4CDF 7FFF  376                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000007DC  4E73       377                   rte
000007DE  48E7 FFFE  378   E_Check         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000007E2  2079 0803  379                   move.l    VCheck,a0               get ram based address into a0
000007E6  0018      
000007E8  4E90       380                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000007EA  4CDF 7FFF  381                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000007EE  4E73       382                   rte
000007F0  48E7 FFFE  383   E_Trapv         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000007F4  2079 0803  384                   move.l    VTrapV,a0               get ram based address into a0
000007F8  001C      
000007FA  4E90       385                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000007FC  4CDF 7FFF  386                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000800  4E73       387                   rte
00000802  48E7 FFFE  388   E_Priv          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000806  2079 0803  389                   move.l    VPrivilege,a0           get ram based address into a0
0000080A  0020      
0000080C  4E90       390                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000080E  4CDF 7FFF  391                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000812  4E73       392                   rte
00000814  48E7 FFFE  393   E_Trace         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000818  2079 0803  394                   move.l    VTrace,a0               get ram based address into a0
0000081C  0024      
0000081E  4E90       395                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000820  4CDF 7FFF  396                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000824  4E73       397                   rte
00000826  48E7 FFFE  398   E_1010          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000082A  2079 0803  399                   move.l    VLine1010emul,a0        get ram based address into a0
0000082E  0028      
00000830  4E90       400                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000832  4CDF 7FFF  401                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000836  4E73       402                   rte
00000838  48E7 FFFE  403   E_1111          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000083C  2079 0803  404                   move.l    VLine1111emul,a0        get ram based address into a0
00000840  002C      
00000842  4E90       405                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000844  4CDF 7FFF  406                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000848  4E73       407                   rte
                     408   E_Unnas1
                     409   E_Unnas2
                     410   E_Unnas3
                     411   E_UnitI
                     412   E_Unnas4
                     413   E_Unnas5
                     414   E_Unnas6
                     415   E_Unnas7
                     416   E_Unnas8
                     417   E_Unnas9
                     418   E_Unnas10
                     419   E_Unnas11
                     420   E_Spuri
0000084A  60FE       421   _stop            bra _stop                         stop
                     422   ***************************************************************************************************
                     423   * Go() function in debug monitor
                     424   ***************************************************************************************************
                     425   _go
0000084C  2E79 0803  426                   move.l   _SSP,a7        load system stack pointer (remember we are in supervisor mode when running this so a7 is the System stack pointer)
00000850  0124      
00000852  2F39 0803  427                   move.l   _PC,-(sp)      copy debug monitor PC variable to the stack
00000856  0120      
00000858  3F39 0803  428                   move.w   _SR,-(sp)      copy debug monitor status reg to the stack
0000085C  012C      
                     429   
0000085E  1038 0078  430                   move.b   $00000078,d0  remove any spurious address exception arising after power on
00000862  2039 0803  431                   move.l   _d0,d0
00000866  00E4      
00000868  2239 0803  432                   move.l   _d1,d1
0000086C  00E8      
0000086E  2439 0803  433                   move.l   _d2,d2
00000872  00EC      
00000874  2639 0803  434                   move.l   _d3,d3
00000878  00F0      
0000087A  2839 0803  435                   move.l   _d4,d4
0000087E  00F4      
00000880  2A39 0803  436                   move.l   _d5,d5
00000884  00F8      
00000886  2C39 0803  437                   move.l   _d6,d6
0000088A  00FC      
0000088C  2E39 0803  438                   move.l   _d7,d7
00000890  0100      
                     439   
00000892  2079 0803  440                   move.l   _USP,a0
00000896  0128      
00000898  4E60       441                   move.l   a0,USP        load user stack pointer (remember we are in supervisor mode when running this, so a7 is the System stack pointer)
0000089A  2079 0803  442                   move.l   _a0,a0
0000089E  0104      
000008A0  2279 0803  443                   move.l   _a1,a1
000008A4  0108      
000008A6  2479 0803  444                   move.l   _a2,a2
000008AA  010C      
000008AC  2679 0803  445                   move.l   _a3,a3
000008B0  0110      
000008B2  2879 0803  446                   move.l   _a4,a4
000008B6  0114      
000008B8  2A79 0803  447                   move.l   _a5,a5
000008BC  0118      
000008BE  2C79 0803  448                   move.l   _a6,a6
000008C2  011C      
000008C4  4E73       449                   rte                    load the status reg and PC from the stack and commence running
                     450                                          *used to be rte but this didn't load the status byte
                     451   
                     452   ; C:\USERS\10054\ONEDRIVE\CPEN 412 FINAL PROJECT\FINAL_PROJECT_2023_SEM2_STUDENT_TEMPLATE\FINAL_PROJECT_2023_SEM2_STUDENT_TEMPLATE\PROGRAMS\DEBUGMONITORCODE\M68KDEBUG (NO DISASSEMBLER).C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                     453   ; #include "DebugMonitor.h"
                     454   ; #include "say_phoneme.h"
                     455   ; // use 08030000 for a system running from sram or 0B000000 for system running from dram
                     456   ; #define StartOfExceptionVectorTable 0x08030000
                     457   ; //#define StartOfExceptionVectorTable 0x0B000000
                     458   ; // use 0C000000 for dram or hex 08040000 for sram
                     459   ; #define TopOfStack 0x08040000
                     460   ; //#define TopOfStack 0x0C000000
                     461   ; #define voice *(char*)(0xFF00FFFE)
                     462   ; #define VGA_ADDRESS 0xFFFF0000 
                     463   ; #define octlAddress1 *(char *)(0xFF030001)
                     464   ; #define octlAddress *(char *)(0xFF030000)
                     465   ; /* DO NOT INITIALISE GLOBAL VARIABLES - DO IT in MAIN() */
                     466   ; unsigned int i, x, y, z, PortA_Count;
                     467   ; int     Trace, GoFlag, Echo;                       // used in tracing/single stepping
                     468   ; // 68000 register dump and preintialise value (these can be changed by the user program when it is running, e.g. stack pointer, registers etc
                     469   ; unsigned int d0,d1,d2,d3,d4,d5,d6,d7 ;
                     470   ; unsigned int a0,a1,a2,a3,a4,a5,a6 ;
                     471   ; unsigned int PC, SSP, USP ;
                     472   ; unsigned short int SR;
                     473   ; // Breakpoint variables
                     474   ; unsigned int BreakPointAddress[8];                      //array of 8 breakpoint addresses
                     475   ; unsigned short int BreakPointInstruction[8] ;           // to hold the instruction opcode at the breakpoint
                     476   ; unsigned int BreakPointSetOrCleared[8] ;
                     477   ; unsigned int InstructionSize ;
                     478   ; // watchpoint variables
                     479   ; unsigned int WatchPointAddress[8];                      //array of 8 breakpoint addresses
                     480   ; unsigned int WatchPointSetOrCleared[8] ;
                     481   ; char WatchPointString[8][100] ;
                     482   ; char    TempString[100] ;
                     483   ; void Wait1ms(void)
                     484   ; {
                     485   _Wait1ms:
000008C6  2F02       486          move.l    D2,-(A7)
                     487   ; int i;
                     488   ; for (i = 0; i < 1000; i++)
000008C8  4282       489          clr.l     D2
                     490   Wait1ms_1:
000008CA  0C82 0000  491          cmp.l     #1000,D2
000008CE  03E8      
000008D0  6C04       492          bge.s     Wait1ms_3
000008D2  5282       493          addq.l    #1,D2
000008D4  60F4       494          bra       Wait1ms_1
                     495   Wait1ms_3:
000008D6  241F       496          move.l    (A7)+,D2
000008D8  4E75       497          rts
                     498   ; ;
                     499   ; }
                     500   ; void Wait3ms(void)
                     501   ; {
                     502   _Wait3ms:
000008DA  2F02       503          move.l    D2,-(A7)
                     504   ; int i;
                     505   ; for (i = 0; i < 3; i++)
000008DC  4282       506          clr.l     D2
                     507   Wait3ms_1:
000008DE  0C82 0000  508          cmp.l     #3,D2
000008E2  0003      
000008E4  6C08       509          bge.s     Wait3ms_3
                     510   ; Wait1ms();
000008E6  4EB8 08C6  511          jsr       _Wait1ms
000008EA  5282       512          addq.l    #1,D2
000008EC  60F0       513          bra       Wait3ms_1
                     514   Wait3ms_3:
000008EE  241F       515          move.l    (A7)+,D2
000008F0  4E75       516          rts
                     517   ; }
                     518   ; void Wait250ms(void)
                     519   ; {
                     520   _Wait250ms:
000008F2  2F02       521          move.l    D2,-(A7)
                     522   ; int i;
                     523   ; for (i = 0; i < 250; i++)
000008F4  4282       524          clr.l     D2
                     525   Wait250ms_1:
000008F6  0C82 0000  526          cmp.l     #250,D2
000008FA  00FA      
000008FC  6C08       527          bge.s     Wait250ms_3
                     528   ; Wait1ms();
000008FE  4EB8 08C6  529          jsr       _Wait1ms
00000902  5282       530          addq.l    #1,D2
00000904  60F0       531          bra       Wait250ms_1
                     532   Wait250ms_3:
00000906  241F       533          move.l    (A7)+,D2
00000908  4E75       534          rts
                     535   ; }
                     536   ; void Wait500ms(void)
                     537   ; {
                     538   _Wait500ms:
0000090A  2F02       539          move.l    D2,-(A7)
                     540   ; int i;
                     541   ; for (i = 0; i < 500; i++)
0000090C  4282       542          clr.l     D2
                     543   Wait500ms_1:
0000090E  0C82 0000  544          cmp.l     #500,D2
00000912  01F4      
00000914  6C08       545          bge.s     Wait500ms_3
                     546   ; Wait1ms();
00000916  4EB8 08C6  547          jsr       _Wait1ms
0000091A  5282       548          addq.l    #1,D2
0000091C  60F0       549          bra       Wait500ms_1
                     550   Wait500ms_3:
0000091E  241F       551          move.l    (A7)+,D2
00000920  4E75       552          rts
                     553   ; }
                     554   ; void Wait750ms(void)
                     555   ; {
                     556   _Wait750ms:
00000922  2F02       557          move.l    D2,-(A7)
                     558   ; int i;
                     559   ; for (i = 0; i < 750; i++)
00000924  4282       560          clr.l     D2
                     561   Wait750ms_1:
00000926  0C82 0000  562          cmp.l     #750,D2
0000092A  02EE      
0000092C  6C08       563          bge.s     Wait750ms_3
                     564   ; Wait1ms();
0000092E  4EB8 08C6  565          jsr       _Wait1ms
00000932  5282       566          addq.l    #1,D2
00000934  60F0       567          bra       Wait750ms_1
                     568   Wait750ms_3:
00000936  241F       569          move.l    (A7)+,D2
00000938  4E75       570          rts
                     571   ; }
                     572   ; void InstallExceptionHandler( void (*function_ptr)(), int level)
                     573   ; {
                     574   _InstallExceptionHandler:
0000093A  4E56 FFFC  575          link      A6,#-4
                     576   ; volatile long int *RamVectorAddress = (volatile long int *)(StartOfExceptionVectorTable) ;   // pointer to the Ram based interrupt vector table created in Cstart in debug monitor
0000093E  2D7C 0803  577          move.l    #134414336,-4(A6)
00000942  0000 FFFC 
                     578   ; RamVectorAddress[level] = (long int *)(function_ptr);
00000946  206E FFFC  579          move.l    -4(A6),A0
0000094A  202E 000C  580          move.l    12(A6),D0
0000094E  E588       581          lsl.l     #2,D0
00000950  21AE 0008  582          move.l    8(A6),0(A0,D0.L)
00000954  0800      
00000956  4E5E       583          unlk      A6
00000958  4E75       584          rts
                     585   ; }
                     586   ; void say_phoneme   (char phoneme_code) {
                     587   _say_phoneme:
0000095A  4E56 0000  588          link      A6,#0
                     589   ; //you need to write this function
                     590   ; voice = phoneme_code;
0000095E  13EE 000B  591          move.b    11(A6),-16711682
00000962  FF00 FFFE 
00000966  4E5E       592          unlk      A6
00000968  4E75       593          rts
                     594   ; }
                     595   ; void say_Sasha(){
                     596   _say_Sasha:
                     597   ; talkphonemeSS();
0000096A  4EB9 0000  598          jsr       _talkphonemeSS
0000096E  25EC      
                     599   ; talkphonemeAA();
00000970  4EB9 0000  600          jsr       _talkphonemeAA
00000974  23E8      
                     601   ; talkphonemeSH();
00000976  4EB9 0000  602          jsr       _talkphonemeSH
0000097A  25E0      
                     603   ; // talkphonemeHH1();
                     604   ; talkphonemeAA();
0000097C  4EB9 0000  605          jsr       _talkphonemeAA
00000980  23E8      
                     606   ; endword();
00000982  4EB9 0000  607          jsr       _endword
00000986  2A8E      
00000988  4E75       608          rts
                     609   ; }
                     610   ; void say_hello() {
                     611   _say_hello:
                     612   ; talkphonemeHH1();
0000098A  4EB9 0000  613          jsr       _talkphonemeHH1
0000098E  24FC      
                     614   ; talkphonemeEH();
00000990  4EB9 0000  615          jsr       _talkphonemeEH
00000994  2490      
                     616   ; talkphonemeLL();
00000996  4EB9 0000  617          jsr       _talkphonemeLL
0000099A  255C      
                     618   ; talkphonemeAX();
0000099C  4EB9 0000  619          jsr       _talkphonemeAX
000009A0  2424      
                     620   ; talkphonemeOW();
000009A2  4EB9 0000  621          jsr       _talkphonemeOW
000009A6  25A4      
                     622   ; endword();
000009A8  4EB9 0000  623          jsr       _endword
000009AC  2A8E      
000009AE  4E75       624          rts
                     625   ; }
                     626   ; void say_world() {
                     627   _say_world:
                     628   ; talkphonemeWW();
000009B0  4EB9 0000  629          jsr       _talkphonemeWW
000009B4  2658      
                     630   ; talkphonemeER2();
000009B6  4EB9 0000  631          jsr       _talkphonemeER2
000009BA  24B4      
                     632   ; talkphonemeLL();
000009BC  4EB9 0000  633          jsr       _talkphonemeLL
000009C0  255C      
                     634   ; talkphonemeDD1();
000009C2  4EB9 0000  635          jsr       _talkphonemeDD1
000009C6  2460      
                     636   ; endword();
000009C8  4EB9 0000  637          jsr       _endword
000009CC  2A8E      
000009CE  4E75       638          rts
                     639   ; }
                     640   ; /*********************************************************************************************
                     641   ; *Subroutine to initialise the RS232 Port by writing some commands to the internal registers
                     642   ; *********************************************************************************************/
                     643   ; void Init_RS232(void)
                     644   ; {
                     645   _Init_RS232:
                     646   ; RS232_Control = (char)(0x15) ; //  %00010101    divide by 16 clock, set rts low, 8 bits no parity, 1 stop bit transmitter interrupt disabled
000009D0  13FC 0015  647          move.b    #21,4194368
000009D4  0040 0040 
                     648   ; RS232_Baud = (char)(0x1) ;      // program baud rate generator 000 = 230k, 001 = 115k, 010 = 57.6k, 011 = 38.4k, 100 = 19.2, all others = 9600
000009D8  13FC 0001  649          move.b    #1,4194372
000009DC  0040 0044 
000009E0  4E75       650          rts
                     651   ; }
                     652   ; int kbhit(void)
                     653   ; {
                     654   _kbhit:
                     655   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // wait for Rx bit in status register to be '1'
000009E2  1039 0040  656          move.b    4194368,D0
000009E6  0040      
000009E8  C03C 0001  657          and.b     #1,D0
000009EC  0C00 0001  658          cmp.b     #1,D0
000009F0  6604       659          bne.s     kbhit_1
                     660   ; return 1 ;
000009F2  7001       661          moveq     #1,D0
000009F4  6002       662          bra.s     kbhit_3
                     663   kbhit_1:
                     664   ; else
                     665   ; return 0 ;
000009F6  4280       666          clr.l     D0
                     667   kbhit_3:
000009F8  4E75       668          rts
                     669   ; }
                     670   ; /*********************************************************************************************************
                     671   ; **  Subroutine to provide a low level output function to 6850 ACIA
                     672   ; **  This routine provides the basic functionality to output a single character to the serial Port
                     673   ; **  to allow the board to communicate with HyperTerminal Program
                     674   ; **
                     675   ; **  NOTE you do not call this function directly, instead you call the normal putchar() function
                     676   ; **  which in turn calls _putch() below). Other functions like puts(), printf() call putchar() so will
                     677   ; **  call _putch() also
                     678   ; *********************************************************************************************************/
                     679   ; int _putch( int c)
                     680   ; {
                     681   __putch:
000009FA  4E56 0000  682          link      A6,#0
                     683   ; while(((char)(RS232_Status) & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
                     684   _putch_1:
000009FE  1039 0040  685          move.b    4194368,D0
00000A02  0040      
00000A04  C03C 0002  686          and.b     #2,D0
00000A08  0C00 0002  687          cmp.b     #2,D0
00000A0C  6702       688          beq.s     _putch_3
00000A0E  60EE       689          bra       _putch_1
                     690   _putch_3:
                     691   ; ;
                     692   ; (char)(RS232_TxData) = ((char)(c) & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
00000A10  202E 0008  693          move.l    8(A6),D0
00000A14  C03C 007F  694          and.b     #127,D0
00000A18  13C0 0040  695          move.b    D0,4194370
00000A1C  0042      
                     696   ; return c ;                                              // putchar() expects the character to be returned
00000A1E  202E 0008  697          move.l    8(A6),D0
00000A22  4E5E       698          unlk      A6
00000A24  4E75       699          rts
                     700   ; }
                     701   ; /*********************************************************************************************************
                     702   ; **  Subroutine to provide a low level input function to 6850 ACIA
                     703   ; **  This routine provides the basic functionality to input a single character from the serial Port
                     704   ; **  to allow the board to communicate with HyperTerminal Program Keyboard (your PC)
                     705   ; **
                     706   ; **  NOTE you do not call this function directly, instead you call the normal _getch() function
                     707   ; **  which in turn calls _getch() below). Other functions like gets(), scanf() call _getch() so will
                     708   ; **  call _getch() also
                     709   ; *********************************************************************************************************/
                     710   ; int _getch( void )
                     711   ; {
                     712   __getch:
00000A26  2F02       713          move.l    D2,-(A7)
                     714   ; int c ;
                     715   ; while(((char)(RS232_Status) & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
                     716   _getch_1:
00000A28  1039 0040  717          move.b    4194368,D0
00000A2C  0040      
00000A2E  C03C 0001  718          and.b     #1,D0
00000A32  0C00 0001  719          cmp.b     #1,D0
00000A36  6702       720          beq.s     _getch_3
00000A38  60EE       721          bra       _getch_1
                     722   _getch_3:
                     723   ; ;
                     724   ; c = (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
00000A3A  1039 0040  725          move.b    4194370,D0
00000A3E  0042      
00000A40  C0BC 0000  726          and.l     #255,D0
00000A44  00FF      
00000A46  C0BC 0000  727          and.l     #127,D0
00000A4A  007F      
00000A4C  2400       728          move.l    D0,D2
                     729   ; // shall we echo the character? Echo is set to TRUE at reset, but for speed we don't want to echo when downloading code with the 'L' debugger command
                     730   ; if(Echo)
00000A4E  4AB9 0803  731          tst.l     _Echo.L
00000A52  00E0      
00000A54  6708       732          beq.s     _getch_4
                     733   ; _putch(c);
00000A56  2F02       734          move.l    D2,-(A7)
00000A58  4EB8 09FA  735          jsr       __putch
00000A5C  584F       736          addq.w    #4,A7
                     737   _getch_4:
                     738   ; return c ;
00000A5E  2002       739          move.l    D2,D0
00000A60  241F       740          move.l    (A7)+,D2
00000A62  4E75       741          rts
                     742   ; }
                     743   ; // flush the input stream for any unread characters
                     744   ; void FlushKeyboard(void)
                     745   ; {
                     746   _FlushKeyboard:
00000A64  4E56 FFFC  747          link      A6,#-4
                     748   ; char c ;
                     749   ; while(1)    {
                     750   FlushKeyboard_1:
                     751   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // if Rx bit in status register is '1'
00000A68  1039 0040  752          move.b    4194368,D0
00000A6C  0040      
00000A6E  C03C 0001  753          and.b     #1,D0
00000A72  0C00 0001  754          cmp.b     #1,D0
00000A76  6610       755          bne.s     FlushKeyboard_4
                     756   ; c = ((char)(RS232_RxData) & (char)(0x7f)) ;
00000A78  1039 0040  757          move.b    4194370,D0
00000A7C  0042      
00000A7E  C03C 007F  758          and.b     #127,D0
00000A82  1D40 FFFF  759          move.b    D0,-1(A6)
00000A86  6002       760          bra.s     FlushKeyboard_5
                     761   FlushKeyboard_4:
                     762   ; else
                     763   ; return ;
00000A88  6002       764          bra.s     FlushKeyboard_6
                     765   FlushKeyboard_5:
00000A8A  60DC       766          bra       FlushKeyboard_1
                     767   FlushKeyboard_6:
00000A8C  4E5E       768          unlk      A6
00000A8E  4E75       769          rts
                     770   ; }
                     771   ; }
                     772   ; // converts hex char to 4 bit binary equiv in range 0000-1111 (0-F)
                     773   ; // char assumed to be a valid hex char 0-9, a-f, A-F
                     774   ; char xtod(int c)
                     775   ; {
                     776   _xtod:
00000A90  4E56 0000  777          link      A6,#0
00000A94  2F02       778          move.l    D2,-(A7)
00000A96  242E 0008  779          move.l    8(A6),D2
                     780   ; if ((char)(c) <= (char)('9'))
00000A9A  0C02 0039  781          cmp.b     #57,D2
00000A9E  6E08       782          bgt.s     xtod_1
                     783   ; return c - (char)(0x30);    // 0 - 9 = 0x30 - 0x39 so convert to number by sutracting 0x30
00000AA0  1002       784          move.b    D2,D0
00000AA2  0400 0030  785          sub.b     #48,D0
00000AA6  6014       786          bra.s     xtod_3
                     787   xtod_1:
                     788   ; else if((char)(c) > (char)('F'))    // assume lower case
00000AA8  0C02 0046  789          cmp.b     #70,D2
00000AAC  6F08       790          ble.s     xtod_4
                     791   ; return c - (char)(0x57);    // a-f = 0x61-66 so needs to be converted to 0x0A - 0x0F so subtract 0x57
00000AAE  1002       792          move.b    D2,D0
00000AB0  0400 0057  793          sub.b     #87,D0
00000AB4  6006       794          bra.s     xtod_3
                     795   xtod_4:
                     796   ; else
                     797   ; return c - (char)(0x37);    // A-F = 0x41-46 so needs to be converted to 0x0A - 0x0F so subtract 0x37
00000AB6  1002       798          move.b    D2,D0
00000AB8  0400 0037  799          sub.b     #55,D0
                     800   xtod_3:
00000ABC  241F       801          move.l    (A7)+,D2
00000ABE  4E5E       802          unlk      A6
00000AC0  4E75       803          rts
                     804   ; }
                     805   ; int Get2HexDigits(char *CheckSumPtr)
                     806   ; {
                     807   _Get2HexDigits:
00000AC2  4E56 0000  808          link      A6,#0
00000AC6  2F02       809          move.l    D2,-(A7)
                     810   ; register int i = (xtod(_getch()) << 4) | (xtod(_getch()));
00000AC8  2F00       811          move.l    D0,-(A7)
00000ACA  4EB8 0A26  812          jsr       __getch
00000ACE  2200       813          move.l    D0,D1
00000AD0  201F       814          move.l    (A7)+,D0
00000AD2  2F01       815          move.l    D1,-(A7)
00000AD4  4EB8 0A90  816          jsr       _xtod
00000AD8  584F       817          addq.w    #4,A7
00000ADA  C0BC 0000  818          and.l     #255,D0
00000ADE  00FF      
00000AE0  E980       819          asl.l     #4,D0
00000AE2  2F00       820          move.l    D0,-(A7)
00000AE4  2F01       821          move.l    D1,-(A7)
00000AE6  4EB8 0A26  822          jsr       __getch
00000AEA  221F       823          move.l    (A7)+,D1
00000AEC  2F00       824          move.l    D0,-(A7)
00000AEE  4EB8 0A90  825          jsr       _xtod
00000AF2  584F       826          addq.w    #4,A7
00000AF4  2200       827          move.l    D0,D1
00000AF6  201F       828          move.l    (A7)+,D0
00000AF8  C2BC 0000  829          and.l     #255,D1
00000AFC  00FF      
00000AFE  8081       830          or.l      D1,D0
00000B00  2400       831          move.l    D0,D2
                     832   ; if(CheckSumPtr)
00000B02  4AAE 0008  833          tst.l     8(A6)
00000B06  6706       834          beq.s     Get2HexDigits_1
                     835   ; *CheckSumPtr += i ;
00000B08  206E 0008  836          move.l    8(A6),A0
00000B0C  D510       837          add.b     D2,(A0)
                     838   Get2HexDigits_1:
                     839   ; return i ;
00000B0E  2002       840          move.l    D2,D0
00000B10  241F       841          move.l    (A7)+,D2
00000B12  4E5E       842          unlk      A6
00000B14  4E75       843          rts
                     844   ; }
                     845   ; int Get4HexDigits(char *CheckSumPtr)
                     846   ; {
                     847   _Get4HexDigits:
00000B16  4E56 0000  848          link      A6,#0
                     849   ; return (Get2HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000B1A  2F2E 0008  850          move.l    8(A6),-(A7)
00000B1E  4EB8 0AC2  851          jsr       _Get2HexDigits
00000B22  584F       852          addq.w    #4,A7
00000B24  E180       853          asl.l     #8,D0
00000B26  2F00       854          move.l    D0,-(A7)
00000B28  2F2E 0008  855          move.l    8(A6),-(A7)
00000B2C  4EB8 0AC2  856          jsr       _Get2HexDigits
00000B30  584F       857          addq.w    #4,A7
00000B32  2200       858          move.l    D0,D1
00000B34  201F       859          move.l    (A7)+,D0
00000B36  8081       860          or.l      D1,D0
00000B38  4E5E       861          unlk      A6
00000B3A  4E75       862          rts
                     863   ; }
                     864   ; int Get6HexDigits(char *CheckSumPtr)
                     865   ; {
                     866   _Get6HexDigits:
00000B3C  4E56 0000  867          link      A6,#0
                     868   ; return (Get4HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000B40  2F2E 0008  869          move.l    8(A6),-(A7)
00000B44  4EB8 0B16  870          jsr       _Get4HexDigits
00000B48  584F       871          addq.w    #4,A7
00000B4A  E180       872          asl.l     #8,D0
00000B4C  2F00       873          move.l    D0,-(A7)
00000B4E  2F2E 0008  874          move.l    8(A6),-(A7)
00000B52  4EB8 0AC2  875          jsr       _Get2HexDigits
00000B56  584F       876          addq.w    #4,A7
00000B58  2200       877          move.l    D0,D1
00000B5A  201F       878          move.l    (A7)+,D0
00000B5C  8081       879          or.l      D1,D0
00000B5E  4E5E       880          unlk      A6
00000B60  4E75       881          rts
                     882   ; }
                     883   ; int Get8HexDigits(char *CheckSumPtr)
                     884   ; {
                     885   _Get8HexDigits:
00000B62  4E56 0000  886          link      A6,#0
                     887   ; return (Get4HexDigits(CheckSumPtr) << 16) | (Get4HexDigits(CheckSumPtr));
00000B66  2F2E 0008  888          move.l    8(A6),-(A7)
00000B6A  4EB8 0B16  889          jsr       _Get4HexDigits
00000B6E  584F       890          addq.w    #4,A7
00000B70  E180       891          asl.l     #8,D0
00000B72  E180       892          asl.l     #8,D0
00000B74  2F00       893          move.l    D0,-(A7)
00000B76  2F2E 0008  894          move.l    8(A6),-(A7)
00000B7A  4EB8 0B16  895          jsr       _Get4HexDigits
00000B7E  584F       896          addq.w    #4,A7
00000B80  2200       897          move.l    D0,D1
00000B82  201F       898          move.l    (A7)+,D0
00000B84  8081       899          or.l      D1,D0
00000B86  4E5E       900          unlk      A6
00000B88  4E75       901          rts
                     902   ; }
                     903   ; void DumpMemory(void)   // simple dump memory fn
                     904   ; {
                     905   _DumpMemory:
00000B8A  48E7 3C30  906          movem.l   D2/D3/D4/D5/A2/A3,-(A7)
00000B8E  45F9 0000  907          lea       _printf.L,A2
00000B92  3CF8      
00000B94  47F9 0000  908          lea       _putch.L,A3
00000B98  3C26      
                     909   ; int i, j ;
                     910   ; unsigned char *RamPtr,c ; // pointer to where the program is download (assumed)
                     911   ; printf("\r\nDump Memory Block: <ESC> to Abort, <SPACE> to Continue") ;
00000B9A  4879 0000  912          pea       @m68kde~1_1.L
00000B9E  45E4      
00000BA0  4E92       913          jsr       (A2)
00000BA2  584F       914          addq.w    #4,A7
                     915   ; printf("\r\nEnter Start Address: ") ;
00000BA4  4879 0000  916          pea       @m68kde~1_2.L
00000BA8  461E      
00000BAA  4E92       917          jsr       (A2)
00000BAC  584F       918          addq.w    #4,A7
                     919   ; RamPtr = Get8HexDigits(0) ;
00000BAE  42A7       920          clr.l     -(A7)
00000BB0  4EB8 0B62  921          jsr       _Get8HexDigits
00000BB4  584F       922          addq.w    #4,A7
00000BB6  2600       923          move.l    D0,D3
                     924   ; while(1)    {
                     925   DumpMemory_1:
                     926   ; for(i = 0; i < 16; i ++)    {
00000BB8  4285       927          clr.l     D5
                     928   DumpMemory_4:
00000BBA  0C85 0000  929          cmp.l     #16,D5
00000BBE  0010      
00000BC0  6C00 0096  930          bge       DumpMemory_6
                     931   ; printf("\r\n%08x ", RamPtr) ;
00000BC4  2F03       932          move.l    D3,-(A7)
00000BC6  4879 0000  933          pea       @m68kde~1_3.L
00000BCA  4636      
00000BCC  4E92       934          jsr       (A2)
00000BCE  504F       935          addq.w    #8,A7
                     936   ; for(j=0; j < 16; j ++)  {
00000BD0  4282       937          clr.l     D2
                     938   DumpMemory_7:
00000BD2  0C82 0000  939          cmp.l     #16,D2
00000BD6  0010      
00000BD8  6C24       940          bge.s     DumpMemory_9
                     941   ; printf("%02X",RamPtr[j]) ;
00000BDA  2043       942          move.l    D3,A0
00000BDC  1230 2800  943          move.b    0(A0,D2.L),D1
00000BE0  C2BC 0000  944          and.l     #255,D1
00000BE4  00FF      
00000BE6  2F01       945          move.l    D1,-(A7)
00000BE8  4879 0000  946          pea       @m68kde~1_4.L
00000BEC  463E      
00000BEE  4E92       947          jsr       (A2)
00000BF0  504F       948          addq.w    #8,A7
                     949   ; putchar(' ') ;
00000BF2  4878 0020  950          pea       32
00000BF6  4E93       951          jsr       (A3)
00000BF8  584F       952          addq.w    #4,A7
00000BFA  5282       953          addq.l    #1,D2
00000BFC  60D4       954          bra       DumpMemory_7
                     955   DumpMemory_9:
                     956   ; }
                     957   ; // now display the data as ASCII at the end
                     958   ; printf("  ") ;
00000BFE  4879 0000  959          pea       @m68kde~1_5.L
00000C02  4644      
00000C04  4E92       960          jsr       (A2)
00000C06  584F       961          addq.w    #4,A7
                     962   ; for(j = 0; j < 16; j++) {
00000C08  4282       963          clr.l     D2
                     964   DumpMemory_10:
00000C0A  0C82 0000  965          cmp.l     #16,D2
00000C0E  0010      
00000C10  6C00 003A  966          bge       DumpMemory_12
                     967   ; c = ((char)(RamPtr[j]) & 0x7f) ;
00000C14  2043       968          move.l    D3,A0
00000C16  1030 2800  969          move.b    0(A0,D2.L),D0
00000C1A  C03C 007F  970          and.b     #127,D0
00000C1E  1800       971          move.b    D0,D4
                     972   ; if((c > (char)(0x7f)) || (c < ' '))
00000C20  0C04 007F  973          cmp.b     #127,D4
00000C24  6206       974          bhi.s     DumpMemory_15
00000C26  0C04 0020  975          cmp.b     #32,D4
00000C2A  640A       976          bhs.s     DumpMemory_13
                     977   DumpMemory_15:
                     978   ; putchar('.') ;
00000C2C  4878 002E  979          pea       46
00000C30  4E93       980          jsr       (A3)
00000C32  584F       981          addq.w    #4,A7
00000C34  6012       982          bra.s     DumpMemory_14
                     983   DumpMemory_13:
                     984   ; else
                     985   ; putchar(RamPtr[j]) ;
00000C36  2043       986          move.l    D3,A0
00000C38  1230 2800  987          move.b    0(A0,D2.L),D1
00000C3C  C2BC 0000  988          and.l     #255,D1
00000C40  00FF      
00000C42  2F01       989          move.l    D1,-(A7)
00000C44  4E93       990          jsr       (A3)
00000C46  584F       991          addq.w    #4,A7
                     992   DumpMemory_14:
00000C48  5282       993          addq.l    #1,D2
00000C4A  60BE       994          bra       DumpMemory_10
                     995   DumpMemory_12:
                     996   ; }
                     997   ; RamPtr = RamPtr + 16 ;
00000C4C  0683 0000  998          add.l     #16,D3
00000C50  0010      
00000C52  5285       999          addq.l    #1,D5
00000C54  6000 FF64 1000          bra       DumpMemory_4
                    1001   DumpMemory_6:
                    1002   ; }
                    1003   ; printf("\r\n") ;
00000C58  4879 0000 1004          pea       @m68kde~1_6.L
00000C5C  4648      
00000C5E  4E92      1005          jsr       (A2)
00000C60  584F      1006          addq.w    #4,A7
                    1007   ; c = _getch() ;
00000C62  4EB8 0A26 1008          jsr       __getch
00000C66  1800      1009          move.b    D0,D4
                    1010   ; if(c == 0x1b)          // break on ESC
00000C68  0C04 001B 1011          cmp.b     #27,D4
00000C6C  6602      1012          bne.s     DumpMemory_16
                    1013   ; break ;
00000C6E  6004      1014          bra.s     DumpMemory_3
                    1015   DumpMemory_16:
00000C70  6000 FF46 1016          bra       DumpMemory_1
                    1017   DumpMemory_3:
00000C74  4CDF 0C3C 1018          movem.l   (A7)+,D2/D3/D4/D5/A2/A3
00000C78  4E75      1019          rts
                    1020   ; }
                    1021   ; }
                    1022   ; void FillMemory()
                    1023   ; {
                    1024   _FillMemory:
00000C7A  48E7 3820 1025          movem.l   D2/D3/D4/A2,-(A7)
00000C7E  45F9 0000 1026          lea       _printf.L,A2
00000C82  3CF8      
                    1027   ; char *StartRamPtr, *EndRamPtr ;
                    1028   ; unsigned char FillData ;
                    1029   ; printf("\r\nFill Memory Block") ;
00000C84  4879 0000 1030          pea       @m68kde~1_7.L
00000C88  464C      
00000C8A  4E92      1031          jsr       (A2)
00000C8C  584F      1032          addq.w    #4,A7
                    1033   ; printf("\r\nEnter Start Address: ") ;
00000C8E  4879 0000 1034          pea       @m68kde~1_2.L
00000C92  461E      
00000C94  4E92      1035          jsr       (A2)
00000C96  584F      1036          addq.w    #4,A7
                    1037   ; StartRamPtr = Get8HexDigits(0) ;
00000C98  42A7      1038          clr.l     -(A7)
00000C9A  4EB8 0B62 1039          jsr       _Get8HexDigits
00000C9E  584F      1040          addq.w    #4,A7
00000CA0  2400      1041          move.l    D0,D2
                    1042   ; printf("\r\nEnter End Address: ") ;
00000CA2  4879 0000 1043          pea       @m68kde~1_8.L
00000CA6  4660      
00000CA8  4E92      1044          jsr       (A2)
00000CAA  584F      1045          addq.w    #4,A7
                    1046   ; EndRamPtr = Get8HexDigits(0) ;
00000CAC  42A7      1047          clr.l     -(A7)
00000CAE  4EB8 0B62 1048          jsr       _Get8HexDigits
00000CB2  584F      1049          addq.w    #4,A7
00000CB4  2800      1050          move.l    D0,D4
                    1051   ; printf("\r\nEnter Fill Data: ") ;
00000CB6  4879 0000 1052          pea       @m68kde~1_9.L
00000CBA  4676      
00000CBC  4E92      1053          jsr       (A2)
00000CBE  584F      1054          addq.w    #4,A7
                    1055   ; FillData = Get2HexDigits(0) ;
00000CC0  42A7      1056          clr.l     -(A7)
00000CC2  4EB8 0AC2 1057          jsr       _Get2HexDigits
00000CC6  584F      1058          addq.w    #4,A7
00000CC8  1600      1059          move.b    D0,D3
                    1060   ; printf("\r\nFilling Addresses [$%08X - $%08X] with $%02X", StartRamPtr, EndRamPtr, FillData) ;
00000CCA  C6BC 0000 1061          and.l     #255,D3
00000CCE  00FF      
00000CD0  2F03      1062          move.l    D3,-(A7)
00000CD2  2F04      1063          move.l    D4,-(A7)
00000CD4  2F02      1064          move.l    D2,-(A7)
00000CD6  4879 0000 1065          pea       @m68kde~1_10.L
00000CDA  468A      
00000CDC  4E92      1066          jsr       (A2)
00000CDE  DEFC 0010 1067          add.w     #16,A7
                    1068   ; while(StartRamPtr < EndRamPtr)
                    1069   FillMemory_1:
00000CE2  B484      1070          cmp.l     D4,D2
00000CE4  6408      1071          bhs.s     FillMemory_3
                    1072   ; *StartRamPtr++ = FillData ;
00000CE6  2042      1073          move.l    D2,A0
00000CE8  5282      1074          addq.l    #1,D2
00000CEA  1083      1075          move.b    D3,(A0)
00000CEC  60F4      1076          bra       FillMemory_1
                    1077   FillMemory_3:
00000CEE  4CDF 041C 1078          movem.l   (A7)+,D2/D3/D4/A2
00000CF2  4E75      1079          rts
                    1080   ; }
                    1081   ; void Load_SRecordFile()
                    1082   ; {
                    1083   _Load_SRecordFile:
00000CF4  4E56 FFDC 1084          link      A6,#-36
00000CF8  48E7 3F3C 1085          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00000CFC  45EE FFFA 1086          lea       -6(A6),A2
00000D00  47F8 0AC2 1087          lea       _Get2HexDigits.L,A3
00000D04  49F9 0000 1088          lea       _printf.L,A4
00000D08  3CF8      
                    1089   ; int i, Address, AddressSize, DataByte, NumDataBytesToRead, LoadFailed, FailedAddress, AddressFail, SRecordCount = 0, ByteTotal = 0 ;
00000D0A  42AE FFEE 1090          clr.l     -18(A6)
00000D0E  3A7C 0000 1091          move.w    #0,A5
                    1092   ; int result, ByteCount ;
                    1093   ; char c, CheckSum, ReadCheckSum, HeaderType ;
                    1094   ; char *RamPtr ;                          // pointer to Memory where downloaded program will be stored
                    1095   ; LoadFailed = 0 ;                        //assume LOAD operation will pass
00000D12  7E00      1096          moveq     #0,D7
                    1097   ; AddressFail = 0 ;
00000D14  42AE FFEA 1098          clr.l     -22(A6)
                    1099   ; Echo = 0 ;                              // don't echo S records during download
00000D18  42B9 0803 1100          clr.l     _Echo.L
00000D1C  00E0      
                    1101   ; printf("\r\nUse HyperTerminal to Send Text File (.hex)\r\n") ;
00000D1E  4879 0000 1102          pea       @m68kde~1_11.L
00000D22  46BA      
00000D24  4E94      1103          jsr       (A4)
00000D26  584F      1104          addq.w    #4,A7
                    1105   ; while(1)    {
                    1106   Load_SRecordFile_1:
                    1107   ; CheckSum = 0 ;
00000D28  4212      1108          clr.b     (A2)
                    1109   ; do {
                    1110   Load_SRecordFile_4:
                    1111   ; c = toupper(_getch()) ;
00000D2A  2F00      1112          move.l    D0,-(A7)
00000D2C  4EB8 0A26 1113          jsr       __getch
00000D30  2200      1114          move.l    D0,D1
00000D32  201F      1115          move.l    (A7)+,D0
00000D34  2F01      1116          move.l    D1,-(A7)
00000D36  4EB9 0000 1117          jsr       _toupper
00000D3A  3CCC      
00000D3C  584F      1118          addq.w    #4,A7
00000D3E  1C00      1119          move.b    D0,D6
                    1120   ; if(c == 0x1b )      // if break
00000D40  0C06 001B 1121          cmp.b     #27,D6
00000D44  6604      1122          bne.s     Load_SRecordFile_6
                    1123   ; return;
00000D46  6000 0132 1124          bra       Load_SRecordFile_8
                    1125   Load_SRecordFile_6:
00000D4A  0C06 0053 1126          cmp.b     #83,D6
00000D4E  66DA      1127          bne       Load_SRecordFile_4
                    1128   ; }while(c != (char)('S'));   // wait for S start of header
                    1129   ; HeaderType = _getch() ;
00000D50  4EB8 0A26 1130          jsr       __getch
00000D54  1600      1131          move.b    D0,D3
                    1132   ; if(HeaderType == (char)('0') || HeaderType == (char)('5'))       // ignore s0, s5 records
00000D56  0C03 0030 1133          cmp.b     #48,D3
00000D5A  6706      1134          beq.s     Load_SRecordFile_11
00000D5C  0C03 0035 1135          cmp.b     #53,D3
00000D60  6604      1136          bne.s     Load_SRecordFile_9
                    1137   Load_SRecordFile_11:
                    1138   ; continue ;
00000D62  6000 00D2 1139          bra       Load_SRecordFile_23
                    1140   Load_SRecordFile_9:
                    1141   ; if(HeaderType >= (char)('7'))
00000D66  0C03 0037 1142          cmp.b     #55,D3
00000D6A  6D04      1143          blt.s     Load_SRecordFile_12
                    1144   ; break ;                 // end load on s7,s8,s9 records
00000D6C  6000 00CC 1145          bra       Load_SRecordFile_3
                    1146   Load_SRecordFile_12:
                    1147   ; // get the bytecount
                    1148   ; ByteCount = Get2HexDigits(&CheckSum) ;
00000D70  2F0A      1149          move.l    A2,-(A7)
00000D72  4E93      1150          jsr       (A3)
00000D74  584F      1151          addq.w    #4,A7
00000D76  2D40 FFF6 1152          move.l    D0,-10(A6)
                    1153   ; // get the address, 4 digits for s1, 6 digits for s2, and 8 digits for s3 record
                    1154   ; if(HeaderType == (char)('1')) {
00000D7A  0C03 0031 1155          cmp.b     #49,D3
00000D7E  660E      1156          bne.s     Load_SRecordFile_14
                    1157   ; AddressSize = 2 ;       // 2 byte address
00000D80  7A02      1158          moveq     #2,D5
                    1159   ; Address = Get4HexDigits(&CheckSum);
00000D82  2F0A      1160          move.l    A2,-(A7)
00000D84  4EB8 0B16 1161          jsr       _Get4HexDigits
00000D88  584F      1162          addq.w    #4,A7
00000D8A  2800      1163          move.l    D0,D4
00000D8C  6020      1164          bra.s     Load_SRecordFile_17
                    1165   Load_SRecordFile_14:
                    1166   ; }
                    1167   ; else if (HeaderType == (char)('2')) {
00000D8E  0C03 0032 1168          cmp.b     #50,D3
00000D92  660E      1169          bne.s     Load_SRecordFile_16
                    1170   ; AddressSize = 3 ;       // 3 byte address
00000D94  7A03      1171          moveq     #3,D5
                    1172   ; Address = Get6HexDigits(&CheckSum) ;
00000D96  2F0A      1173          move.l    A2,-(A7)
00000D98  4EB8 0B3C 1174          jsr       _Get6HexDigits
00000D9C  584F      1175          addq.w    #4,A7
00000D9E  2800      1176          move.l    D0,D4
00000DA0  600C      1177          bra.s     Load_SRecordFile_17
                    1178   Load_SRecordFile_16:
                    1179   ; }
                    1180   ; else    {
                    1181   ; AddressSize = 4 ;       // 4 byte address
00000DA2  7A04      1182          moveq     #4,D5
                    1183   ; Address = Get8HexDigits(&CheckSum) ;
00000DA4  2F0A      1184          move.l    A2,-(A7)
00000DA6  4EB8 0B62 1185          jsr       _Get8HexDigits
00000DAA  584F      1186          addq.w    #4,A7
00000DAC  2800      1187          move.l    D0,D4
                    1188   Load_SRecordFile_17:
                    1189   ; }
                    1190   ; RamPtr = (char *)(Address) ;                            // point to download area
00000DAE  2D44 FFFC 1191          move.l    D4,-4(A6)
                    1192   ; NumDataBytesToRead = ByteCount - AddressSize - 1 ;
00000DB2  202E FFF6 1193          move.l    -10(A6),D0
00000DB6  9085      1194          sub.l     D5,D0
00000DB8  5380      1195          subq.l    #1,D0
00000DBA  2D40 FFE2 1196          move.l    D0,-30(A6)
                    1197   ; for(i = 0; i < NumDataBytesToRead; i ++) {     // read in remaining data bytes (ignore address and checksum at the end
00000DBE  4282      1198          clr.l     D2
                    1199   Load_SRecordFile_18:
00000DC0  B4AE FFE2 1200          cmp.l     -30(A6),D2
00000DC4  6C1E      1201          bge.s     Load_SRecordFile_20
                    1202   ; DataByte = Get2HexDigits(&CheckSum) ;
00000DC6  2F0A      1203          move.l    A2,-(A7)
00000DC8  4E93      1204          jsr       (A3)
00000DCA  584F      1205          addq.w    #4,A7
00000DCC  2D40 FFDE 1206          move.l    D0,-34(A6)
                    1207   ; *RamPtr++ = DataByte ;                      // store downloaded byte in Ram at specified address
00000DD0  202E FFDE 1208          move.l    -34(A6),D0
00000DD4  206E FFFC 1209          move.l    -4(A6),A0
00000DD8  52AE FFFC 1210          addq.l    #1,-4(A6)
00000DDC  1080      1211          move.b    D0,(A0)
                    1212   ; ByteTotal++;
00000DDE  524D      1213          addq.w    #1,A5
00000DE0  5282      1214          addq.l    #1,D2
00000DE2  60DC      1215          bra       Load_SRecordFile_18
                    1216   Load_SRecordFile_20:
                    1217   ; }
                    1218   ; // checksum is the 1's complement of the sum of all data pairs following the bytecount, i.e. it includes the address and the data itself
                    1219   ; ReadCheckSum = Get2HexDigits(0) ;
00000DE4  42A7      1220          clr.l     -(A7)
00000DE6  4E93      1221          jsr       (A3)
00000DE8  584F      1222          addq.w    #4,A7
00000DEA  1D40 FFFB 1223          move.b    D0,-5(A6)
                    1224   ; if((~CheckSum&0Xff) != (ReadCheckSum&0Xff))   {
00000DEE  1012      1225          move.b    (A2),D0
00000DF0  4600      1226          not.b     D0
00000DF2  4880      1227          ext.w     D0
00000DF4  C07C 00FF 1228          and.w     #255,D0
00000DF8  122E FFFB 1229          move.b    -5(A6),D1
00000DFC  4881      1230          ext.w     D1
00000DFE  C27C 00FF 1231          and.w     #255,D1
00000E02  B041      1232          cmp.w     D1,D0
00000E04  6708      1233          beq.s     Load_SRecordFile_21
                    1234   ; LoadFailed = 1 ;
00000E06  7E01      1235          moveq     #1,D7
                    1236   ; FailedAddress = Address ;
00000E08  2D44 FFE6 1237          move.l    D4,-26(A6)
                    1238   ; break;
00000E0C  602C      1239          bra.s     Load_SRecordFile_3
                    1240   Load_SRecordFile_21:
                    1241   ; }
                    1242   ; SRecordCount++ ;
00000E0E  52AE FFEE 1243          addq.l    #1,-18(A6)
                    1244   ; // display feedback on progress
                    1245   ; if(SRecordCount % 25 == 0)
00000E12  2F2E FFEE 1246          move.l    -18(A6),-(A7)
00000E16  4878 0019 1247          pea       25
00000E1A  4EB9 0000 1248          jsr       LDIV
00000E1E  3ABA      
00000E20  202F 0004 1249          move.l    4(A7),D0
00000E24  504F      1250          addq.w    #8,A7
00000E26  4A80      1251          tst.l     D0
00000E28  660C      1252          bne.s     Load_SRecordFile_23
                    1253   ; putchar('.') ;
00000E2A  4878 002E 1254          pea       46
00000E2E  4EB9 0000 1255          jsr       _putch
00000E32  3C26      
00000E34  584F      1256          addq.w    #4,A7
                    1257   Load_SRecordFile_23:
00000E36  6000 FEF0 1258          bra       Load_SRecordFile_1
                    1259   Load_SRecordFile_3:
                    1260   ; }
                    1261   ; if(LoadFailed == 1) {
00000E3A  0C87 0000 1262          cmp.l     #1,D7
00000E3E  0001      
00000E40  6610      1263          bne.s     Load_SRecordFile_25
                    1264   ; printf("\r\nLoad Failed at Address = [$%08X]\r\n", FailedAddress) ;
00000E42  2F2E FFE6 1265          move.l    -26(A6),-(A7)
00000E46  4879 0000 1266          pea       @m68kde~1_12.L
00000E4A  46EA      
00000E4C  4E94      1267          jsr       (A4)
00000E4E  504F      1268          addq.w    #8,A7
00000E50  600C      1269          bra.s     Load_SRecordFile_26
                    1270   Load_SRecordFile_25:
                    1271   ; }
                    1272   ; else
                    1273   ; printf("\r\nSuccess: Downloaded %d bytes\r\n", ByteTotal) ;
00000E52  2F0D      1274          move.l    A5,-(A7)
00000E54  4879 0000 1275          pea       @m68kde~1_13.L
00000E58  4710      
00000E5A  4E94      1276          jsr       (A4)
00000E5C  504F      1277          addq.w    #8,A7
                    1278   Load_SRecordFile_26:
                    1279   ; // pause at the end to wait for download to finish transmitting at the end of S8 etc
                    1280   ; for(i = 0; i < 400000; i ++)
00000E5E  4282      1281          clr.l     D2
                    1282   Load_SRecordFile_27:
00000E60  0C82 0006 1283          cmp.l     #400000,D2
00000E64  1A80      
00000E66  6C04      1284          bge.s     Load_SRecordFile_29
00000E68  5282      1285          addq.l    #1,D2
00000E6A  60F4      1286          bra       Load_SRecordFile_27
                    1287   Load_SRecordFile_29:
                    1288   ; ;
                    1289   ; FlushKeyboard() ;
00000E6C  4EB8 0A64 1290          jsr       _FlushKeyboard
                    1291   ; Echo = 1;
00000E70  23FC 0000 1292          move.l    #1,_Echo.L
00000E74  0001 0803 
00000E78  00E0      
                    1293   Load_SRecordFile_8:
00000E7A  4CDF 3CFC 1294          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00000E7E  4E5E      1295          unlk      A6
00000E80  4E75      1296          rts
                    1297   ; }
                    1298   ; void MemoryChange(void)
                    1299   ; {
                    1300   _MemoryChange:
00000E82  48E7 3820 1301          movem.l   D2/D3/D4/A2,-(A7)
00000E86  45F9 0000 1302          lea       _printf.L,A2
00000E8A  3CF8      
                    1303   ; unsigned char *RamPtr,c ; // pointer to memory
                    1304   ; int Data ;
                    1305   ; printf("\r\nExamine and Change Memory") ;
00000E8C  4879 0000 1306          pea       @m68kde~1_14.L
00000E90  4732      
00000E92  4E92      1307          jsr       (A2)
00000E94  584F      1308          addq.w    #4,A7
                    1309   ; printf("\r\n<ESC> to Stop, <SPACE> to Advance, '-' to Go Back, <DATA> to change") ;
00000E96  4879 0000 1310          pea       @m68kde~1_15.L
00000E9A  474E      
00000E9C  4E92      1311          jsr       (A2)
00000E9E  584F      1312          addq.w    #4,A7
                    1313   ; printf("\r\nEnter Address: ") ;
00000EA0  4879 0000 1314          pea       @m68kde~1_16.L
00000EA4  4794      
00000EA6  4E92      1315          jsr       (A2)
00000EA8  584F      1316          addq.w    #4,A7
                    1317   ; RamPtr = Get8HexDigits(0) ;
00000EAA  42A7      1318          clr.l     -(A7)
00000EAC  4EB8 0B62 1319          jsr       _Get8HexDigits
00000EB0  584F      1320          addq.w    #4,A7
00000EB2  2600      1321          move.l    D0,D3
                    1322   ; while(1)    {
                    1323   MemoryChange_1:
                    1324   ; printf("\r\n[%08x] : %02x  ", RamPtr, *RamPtr) ;
00000EB4  2043      1325          move.l    D3,A0
00000EB6  1210      1326          move.b    (A0),D1
00000EB8  C2BC 0000 1327          and.l     #255,D1
00000EBC  00FF      
00000EBE  2F01      1328          move.l    D1,-(A7)
00000EC0  2F03      1329          move.l    D3,-(A7)
00000EC2  4879 0000 1330          pea       @m68kde~1_17.L
00000EC6  47A6      
00000EC8  4E92      1331          jsr       (A2)
00000ECA  DEFC 000C 1332          add.w     #12,A7
                    1333   ; c = tolower(_getch()) ;
00000ECE  2F00      1334          move.l    D0,-(A7)
00000ED0  4EB8 0A26 1335          jsr       __getch
00000ED4  2200      1336          move.l    D0,D1
00000ED6  201F      1337          move.l    (A7)+,D0
00000ED8  2F01      1338          move.l    D1,-(A7)
00000EDA  4EB9 0000 1339          jsr       _tolower
00000EDE  3C56      
00000EE0  584F      1340          addq.w    #4,A7
00000EE2  1400      1341          move.b    D0,D2
                    1342   ; if(c == (char)(0x1b))
00000EE4  0C02 001B 1343          cmp.b     #27,D2
00000EE8  6604      1344          bne.s     MemoryChange_4
                    1345   ; return ;                                // abort on escape
00000EEA  6000 0090 1346          bra       MemoryChange_6
                    1347   MemoryChange_4:
                    1348   ; else if((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f')) {  // are we trying to change data at this location by entering a hex char
00000EEE  0C02 0030 1349          cmp.b     #48,D2
00000EF2  6506      1350          blo.s     MemoryChange_10
00000EF4  0C02 0039 1351          cmp.b     #57,D2
00000EF8  6310      1352          bls.s     MemoryChange_9
                    1353   MemoryChange_10:
00000EFA  0C02 0061 1354          cmp.b     #97,D2
00000EFE  6500 006E 1355          blo       MemoryChange_7
00000F02  0C02 0066 1356          cmp.b     #102,D2
00000F06  6200 0066 1357          bhi       MemoryChange_7
                    1358   MemoryChange_9:
                    1359   ; Data = (xtod(c) << 4) | (xtod(_getch()));
00000F0A  C4BC 0000 1360          and.l     #255,D2
00000F0E  00FF      
00000F10  2F02      1361          move.l    D2,-(A7)
00000F12  4EB8 0A90 1362          jsr       _xtod
00000F16  584F      1363          addq.w    #4,A7
00000F18  C0BC 0000 1364          and.l     #255,D0
00000F1C  00FF      
00000F1E  E980      1365          asl.l     #4,D0
00000F20  2F00      1366          move.l    D0,-(A7)
00000F22  2F01      1367          move.l    D1,-(A7)
00000F24  4EB8 0A26 1368          jsr       __getch
00000F28  221F      1369          move.l    (A7)+,D1
00000F2A  2F00      1370          move.l    D0,-(A7)
00000F2C  4EB8 0A90 1371          jsr       _xtod
00000F30  584F      1372          addq.w    #4,A7
00000F32  2200      1373          move.l    D0,D1
00000F34  201F      1374          move.l    (A7)+,D0
00000F36  C2BC 0000 1375          and.l     #255,D1
00000F3A  00FF      
00000F3C  8081      1376          or.l      D1,D0
00000F3E  2800      1377          move.l    D0,D4
                    1378   ; *RamPtr = (char)(Data) ;
00000F40  2043      1379          move.l    D3,A0
00000F42  1084      1380          move.b    D4,(A0)
                    1381   ; if(*RamPtr != Data) {
00000F44  2043      1382          move.l    D3,A0
00000F46  1010      1383          move.b    (A0),D0
00000F48  C0BC 0000 1384          and.l     #255,D0
00000F4C  00FF      
00000F4E  B084      1385          cmp.l     D4,D0
00000F50  671A      1386          beq.s     MemoryChange_11
                    1387   ; printf("\r\nWarning Change Failed: Wrote [%02x], Read [%02x]", Data, *RamPtr) ;
00000F52  2043      1388          move.l    D3,A0
00000F54  1210      1389          move.b    (A0),D1
00000F56  C2BC 0000 1390          and.l     #255,D1
00000F5A  00FF      
00000F5C  2F01      1391          move.l    D1,-(A7)
00000F5E  2F04      1392          move.l    D4,-(A7)
00000F60  4879 0000 1393          pea       @m68kde~1_18.L
00000F64  47B8      
00000F66  4E92      1394          jsr       (A2)
00000F68  DEFC 000C 1395          add.w     #12,A7
                    1396   MemoryChange_11:
00000F6C  6008      1397          bra.s     MemoryChange_13
                    1398   MemoryChange_7:
                    1399   ; }
                    1400   ; }
                    1401   ; else if(c == (char)('-'))
00000F6E  0C02 002D 1402          cmp.b     #45,D2
00000F72  6602      1403          bne.s     MemoryChange_13
                    1404   ; RamPtr -= 2 ; ;
00000F74  5583      1405          subq.l    #2,D3
                    1406   MemoryChange_13:
                    1407   ; RamPtr ++ ;
00000F76  5283      1408          addq.l    #1,D3
00000F78  6000 FF3A 1409          bra       MemoryChange_1
                    1410   MemoryChange_6:
00000F7C  4CDF 041C 1411          movem.l   (A7)+,D2/D3/D4/A2
00000F80  4E75      1412          rts
                    1413   ; }
                    1414   ; }
                    1415   ; //////////////////////////////////////////////////////////////////////////////////////////////////
                    1416   ; // IMPORTANT
                    1417   ; // TG68 does not support the Native Trace mode of the original 68000 so tracing
                    1418   ; // has to be done with an interrupt (IRQ Level 6)
                    1419   ; //
                    1420   ; // To allow the 68000 to execute one more instruction after each pseudo trace (IRQ6)
                    1421   ; // the IRQ is removed in hardware once the TG68 reads the IRQ autovector (i.e. acknowledges the IRQ)
                    1422   ; //
                    1423   ; // on return from the IRQ service handler, the first access to the user memory program space
                    1424   ; // generates a fresh IRQ (in hardware) to generate a new trace, this allows the tg68 to
                    1425   ; // execute one more new instruction (without it the TG68 would trace on the same instruction
                    1426   ; // each time and not after the next one). It also means it doesn't simgle step outside the user
                    1427   ; // program area
                    1428   ; //
                    1429   ; // The bottom line is the Trace handler, which includes the Dump registers below
                    1430   ; // cannot access the user memory to display for example the Instruction Opcode or to disassemble etc
                    1431   ; // as this would lead to a new IRQ being reset and the TG68 would trace on same instruction
                    1432   ; // NOT SURE THIS IS TRUE NOW THAT TRACE HANDLER HAS BEEN MODIVIED TO NOT AUTOMATICALLY GENERATE A TRACE EXCEPTION
                    1433   ; // INSTEAD IT IS DONE IN THE 'N' COMMAND FOR NEXT
                    1434   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    1435   ; void DumpRegisters()
                    1436   ; {
                    1437   _DumpRegisters:
00000F82  48E7 3F3C 1438          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00000F86  45F9 0000 1439          lea       _putch.L,A2
00000F8A  3C26      
00000F8C  47F9 0000 1440          lea       _printf.L,A3
00000F90  3CF8      
00000F92  49F9 0803 1441          lea       _SR.L,A4
00000F96  012C      
00000F98  4BF9 0803 1442          lea       _WatchPointString.L,A5
00000F9C  01C2      
                    1443   ; short i, x, j, k ;
                    1444   ; unsigned char c, *BytePointer;
                    1445   ; // buld up strings for displaying watchpoints
                    1446   ; for(x = 0; x < (short)(8); x++)
00000F9E  4242      1447          clr.w     D2
                    1448   DumpRegisters_1:
00000FA0  0C42 0008 1449          cmp.w     #8,D2
00000FA4  6C00 01C6 1450          bge       DumpRegisters_3
                    1451   ; {
                    1452   ; if(WatchPointSetOrCleared[x] == 1)
00000FA8  48C2      1453          ext.l     D2
00000FAA  2002      1454          move.l    D2,D0
00000FAC  E588      1455          lsl.l     #2,D0
00000FAE  41F9 0803 1456          lea       _WatchPointSetOrCleared.L,A0
00000FB2  01A2      
00000FB4  2030 0800 1457          move.l    0(A0,D0.L),D0
00000FB8  0C80 0000 1458          cmp.l     #1,D0
00000FBC  0001      
00000FBE  6600 0186 1459          bne       DumpRegisters_4
                    1460   ; {
                    1461   ; sprintf(WatchPointString[x], "$%08X  ", WatchPointAddress[x]) ;
00000FC2  48C2      1462          ext.l     D2
00000FC4  2202      1463          move.l    D2,D1
00000FC6  E589      1464          lsl.l     #2,D1
00000FC8  41F9 0803 1465          lea       _WatchPointAddress.L,A0
00000FCC  0182      
00000FCE  2F30 1800 1466          move.l    0(A0,D1.L),-(A7)
00000FD2  4879 0000 1467          pea       @m68kde~1_19.L
00000FD6  47EC      
00000FD8  220D      1468          move.l    A5,D1
00000FDA  48C2      1469          ext.l     D2
00000FDC  2F00      1470          move.l    D0,-(A7)
00000FDE  2002      1471          move.l    D2,D0
00000FE0  C1FC 0064 1472          muls      #100,D0
00000FE4  D280      1473          add.l     D0,D1
00000FE6  201F      1474          move.l    (A7)+,D0
00000FE8  2F01      1475          move.l    D1,-(A7)
00000FEA  4EB9 0000 1476          jsr       _sprintf
00000FEE  3C82      
00000FF0  DEFC 000C 1477          add.w     #12,A7
                    1478   ; BytePointer = (char *)(WatchPointAddress[x]) ;
00000FF4  48C2      1479          ext.l     D2
00000FF6  2002      1480          move.l    D2,D0
00000FF8  E588      1481          lsl.l     #2,D0
00000FFA  41F9 0803 1482          lea       _WatchPointAddress.L,A0
00000FFE  0182      
00001000  2A30 0800 1483          move.l    0(A0,D0.L),D5
                    1484   ; for(j = 0; j < (short)(16); j+=2)
00001004  4243      1485          clr.w     D3
                    1486   DumpRegisters_6:
00001006  0C43 0010 1487          cmp.w     #16,D3
0000100A  6C00 0082 1488          bge       DumpRegisters_8
                    1489   ; {
                    1490   ; for(k = 0; k < (short)(2); k++)
0000100E  4246      1491          clr.w     D6
                    1492   DumpRegisters_9:
00001010  0C46 0002 1493          cmp.w     #2,D6
00001014  6C00 0052 1494          bge       DumpRegisters_11
                    1495   ; {
                    1496   ; sprintf(TempString, "%02X", BytePointer[j+k]) ;
00001018  2045      1497          move.l    D5,A0
0000101A  48C3      1498          ext.l     D3
0000101C  2203      1499          move.l    D3,D1
0000101E  48C6      1500          ext.l     D6
00001020  D286      1501          add.l     D6,D1
00001022  1230 1800 1502          move.b    0(A0,D1.L),D1
00001026  C2BC 0000 1503          and.l     #255,D1
0000102A  00FF      
0000102C  2F01      1504          move.l    D1,-(A7)
0000102E  4879 0000 1505          pea       @m68kde~1_4.L
00001032  463E      
00001034  4879 0803 1506          pea       _TempString.L
00001038  04E2      
0000103A  4EB9 0000 1507          jsr       _sprintf
0000103E  3C82      
00001040  DEFC 000C 1508          add.w     #12,A7
                    1509   ; strcat(WatchPointString[x], TempString) ;
00001044  4879 0803 1510          pea       _TempString.L
00001048  04E2      
0000104A  220D      1511          move.l    A5,D1
0000104C  48C2      1512          ext.l     D2
0000104E  2F00      1513          move.l    D0,-(A7)
00001050  2002      1514          move.l    D2,D0
00001052  C1FC 0064 1515          muls      #100,D0
00001056  D280      1516          add.l     D0,D1
00001058  201F      1517          move.l    (A7)+,D0
0000105A  2F01      1518          move.l    D1,-(A7)
0000105C  4EB9 0000 1519          jsr       _strcat
00001060  3CB6      
00001062  504F      1520          addq.w    #8,A7
00001064  5246      1521          addq.w    #1,D6
00001066  60A8      1522          bra       DumpRegisters_9
                    1523   DumpRegisters_11:
                    1524   ; }
                    1525   ; strcat(WatchPointString[x]," ") ;
00001068  4879 0000 1526          pea       @m68kde~1_20.L
0000106C  47F4      
0000106E  220D      1527          move.l    A5,D1
00001070  48C2      1528          ext.l     D2
00001072  2F00      1529          move.l    D0,-(A7)
00001074  2002      1530          move.l    D2,D0
00001076  C1FC 0064 1531          muls      #100,D0
0000107A  D280      1532          add.l     D0,D1
0000107C  201F      1533          move.l    (A7)+,D0
0000107E  2F01      1534          move.l    D1,-(A7)
00001080  4EB9 0000 1535          jsr       _strcat
00001084  3CB6      
00001086  504F      1536          addq.w    #8,A7
00001088  5443      1537          addq.w    #2,D3
0000108A  6000 FF7A 1538          bra       DumpRegisters_6
                    1539   DumpRegisters_8:
                    1540   ; }
                    1541   ; strcat(WatchPointString[x], "  ") ;
0000108E  4879 0000 1542          pea       @m68kde~1_5.L
00001092  4644      
00001094  220D      1543          move.l    A5,D1
00001096  48C2      1544          ext.l     D2
00001098  2F00      1545          move.l    D0,-(A7)
0000109A  2002      1546          move.l    D2,D0
0000109C  C1FC 0064 1547          muls      #100,D0
000010A0  D280      1548          add.l     D0,D1
000010A2  201F      1549          move.l    (A7)+,D0
000010A4  2F01      1550          move.l    D1,-(A7)
000010A6  4EB9 0000 1551          jsr       _strcat
000010AA  3CB6      
000010AC  504F      1552          addq.w    #8,A7
                    1553   ; BytePointer = (char *)(WatchPointAddress[x]) ;
000010AE  48C2      1554          ext.l     D2
000010B0  2002      1555          move.l    D2,D0
000010B2  E588      1556          lsl.l     #2,D0
000010B4  41F9 0803 1557          lea       _WatchPointAddress.L,A0
000010B8  0182      
000010BA  2A30 0800 1558          move.l    0(A0,D0.L),D5
                    1559   ; for(j = 0; j < (short)(16); j++)
000010BE  4243      1560          clr.w     D3
                    1561   DumpRegisters_12:
000010C0  0C43 0010 1562          cmp.w     #16,D3
000010C4  6C00 007E 1563          bge       DumpRegisters_14
                    1564   ; {
                    1565   ; c = ((char)(BytePointer[j]) & 0x7f) ;
000010C8  2045      1566          move.l    D5,A0
000010CA  48C3      1567          ext.l     D3
000010CC  1030 3800 1568          move.b    0(A0,D3.L),D0
000010D0  C03C 007F 1569          and.b     #127,D0
000010D4  1E00      1570          move.b    D0,D7
                    1571   ; if((c > (char)(0x7f)) || (c < (char)(' ')))
000010D6  0C07 007F 1572          cmp.b     #127,D7
000010DA  6206      1573          bhi.s     DumpRegisters_17
000010DC  0C07 0020 1574          cmp.b     #32,D7
000010E0  6416      1575          bhs.s     DumpRegisters_15
                    1576   DumpRegisters_17:
                    1577   ; sprintf(TempString, ".") ;
000010E2  4879 0000 1578          pea       @m68kde~1_21.L
000010E6  47F6      
000010E8  4879 0803 1579          pea       _TempString.L
000010EC  04E2      
000010EE  4EB9 0000 1580          jsr       _sprintf
000010F2  3C82      
000010F4  504F      1581          addq.w    #8,A7
000010F6  6026      1582          bra.s     DumpRegisters_16
                    1583   DumpRegisters_15:
                    1584   ; else
                    1585   ; sprintf(TempString, "%c", BytePointer[j]) ;
000010F8  2045      1586          move.l    D5,A0
000010FA  48C3      1587          ext.l     D3
000010FC  1230 3800 1588          move.b    0(A0,D3.L),D1
00001100  C2BC 0000 1589          and.l     #255,D1
00001104  00FF      
00001106  2F01      1590          move.l    D1,-(A7)
00001108  4879 0000 1591          pea       @m68kde~1_22.L
0000110C  47F8      
0000110E  4879 0803 1592          pea       _TempString.L
00001112  04E2      
00001114  4EB9 0000 1593          jsr       _sprintf
00001118  3C82      
0000111A  DEFC 000C 1594          add.w     #12,A7
                    1595   DumpRegisters_16:
                    1596   ; strcat(WatchPointString[x], TempString) ;
0000111E  4879 0803 1597          pea       _TempString.L
00001122  04E2      
00001124  220D      1598          move.l    A5,D1
00001126  48C2      1599          ext.l     D2
00001128  2F00      1600          move.l    D0,-(A7)
0000112A  2002      1601          move.l    D2,D0
0000112C  C1FC 0064 1602          muls      #100,D0
00001130  D280      1603          add.l     D0,D1
00001132  201F      1604          move.l    (A7)+,D0
00001134  2F01      1605          move.l    D1,-(A7)
00001136  4EB9 0000 1606          jsr       _strcat
0000113A  3CB6      
0000113C  504F      1607          addq.w    #8,A7
0000113E  5243      1608          addq.w    #1,D3
00001140  6000 FF7E 1609          bra       DumpRegisters_12
                    1610   DumpRegisters_14:
00001144  6020      1611          bra.s     DumpRegisters_5
                    1612   DumpRegisters_4:
                    1613   ; }
                    1614   ; }
                    1615   ; else
                    1616   ; strcpy(WatchPointString[x], "") ;
00001146  4879 0000 1617          pea       @m68kde~1_23.L
0000114A  47FC      
0000114C  220D      1618          move.l    A5,D1
0000114E  48C2      1619          ext.l     D2
00001150  2F00      1620          move.l    D0,-(A7)
00001152  2002      1621          move.l    D2,D0
00001154  C1FC 0064 1622          muls      #100,D0
00001158  D280      1623          add.l     D0,D1
0000115A  201F      1624          move.l    (A7)+,D0
0000115C  2F01      1625          move.l    D1,-(A7)
0000115E  4EB9 0000 1626          jsr       _strcpy
00001162  3A98      
00001164  504F      1627          addq.w    #8,A7
                    1628   DumpRegisters_5:
00001166  5242      1629          addq.w    #1,D2
00001168  6000 FE36 1630          bra       DumpRegisters_1
                    1631   DumpRegisters_3:
                    1632   ; }
                    1633   ; printf("\r\n\r\n D0 = $%08X  A0 = $%08X",d0,a0) ;
0000116C  2F39 0803 1634          move.l    _a0.L,-(A7)
00001170  0104      
00001172  2F39 0803 1635          move.l    _d0.L,-(A7)
00001176  00E4      
00001178  4879 0000 1636          pea       @m68kde~1_24.L
0000117C  47FE      
0000117E  4E93      1637          jsr       (A3)
00001180  DEFC 000C 1638          add.w     #12,A7
                    1639   ; printf("\r\n D1 = $%08X  A1 = $%08X",d1,a1) ;
00001184  2F39 0803 1640          move.l    _a1.L,-(A7)
00001188  0108      
0000118A  2F39 0803 1641          move.l    _d1.L,-(A7)
0000118E  00E8      
00001190  4879 0000 1642          pea       @m68kde~1_25.L
00001194  481A      
00001196  4E93      1643          jsr       (A3)
00001198  DEFC 000C 1644          add.w     #12,A7
                    1645   ; printf("\r\n D2 = $%08X  A2 = $%08X",d2,a2) ;
0000119C  2F39 0803 1646          move.l    _a2.L,-(A7)
000011A0  010C      
000011A2  2F39 0803 1647          move.l    _d2.L,-(A7)
000011A6  00EC      
000011A8  4879 0000 1648          pea       @m68kde~1_26.L
000011AC  4834      
000011AE  4E93      1649          jsr       (A3)
000011B0  DEFC 000C 1650          add.w     #12,A7
                    1651   ; printf("\r\n D3 = $%08X  A3 = $%08X",d3,a3) ;
000011B4  2F39 0803 1652          move.l    _a3.L,-(A7)
000011B8  0110      
000011BA  2F39 0803 1653          move.l    _d3.L,-(A7)
000011BE  00F0      
000011C0  4879 0000 1654          pea       @m68kde~1_27.L
000011C4  484E      
000011C6  4E93      1655          jsr       (A3)
000011C8  DEFC 000C 1656          add.w     #12,A7
                    1657   ; printf("\r\n D4 = $%08X  A4 = $%08X",d4,a4) ;
000011CC  2F39 0803 1658          move.l    _a4.L,-(A7)
000011D0  0114      
000011D2  2F39 0803 1659          move.l    _d4.L,-(A7)
000011D6  00F4      
000011D8  4879 0000 1660          pea       @m68kde~1_28.L
000011DC  4868      
000011DE  4E93      1661          jsr       (A3)
000011E0  DEFC 000C 1662          add.w     #12,A7
                    1663   ; printf("\r\n D5 = $%08X  A5 = $%08X",d5,a5) ;
000011E4  2F39 0803 1664          move.l    _a5.L,-(A7)
000011E8  0118      
000011EA  2F39 0803 1665          move.l    _d5.L,-(A7)
000011EE  00F8      
000011F0  4879 0000 1666          pea       @m68kde~1_29.L
000011F4  4882      
000011F6  4E93      1667          jsr       (A3)
000011F8  DEFC 000C 1668          add.w     #12,A7
                    1669   ; printf("\r\n D6 = $%08X  A6 = $%08X",d6,a6) ;
000011FC  2F39 0803 1670          move.l    _a6.L,-(A7)
00001200  011C      
00001202  2F39 0803 1671          move.l    _d6.L,-(A7)
00001206  00FC      
00001208  4879 0000 1672          pea       @m68kde~1_30.L
0000120C  489C      
0000120E  4E93      1673          jsr       (A3)
00001210  DEFC 000C 1674          add.w     #12,A7
                    1675   ; printf("\r\n D7 = $%08X  A7 = $%08X",d7,((SR & (unsigned short int)(0x2000)) == ((unsigned short int)(0x2000))) ? SSP : USP) ;
00001214  3214      1676          move.w    (A4),D1
00001216  C27C 2000 1677          and.w     #8192,D1
0000121A  0C41 2000 1678          cmp.w     #8192,D1
0000121E  6608      1679          bne.s     DumpRegisters_18
00001220  2239 0803 1680          move.l    _SSP.L,D1
00001224  0124      
00001226  6006      1681          bra.s     DumpRegisters_19
                    1682   DumpRegisters_18:
00001228  2239 0803 1683          move.l    _USP.L,D1
0000122C  0128      
                    1684   DumpRegisters_19:
0000122E  2F01      1685          move.l    D1,-(A7)
00001230  2F39 0803 1686          move.l    _d7.L,-(A7)
00001234  0100      
00001236  4879 0000 1687          pea       @m68kde~1_31.L
0000123A  48B6      
0000123C  4E93      1688          jsr       (A3)
0000123E  DEFC 000C 1689          add.w     #12,A7
                    1690   ; printf("\r\n\r\nUSP = $%08X  (A7) User SP", USP ) ;
00001242  2F39 0803 1691          move.l    _USP.L,-(A7)
00001246  0128      
00001248  4879 0000 1692          pea       @m68kde~1_32.L
0000124C  48D0      
0000124E  4E93      1693          jsr       (A3)
00001250  504F      1694          addq.w    #8,A7
                    1695   ; printf("\r\nSSP = $%08X  (A7) Supervisor SP", SSP) ;
00001252  2F39 0803 1696          move.l    _SSP.L,-(A7)
00001256  0124      
00001258  4879 0000 1697          pea       @m68kde~1_33.L
0000125C  48EE      
0000125E  4E93      1698          jsr       (A3)
00001260  504F      1699          addq.w    #8,A7
                    1700   ; printf("\r\n SR = $%04X   ",SR) ;
00001262  3214      1701          move.w    (A4),D1
00001264  C2BC 0000 1702          and.l     #65535,D1
00001268  FFFF      
0000126A  2F01      1703          move.l    D1,-(A7)
0000126C  4879 0000 1704          pea       @m68kde~1_34.L
00001270  4910      
00001272  4E93      1705          jsr       (A3)
00001274  504F      1706          addq.w    #8,A7
                    1707   ; // display the status word in characters etc.
                    1708   ; printf("   [") ;
00001276  4879 0000 1709          pea       @m68kde~1_35.L
0000127A  4922      
0000127C  4E93      1710          jsr       (A3)
0000127E  584F      1711          addq.w    #4,A7
                    1712   ; if((SR & (unsigned short int)(0x8000)) == (unsigned short int)(0x8000)) putchar('T') ; else putchar('-') ;      // Trace bit(bit 15)
00001280  3014      1713          move.w    (A4),D0
00001282  C07C 8000 1714          and.w     #32768,D0
00001286  0C40 8000 1715          cmp.w     #32768,D0
0000128A  660A      1716          bne.s     DumpRegisters_20
0000128C  4878 0054 1717          pea       84
00001290  4E92      1718          jsr       (A2)
00001292  584F      1719          addq.w    #4,A7
00001294  6008      1720          bra.s     DumpRegisters_21
                    1721   DumpRegisters_20:
00001296  4878 002D 1722          pea       45
0000129A  4E92      1723          jsr       (A2)
0000129C  584F      1724          addq.w    #4,A7
                    1725   DumpRegisters_21:
                    1726   ; if((SR & (unsigned short int)(0x2000)) == (unsigned short int)(0x2000)) putchar('S') ; else putchar('U') ;      // supervisor bit  (bit 13)
0000129E  3014      1727          move.w    (A4),D0
000012A0  C07C 2000 1728          and.w     #8192,D0
000012A4  0C40 2000 1729          cmp.w     #8192,D0
000012A8  660A      1730          bne.s     DumpRegisters_22
000012AA  4878 0053 1731          pea       83
000012AE  4E92      1732          jsr       (A2)
000012B0  584F      1733          addq.w    #4,A7
000012B2  6008      1734          bra.s     DumpRegisters_23
                    1735   DumpRegisters_22:
000012B4  4878 0055 1736          pea       85
000012B8  4E92      1737          jsr       (A2)
000012BA  584F      1738          addq.w    #4,A7
                    1739   DumpRegisters_23:
                    1740   ; if((SR & (unsigned short int)(0x0400)) == (unsigned short int)(0x0400)) putchar('1') ; else putchar('0') ;      // IRQ2 Bit (bit 10)
000012BC  3014      1741          move.w    (A4),D0
000012BE  C07C 0400 1742          and.w     #1024,D0
000012C2  0C40 0400 1743          cmp.w     #1024,D0
000012C6  660A      1744          bne.s     DumpRegisters_24
000012C8  4878 0031 1745          pea       49
000012CC  4E92      1746          jsr       (A2)
000012CE  584F      1747          addq.w    #4,A7
000012D0  6008      1748          bra.s     DumpRegisters_25
                    1749   DumpRegisters_24:
000012D2  4878 0030 1750          pea       48
000012D6  4E92      1751          jsr       (A2)
000012D8  584F      1752          addq.w    #4,A7
                    1753   DumpRegisters_25:
                    1754   ; if((SR & (unsigned short int)(0x0200)) == (unsigned short int)(0x0200)) putchar('1') ; else putchar('0') ;      // IRQ1 Bit (bit 9)
000012DA  3014      1755          move.w    (A4),D0
000012DC  C07C 0200 1756          and.w     #512,D0
000012E0  0C40 0200 1757          cmp.w     #512,D0
000012E4  660A      1758          bne.s     DumpRegisters_26
000012E6  4878 0031 1759          pea       49
000012EA  4E92      1760          jsr       (A2)
000012EC  584F      1761          addq.w    #4,A7
000012EE  6008      1762          bra.s     DumpRegisters_27
                    1763   DumpRegisters_26:
000012F0  4878 0030 1764          pea       48
000012F4  4E92      1765          jsr       (A2)
000012F6  584F      1766          addq.w    #4,A7
                    1767   DumpRegisters_27:
                    1768   ; if((SR & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100)) putchar('1') ; else putchar('0') ;      // IRQ0 Bit (bit 8)
000012F8  3014      1769          move.w    (A4),D0
000012FA  C07C 0100 1770          and.w     #256,D0
000012FE  0C40 0100 1771          cmp.w     #256,D0
00001302  660A      1772          bne.s     DumpRegisters_28
00001304  4878 0031 1773          pea       49
00001308  4E92      1774          jsr       (A2)
0000130A  584F      1775          addq.w    #4,A7
0000130C  6008      1776          bra.s     DumpRegisters_29
                    1777   DumpRegisters_28:
0000130E  4878 0030 1778          pea       48
00001312  4E92      1779          jsr       (A2)
00001314  584F      1780          addq.w    #4,A7
                    1781   DumpRegisters_29:
                    1782   ; if((SR & (unsigned short int)(0x0010)) == (unsigned short int)(0x0010)) putchar('X') ; else putchar('-') ;      // X Bit (bit 4)
00001316  3014      1783          move.w    (A4),D0
00001318  C07C 0010 1784          and.w     #16,D0
0000131C  0C40 0010 1785          cmp.w     #16,D0
00001320  660A      1786          bne.s     DumpRegisters_30
00001322  4878 0058 1787          pea       88
00001326  4E92      1788          jsr       (A2)
00001328  584F      1789          addq.w    #4,A7
0000132A  6008      1790          bra.s     DumpRegisters_31
                    1791   DumpRegisters_30:
0000132C  4878 002D 1792          pea       45
00001330  4E92      1793          jsr       (A2)
00001332  584F      1794          addq.w    #4,A7
                    1795   DumpRegisters_31:
                    1796   ; if((SR & (unsigned short int)(0x0008)) == (unsigned short int)(0x0008)) putchar('N') ; else putchar('-') ;      // N Bit (bit 3)
00001334  3014      1797          move.w    (A4),D0
00001336  C07C 0008 1798          and.w     #8,D0
0000133A  0C40 0008 1799          cmp.w     #8,D0
0000133E  660A      1800          bne.s     DumpRegisters_32
00001340  4878 004E 1801          pea       78
00001344  4E92      1802          jsr       (A2)
00001346  584F      1803          addq.w    #4,A7
00001348  6008      1804          bra.s     DumpRegisters_33
                    1805   DumpRegisters_32:
0000134A  4878 002D 1806          pea       45
0000134E  4E92      1807          jsr       (A2)
00001350  584F      1808          addq.w    #4,A7
                    1809   DumpRegisters_33:
                    1810   ; if((SR & (unsigned short int)(0x0004)) == (unsigned short int)(0x0004)) putchar('Z') ; else putchar('-') ;      // Z Bit (bit 2)
00001352  3014      1811          move.w    (A4),D0
00001354  C07C 0004 1812          and.w     #4,D0
00001358  0C40 0004 1813          cmp.w     #4,D0
0000135C  660A      1814          bne.s     DumpRegisters_34
0000135E  4878 005A 1815          pea       90
00001362  4E92      1816          jsr       (A2)
00001364  584F      1817          addq.w    #4,A7
00001366  6008      1818          bra.s     DumpRegisters_35
                    1819   DumpRegisters_34:
00001368  4878 002D 1820          pea       45
0000136C  4E92      1821          jsr       (A2)
0000136E  584F      1822          addq.w    #4,A7
                    1823   DumpRegisters_35:
                    1824   ; if((SR & (unsigned short int)(0x0002)) == (unsigned short int)(0x0002)) putchar('V') ; else putchar('-') ;      // V Bit (bit 1)
00001370  3014      1825          move.w    (A4),D0
00001372  C07C 0002 1826          and.w     #2,D0
00001376  0C40 0002 1827          cmp.w     #2,D0
0000137A  660A      1828          bne.s     DumpRegisters_36
0000137C  4878 0056 1829          pea       86
00001380  4E92      1830          jsr       (A2)
00001382  584F      1831          addq.w    #4,A7
00001384  6008      1832          bra.s     DumpRegisters_37
                    1833   DumpRegisters_36:
00001386  4878 002D 1834          pea       45
0000138A  4E92      1835          jsr       (A2)
0000138C  584F      1836          addq.w    #4,A7
                    1837   DumpRegisters_37:
                    1838   ; if((SR & (unsigned short int)(0x0001)) == (unsigned short int)(0x0001)) putchar('C') ; else putchar('-') ;      // C Bit (bit 0)
0000138E  3014      1839          move.w    (A4),D0
00001390  C07C 0001 1840          and.w     #1,D0
00001394  0C40 0001 1841          cmp.w     #1,D0
00001398  660A      1842          bne.s     DumpRegisters_38
0000139A  4878 0043 1843          pea       67
0000139E  4E92      1844          jsr       (A2)
000013A0  584F      1845          addq.w    #4,A7
000013A2  6008      1846          bra.s     DumpRegisters_39
                    1847   DumpRegisters_38:
000013A4  4878 002D 1848          pea       45
000013A8  4E92      1849          jsr       (A2)
000013AA  584F      1850          addq.w    #4,A7
                    1851   DumpRegisters_39:
                    1852   ; putchar(']') ;
000013AC  4878 005D 1853          pea       93
000013B0  4E92      1854          jsr       (A2)
000013B2  584F      1855          addq.w    #4,A7
                    1856   ; printf("\r\n PC = $%08X  ", PC) ;
000013B4  2F39 0803 1857          move.l    _PC.L,-(A7)
000013B8  0120      
000013BA  4879 0000 1858          pea       @m68kde~1_36.L
000013BE  4928      
000013C0  4E93      1859          jsr       (A3)
000013C2  504F      1860          addq.w    #8,A7
                    1861   ; if(*(unsigned short int *)(PC) == 0x4e4e)
000013C4  2039 0803 1862          move.l    _PC.L,D0
000013C8  0120      
000013CA  2040      1863          move.l    D0,A0
000013CC  3010      1864          move.w    (A0),D0
000013CE  0C40 4E4E 1865          cmp.w     #20046,D0
000013D2  660A      1866          bne.s     DumpRegisters_40
                    1867   ; printf("[@ BREAKPOINT]") ;
000013D4  4879 0000 1868          pea       @m68kde~1_37.L
000013D8  4938      
000013DA  4E93      1869          jsr       (A3)
000013DC  584F      1870          addq.w    #4,A7
                    1871   DumpRegisters_40:
                    1872   ; printf("\r\n") ;
000013DE  4879 0000 1873          pea       @m68kde~1_6.L
000013E2  4648      
000013E4  4E93      1874          jsr       (A3)
000013E6  584F      1875          addq.w    #4,A7
                    1876   ; for(i=0; i < 8; i++)    {
000013E8  4244      1877          clr.w     D4
                    1878   DumpRegisters_42:
000013EA  0C44 0008 1879          cmp.w     #8,D4
000013EE  6C00 0040 1880          bge       DumpRegisters_44
                    1881   ; if(WatchPointSetOrCleared[i] == 1)
000013F2  48C4      1882          ext.l     D4
000013F4  2004      1883          move.l    D4,D0
000013F6  E588      1884          lsl.l     #2,D0
000013F8  41F9 0803 1885          lea       _WatchPointSetOrCleared.L,A0
000013FC  01A2      
000013FE  2030 0800 1886          move.l    0(A0,D0.L),D0
00001402  0C80 0000 1887          cmp.l     #1,D0
00001406  0001      
00001408  6622      1888          bne.s     DumpRegisters_45
                    1889   ; printf("\r\nWP%d = %s", i, WatchPointString[i]) ;
0000140A  220D      1890          move.l    A5,D1
0000140C  48C4      1891          ext.l     D4
0000140E  2F00      1892          move.l    D0,-(A7)
00001410  2004      1893          move.l    D4,D0
00001412  C1FC 0064 1894          muls      #100,D0
00001416  D280      1895          add.l     D0,D1
00001418  201F      1896          move.l    (A7)+,D0
0000141A  2F01      1897          move.l    D1,-(A7)
0000141C  48C4      1898          ext.l     D4
0000141E  2F04      1899          move.l    D4,-(A7)
00001420  4879 0000 1900          pea       @m68kde~1_38.L
00001424  4948      
00001426  4E93      1901          jsr       (A3)
00001428  DEFC 000C 1902          add.w     #12,A7
                    1903   DumpRegisters_45:
0000142C  5244      1904          addq.w    #1,D4
0000142E  60BA      1905          bra       DumpRegisters_42
                    1906   DumpRegisters_44:
00001430  4CDF 3CFC 1907          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00001434  4E75      1908          rts
                    1909   ; }
                    1910   ; }
                    1911   ; // Trace Exception Handler
                    1912   ; void DumpRegistersandPause(void)
                    1913   ; {
                    1914   _DumpRegistersandPause:
00001436  2F0A      1915          move.l    A2,-(A7)
00001438  45F9 0000 1916          lea       _printf.L,A2
0000143C  3CF8      
                    1917   ; printf("\r\n\r\n\r\n\r\n\r\n\r\nSingle Step  :[ON]") ;
0000143E  4879 0000 1918          pea       @m68kde~1_39.L
00001442  4954      
00001444  4E92      1919          jsr       (A2)
00001446  584F      1920          addq.w    #4,A7
                    1921   ; printf("\r\nBreak Points :[Disabled]") ;
00001448  4879 0000 1922          pea       @m68kde~1_40.L
0000144C  4974      
0000144E  4E92      1923          jsr       (A2)
00001450  584F      1924          addq.w    #4,A7
                    1925   ; DumpRegisters() ;
00001452  4EB8 0F82 1926          jsr       _DumpRegisters
                    1927   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
00001456  4879 0000 1928          pea       @m68kde~1_41.L
0000145A  4990      
0000145C  4E92      1929          jsr       (A2)
0000145E  584F      1930          addq.w    #4,A7
                    1931   ; printf("\r\nPress <ESC> to Resume Program") ;
00001460  4879 0000 1932          pea       @m68kde~1_42.L
00001464  49BC      
00001466  4E92      1933          jsr       (A2)
00001468  584F      1934          addq.w    #4,A7
                    1935   ; menu() ;
0000146A  4EB9 0000 1936          jsr       _menu
0000146E  1FD6      
00001470  245F      1937          move.l    (A7)+,A2
00001472  4E75      1938          rts
                    1939   ; }
                    1940   ; void ChangeRegisters(void)
                    1941   ; {
                    1942   _ChangeRegisters:
00001474  4E56 FFFC 1943          link      A6,#-4
00001478  48E7 303C 1944          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
0000147C  45F9 0000 1945          lea       _printf.L,A2
00001480  3CF8      
00001482  47EE FFFC 1946          lea       -4(A6),A3
00001486  49F8 0B62 1947          lea       _Get8HexDigits.L,A4
0000148A  4BF8 0A26 1948          lea       __getch.L,A5
                    1949   ; // get register name d0-d7, a0-a7, up, sp, sr, pc
                    1950   ; int reg_val ;
                    1951   ; char c, reg[3] ;
                    1952   ; reg[0] = tolower(_getch()) ;
0000148E  2F00      1953          move.l    D0,-(A7)
00001490  4E95      1954          jsr       (A5)
00001492  2200      1955          move.l    D0,D1
00001494  201F      1956          move.l    (A7)+,D0
00001496  2F01      1957          move.l    D1,-(A7)
00001498  4EB9 0000 1958          jsr       _tolower
0000149C  3C56      
0000149E  584F      1959          addq.w    #4,A7
000014A0  1680      1960          move.b    D0,(A3)
                    1961   ; reg[1] = c = tolower(_getch()) ;
000014A2  2F00      1962          move.l    D0,-(A7)
000014A4  4E95      1963          jsr       (A5)
000014A6  2200      1964          move.l    D0,D1
000014A8  201F      1965          move.l    (A7)+,D0
000014AA  2F01      1966          move.l    D1,-(A7)
000014AC  4EB9 0000 1967          jsr       _tolower
000014B0  3C56      
000014B2  584F      1968          addq.w    #4,A7
000014B4  1400      1969          move.b    D0,D2
000014B6  1740 0001 1970          move.b    D0,1(A3)
                    1971   ; if(reg[0] == (char)('d'))  {    // change data register
000014BA  1013      1972          move.b    (A3),D0
000014BC  0C00 0064 1973          cmp.b     #100,D0
000014C0  6600 00AE 1974          bne       ChangeRegisters_1
                    1975   ; if((reg[1] > (char)('7')) || (reg[1] < (char)('0'))) {
000014C4  102B 0001 1976          move.b    1(A3),D0
000014C8  0C00 0037 1977          cmp.b     #55,D0
000014CC  6E0A      1978          bgt.s     ChangeRegisters_5
000014CE  102B 0001 1979          move.b    1(A3),D0
000014D2  0C00 0030 1980          cmp.b     #48,D0
000014D6  6C0E      1981          bge.s     ChangeRegisters_3
                    1982   ChangeRegisters_5:
                    1983   ; printf("\r\nIllegal Data Register : Use D0-D7.....\r\n") ;
000014D8  4879 0000 1984          pea       @m68kde~1_43.L
000014DC  49DC      
000014DE  4E92      1985          jsr       (A2)
000014E0  584F      1986          addq.w    #4,A7
                    1987   ; return ;
000014E2  6000 0244 1988          bra       ChangeRegisters_6
                    1989   ChangeRegisters_3:
                    1990   ; }
                    1991   ; else {
                    1992   ; printf("\r\nD%c = ", c) ;
000014E6  4882      1993          ext.w     D2
000014E8  48C2      1994          ext.l     D2
000014EA  2F02      1995          move.l    D2,-(A7)
000014EC  4879 0000 1996          pea       @m68kde~1_44.L
000014F0  4A08      
000014F2  4E92      1997          jsr       (A2)
000014F4  504F      1998          addq.w    #8,A7
                    1999   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000014F6  42A7      2000          clr.l     -(A7)
000014F8  4E94      2001          jsr       (A4)
000014FA  584F      2002          addq.w    #4,A7
000014FC  2600      2003          move.l    D0,D3
                    2004   ; }
                    2005   ; // bit cludgy but d0-d7 not stored as an array for good reason
                    2006   ; if(c == (char)('0'))
000014FE  0C02 0030 2007          cmp.b     #48,D2
00001502  660A      2008          bne.s     ChangeRegisters_7
                    2009   ; d0 = reg_val ;
00001504  23C3 0803 2010          move.l    D3,_d0.L
00001508  00E4      
0000150A  6000 0060 2011          bra       ChangeRegisters_20
                    2012   ChangeRegisters_7:
                    2013   ; else if(c == (char)('1'))
0000150E  0C02 0031 2014          cmp.b     #49,D2
00001512  660A      2015          bne.s     ChangeRegisters_9
                    2016   ; d1 = reg_val ;
00001514  23C3 0803 2017          move.l    D3,_d1.L
00001518  00E8      
0000151A  6000 0050 2018          bra       ChangeRegisters_20
                    2019   ChangeRegisters_9:
                    2020   ; else if(c == (char)('2'))
0000151E  0C02 0032 2021          cmp.b     #50,D2
00001522  660A      2022          bne.s     ChangeRegisters_11
                    2023   ; d2 = reg_val ;
00001524  23C3 0803 2024          move.l    D3,_d2.L
00001528  00EC      
0000152A  6000 0040 2025          bra       ChangeRegisters_20
                    2026   ChangeRegisters_11:
                    2027   ; else if(c == (char)('3'))
0000152E  0C02 0033 2028          cmp.b     #51,D2
00001532  6608      2029          bne.s     ChangeRegisters_13
                    2030   ; d3 = reg_val ;
00001534  23C3 0803 2031          move.l    D3,_d3.L
00001538  00F0      
0000153A  6030      2032          bra.s     ChangeRegisters_20
                    2033   ChangeRegisters_13:
                    2034   ; else if(c == (char)('4'))
0000153C  0C02 0034 2035          cmp.b     #52,D2
00001540  6608      2036          bne.s     ChangeRegisters_15
                    2037   ; d4 = reg_val ;
00001542  23C3 0803 2038          move.l    D3,_d4.L
00001546  00F4      
00001548  6022      2039          bra.s     ChangeRegisters_20
                    2040   ChangeRegisters_15:
                    2041   ; else if(c == (char)('5'))
0000154A  0C02 0035 2042          cmp.b     #53,D2
0000154E  6608      2043          bne.s     ChangeRegisters_17
                    2044   ; d5 = reg_val ;
00001550  23C3 0803 2045          move.l    D3,_d5.L
00001554  00F8      
00001556  6014      2046          bra.s     ChangeRegisters_20
                    2047   ChangeRegisters_17:
                    2048   ; else if(c == (char)('6'))
00001558  0C02 0036 2049          cmp.b     #54,D2
0000155C  6608      2050          bne.s     ChangeRegisters_19
                    2051   ; d6 = reg_val ;
0000155E  23C3 0803 2052          move.l    D3,_d6.L
00001562  00FC      
00001564  6006      2053          bra.s     ChangeRegisters_20
                    2054   ChangeRegisters_19:
                    2055   ; else
                    2056   ; d7 = reg_val ;
00001566  23C3 0803 2057          move.l    D3,_d7.L
0000156A  0100      
                    2058   ChangeRegisters_20:
0000156C  6000 01B6 2059          bra       ChangeRegisters_51
                    2060   ChangeRegisters_1:
                    2061   ; }
                    2062   ; else if(reg[0] == (char)('a'))  {    // change address register, a7 is the user stack pointer, sp is the system stack pointer
00001570  1013      2063          move.b    (A3),D0
00001572  0C00 0061 2064          cmp.b     #97,D0
00001576  6600 00A6 2065          bne       ChangeRegisters_21
                    2066   ; if((c > (char)('7')) || (c < (char)('0'))) {
0000157A  0C02 0037 2067          cmp.b     #55,D2
0000157E  6E06      2068          bgt.s     ChangeRegisters_25
00001580  0C02 0030 2069          cmp.b     #48,D2
00001584  6C0E      2070          bge.s     ChangeRegisters_23
                    2071   ChangeRegisters_25:
                    2072   ; printf("\r\nIllegal Address Register : Use A0-A7.....\r\n") ;
00001586  4879 0000 2073          pea       @m68kde~1_45.L
0000158A  4A12      
0000158C  4E92      2074          jsr       (A2)
0000158E  584F      2075          addq.w    #4,A7
                    2076   ; return ;
00001590  6000 0196 2077          bra       ChangeRegisters_6
                    2078   ChangeRegisters_23:
                    2079   ; }
                    2080   ; else {
                    2081   ; printf("\r\nA%c = ", c) ;
00001594  4882      2082          ext.w     D2
00001596  48C2      2083          ext.l     D2
00001598  2F02      2084          move.l    D2,-(A7)
0000159A  4879 0000 2085          pea       @m68kde~1_46.L
0000159E  4A40      
000015A0  4E92      2086          jsr       (A2)
000015A2  504F      2087          addq.w    #8,A7
                    2088   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000015A4  42A7      2089          clr.l     -(A7)
000015A6  4E94      2090          jsr       (A4)
000015A8  584F      2091          addq.w    #4,A7
000015AA  2600      2092          move.l    D0,D3
                    2093   ; }
                    2094   ; // bit cludgy but a0-a7 not stored as an array for good reason
                    2095   ; if(c == (char)('0'))
000015AC  0C02 0030 2096          cmp.b     #48,D2
000015B0  660A      2097          bne.s     ChangeRegisters_26
                    2098   ; a0 = reg_val ;
000015B2  23C3 0803 2099          move.l    D3,_a0.L
000015B6  0104      
000015B8  6000 0060 2100          bra       ChangeRegisters_39
                    2101   ChangeRegisters_26:
                    2102   ; else if(c == (char)('1'))
000015BC  0C02 0031 2103          cmp.b     #49,D2
000015C0  660A      2104          bne.s     ChangeRegisters_28
                    2105   ; a1 = reg_val ;
000015C2  23C3 0803 2106          move.l    D3,_a1.L
000015C6  0108      
000015C8  6000 0050 2107          bra       ChangeRegisters_39
                    2108   ChangeRegisters_28:
                    2109   ; else if(c == (char)('2'))
000015CC  0C02 0032 2110          cmp.b     #50,D2
000015D0  660A      2111          bne.s     ChangeRegisters_30
                    2112   ; a2 = reg_val ;
000015D2  23C3 0803 2113          move.l    D3,_a2.L
000015D6  010C      
000015D8  6000 0040 2114          bra       ChangeRegisters_39
                    2115   ChangeRegisters_30:
                    2116   ; else if(c == (char)('3'))
000015DC  0C02 0033 2117          cmp.b     #51,D2
000015E0  6608      2118          bne.s     ChangeRegisters_32
                    2119   ; a3 = reg_val ;
000015E2  23C3 0803 2120          move.l    D3,_a3.L
000015E6  0110      
000015E8  6030      2121          bra.s     ChangeRegisters_39
                    2122   ChangeRegisters_32:
                    2123   ; else if(c == (char)('4'))
000015EA  0C02 0034 2124          cmp.b     #52,D2
000015EE  6608      2125          bne.s     ChangeRegisters_34
                    2126   ; a4 = reg_val ;
000015F0  23C3 0803 2127          move.l    D3,_a4.L
000015F4  0114      
000015F6  6022      2128          bra.s     ChangeRegisters_39
                    2129   ChangeRegisters_34:
                    2130   ; else if(c == (char)('5'))
000015F8  0C02 0035 2131          cmp.b     #53,D2
000015FC  6608      2132          bne.s     ChangeRegisters_36
                    2133   ; a5 = reg_val ;
000015FE  23C3 0803 2134          move.l    D3,_a5.L
00001602  0118      
00001604  6014      2135          bra.s     ChangeRegisters_39
                    2136   ChangeRegisters_36:
                    2137   ; else if(c == (char)('6'))
00001606  0C02 0036 2138          cmp.b     #54,D2
0000160A  6608      2139          bne.s     ChangeRegisters_38
                    2140   ; a6 = reg_val ;
0000160C  23C3 0803 2141          move.l    D3,_a6.L
00001610  011C      
00001612  6006      2142          bra.s     ChangeRegisters_39
                    2143   ChangeRegisters_38:
                    2144   ; else
                    2145   ; USP = reg_val ;
00001614  23C3 0803 2146          move.l    D3,_USP.L
00001618  0128      
                    2147   ChangeRegisters_39:
0000161A  6000 0108 2148          bra       ChangeRegisters_51
                    2149   ChangeRegisters_21:
                    2150   ; }
                    2151   ; else if((reg[0] == (char)('u')) && (c == (char)('s')))  {
0000161E  1013      2152          move.b    (A3),D0
00001620  0C00 0075 2153          cmp.b     #117,D0
00001624  6600 004E 2154          bne       ChangeRegisters_40
00001628  0C02 0073 2155          cmp.b     #115,D2
0000162C  6600 0046 2156          bne       ChangeRegisters_40
                    2157   ; if(tolower(_getch()) == 'p')  {    // change user stack pointer
00001630  2F00      2158          move.l    D0,-(A7)
00001632  4E95      2159          jsr       (A5)
00001634  2200      2160          move.l    D0,D1
00001636  201F      2161          move.l    (A7)+,D0
00001638  2F01      2162          move.l    D1,-(A7)
0000163A  4EB9 0000 2163          jsr       _tolower
0000163E  3C56      
00001640  584F      2164          addq.w    #4,A7
00001642  0C80 0000 2165          cmp.l     #112,D0
00001646  0070      
00001648  6618      2166          bne.s     ChangeRegisters_42
                    2167   ; printf("\r\nUser SP = ") ;
0000164A  4879 0000 2168          pea       @m68kde~1_47.L
0000164E  4A4A      
00001650  4E92      2169          jsr       (A2)
00001652  584F      2170          addq.w    #4,A7
                    2171   ; USP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001654  42A7      2172          clr.l     -(A7)
00001656  4E94      2173          jsr       (A4)
00001658  584F      2174          addq.w    #4,A7
0000165A  23C0 0803 2175          move.l    D0,_USP.L
0000165E  0128      
00001660  600E      2176          bra.s     ChangeRegisters_43
                    2177   ChangeRegisters_42:
                    2178   ; }
                    2179   ; else {
                    2180   ; printf("\r\nIllegal Register....") ;
00001662  4879 0000 2181          pea       @m68kde~1_48.L
00001666  4A58      
00001668  4E92      2182          jsr       (A2)
0000166A  584F      2183          addq.w    #4,A7
                    2184   ; return ;
0000166C  6000 00BA 2185          bra       ChangeRegisters_6
                    2186   ChangeRegisters_43:
00001670  6000 00B2 2187          bra       ChangeRegisters_51
                    2188   ChangeRegisters_40:
                    2189   ; }
                    2190   ; }
                    2191   ; else if((reg[0] == (char)('s')) && (c == (char)('s')))  {
00001674  1013      2192          move.b    (A3),D0
00001676  0C00 0073 2193          cmp.b     #115,D0
0000167A  6600 004E 2194          bne       ChangeRegisters_44
0000167E  0C02 0073 2195          cmp.b     #115,D2
00001682  6600 0046 2196          bne       ChangeRegisters_44
                    2197   ; if(tolower(_getch()) == 'p')  {    // change system stack pointer
00001686  2F00      2198          move.l    D0,-(A7)
00001688  4E95      2199          jsr       (A5)
0000168A  2200      2200          move.l    D0,D1
0000168C  201F      2201          move.l    (A7)+,D0
0000168E  2F01      2202          move.l    D1,-(A7)
00001690  4EB9 0000 2203          jsr       _tolower
00001694  3C56      
00001696  584F      2204          addq.w    #4,A7
00001698  0C80 0000 2205          cmp.l     #112,D0
0000169C  0070      
0000169E  6618      2206          bne.s     ChangeRegisters_46
                    2207   ; printf("\r\nSystem SP = ") ;
000016A0  4879 0000 2208          pea       @m68kde~1_49.L
000016A4  4A70      
000016A6  4E92      2209          jsr       (A2)
000016A8  584F      2210          addq.w    #4,A7
                    2211   ; SSP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000016AA  42A7      2212          clr.l     -(A7)
000016AC  4E94      2213          jsr       (A4)
000016AE  584F      2214          addq.w    #4,A7
000016B0  23C0 0803 2215          move.l    D0,_SSP.L
000016B4  0124      
000016B6  600E      2216          bra.s     ChangeRegisters_47
                    2217   ChangeRegisters_46:
                    2218   ; }
                    2219   ; else {
                    2220   ; printf("\r\nIllegal Register....") ;
000016B8  4879 0000 2221          pea       @m68kde~1_48.L
000016BC  4A58      
000016BE  4E92      2222          jsr       (A2)
000016C0  584F      2223          addq.w    #4,A7
                    2224   ; return ;
000016C2  6000 0064 2225          bra       ChangeRegisters_6
                    2226   ChangeRegisters_47:
000016C6  6000 005C 2227          bra       ChangeRegisters_51
                    2228   ChangeRegisters_44:
                    2229   ; }
                    2230   ; }
                    2231   ; else if((reg[0] == (char)('p')) && (c == (char)('c')))  {    // change program counter
000016CA  1013      2232          move.b    (A3),D0
000016CC  0C00 0070 2233          cmp.b     #112,D0
000016D0  6620      2234          bne.s     ChangeRegisters_48
000016D2  0C02 0063 2235          cmp.b     #99,D2
000016D6  661A      2236          bne.s     ChangeRegisters_48
                    2237   ; printf("\r\nPC = ") ;
000016D8  4879 0000 2238          pea       @m68kde~1_50.L
000016DC  4A80      
000016DE  4E92      2239          jsr       (A2)
000016E0  584F      2240          addq.w    #4,A7
                    2241   ; PC = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000016E2  42A7      2242          clr.l     -(A7)
000016E4  4E94      2243          jsr       (A4)
000016E6  584F      2244          addq.w    #4,A7
000016E8  23C0 0803 2245          move.l    D0,_PC.L
000016EC  0120      
000016EE  6000 0034 2246          bra       ChangeRegisters_51
                    2247   ChangeRegisters_48:
                    2248   ; }
                    2249   ; else if((reg[0] == (char)('s')) && (c == (char)('r')))  {    // change status register
000016F2  1013      2250          move.b    (A3),D0
000016F4  0C00 0073 2251          cmp.b     #115,D0
000016F8  6620      2252          bne.s     ChangeRegisters_50
000016FA  0C02 0072 2253          cmp.b     #114,D2
000016FE  661A      2254          bne.s     ChangeRegisters_50
                    2255   ; printf("\r\nSR = ") ;
00001700  4879 0000 2256          pea       @m68kde~1_51.L
00001704  4A88      
00001706  4E92      2257          jsr       (A2)
00001708  584F      2258          addq.w    #4,A7
                    2259   ; SR = Get4HexDigits(0) ;    // read 16 bit value from user keyboard
0000170A  42A7      2260          clr.l     -(A7)
0000170C  4EB8 0B16 2261          jsr       _Get4HexDigits
00001710  584F      2262          addq.w    #4,A7
00001712  33C0 0803 2263          move.w    D0,_SR.L
00001716  012C      
00001718  600A      2264          bra.s     ChangeRegisters_51
                    2265   ChangeRegisters_50:
                    2266   ; }
                    2267   ; else
                    2268   ; printf("\r\nIllegal Register: Use A0-A7, D0-D7, SSP, USP, PC or SR\r\n") ;
0000171A  4879 0000 2269          pea       @m68kde~1_52.L
0000171E  4A90      
00001720  4E92      2270          jsr       (A2)
00001722  584F      2271          addq.w    #4,A7
                    2272   ChangeRegisters_51:
                    2273   ; DumpRegisters() ;
00001724  4EB8 0F82 2274          jsr       _DumpRegisters
                    2275   ChangeRegisters_6:
00001728  4CDF 3C0C 2276          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
0000172C  4E5E      2277          unlk      A6
0000172E  4E75      2278          rts
                    2279   ; }
                    2280   ; void BreakPointDisplay(void)
                    2281   ; {
                    2282   _BreakPointDisplay:
00001730  48E7 3030 2283          movem.l   D2/D3/A2/A3,-(A7)
00001734  45F9 0000 2284          lea       _printf.L,A2
00001738  3CF8      
0000173A  47F9 0803 2285          lea       _BreakPointAddress.L,A3
0000173E  012E      
                    2286   ; int i, BreakPointsSet = 0 ;
00001740  4283      2287          clr.l     D3
                    2288   ; // any break points  set
                    2289   ; for(i = 0; i < 8; i++)  {
00001742  4282      2290          clr.l     D2
                    2291   BreakPointDisplay_1:
00001744  0C82 0000 2292          cmp.l     #8,D2
00001748  0008      
0000174A  6C1C      2293          bge.s     BreakPointDisplay_3
                    2294   ; if(BreakPointSetOrCleared[i] == 1)
0000174C  2002      2295          move.l    D2,D0
0000174E  E588      2296          lsl.l     #2,D0
00001750  41F9 0803 2297          lea       _BreakPointSetOrCleared.L,A0
00001754  015E      
00001756  2030 0800 2298          move.l    0(A0,D0.L),D0
0000175A  0C80 0000 2299          cmp.l     #1,D0
0000175E  0001      
00001760  6602      2300          bne.s     BreakPointDisplay_4
                    2301   ; BreakPointsSet = 1;
00001762  7601      2302          moveq     #1,D3
                    2303   BreakPointDisplay_4:
00001764  5282      2304          addq.l    #1,D2
00001766  60DC      2305          bra       BreakPointDisplay_1
                    2306   BreakPointDisplay_3:
                    2307   ; }
                    2308   ; if(BreakPointsSet == 1) {
00001768  0C83 0000 2309          cmp.l     #1,D3
0000176C  0001      
0000176E  6616      2310          bne.s     BreakPointDisplay_6
                    2311   ; printf("\r\n\r\nNum     Address      Instruction") ;
00001770  4879 0000 2312          pea       @m68kde~1_53.L
00001774  4ACC      
00001776  4E92      2313          jsr       (A2)
00001778  584F      2314          addq.w    #4,A7
                    2315   ; printf("\r\n---     ---------    -----------") ;
0000177A  4879 0000 2316          pea       @m68kde~1_54.L
0000177E  4AF2      
00001780  4E92      2317          jsr       (A2)
00001782  584F      2318          addq.w    #4,A7
00001784  600A      2319          bra.s     BreakPointDisplay_7
                    2320   BreakPointDisplay_6:
                    2321   ; }
                    2322   ; else
                    2323   ; printf("\r\nNo BreakPoints Set") ;
00001786  4879 0000 2324          pea       @m68kde~1_55.L
0000178A  4B16      
0000178C  4E92      2325          jsr       (A2)
0000178E  584F      2326          addq.w    #4,A7
                    2327   BreakPointDisplay_7:
                    2328   ; for(i = 0; i < 8; i++)  {
00001790  4282      2329          clr.l     D2
                    2330   BreakPointDisplay_8:
00001792  0C82 0000 2331          cmp.l     #8,D2
00001796  0008      
00001798  6C00 005A 2332          bge       BreakPointDisplay_10
                    2333   ; // put opcode back, then put break point back
                    2334   ; if(BreakPointSetOrCleared[i] == 1)  {
0000179C  2002      2335          move.l    D2,D0
0000179E  E588      2336          lsl.l     #2,D0
000017A0  41F9 0803 2337          lea       _BreakPointSetOrCleared.L,A0
000017A4  015E      
000017A6  2030 0800 2338          move.l    0(A0,D0.L),D0
000017AA  0C80 0000 2339          cmp.l     #1,D0
000017AE  0001      
000017B0  6600 003E 2340          bne       BreakPointDisplay_11
                    2341   ; *(unsigned short int *)(BreakPointAddress[i]) = BreakPointInstruction[i];
000017B4  2002      2342          move.l    D2,D0
000017B6  E388      2343          lsl.l     #1,D0
000017B8  41F9 0803 2344          lea       _BreakPointInstruction.L,A0
000017BC  014E      
000017BE  2202      2345          move.l    D2,D1
000017C0  E589      2346          lsl.l     #2,D1
000017C2  2233 1800 2347          move.l    0(A3,D1.L),D1
000017C6  2241      2348          move.l    D1,A1
000017C8  32B0 0800 2349          move.w    0(A0,D0.L),(A1)
                    2350   ; *(unsigned short int *)(BreakPointAddress[i]) = (unsigned short int)(0x4e4e) ;
000017CC  2002      2351          move.l    D2,D0
000017CE  E588      2352          lsl.l     #2,D0
000017D0  2033 0800 2353          move.l    0(A3,D0.L),D0
000017D4  2040      2354          move.l    D0,A0
000017D6  30BC 4E4E 2355          move.w    #20046,(A0)
                    2356   ; printf("\r\n%3d     $%08x",i, BreakPointAddress[i]) ;
000017DA  2202      2357          move.l    D2,D1
000017DC  E589      2358          lsl.l     #2,D1
000017DE  2F33 1800 2359          move.l    0(A3,D1.L),-(A7)
000017E2  2F02      2360          move.l    D2,-(A7)
000017E4  4879 0000 2361          pea       @m68kde~1_56.L
000017E8  4B2C      
000017EA  4E92      2362          jsr       (A2)
000017EC  DEFC 000C 2363          add.w     #12,A7
                    2364   BreakPointDisplay_11:
000017F0  5282      2365          addq.l    #1,D2
000017F2  609E      2366          bra       BreakPointDisplay_8
                    2367   BreakPointDisplay_10:
                    2368   ; }
                    2369   ; }
                    2370   ; printf("\r\n") ;
000017F4  4879 0000 2371          pea       @m68kde~1_6.L
000017F8  4648      
000017FA  4E92      2372          jsr       (A2)
000017FC  584F      2373          addq.w    #4,A7
000017FE  4CDF 0C0C 2374          movem.l   (A7)+,D2/D3/A2/A3
00001802  4E75      2375          rts
                    2376   ; }
                    2377   ; void WatchPointDisplay(void)
                    2378   ; {
                    2379   _WatchPointDisplay:
00001804  48E7 3020 2380          movem.l   D2/D3/A2,-(A7)
00001808  45F9 0000 2381          lea       _printf.L,A2
0000180C  3CF8      
                    2382   ; int i ;
                    2383   ; int WatchPointsSet = 0 ;
0000180E  4283      2384          clr.l     D3
                    2385   ; // any watchpoints set
                    2386   ; for(i = 0; i < 8; i++)  {
00001810  4282      2387          clr.l     D2
                    2388   WatchPointDisplay_1:
00001812  0C82 0000 2389          cmp.l     #8,D2
00001816  0008      
00001818  6C1C      2390          bge.s     WatchPointDisplay_3
                    2391   ; if(WatchPointSetOrCleared[i] == 1)
0000181A  2002      2392          move.l    D2,D0
0000181C  E588      2393          lsl.l     #2,D0
0000181E  41F9 0803 2394          lea       _WatchPointSetOrCleared.L,A0
00001822  01A2      
00001824  2030 0800 2395          move.l    0(A0,D0.L),D0
00001828  0C80 0000 2396          cmp.l     #1,D0
0000182C  0001      
0000182E  6602      2397          bne.s     WatchPointDisplay_4
                    2398   ; WatchPointsSet = 1;
00001830  7601      2399          moveq     #1,D3
                    2400   WatchPointDisplay_4:
00001832  5282      2401          addq.l    #1,D2
00001834  60DC      2402          bra       WatchPointDisplay_1
                    2403   WatchPointDisplay_3:
                    2404   ; }
                    2405   ; if(WatchPointsSet == 1) {
00001836  0C83 0000 2406          cmp.l     #1,D3
0000183A  0001      
0000183C  6616      2407          bne.s     WatchPointDisplay_6
                    2408   ; printf("\r\nNum     Address") ;
0000183E  4879 0000 2409          pea       @m68kde~1_57.L
00001842  4B3C      
00001844  4E92      2410          jsr       (A2)
00001846  584F      2411          addq.w    #4,A7
                    2412   ; printf("\r\n---     ---------") ;
00001848  4879 0000 2413          pea       @m68kde~1_58.L
0000184C  4B4E      
0000184E  4E92      2414          jsr       (A2)
00001850  584F      2415          addq.w    #4,A7
00001852  600A      2416          bra.s     WatchPointDisplay_7
                    2417   WatchPointDisplay_6:
                    2418   ; }
                    2419   ; else
                    2420   ; printf("\r\nNo WatchPoints Set") ;
00001854  4879 0000 2421          pea       @m68kde~1_59.L
00001858  4B62      
0000185A  4E92      2422          jsr       (A2)
0000185C  584F      2423          addq.w    #4,A7
                    2424   WatchPointDisplay_7:
                    2425   ; for(i = 0; i < 8; i++)  {
0000185E  4282      2426          clr.l     D2
                    2427   WatchPointDisplay_8:
00001860  0C82 0000 2428          cmp.l     #8,D2
00001864  0008      
00001866  6C00 0038 2429          bge       WatchPointDisplay_10
                    2430   ; if(WatchPointSetOrCleared[i] == 1)
0000186A  2002      2431          move.l    D2,D0
0000186C  E588      2432          lsl.l     #2,D0
0000186E  41F9 0803 2433          lea       _WatchPointSetOrCleared.L,A0
00001872  01A2      
00001874  2030 0800 2434          move.l    0(A0,D0.L),D0
00001878  0C80 0000 2435          cmp.l     #1,D0
0000187C  0001      
0000187E  661C      2436          bne.s     WatchPointDisplay_11
                    2437   ; printf("\r\n%3d     $%08x",i, WatchPointAddress[i]) ;
00001880  2202      2438          move.l    D2,D1
00001882  E589      2439          lsl.l     #2,D1
00001884  41F9 0803 2440          lea       _WatchPointAddress.L,A0
00001888  0182      
0000188A  2F30 1800 2441          move.l    0(A0,D1.L),-(A7)
0000188E  2F02      2442          move.l    D2,-(A7)
00001890  4879 0000 2443          pea       @m68kde~1_56.L
00001894  4B2C      
00001896  4E92      2444          jsr       (A2)
00001898  DEFC 000C 2445          add.w     #12,A7
                    2446   WatchPointDisplay_11:
0000189C  5282      2447          addq.l    #1,D2
0000189E  60C0      2448          bra       WatchPointDisplay_8
                    2449   WatchPointDisplay_10:
                    2450   ; }
                    2451   ; printf("\r\n") ;
000018A0  4879 0000 2452          pea       @m68kde~1_6.L
000018A4  4648      
000018A6  4E92      2453          jsr       (A2)
000018A8  584F      2454          addq.w    #4,A7
000018AA  4CDF 040C 2455          movem.l   (A7)+,D2/D3/A2
000018AE  4E75      2456          rts
                    2457   ; }
                    2458   ; void BreakPointClear(void)
                    2459   ; {
                    2460   _BreakPointClear:
000018B0  4E56 FFFC 2461          link      A6,#-4
000018B4  48E7 2020 2462          movem.l   D2/A2,-(A7)
000018B8  45F9 0000 2463          lea       _printf.L,A2
000018BC  3CF8      
                    2464   ; unsigned int i ;
                    2465   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2466   ; BreakPointDisplay() ;
000018BE  4EB8 1730 2467          jsr       _BreakPointDisplay
                    2468   ; printf("\r\nEnter Break Point Number: ") ;
000018C2  4879 0000 2469          pea       @m68kde~1_60.L
000018C6  4B78      
000018C8  4E92      2470          jsr       (A2)
000018CA  584F      2471          addq.w    #4,A7
                    2472   ; i = xtod(_getch()) ;           // get break pointer number
000018CC  2F00      2473          move.l    D0,-(A7)
000018CE  4EB8 0A26 2474          jsr       __getch
000018D2  2200      2475          move.l    D0,D1
000018D4  201F      2476          move.l    (A7)+,D0
000018D6  2F01      2477          move.l    D1,-(A7)
000018D8  4EB8 0A90 2478          jsr       _xtod
000018DC  584F      2479          addq.w    #4,A7
000018DE  C0BC 0000 2480          and.l     #255,D0
000018E2  00FF      
000018E4  2400      2481          move.l    D0,D2
                    2482   ; if((i < 0) || (i > 7))   {
000018E6  0C82 0000 2483          cmp.l     #0,D2
000018EA  0000      
000018EC  6508      2484          blo.s     BreakPointClear_3
000018EE  0C82 0000 2485          cmp.l     #7,D2
000018F2  0007      
000018F4  630E      2486          bls.s     BreakPointClear_1
                    2487   BreakPointClear_3:
                    2488   ; printf("\r\nIllegal Range : Use 0 - 7") ;
000018F6  4879 0000 2489          pea       @m68kde~1_61.L
000018FA  4B96      
000018FC  4E92      2490          jsr       (A2)
000018FE  584F      2491          addq.w    #4,A7
                    2492   ; return ;
00001900  6000 0080 2493          bra       BreakPointClear_4
                    2494   BreakPointClear_1:
                    2495   ; }
                    2496   ; if(BreakPointSetOrCleared[i] == 1)  {       // if break point set
00001904  2002      2497          move.l    D2,D0
00001906  E588      2498          lsl.l     #2,D0
00001908  41F9 0803 2499          lea       _BreakPointSetOrCleared.L,A0
0000190C  015E      
0000190E  2030 0800 2500          move.l    0(A0,D0.L),D0
00001912  0C80 0000 2501          cmp.l     #1,D0
00001916  0001      
00001918  6600 005A 2502          bne       BreakPointClear_5
                    2503   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program we are about to change
0000191C  2002      2504          move.l    D2,D0
0000191E  E588      2505          lsl.l     #2,D0
00001920  41F9 0803 2506          lea       _BreakPointAddress.L,A0
00001924  012E      
00001926  2D70 0800 2507          move.l    0(A0,D0.L),-4(A6)
0000192A  FFFC      
                    2508   ; BreakPointAddress[i] = 0 ;
0000192C  2002      2509          move.l    D2,D0
0000192E  E588      2510          lsl.l     #2,D0
00001930  41F9 0803 2511          lea       _BreakPointAddress.L,A0
00001934  012E      
00001936  42B0 0800 2512          clr.l     0(A0,D0.L)
                    2513   ; BreakPointSetOrCleared[i] = 0 ;
0000193A  2002      2514          move.l    D2,D0
0000193C  E588      2515          lsl.l     #2,D0
0000193E  41F9 0803 2516          lea       _BreakPointSetOrCleared.L,A0
00001942  015E      
00001944  42B0 0800 2517          clr.l     0(A0,D0.L)
                    2518   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
00001948  2002      2519          move.l    D2,D0
0000194A  E388      2520          lsl.l     #1,D0
0000194C  41F9 0803 2521          lea       _BreakPointInstruction.L,A0
00001950  014E      
00001952  226E FFFC 2522          move.l    -4(A6),A1
00001956  32B0 0800 2523          move.w    0(A0,D0.L),(A1)
                    2524   ; BreakPointInstruction[i] = 0 ;
0000195A  2002      2525          move.l    D2,D0
0000195C  E388      2526          lsl.l     #1,D0
0000195E  41F9 0803 2527          lea       _BreakPointInstruction.L,A0
00001962  014E      
00001964  4270 0800 2528          clr.w     0(A0,D0.L)
                    2529   ; printf("\r\nBreak Point Cleared.....\r\n") ;
00001968  4879 0000 2530          pea       @m68kde~1_62.L
0000196C  4BB2      
0000196E  4E92      2531          jsr       (A2)
00001970  584F      2532          addq.w    #4,A7
00001972  600A      2533          bra.s     BreakPointClear_6
                    2534   BreakPointClear_5:
                    2535   ; }
                    2536   ; else
                    2537   ; printf("\r\nBreak Point wasn't Set.....") ;
00001974  4879 0000 2538          pea       @m68kde~1_63.L
00001978  4BD0      
0000197A  4E92      2539          jsr       (A2)
0000197C  584F      2540          addq.w    #4,A7
                    2541   BreakPointClear_6:
                    2542   ; BreakPointDisplay() ;
0000197E  4EB8 1730 2543          jsr       _BreakPointDisplay
                    2544   ; return ;
                    2545   BreakPointClear_4:
00001982  4CDF 0404 2546          movem.l   (A7)+,D2/A2
00001986  4E5E      2547          unlk      A6
00001988  4E75      2548          rts
                    2549   ; }
                    2550   ; void WatchPointClear(void)
                    2551   ; {
                    2552   _WatchPointClear:
0000198A  48E7 2020 2553          movem.l   D2/A2,-(A7)
0000198E  45F9 0000 2554          lea       _printf.L,A2
00001992  3CF8      
                    2555   ; unsigned int i ;
                    2556   ; WatchPointDisplay() ;
00001994  4EB8 1804 2557          jsr       _WatchPointDisplay
                    2558   ; printf("\r\nEnter Watch Point Number: ") ;
00001998  4879 0000 2559          pea       @m68kde~1_64.L
0000199C  4BEE      
0000199E  4E92      2560          jsr       (A2)
000019A0  584F      2561          addq.w    #4,A7
                    2562   ; i = xtod(_getch()) ;           // get watch pointer number
000019A2  2F00      2563          move.l    D0,-(A7)
000019A4  4EB8 0A26 2564          jsr       __getch
000019A8  2200      2565          move.l    D0,D1
000019AA  201F      2566          move.l    (A7)+,D0
000019AC  2F01      2567          move.l    D1,-(A7)
000019AE  4EB8 0A90 2568          jsr       _xtod
000019B2  584F      2569          addq.w    #4,A7
000019B4  C0BC 0000 2570          and.l     #255,D0
000019B8  00FF      
000019BA  2400      2571          move.l    D0,D2
                    2572   ; if((i < 0) || (i > 7))   {
000019BC  0C82 0000 2573          cmp.l     #0,D2
000019C0  0000      
000019C2  6508      2574          blo.s     WatchPointClear_3
000019C4  0C82 0000 2575          cmp.l     #7,D2
000019C8  0007      
000019CA  630E      2576          bls.s     WatchPointClear_1
                    2577   WatchPointClear_3:
                    2578   ; printf("\r\nIllegal Range : Use 0 - 7") ;
000019CC  4879 0000 2579          pea       @m68kde~1_61.L
000019D0  4B96      
000019D2  4E92      2580          jsr       (A2)
000019D4  584F      2581          addq.w    #4,A7
                    2582   ; return ;
000019D6  6000 004E 2583          bra       WatchPointClear_4
                    2584   WatchPointClear_1:
                    2585   ; }
                    2586   ; if(WatchPointSetOrCleared[i] == 1)  {       // if watch point set
000019DA  2002      2587          move.l    D2,D0
000019DC  E588      2588          lsl.l     #2,D0
000019DE  41F9 0803 2589          lea       _WatchPointSetOrCleared.L,A0
000019E2  01A2      
000019E4  2030 0800 2590          move.l    0(A0,D0.L),D0
000019E8  0C80 0000 2591          cmp.l     #1,D0
000019EC  0001      
000019EE  6628      2592          bne.s     WatchPointClear_5
                    2593   ; WatchPointAddress[i] = 0 ;
000019F0  2002      2594          move.l    D2,D0
000019F2  E588      2595          lsl.l     #2,D0
000019F4  41F9 0803 2596          lea       _WatchPointAddress.L,A0
000019F8  0182      
000019FA  42B0 0800 2597          clr.l     0(A0,D0.L)
                    2598   ; WatchPointSetOrCleared[i] = 0 ;
000019FE  2002      2599          move.l    D2,D0
00001A00  E588      2600          lsl.l     #2,D0
00001A02  41F9 0803 2601          lea       _WatchPointSetOrCleared.L,A0
00001A06  01A2      
00001A08  42B0 0800 2602          clr.l     0(A0,D0.L)
                    2603   ; printf("\r\nWatch Point Cleared.....\r\n") ;
00001A0C  4879 0000 2604          pea       @m68kde~1_65.L
00001A10  4C0C      
00001A12  4E92      2605          jsr       (A2)
00001A14  584F      2606          addq.w    #4,A7
00001A16  600A      2607          bra.s     WatchPointClear_6
                    2608   WatchPointClear_5:
                    2609   ; }
                    2610   ; else
                    2611   ; printf("\r\nWatch Point Was not Set.....") ;
00001A18  4879 0000 2612          pea       @m68kde~1_66.L
00001A1C  4C2A      
00001A1E  4E92      2613          jsr       (A2)
00001A20  584F      2614          addq.w    #4,A7
                    2615   WatchPointClear_6:
                    2616   ; WatchPointDisplay() ;
00001A22  4EB8 1804 2617          jsr       _WatchPointDisplay
                    2618   ; return ;
                    2619   WatchPointClear_4:
00001A26  4CDF 0404 2620          movem.l   (A7)+,D2/A2
00001A2A  4E75      2621          rts
                    2622   ; }
                    2623   ; void DisableBreakPoints(void)
                    2624   ; {
                    2625   _DisableBreakPoints:
00001A2C  4E56 FFFC 2626          link      A6,#-4
00001A30  2F02      2627          move.l    D2,-(A7)
                    2628   ; int i ;
                    2629   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2630   ; for(i = 0; i < 8; i++)  {
00001A32  4282      2631          clr.l     D2
                    2632   DisableBreakPoints_1:
00001A34  0C82 0000 2633          cmp.l     #8,D2
00001A38  0008      
00001A3A  6C00 003E 2634          bge       DisableBreakPoints_3
                    2635   ; if(BreakPointSetOrCleared[i] == 1)    {                                                    // if break point set
00001A3E  2002      2636          move.l    D2,D0
00001A40  E588      2637          lsl.l     #2,D0
00001A42  41F9 0803 2638          lea       _BreakPointSetOrCleared.L,A0
00001A46  015E      
00001A48  2030 0800 2639          move.l    0(A0,D0.L),D0
00001A4C  0C80 0000 2640          cmp.l     #1,D0
00001A50  0001      
00001A52  6622      2641          bne.s     DisableBreakPoints_4
                    2642   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001A54  2002      2643          move.l    D2,D0
00001A56  E588      2644          lsl.l     #2,D0
00001A58  41F9 0803 2645          lea       _BreakPointAddress.L,A0
00001A5C  012E      
00001A5E  2D70 0800 2646          move.l    0(A0,D0.L),-4(A6)
00001A62  FFFC      
                    2647   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program overwritting the $4e4e
00001A64  2002      2648          move.l    D2,D0
00001A66  E388      2649          lsl.l     #1,D0
00001A68  41F9 0803 2650          lea       _BreakPointInstruction.L,A0
00001A6C  014E      
00001A6E  226E FFFC 2651          move.l    -4(A6),A1
00001A72  32B0 0800 2652          move.w    0(A0,D0.L),(A1)
                    2653   DisableBreakPoints_4:
00001A76  5282      2654          addq.l    #1,D2
00001A78  60BA      2655          bra       DisableBreakPoints_1
                    2656   DisableBreakPoints_3:
00001A7A  241F      2657          move.l    (A7)+,D2
00001A7C  4E5E      2658          unlk      A6
00001A7E  4E75      2659          rts
                    2660   ; }
                    2661   ; }
                    2662   ; }
                    2663   ; void EnableBreakPoints(void)
                    2664   ; {
                    2665   _EnableBreakPoints:
00001A80  4E56 FFFC 2666          link      A6,#-4
00001A84  2F02      2667          move.l    D2,-(A7)
                    2668   ; int i ;
                    2669   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2670   ; for(i = 0; i < 8; i++)  {
00001A86  4282      2671          clr.l     D2
                    2672   EnableBreakPoints_1:
00001A88  0C82 0000 2673          cmp.l     #8,D2
00001A8C  0008      
00001A8E  6C32      2674          bge.s     EnableBreakPoints_3
                    2675   ; if(BreakPointSetOrCleared[i] == 1)    {                                                     // if break point set
00001A90  2002      2676          move.l    D2,D0
00001A92  E588      2677          lsl.l     #2,D0
00001A94  41F9 0803 2678          lea       _BreakPointSetOrCleared.L,A0
00001A98  015E      
00001A9A  2030 0800 2679          move.l    0(A0,D0.L),D0
00001A9E  0C80 0000 2680          cmp.l     #1,D0
00001AA2  0001      
00001AA4  6618      2681          bne.s     EnableBreakPoints_4
                    2682   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001AA6  2002      2683          move.l    D2,D0
00001AA8  E588      2684          lsl.l     #2,D0
00001AAA  41F9 0803 2685          lea       _BreakPointAddress.L,A0
00001AAE  012E      
00001AB0  2D70 0800 2686          move.l    0(A0,D0.L),-4(A6)
00001AB4  FFFC      
                    2687   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e);                              // put the breakpoint back in user program
00001AB6  206E FFFC 2688          move.l    -4(A6),A0
00001ABA  30BC 4E4E 2689          move.w    #20046,(A0)
                    2690   EnableBreakPoints_4:
00001ABE  5282      2691          addq.l    #1,D2
00001AC0  60C6      2692          bra       EnableBreakPoints_1
                    2693   EnableBreakPoints_3:
00001AC2  241F      2694          move.l    (A7)+,D2
00001AC4  4E5E      2695          unlk      A6
00001AC6  4E75      2696          rts
                    2697   ; }
                    2698   ; }
                    2699   ; }
                    2700   ; void KillAllBreakPoints(void)
                    2701   ; {
                    2702   _KillAllBreakPoints:
00001AC8  4E56 FFFC 2703          link      A6,#-4
00001ACC  2F02      2704          move.l    D2,-(A7)
                    2705   ; int i ;
                    2706   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2707   ; for(i = 0; i < 8; i++)  {
00001ACE  4282      2708          clr.l     D2
                    2709   KillAllBreakPoints_1:
00001AD0  0C82 0000 2710          cmp.l     #8,D2
00001AD4  0008      
00001AD6  6C00 0052 2711          bge       KillAllBreakPoints_3
                    2712   ; // clear BP
                    2713   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001ADA  2002      2714          move.l    D2,D0
00001ADC  E588      2715          lsl.l     #2,D0
00001ADE  41F9 0803 2716          lea       _BreakPointAddress.L,A0
00001AE2  012E      
00001AE4  2D70 0800 2717          move.l    0(A0,D0.L),-4(A6)
00001AE8  FFFC      
                    2718   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program
00001AEA  2002      2719          move.l    D2,D0
00001AEC  E388      2720          lsl.l     #1,D0
00001AEE  41F9 0803 2721          lea       _BreakPointInstruction.L,A0
00001AF2  014E      
00001AF4  226E FFFC 2722          move.l    -4(A6),A1
00001AF8  32B0 0800 2723          move.w    0(A0,D0.L),(A1)
                    2724   ; BreakPointAddress[i] = 0 ;                                                             // set BP address to NULL
00001AFC  2002      2725          move.l    D2,D0
00001AFE  E588      2726          lsl.l     #2,D0
00001B00  41F9 0803 2727          lea       _BreakPointAddress.L,A0
00001B04  012E      
00001B06  42B0 0800 2728          clr.l     0(A0,D0.L)
                    2729   ; BreakPointInstruction[i] = 0 ;
00001B0A  2002      2730          move.l    D2,D0
00001B0C  E388      2731          lsl.l     #1,D0
00001B0E  41F9 0803 2732          lea       _BreakPointInstruction.L,A0
00001B12  014E      
00001B14  4270 0800 2733          clr.w     0(A0,D0.L)
                    2734   ; BreakPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00001B18  2002      2735          move.l    D2,D0
00001B1A  E588      2736          lsl.l     #2,D0
00001B1C  41F9 0803 2737          lea       _BreakPointSetOrCleared.L,A0
00001B20  015E      
00001B22  42B0 0800 2738          clr.l     0(A0,D0.L)
00001B26  5282      2739          addq.l    #1,D2
00001B28  60A6      2740          bra       KillAllBreakPoints_1
                    2741   KillAllBreakPoints_3:
00001B2A  241F      2742          move.l    (A7)+,D2
00001B2C  4E5E      2743          unlk      A6
00001B2E  4E75      2744          rts
                    2745   ; }
                    2746   ; //BreakPointDisplay() ;       // display the break points
                    2747   ; }
                    2748   ; void KillAllWatchPoints(void)
                    2749   ; {
                    2750   _KillAllWatchPoints:
00001B30  2F02      2751          move.l    D2,-(A7)
                    2752   ; int i ;
                    2753   ; for(i = 0; i < 8; i++)  {
00001B32  4282      2754          clr.l     D2
                    2755   KillAllWatchPoints_1:
00001B34  0C82 0000 2756          cmp.l     #8,D2
00001B38  0008      
00001B3A  6C20      2757          bge.s     KillAllWatchPoints_3
                    2758   ; WatchPointAddress[i] = 0 ;                                                             // set BP address to NULL
00001B3C  2002      2759          move.l    D2,D0
00001B3E  E588      2760          lsl.l     #2,D0
00001B40  41F9 0803 2761          lea       _WatchPointAddress.L,A0
00001B44  0182      
00001B46  42B0 0800 2762          clr.l     0(A0,D0.L)
                    2763   ; WatchPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00001B4A  2002      2764          move.l    D2,D0
00001B4C  E588      2765          lsl.l     #2,D0
00001B4E  41F9 0803 2766          lea       _WatchPointSetOrCleared.L,A0
00001B52  01A2      
00001B54  42B0 0800 2767          clr.l     0(A0,D0.L)
00001B58  5282      2768          addq.l    #1,D2
00001B5A  60D8      2769          bra       KillAllWatchPoints_1
                    2770   KillAllWatchPoints_3:
00001B5C  241F      2771          move.l    (A7)+,D2
00001B5E  4E75      2772          rts
                    2773   ; }
                    2774   ; //WatchPointDisplay() ;       // display the break points
                    2775   ; }
                    2776   ; void SetBreakPoint(void)
                    2777   ; {
                    2778   _SetBreakPoint:
00001B60  4E56 FFFC 2779          link      A6,#-4
00001B64  48E7 3830 2780          movem.l   D2/D3/D4/A2/A3,-(A7)
00001B68  45F9 0000 2781          lea       _printf.L,A2
00001B6C  3CF8      
00001B6E  47F9 0803 2782          lea       _BreakPointSetOrCleared.L,A3
00001B72  015E      
                    2783   ; int i ;
                    2784   ; int BPNumber;
                    2785   ; int BPAddress;
                    2786   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2787   ; // see if any free break points
                    2788   ; for(i = 0; i < 8; i ++) {
00001B74  4282      2789          clr.l     D2
                    2790   SetBreakPoint_1:
00001B76  0C82 0000 2791          cmp.l     #8,D2
00001B7A  0008      
00001B7C  6C10      2792          bge.s     SetBreakPoint_3
                    2793   ; if( BreakPointSetOrCleared[i] == 0)
00001B7E  2002      2794          move.l    D2,D0
00001B80  E588      2795          lsl.l     #2,D0
00001B82  2033 0800 2796          move.l    0(A3,D0.L),D0
00001B86  6602      2797          bne.s     SetBreakPoint_4
                    2798   ; break ;         // if spare BP found allow user to set it
00001B88  6004      2799          bra.s     SetBreakPoint_3
                    2800   SetBreakPoint_4:
00001B8A  5282      2801          addq.l    #1,D2
00001B8C  60E8      2802          bra       SetBreakPoint_1
                    2803   SetBreakPoint_3:
                    2804   ; }
                    2805   ; if(i == 8) {
00001B8E  0C82 0000 2806          cmp.l     #8,D2
00001B92  0008      
00001B94  660E      2807          bne.s     SetBreakPoint_6
                    2808   ; printf("\r\nNo FREE Break Points.....") ;
00001B96  4879 0000 2809          pea       @m68kde~1_67.L
00001B9A  4C4A      
00001B9C  4E92      2810          jsr       (A2)
00001B9E  584F      2811          addq.w    #4,A7
                    2812   ; return ;
00001BA0  6000 00D6 2813          bra       SetBreakPoint_15
                    2814   SetBreakPoint_6:
                    2815   ; }
                    2816   ; printf("\r\nBreak Point Address: ") ;
00001BA4  4879 0000 2817          pea       @m68kde~1_68.L
00001BA8  4C66      
00001BAA  4E92      2818          jsr       (A2)
00001BAC  584F      2819          addq.w    #4,A7
                    2820   ; BPAddress = Get8HexDigits(0) ;
00001BAE  42A7      2821          clr.l     -(A7)
00001BB0  4EB8 0B62 2822          jsr       _Get8HexDigits
00001BB4  584F      2823          addq.w    #4,A7
00001BB6  2600      2824          move.l    D0,D3
                    2825   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BPAddress) ;     // point to the instruction in the user program we are about to change
00001BB8  2803      2826          move.l    D3,D4
                    2827   ; if((BPAddress & 0x00000001) == 0x00000001)  {   // cannot set BP at an odd address
00001BBA  2003      2828          move.l    D3,D0
00001BBC  C0BC 0000 2829          and.l     #1,D0
00001BC0  0001      
00001BC2  0C80 0000 2830          cmp.l     #1,D0
00001BC6  0001      
00001BC8  660E      2831          bne.s     SetBreakPoint_9
                    2832   ; printf("\r\nError : Break Points CANNOT be set at ODD addresses") ;
00001BCA  4879 0000 2833          pea       @m68kde~1_69.L
00001BCE  4C7E      
00001BD0  4E92      2834          jsr       (A2)
00001BD2  584F      2835          addq.w    #4,A7
                    2836   ; return ;
00001BD4  6000 00A2 2837          bra       SetBreakPoint_15
                    2838   SetBreakPoint_9:
                    2839   ; }
                    2840   ; if(BPAddress < 0x00008000)  {   // cannot set BP in ROM
00001BD8  0C83 0000 2841          cmp.l     #32768,D3
00001BDC  8000      
00001BDE  640E      2842          bhs.s     SetBreakPoint_11
                    2843   ; printf("\r\nError : Break Points CANNOT be set for ROM in Range : [$0-$00007FFF]") ;
00001BE0  4879 0000 2844          pea       @m68kde~1_70.L
00001BE4  4CB4      
00001BE6  4E92      2845          jsr       (A2)
00001BE8  584F      2846          addq.w    #4,A7
                    2847   ; return ;
00001BEA  6000 008C 2848          bra       SetBreakPoint_15
                    2849   SetBreakPoint_11:
                    2850   ; }
                    2851   ; // search for first free bp or existing same BP
                    2852   ; for(i = 0; i < 8; i++)  {
00001BEE  4282      2853          clr.l     D2
                    2854   SetBreakPoint_13:
00001BF0  0C82 0000 2855          cmp.l     #8,D2
00001BF4  0008      
00001BF6  6C00 0080 2856          bge       SetBreakPoint_15
                    2857   ; if(BreakPointAddress[i] == BPAddress)   {
00001BFA  2002      2858          move.l    D2,D0
00001BFC  E588      2859          lsl.l     #2,D0
00001BFE  41F9 0803 2860          lea       _BreakPointAddress.L,A0
00001C02  012E      
00001C04  B6B0 0800 2861          cmp.l     0(A0,D0.L),D3
00001C08  6610      2862          bne.s     SetBreakPoint_16
                    2863   ; printf("\r\nError: Break Point Already Exists at Address : %08x\r\n", BPAddress) ;
00001C0A  2F03      2864          move.l    D3,-(A7)
00001C0C  4879 0000 2865          pea       @m68kde~1_71.L
00001C10  4CFC      
00001C12  4E92      2866          jsr       (A2)
00001C14  504F      2867          addq.w    #8,A7
                    2868   ; return ;
00001C16  6000 0060 2869          bra       SetBreakPoint_15
                    2870   SetBreakPoint_16:
                    2871   ; }
                    2872   ; if(BreakPointSetOrCleared[i] == 0) {
00001C1A  2002      2873          move.l    D2,D0
00001C1C  E588      2874          lsl.l     #2,D0
00001C1E  2033 0800 2875          move.l    0(A3,D0.L),D0
00001C22  6600 004E 2876          bne       SetBreakPoint_18
                    2877   ; // set BP here
                    2878   ; BreakPointSetOrCleared[i] = 1 ;                                 // mark this breakpoint as set
00001C26  2002      2879          move.l    D2,D0
00001C28  E588      2880          lsl.l     #2,D0
00001C2A  27BC 0000 2881          move.l    #1,0(A3,D0.L)
00001C2E  0001 0800 
                    2882   ; BreakPointInstruction[i] = *ProgramBreakPointAddress ;          // copy the user program instruction here so we can put it back afterwards
00001C32  2044      2883          move.l    D4,A0
00001C34  2002      2884          move.l    D2,D0
00001C36  E388      2885          lsl.l     #1,D0
00001C38  43F9 0803 2886          lea       _BreakPointInstruction.L,A1
00001C3C  014E      
00001C3E  3390 0800 2887          move.w    (A0),0(A1,D0.L)
                    2888   ; printf("\r\nBreak Point Set at Address: [$%08x]", ProgramBreakPointAddress) ;
00001C42  2F04      2889          move.l    D4,-(A7)
00001C44  4879 0000 2890          pea       @m68kde~1_72.L
00001C48  4D34      
00001C4A  4E92      2891          jsr       (A2)
00001C4C  504F      2892          addq.w    #8,A7
                    2893   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e)    ;   // put a Trap14 instruction at the user specified address
00001C4E  2044      2894          move.l    D4,A0
00001C50  30BC 4E4E 2895          move.w    #20046,(A0)
                    2896   ; BreakPointAddress[i] = BPAddress ;                              // record the address of this break point in the debugger
00001C54  2002      2897          move.l    D2,D0
00001C56  E588      2898          lsl.l     #2,D0
00001C58  41F9 0803 2899          lea       _BreakPointAddress.L,A0
00001C5C  012E      
00001C5E  2183 0800 2900          move.l    D3,0(A0,D0.L)
                    2901   ; printf("\r\n") ;
00001C62  4879 0000 2902          pea       @m68kde~1_6.L
00001C66  4648      
00001C68  4E92      2903          jsr       (A2)
00001C6A  584F      2904          addq.w    #4,A7
                    2905   ; BreakPointDisplay() ;       // display the break points
00001C6C  4EB8 1730 2906          jsr       _BreakPointDisplay
                    2907   ; return ;
00001C70  6006      2908          bra.s     SetBreakPoint_15
                    2909   SetBreakPoint_18:
00001C72  5282      2910          addq.l    #1,D2
00001C74  6000 FF7A 2911          bra       SetBreakPoint_13
                    2912   SetBreakPoint_15:
00001C78  4CDF 0C1C 2913          movem.l   (A7)+,D2/D3/D4/A2/A3
00001C7C  4E5E      2914          unlk      A6
00001C7E  4E75      2915          rts
                    2916   ; }
                    2917   ; }
                    2918   ; }
                    2919   ; void SetWatchPoint(void)
                    2920   ; {
                    2921   _SetWatchPoint:
00001C80  4E56 FFF8 2922          link      A6,#-8
00001C84  48E7 3030 2923          movem.l   D2/D3/A2/A3,-(A7)
00001C88  45F9 0000 2924          lea       _printf.L,A2
00001C8C  3CF8      
00001C8E  47F9 0803 2925          lea       _WatchPointSetOrCleared.L,A3
00001C92  01A2      
                    2926   ; int i ;
                    2927   ; int WPNumber;
                    2928   ; int WPAddress;
                    2929   ; volatile unsigned short int *ProgramWatchPointAddress ;
                    2930   ; // see if any free break points
                    2931   ; for(i = 0; i < 8; i ++) {
00001C94  4282      2932          clr.l     D2
                    2933   SetWatchPoint_1:
00001C96  0C82 0000 2934          cmp.l     #8,D2
00001C9A  0008      
00001C9C  6C10      2935          bge.s     SetWatchPoint_3
                    2936   ; if( WatchPointSetOrCleared[i] == 0)
00001C9E  2002      2937          move.l    D2,D0
00001CA0  E588      2938          lsl.l     #2,D0
00001CA2  2033 0800 2939          move.l    0(A3,D0.L),D0
00001CA6  6602      2940          bne.s     SetWatchPoint_4
                    2941   ; break ;         // if spare WP found allow user to set it
00001CA8  6004      2942          bra.s     SetWatchPoint_3
                    2943   SetWatchPoint_4:
00001CAA  5282      2944          addq.l    #1,D2
00001CAC  60E8      2945          bra       SetWatchPoint_1
                    2946   SetWatchPoint_3:
                    2947   ; }
                    2948   ; if(i == 8) {
00001CAE  0C82 0000 2949          cmp.l     #8,D2
00001CB2  0008      
00001CB4  660E      2950          bne.s     SetWatchPoint_6
                    2951   ; printf("\r\nNo FREE Watch Points.....") ;
00001CB6  4879 0000 2952          pea       @m68kde~1_73.L
00001CBA  4D5A      
00001CBC  4E92      2953          jsr       (A2)
00001CBE  584F      2954          addq.w    #4,A7
                    2955   ; return ;
00001CC0  6000 008C 2956          bra       SetWatchPoint_11
                    2957   SetWatchPoint_6:
                    2958   ; }
                    2959   ; printf("\r\nWatch Point Address: ") ;
00001CC4  4879 0000 2960          pea       @m68kde~1_74.L
00001CC8  4D76      
00001CCA  4E92      2961          jsr       (A2)
00001CCC  584F      2962          addq.w    #4,A7
                    2963   ; WPAddress = Get8HexDigits(0) ;
00001CCE  42A7      2964          clr.l     -(A7)
00001CD0  4EB8 0B62 2965          jsr       _Get8HexDigits
00001CD4  584F      2966          addq.w    #4,A7
00001CD6  2600      2967          move.l    D0,D3
                    2968   ; // search for first free wp or existing same wp
                    2969   ; for(i = 0; i < 8; i++)  {
00001CD8  4282      2970          clr.l     D2
                    2971   SetWatchPoint_9:
00001CDA  0C82 0000 2972          cmp.l     #8,D2
00001CDE  0008      
00001CE0  6C00 006C 2973          bge       SetWatchPoint_11
                    2974   ; if(WatchPointAddress[i] == WPAddress && WPAddress != 0)   {     //so we can set a wp at 0
00001CE4  2002      2975          move.l    D2,D0
00001CE6  E588      2976          lsl.l     #2,D0
00001CE8  41F9 0803 2977          lea       _WatchPointAddress.L,A0
00001CEC  0182      
00001CEE  B6B0 0800 2978          cmp.l     0(A0,D0.L),D3
00001CF2  6614      2979          bne.s     SetWatchPoint_12
00001CF4  4A83      2980          tst.l     D3
00001CF6  6710      2981          beq.s     SetWatchPoint_12
                    2982   ; printf("\r\nError: Watch Point Already Set at Address : %08x\r\n", WPAddress) ;
00001CF8  2F03      2983          move.l    D3,-(A7)
00001CFA  4879 0000 2984          pea       @m68kde~1_75.L
00001CFE  4D8E      
00001D00  4E92      2985          jsr       (A2)
00001D02  504F      2986          addq.w    #8,A7
                    2987   ; return ;
00001D04  6000 0048 2988          bra       SetWatchPoint_11
                    2989   SetWatchPoint_12:
                    2990   ; }
                    2991   ; if(WatchPointSetOrCleared[i] == 0) {
00001D08  2002      2992          move.l    D2,D0
00001D0A  E588      2993          lsl.l     #2,D0
00001D0C  2033 0800 2994          move.l    0(A3,D0.L),D0
00001D10  6600 0038 2995          bne       SetWatchPoint_14
                    2996   ; WatchPointSetOrCleared[i] = 1 ;                                 // mark this watchpoint as set
00001D14  2002      2997          move.l    D2,D0
00001D16  E588      2998          lsl.l     #2,D0
00001D18  27BC 0000 2999          move.l    #1,0(A3,D0.L)
00001D1C  0001 0800 
                    3000   ; printf("\r\nWatch Point Set at Address: [$%08x]", WPAddress) ;
00001D20  2F03      3001          move.l    D3,-(A7)
00001D22  4879 0000 3002          pea       @m68kde~1_76.L
00001D26  4DC4      
00001D28  4E92      3003          jsr       (A2)
00001D2A  504F      3004          addq.w    #8,A7
                    3005   ; WatchPointAddress[i] = WPAddress ;                              // record the address of this watch point in the debugger
00001D2C  2002      3006          move.l    D2,D0
00001D2E  E588      3007          lsl.l     #2,D0
00001D30  41F9 0803 3008          lea       _WatchPointAddress.L,A0
00001D34  0182      
00001D36  2183 0800 3009          move.l    D3,0(A0,D0.L)
                    3010   ; printf("\r\n") ;
00001D3A  4879 0000 3011          pea       @m68kde~1_6.L
00001D3E  4648      
00001D40  4E92      3012          jsr       (A2)
00001D42  584F      3013          addq.w    #4,A7
                    3014   ; WatchPointDisplay() ;       // display the break points
00001D44  4EB8 1804 3015          jsr       _WatchPointDisplay
                    3016   ; return ;
00001D48  6004      3017          bra.s     SetWatchPoint_11
                    3018   SetWatchPoint_14:
00001D4A  5282      3019          addq.l    #1,D2
00001D4C  608C      3020          bra       SetWatchPoint_9
                    3021   SetWatchPoint_11:
00001D4E  4CDF 0C0C 3022          movem.l   (A7)+,D2/D3/A2/A3
00001D52  4E5E      3023          unlk      A6
00001D54  4E75      3024          rts
                    3025   ; }
                    3026   ; }
                    3027   ; }
                    3028   ; void HandleBreakPoint(void)
                    3029   ; {
                    3030   _HandleBreakPoint:
00001D56  4E56 FFFC 3031          link      A6,#-4
00001D5A  48E7 0038 3032          movem.l   A2/A3/A4,-(A7)
00001D5E  45F9 0803 3033          lea       _i.L,A2
00001D62  00C4      
00001D64  47F9 0000 3034          lea       _printf.L,A3
00001D68  3CF8      
00001D6A  49F9 0803 3035          lea       _PC.L,A4
00001D6E  0120      
                    3036   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3037   ; // now we have to put the break point back to run the instruction
                    3038   ; // PC will contain the address of the TRAP instruction but advanced by two bytes so lets play with that
                    3039   ; PC = PC - 2 ;  // ready for user to resume after reaching breakpoint
00001D70  5594      3040          subq.l    #2,(A4)
                    3041   ; printf("\r\n\r\n\r\n\r\n@BREAKPOINT") ;
00001D72  4879 0000 3042          pea       @m68kde~1_77.L
00001D76  4DEA      
00001D78  4E93      3043          jsr       (A3)
00001D7A  584F      3044          addq.w    #4,A7
                    3045   ; printf("\r\nSingle Step : [ON]") ;
00001D7C  4879 0000 3046          pea       @m68kde~1_78.L
00001D80  4DFE      
00001D82  4E93      3047          jsr       (A3)
00001D84  584F      3048          addq.w    #4,A7
                    3049   ; printf("\r\nBreakPoints : [Enabled]") ;
00001D86  4879 0000 3050          pea       @m68kde~1_79.L
00001D8A  4E14      
00001D8C  4E93      3051          jsr       (A3)
00001D8E  584F      3052          addq.w    #4,A7
                    3053   ; // now clear the break point (put original instruction back)
                    3054   ; ProgramBreakPointAddress = PC ;
00001D90  2D54 FFFC 3055          move.l    (A4),-4(A6)
                    3056   ; for(i = 0; i < 8; i ++) {
00001D94  4292      3057          clr.l     (A2)
                    3058   HandleBreakPoint_1:
00001D96  2012      3059          move.l    (A2),D0
00001D98  0C80 0000 3060          cmp.l     #8,D0
00001D9C  0008      
00001D9E  6400 0056 3061          bhs       HandleBreakPoint_3
                    3062   ; if(BreakPointAddress[i] == PC) {        // if we have found the breakpoint
00001DA2  2012      3063          move.l    (A2),D0
00001DA4  E588      3064          lsl.l     #2,D0
00001DA6  41F9 0803 3065          lea       _BreakPointAddress.L,A0
00001DAA  012E      
00001DAC  2230 0800 3066          move.l    0(A0,D0.L),D1
00001DB0  B294      3067          cmp.l     (A4),D1
00001DB2  6600 003E 3068          bne       HandleBreakPoint_4
                    3069   ; BreakPointAddress[i] = 0 ;
00001DB6  2012      3070          move.l    (A2),D0
00001DB8  E588      3071          lsl.l     #2,D0
00001DBA  41F9 0803 3072          lea       _BreakPointAddress.L,A0
00001DBE  012E      
00001DC0  42B0 0800 3073          clr.l     0(A0,D0.L)
                    3074   ; BreakPointSetOrCleared[i] = 0 ;
00001DC4  2012      3075          move.l    (A2),D0
00001DC6  E588      3076          lsl.l     #2,D0
00001DC8  41F9 0803 3077          lea       _BreakPointSetOrCleared.L,A0
00001DCC  015E      
00001DCE  42B0 0800 3078          clr.l     0(A0,D0.L)
                    3079   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
00001DD2  2012      3080          move.l    (A2),D0
00001DD4  E388      3081          lsl.l     #1,D0
00001DD6  41F9 0803 3082          lea       _BreakPointInstruction.L,A0
00001DDA  014E      
00001DDC  226E FFFC 3083          move.l    -4(A6),A1
00001DE0  32B0 0800 3084          move.w    0(A0,D0.L),(A1)
                    3085   ; BreakPointInstruction[i] = 0 ;
00001DE4  2012      3086          move.l    (A2),D0
00001DE6  E388      3087          lsl.l     #1,D0
00001DE8  41F9 0803 3088          lea       _BreakPointInstruction.L,A0
00001DEC  014E      
00001DEE  4270 0800 3089          clr.w     0(A0,D0.L)
                    3090   HandleBreakPoint_4:
00001DF2  5292      3091          addq.l    #1,(A2)
00001DF4  60A0      3092          bra       HandleBreakPoint_1
                    3093   HandleBreakPoint_3:
                    3094   ; }
                    3095   ; }
                    3096   ; DumpRegisters() ;
00001DF6  4EB8 0F82 3097          jsr       _DumpRegisters
                    3098   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
00001DFA  4879 0000 3099          pea       @m68kde~1_41.L
00001DFE  4990      
00001E00  4E93      3100          jsr       (A3)
00001E02  584F      3101          addq.w    #4,A7
                    3102   ; printf("\r\nPress <ESC> to Resume User Program\r\n") ;
00001E04  4879 0000 3103          pea       @m68kde~1_80.L
00001E08  4E2E      
00001E0A  4E93      3104          jsr       (A3)
00001E0C  584F      3105          addq.w    #4,A7
                    3106   ; menu() ;
00001E0E  4EB9 0000 3107          jsr       _menu
00001E12  1FD6      
00001E14  4CDF 1C00 3108          movem.l   (A7)+,A2/A3/A4
00001E18  4E5E      3109          unlk      A6
00001E1A  4E75      3110          rts
                    3111   ; }
                    3112   ; void UnknownCommand()
                    3113   ; {
                    3114   _UnknownCommand:
                    3115   ; printf("\r\nUnknown Command.....\r\n") ;
00001E1C  4879 0000 3116          pea       @m68kde~1_81.L
00001E20  4E56      
00001E22  4EB9 0000 3117          jsr       _printf
00001E26  3CF8      
00001E28  584F      3118          addq.w    #4,A7
                    3119   ; Help() ;
00001E2A  4EB9 0000 3120          jsr       _Help
00001E2E  1F40      
00001E30  4E75      3121          rts
                    3122   ; }
                    3123   ; // system when the users program executes a TRAP #15 instruction to halt program and return to debug monitor
                    3124   ; void CallDebugMonitor(void)
                    3125   ; {
                    3126   _CallDebugMonitor:
                    3127   ; printf("\r\nProgram Ended (TRAP #15)....") ;
00001E32  4879 0000 3128          pea       @m68kde~1_82.L
00001E36  4E70      
00001E38  4EB9 0000 3129          jsr       _printf
00001E3C  3CF8      
00001E3E  584F      3130          addq.w    #4,A7
                    3131   ; menu();
00001E40  4EB9 0000 3132          jsr       _menu
00001E44  1FD6      
00001E46  4E75      3133          rts
                    3134   ; }
                    3135   ; void Breakpoint(void)
                    3136   ; {
                    3137   _Breakpoint:
00001E48  2F02      3138          move.l    D2,-(A7)
                    3139   ; char c;
                    3140   ; c = toupper(_getch());
00001E4A  2F00      3141          move.l    D0,-(A7)
00001E4C  4EB8 0A26 3142          jsr       __getch
00001E50  2200      3143          move.l    D0,D1
00001E52  201F      3144          move.l    (A7)+,D0
00001E54  2F01      3145          move.l    D1,-(A7)
00001E56  4EB9 0000 3146          jsr       _toupper
00001E5A  3CCC      
00001E5C  584F      3147          addq.w    #4,A7
00001E5E  1400      3148          move.b    D0,D2
                    3149   ; if( c == (char)('D'))                                      // BreakPoint Display
00001E60  0C02 0044 3150          cmp.b     #68,D2
00001E64  6608      3151          bne.s     Breakpoint_1
                    3152   ; BreakPointDisplay() ;
00001E66  4EB8 1730 3153          jsr       _BreakPointDisplay
00001E6A  6000 0054 3154          bra       Breakpoint_10
                    3155   Breakpoint_1:
                    3156   ; else if(c == (char)('K')) {                                 // breakpoint Kill
00001E6E  0C02 004B 3157          cmp.b     #75,D2
00001E72  6630      3158          bne.s     Breakpoint_3
                    3159   ; printf("\r\nKill All Break Points...(y/n)?") ;
00001E74  4879 0000 3160          pea       @m68kde~1_83.L
00001E78  4E90      
00001E7A  4EB9 0000 3161          jsr       _printf
00001E7E  3CF8      
00001E80  584F      3162          addq.w    #4,A7
                    3163   ; c = toupper(_getch());
00001E82  2F00      3164          move.l    D0,-(A7)
00001E84  4EB8 0A26 3165          jsr       __getch
00001E88  2200      3166          move.l    D0,D1
00001E8A  201F      3167          move.l    (A7)+,D0
00001E8C  2F01      3168          move.l    D1,-(A7)
00001E8E  4EB9 0000 3169          jsr       _toupper
00001E92  3CCC      
00001E94  584F      3170          addq.w    #4,A7
00001E96  1400      3171          move.b    D0,D2
                    3172   ; if(c == (char)('Y'))
00001E98  0C02 0059 3173          cmp.b     #89,D2
00001E9C  6604      3174          bne.s     Breakpoint_5
                    3175   ; KillAllBreakPoints() ;
00001E9E  4EB8 1AC8 3176          jsr       _KillAllBreakPoints
                    3177   Breakpoint_5:
00001EA2  601C      3178          bra.s     Breakpoint_10
                    3179   Breakpoint_3:
                    3180   ; }
                    3181   ; else if(c == (char)('S')) {
00001EA4  0C02 0053 3182          cmp.b     #83,D2
00001EA8  6606      3183          bne.s     Breakpoint_7
                    3184   ; SetBreakPoint() ;
00001EAA  4EB8 1B60 3185          jsr       _SetBreakPoint
00001EAE  6010      3186          bra.s     Breakpoint_10
                    3187   Breakpoint_7:
                    3188   ; }
                    3189   ; else if(c == (char)('C')) {
00001EB0  0C02 0043 3190          cmp.b     #67,D2
00001EB4  6606      3191          bne.s     Breakpoint_9
                    3192   ; BreakPointClear() ;
00001EB6  4EB8 18B0 3193          jsr       _BreakPointClear
00001EBA  6004      3194          bra.s     Breakpoint_10
                    3195   Breakpoint_9:
                    3196   ; }
                    3197   ; else
                    3198   ; UnknownCommand() ;
00001EBC  4EB8 1E1C 3199          jsr       _UnknownCommand
                    3200   Breakpoint_10:
00001EC0  241F      3201          move.l    (A7)+,D2
00001EC2  4E75      3202          rts
                    3203   ; }
                    3204   ; void Watchpoint(void)
                    3205   ; {
                    3206   _Watchpoint:
00001EC4  2F02      3207          move.l    D2,-(A7)
                    3208   ; char c;
                    3209   ; c = toupper(_getch());
00001EC6  2F00      3210          move.l    D0,-(A7)
00001EC8  4EB8 0A26 3211          jsr       __getch
00001ECC  2200      3212          move.l    D0,D1
00001ECE  201F      3213          move.l    (A7)+,D0
00001ED0  2F01      3214          move.l    D1,-(A7)
00001ED2  4EB9 0000 3215          jsr       _toupper
00001ED6  3CCC      
00001ED8  584F      3216          addq.w    #4,A7
00001EDA  1400      3217          move.b    D0,D2
                    3218   ; if( c == (char)('D'))                                      // WatchPoint Display
00001EDC  0C02 0044 3219          cmp.b     #68,D2
00001EE0  6608      3220          bne.s     Watchpoint_1
                    3221   ; WatchPointDisplay() ;
00001EE2  4EB8 1804 3222          jsr       _WatchPointDisplay
00001EE6  6000 0054 3223          bra       Watchpoint_10
                    3224   Watchpoint_1:
                    3225   ; else if(c == (char)('K')) {                                 // wtahcpoint Kill
00001EEA  0C02 004B 3226          cmp.b     #75,D2
00001EEE  6630      3227          bne.s     Watchpoint_3
                    3228   ; printf("\r\nKill All Watch Points...(y/n)?") ;
00001EF0  4879 0000 3229          pea       @m68kde~1_84.L
00001EF4  4EB2      
00001EF6  4EB9 0000 3230          jsr       _printf
00001EFA  3CF8      
00001EFC  584F      3231          addq.w    #4,A7
                    3232   ; c = toupper(_getch());
00001EFE  2F00      3233          move.l    D0,-(A7)
00001F00  4EB8 0A26 3234          jsr       __getch
00001F04  2200      3235          move.l    D0,D1
00001F06  201F      3236          move.l    (A7)+,D0
00001F08  2F01      3237          move.l    D1,-(A7)
00001F0A  4EB9 0000 3238          jsr       _toupper
00001F0E  3CCC      
00001F10  584F      3239          addq.w    #4,A7
00001F12  1400      3240          move.b    D0,D2
                    3241   ; if(c == (char)('Y'))
00001F14  0C02 0059 3242          cmp.b     #89,D2
00001F18  6604      3243          bne.s     Watchpoint_5
                    3244   ; KillAllWatchPoints() ;
00001F1A  4EB8 1B30 3245          jsr       _KillAllWatchPoints
                    3246   Watchpoint_5:
00001F1E  601C      3247          bra.s     Watchpoint_10
                    3248   Watchpoint_3:
                    3249   ; }
                    3250   ; else if(c == (char)('S')) {
00001F20  0C02 0053 3251          cmp.b     #83,D2
00001F24  6606      3252          bne.s     Watchpoint_7
                    3253   ; SetWatchPoint() ;
00001F26  4EB8 1C80 3254          jsr       _SetWatchPoint
00001F2A  6010      3255          bra.s     Watchpoint_10
                    3256   Watchpoint_7:
                    3257   ; }
                    3258   ; else if(c == (char)('C')) {
00001F2C  0C02 0043 3259          cmp.b     #67,D2
00001F30  6606      3260          bne.s     Watchpoint_9
                    3261   ; WatchPointClear() ;
00001F32  4EB8 198A 3262          jsr       _WatchPointClear
00001F36  6004      3263          bra.s     Watchpoint_10
                    3264   Watchpoint_9:
                    3265   ; }
                    3266   ; else
                    3267   ; UnknownCommand() ;
00001F38  4EB8 1E1C 3268          jsr       _UnknownCommand
                    3269   Watchpoint_10:
00001F3C  241F      3270          move.l    (A7)+,D2
00001F3E  4E75      3271          rts
                    3272   ; }
                    3273   ; void Help(void)
                    3274   ; {
                    3275   _Help:
00001F40  48E7 2020 3276          movem.l   D2/A2,-(A7)
00001F44  45F9 0000 3277          lea       _printf.L,A2
00001F48  3CF8      
                    3278   ; char *banner = "\r\n----------------------------------------------------------------" ;
00001F4A  41F9 0000 3279          lea       @m68kde~1_85.L,A0
00001F4E  4ED4      
00001F50  2408      3280          move.l    A0,D2
                    3281   ; printf(banner) ;
00001F52  2F02      3282          move.l    D2,-(A7)
00001F54  4E92      3283          jsr       (A2)
00001F56  584F      3284          addq.w    #4,A7
                    3285   ; printf("\r\n  Final Project") ;
00001F58  4879 0000 3286          pea       @m68kde~1_86.L
00001F5C  4F18      
00001F5E  4E92      3287          jsr       (A2)
00001F60  584F      3288          addq.w    #4,A7
                    3289   ; printf(banner) ;
00001F62  2F02      3290          move.l    D2,-(A7)
00001F64  4E92      3291          jsr       (A2)
00001F66  584F      3292          addq.w    #4,A7
                    3293   ; printf("\r\n  H    - Say Hello World") ;
00001F68  4879 0000 3294          pea       @m68kde~1_87.L
00001F6C  4F2A      
00001F6E  4E92      3295          jsr       (A2)
00001F70  584F      3296          addq.w    #4,A7
                    3297   ; printf(banner) ;
00001F72  2F02      3298          move.l    D2,-(A7)
00001F74  4E92      3299          jsr       (A2)
00001F76  584F      3300          addq.w    #4,A7
                    3301   ; printf("\r\n  T    - Run Tetris Game") ;
00001F78  4879 0000 3302          pea       @m68kde~1_88.L
00001F7C  4F46      
00001F7E  4E92      3303          jsr       (A2)
00001F80  584F      3304          addq.w    #4,A7
                    3305   ; printf(banner) ;
00001F82  2F02      3306          move.l    D2,-(A7)
00001F84  4E92      3307          jsr       (A2)
00001F86  584F      3308          addq.w    #4,A7
00001F88  4CDF 0404 3309          movem.l   (A7)+,D2/A2
00001F8C  4E75      3310          rts
                    3311   ; }
                    3312   ; void writeVGA_debug(int addr, char data, char z) {
                    3313   _writeVGA_debug:
00001F8E  4E56 0000 3314          link      A6,#0
00001F92  2F02      3315          move.l    D2,-(A7)
                    3316   ; char *VGA = (char *)(VGA_ADDRESS + addr * 2);
00001F94  203C FFFF 3317          move.l    #-65536,D0
00001F98  0000      
00001F9A  2F2E 0008 3318          move.l    8(A6),-(A7)
00001F9E  4878 0002 3319          pea       2
00001FA2  4EB9 0000 3320          jsr       LMUL
00001FA6  3B98      
00001FA8  2217      3321          move.l    (A7),D1
00001FAA  504F      3322          addq.w    #8,A7
00001FAC  D081      3323          add.l     D1,D0
00001FAE  2400      3324          move.l    D0,D2
                    3325   ; *(char *)(0xFF030000) = (0xF2 & 0xF8) | z;
00001FB0  303C 00F0 3326          move.w    #240,D0
00001FB4  122E 0013 3327          move.b    19(A6),D1
00001FB8  4881      3328          ext.w     D1
00001FBA  8041      3329          or.w      D1,D0
00001FBC  13C0 FF03 3330          move.b    D0,-16580608
00001FC0  0000      
                    3331   ; *(VGA) = data;
00001FC2  2042      3332          move.l    D2,A0
00001FC4  10AE 000F 3333          move.b    15(A6),(A0)
                    3334   ; *(VGA + 1) = data;
00001FC8  2042      3335          move.l    D2,A0
00001FCA  116E 000F 3336          move.b    15(A6),1(A0)
00001FCE  0001      
00001FD0  241F      3337          move.l    (A7)+,D2
00001FD2  4E5E      3338          unlk      A6
00001FD4  4E75      3339          rts
                    3340   ; }
                    3341   ; void menu(void)
                    3342   ; {
                    3343   _menu:
00001FD6  4E56 FFF4 3344          link      A6,#-12
00001FDA  48E7 3C20 3345          movem.l   D2/D3/D4/D5/A2,-(A7)
00001FDE  45F9 0000 3346          lea       _printf.L,A2
00001FE2  3CF8      
                    3347   ; char c, data, z;
                    3348   ; int c1 ;
                    3349   ; int addr, i, j;
                    3350   ; while(1)    {
                    3351   menu_1:
                    3352   ; FlushKeyboard() ;               // dump unread characters from keyboard
00001FE4  4EB8 0A64 3353          jsr       _FlushKeyboard
                    3354   ; printf("\r\n#") ;
00001FE8  4879 0000 3355          pea       @m68kde~1_89.L
00001FEC  4F62      
00001FEE  4E92      3356          jsr       (A2)
00001FF0  584F      3357          addq.w    #4,A7
                    3358   ; c = toupper(_getch());
00001FF2  2F00      3359          move.l    D0,-(A7)
00001FF4  4EB8 0A26 3360          jsr       __getch
00001FF8  2200      3361          move.l    D0,D1
00001FFA  201F      3362          move.l    (A7)+,D0
00001FFC  2F01      3363          move.l    D1,-(A7)
00001FFE  4EB9 0000 3364          jsr       _toupper
00002002  3CCC      
00002004  584F      3365          addq.w    #4,A7
00002006  1A00      3366          move.b    D0,D5
                    3367   ; if ( c == (char)('T'))  {
00002008  0C05 0054 3368          cmp.b     #84,D5
0000200C  6614      3369          bne.s     menu_4
                    3370   ; printf("\nRunning Tetris Game\n");
0000200E  4879 0000 3371          pea       @m68kde~1_90.L
00002012  4F66      
00002014  4E92      3372          jsr       (A2)
00002016  584F      3373          addq.w    #4,A7
                    3374   ; tetris_main();
00002018  4EB9 0000 3375          jsr       _tetris_main
0000201C  3800      
                    3376   ; continue;
0000201E  6000 00A2 3377          bra       menu_2
                    3378   menu_4:
                    3379   ; }
                    3380   ; if ( c == (char)('H'))  {
00002022  0C05 0048 3381          cmp.b     #72,D5
00002026  6616      3382          bne.s     menu_6
                    3383   ; printf("\nSaying Hello World\n");
00002028  4879 0000 3384          pea       @m68kde~1_91.L
0000202C  4F7C      
0000202E  4E92      3385          jsr       (A2)
00002030  584F      3386          addq.w    #4,A7
                    3387   ; say_hello();
00002032  4EB8 098A 3388          jsr       _say_hello
                    3389   ; say_world();
00002036  4EB8 09B0 3390          jsr       _say_world
                    3391   ; continue;
0000203A  6000 0086 3392          bra       menu_2
                    3393   menu_6:
                    3394   ; }
                    3395   ; if ( c == (char)('V'))  {
0000203E  0C05 0056 3396          cmp.b     #86,D5
00002042  6600 007A 3397          bne       menu_8
                    3398   ; printf("\nMemory Change in VGA\n");
00002046  4879 0000 3399          pea       @m68kde~1_92.L
0000204A  4F92      
0000204C  4E92      3400          jsr       (A2)
0000204E  584F      3401          addq.w    #4,A7
                    3402   ; // while (1) {
                    3403   ; //     printf("\nAddress: 0x0000 to 0x0FFF");
                    3404   ; //     addr = Get4HexDigits(0);
                    3405   ; //     printf("\nData: ");
                    3406   ; //     data = Get2HexDigits(0);
                    3407   ; //     writeVGA(addr, data);
                    3408   ; // }
                    3409   ; j = 0;
00002050  4282      3410          clr.l     D2
                    3411   ; z = 0;
00002052  4204      3412          clr.b     D4
                    3413   ; // 一排80个
                    3414   ; // 一共40排
                    3415   ; for (i = 0; i <= 0xFFFF; i++) {
00002054  4283      3416          clr.l     D3
                    3417   menu_10:
00002056  0C83 0000 3418          cmp.l     #65535,D3
0000205A  FFFF      
0000205C  6200 005E 3419          bhi       menu_12
                    3420   ; data = (j + 'A');
00002060  2002      3421          move.l    D2,D0
00002062  0680 0000 3422          add.l     #65,D0
00002066  0041      
00002068  1D40 FFF7 3423          move.b    D0,-9(A6)
                    3424   ; writeVGA_debug(i, data, z);
0000206C  4884      3425          ext.w     D4
0000206E  48C4      3426          ext.l     D4
00002070  2F04      3427          move.l    D4,-(A7)
00002072  122E FFF7 3428          move.b    -9(A6),D1
00002076  4881      3429          ext.w     D1
00002078  48C1      3430          ext.l     D1
0000207A  2F01      3431          move.l    D1,-(A7)
0000207C  2F03      3432          move.l    D3,-(A7)
0000207E  4EB8 1F8E 3433          jsr       _writeVGA_debug
00002082  DEFC 000C 3434          add.w     #12,A7
                    3435   ; ++j; ++z;
00002086  5282      3436          addq.l    #1,D2
00002088  5204      3437          addq.b    #1,D4
                    3438   ; if (z == 8) z = 1;
0000208A  0C04 0008 3439          cmp.b     #8,D4
0000208E  6602      3440          bne.s     menu_13
00002090  7801      3441          moveq     #1,D4
                    3442   menu_13:
                    3443   ; if (j == 26) j = 0;
00002092  0C82 0000 3444          cmp.l     #26,D2
00002096  001A      
00002098  6602      3445          bne.s     menu_15
0000209A  4282      3446          clr.l     D2
                    3447   menu_15:
                    3448   ; printf("\nAddress: 0x%04X, Data: %c", i, j + 'A');
0000209C  2202      3449          move.l    D2,D1
0000209E  0681 0000 3450          add.l     #65,D1
000020A2  0041      
000020A4  2F01      3451          move.l    D1,-(A7)
000020A6  2F03      3452          move.l    D3,-(A7)
000020A8  4879 0000 3453          pea       @m68kde~1_93.L
000020AC  4FAA      
000020AE  4E92      3454          jsr       (A2)
000020B0  DEFC 000C 3455          add.w     #12,A7
                    3456   ; Wait1ms();
000020B4  4EB8 08C6 3457          jsr       _Wait1ms
000020B8  5283      3458          addq.l    #1,D3
000020BA  609A      3459          bra       menu_10
                    3460   menu_12:
                    3461   ; }
                    3462   ; continue;
000020BC  6004      3463          bra.s     menu_2
                    3464   menu_8:
                    3465   ; }
                    3466   ; // if ( c == (char)('M'))  {
                    3467   ; //     while (1){
                    3468   ; //         *(char *)(VGA_ADDRESS) = 0x41;
                    3469   ; //         printf("\nAddress: %ld", VGA_ADDRESS);
                    3470   ; //     }
                    3471   ; //     continue;
                    3472   ; // }
                    3473   ; // if ( c == (char)('S'))  {
                    3474   ; //     printf("\nSasha\n");
                    3475   ; //     say_Sasha();
                    3476   ; //     cursor_x = cx;
                    3477   ; //     cursor_y = cy;
                    3478   ; //     while (1) {
                    3479   ; //         FlushKeyboard() ;               // dump unread characters from keyboard
                    3480   ; //         printf("\r\n#") ;
                    3481   ; //         c = toupper(_getch());
                    3482   ; //         if (c == (char)('W')) {
                    3483   ; //             cy -= 1;
                    3484   ; //             printf("\nMove Up, cy = %d\n", cy);
                    3485   ; //             cursor_y = cy;
                    3486   ; //             continue;
                    3487   ; //         }
                    3488   ; //         if (c == (char)('S')) {
                    3489   ; //             cy += 1;
                    3490   ; //             printf("\nMove Down, cy = %d\n", cy);
                    3491   ; //             cursor_y = cy;
                    3492   ; //             continue;
                    3493   ; //         }
                    3494   ; //         if (c == (char)('A')) {
                    3495   ; //             cx -= 1;
                    3496   ; //             printf("\nMove Left, cx = %d\n", cx);
                    3497   ; //             cursor_x = cx;
                    3498   ; //             continue;
                    3499   ; //         }
                    3500   ; //         if (c == (char)('D')) {
                    3501   ; //             cx += 1;
                    3502   ; //             printf("\nMove Right, cx = %d\n", cx);
                    3503   ; //             cursor_x = cx;
                    3504   ; //             continue;
                    3505   ; //         }
                    3506   ; //     }
                    3507   ; //     continue;
                    3508   ; // }
                    3509   ; UnknownCommand() ;
000020BE  4EB8 1E1C 3510          jsr       _UnknownCommand
                    3511   menu_2:
000020C2  6000 FF20 3512          bra       menu_1
                    3513   ; }
                    3514   ; }
                    3515   ; void PrintErrorMessageandAbort(char *string) {
                    3516   _PrintErrorMessageandAbort:
000020C6  4E56 0000 3517          link      A6,#0
                    3518   ; printf("\r\n\r\nProgram ABORT !!!!!!\r\n") ;
000020CA  4879 0000 3519          pea       @m68kde~1_94.L
000020CE  4FC6      
000020D0  4EB9 0000 3520          jsr       _printf
000020D4  3CF8      
000020D6  584F      3521          addq.w    #4,A7
                    3522   ; printf("%s\r\n", string) ;
000020D8  2F2E 0008 3523          move.l    8(A6),-(A7)
000020DC  4879 0000 3524          pea       @m68kde~1_95.L
000020E0  4FE2      
000020E2  4EB9 0000 3525          jsr       _printf
000020E6  3CF8      
000020E8  504F      3526          addq.w    #8,A7
                    3527   ; menu() ;
000020EA  4EB8 1FD6 3528          jsr       _menu
000020EE  4E5E      3529          unlk      A6
000020F0  4E75      3530          rts
                    3531   ; }
                    3532   ; void IRQMessage(int level) {
                    3533   _IRQMessage:
000020F2  4E56 0000 3534          link      A6,#0
                    3535   ; printf("\r\n\r\nProgram ABORT !!!!!");
000020F6  4879 0000 3536          pea       @m68kde~1_96.L
000020FA  4FE8      
000020FC  4EB9 0000 3537          jsr       _printf
00002100  3CF8      
00002102  584F      3538          addq.w    #4,A7
                    3539   ; printf("\r\nUnhandled Interrupt: IRQ%d !!!!!", level) ;
00002104  2F2E 0008 3540          move.l    8(A6),-(A7)
00002108  4879 0000 3541          pea       @m68kde~1_97.L
0000210C  5000      
0000210E  4EB9 0000 3542          jsr       _printf
00002112  3CF8      
00002114  504F      3543          addq.w    #8,A7
                    3544   ; menu() ;
00002116  4EB8 1FD6 3545          jsr       _menu
0000211A  4E5E      3546          unlk      A6
0000211C  4E75      3547          rts
                    3548   ; }
                    3549   ; void UnhandledIRQ1(void) {
                    3550   _UnhandledIRQ1:
                    3551   ; IRQMessage(1);
0000211E  4878 0001 3552          pea       1
00002122  4EB8 20F2 3553          jsr       _IRQMessage
00002126  584F      3554          addq.w    #4,A7
00002128  4E75      3555          rts
                    3556   ; }
                    3557   ; void UnhandledIRQ2(void) {
                    3558   _UnhandledIRQ2:
                    3559   ; IRQMessage(2);
0000212A  4878 0002 3560          pea       2
0000212E  4EB8 20F2 3561          jsr       _IRQMessage
00002132  584F      3562          addq.w    #4,A7
00002134  4E75      3563          rts
                    3564   ; }
                    3565   ; void UnhandledIRQ3(void){
                    3566   _UnhandledIRQ3:
                    3567   ; IRQMessage(3);
00002136  4878 0003 3568          pea       3
0000213A  4EB8 20F2 3569          jsr       _IRQMessage
0000213E  584F      3570          addq.w    #4,A7
00002140  4E75      3571          rts
                    3572   ; }
                    3573   ; void UnhandledIRQ4(void) {
                    3574   _UnhandledIRQ4:
                    3575   ; IRQMessage(4);
00002142  4878 0004 3576          pea       4
00002146  4EB8 20F2 3577          jsr       _IRQMessage
0000214A  584F      3578          addq.w    #4,A7
0000214C  4E75      3579          rts
                    3580   ; }
                    3581   ; void UnhandledIRQ5(void) {
                    3582   _UnhandledIRQ5:
                    3583   ; IRQMessage(5);
0000214E  4878 0005 3584          pea       5
00002152  4EB8 20F2 3585          jsr       _IRQMessage
00002156  584F      3586          addq.w    #4,A7
00002158  4E75      3587          rts
                    3588   ; }
                    3589   ; void UnhandledIRQ6(void) {
                    3590   _UnhandledIRQ6:
                    3591   ; PrintErrorMessageandAbort("ADDRESS ERROR: 16 or 32 Bit Transfer to/from an ODD Address....") ;
0000215A  4879 0000 3592          pea       @m68kde~1_98.L
0000215E  5024      
00002160  4EB8 20C6 3593          jsr       _PrintErrorMessageandAbort
00002164  584F      3594          addq.w    #4,A7
                    3595   ; menu() ;
00002166  4EB8 1FD6 3596          jsr       _menu
0000216A  4E75      3597          rts
                    3598   ; }
                    3599   ; void UnhandledIRQ7(void) {
                    3600   _UnhandledIRQ7:
                    3601   ; IRQMessage(7);
0000216C  4878 0007 3602          pea       7
00002170  4EB8 20F2 3603          jsr       _IRQMessage
00002174  584F      3604          addq.w    #4,A7
00002176  4E75      3605          rts
                    3606   ; }
                    3607   ; void UnhandledTrap(void) {
                    3608   _UnhandledTrap:
                    3609   ; PrintErrorMessageandAbort("Unhandled Trap !!!!!") ;
00002178  4879 0000 3610          pea       @m68kde~1_99.L
0000217C  5064      
0000217E  4EB8 20C6 3611          jsr       _PrintErrorMessageandAbort
00002182  584F      3612          addq.w    #4,A7
00002184  4E75      3613          rts
                    3614   ; }
                    3615   ; void BusError() {
                    3616   _BusError:
                    3617   ; PrintErrorMessageandAbort("BUS Error!") ;
00002186  4879 0000 3618          pea       @m68kde~1_100.L
0000218A  507A      
0000218C  4EB8 20C6 3619          jsr       _PrintErrorMessageandAbort
00002190  584F      3620          addq.w    #4,A7
00002192  4E75      3621          rts
                    3622   ; }
                    3623   ; void AddressError() {
                    3624   _AddressError:
                    3625   ; PrintErrorMessageandAbort("ADDRESS Error!") ;
00002194  4879 0000 3626          pea       @m68kde~1_101.L
00002198  5086      
0000219A  4EB8 20C6 3627          jsr       _PrintErrorMessageandAbort
0000219E  584F      3628          addq.w    #4,A7
000021A0  4E75      3629          rts
                    3630   ; }
                    3631   ; void IllegalInstruction() {
                    3632   _IllegalInstruction:
                    3633   ; PrintErrorMessageandAbort("ILLEGAL INSTRUCTION") ;
000021A2  4879 0000 3634          pea       @m68kde~1_102.L
000021A6  5096      
000021A8  4EB8 20C6 3635          jsr       _PrintErrorMessageandAbort
000021AC  584F      3636          addq.w    #4,A7
000021AE  4E75      3637          rts
                    3638   ; }
                    3639   ; void Dividebyzero() {
                    3640   _Dividebyzero:
                    3641   ; PrintErrorMessageandAbort("DIVIDE BY ZERO") ;
000021B0  4879 0000 3642          pea       @m68kde~1_103.L
000021B4  50AA      
000021B6  4EB8 20C6 3643          jsr       _PrintErrorMessageandAbort
000021BA  584F      3644          addq.w    #4,A7
000021BC  4E75      3645          rts
                    3646   ; }
                    3647   ; void Check() {
                    3648   _Check:
                    3649   ; PrintErrorMessageandAbort("'CHK' INSTRUCTION") ;
000021BE  4879 0000 3650          pea       @m68kde~1_104.L
000021C2  50BA      
000021C4  4EB8 20C6 3651          jsr       _PrintErrorMessageandAbort
000021C8  584F      3652          addq.w    #4,A7
000021CA  4E75      3653          rts
                    3654   ; }
                    3655   ; void Trapv() {
                    3656   _Trapv:
                    3657   ; PrintErrorMessageandAbort("TRAPV INSTRUCTION") ;
000021CC  4879 0000 3658          pea       @m68kde~1_105.L
000021D0  50CC      
000021D2  4EB8 20C6 3659          jsr       _PrintErrorMessageandAbort
000021D6  584F      3660          addq.w    #4,A7
000021D8  4E75      3661          rts
                    3662   ; }
                    3663   ; void PrivError() {
                    3664   _PrivError:
                    3665   ; PrintErrorMessageandAbort("PRIVILEGE VIOLATION") ;
000021DA  4879 0000 3666          pea       @m68kde~1_106.L
000021DE  50DE      
000021E0  4EB8 20C6 3667          jsr       _PrintErrorMessageandAbort
000021E4  584F      3668          addq.w    #4,A7
000021E6  4E75      3669          rts
                    3670   ; }
                    3671   ; void UnitIRQ() {
                    3672   _UnitIRQ:
                    3673   ; PrintErrorMessageandAbort("UNINITIALISED IRQ") ;
000021E8  4879 0000 3674          pea       @m68kde~1_107.L
000021EC  50F2      
000021EE  4EB8 20C6 3675          jsr       _PrintErrorMessageandAbort
000021F2  584F      3676          addq.w    #4,A7
000021F4  4E75      3677          rts
                    3678   ; }
                    3679   ; void Spurious() {
                    3680   _Spurious:
                    3681   ; PrintErrorMessageandAbort("SPURIOUS IRQ") ;
000021F6  4879 0000 3682          pea       @m68kde~1_108.L
000021FA  5104      
000021FC  4EB8 20C6 3683          jsr       _PrintErrorMessageandAbort
00002200  584F      3684          addq.w    #4,A7
00002202  4E75      3685          rts
                    3686   ; }
                    3687   ; void main(void)
                    3688   ; {
                    3689   _main:
00002204  4E56 FFF0 3690          link      A6,#-16
00002208  48E7 2020 3691          movem.l   D2/A2,-(A7)
0000220C  45F8 093A 3692          lea       _InstallExceptionHandler.L,A2
                    3693   ; char c ;
                    3694   ; int i, j ;
                    3695   ; char *BugMessage = "CPEN 412 2023W2\r\nTom Wang, 76340348";
00002210  41F9 0000 3696          lea       @m68kde~1_109.L,A0
00002214  5112      
00002216  2D48 FFF8 3697          move.l    A0,-8(A6)
                    3698   ; char *CopyrightMessage = "Copyright (C) PJ Davies 2016";
0000221A  41F9 0000 3699          lea       @m68kde~1_110.L,A0
0000221E  5136      
00002220  2D48 FFFC 3700          move.l    A0,-4(A6)
                    3701   ; KillAllBreakPoints() ;
00002224  4EB8 1AC8 3702          jsr       _KillAllBreakPoints
                    3703   ; i = x = y = z = PortA_Count = 0;
00002228  42B9 0803 3704          clr.l     _PortA_Count.L
0000222C  00D4      
0000222E  42B9 0803 3705          clr.l     _z.L
00002232  00D0      
00002234  42B9 0803 3706          clr.l     _y.L
00002238  00CC      
0000223A  42B9 0803 3707          clr.l     _x.L
0000223E  00C8      
00002240  4282      3708          clr.l     D2
                    3709   ; Trace = GoFlag = 0;                       // used in tracing/single stepping
00002242  42B9 0803 3710          clr.l     _GoFlag.L
00002246  00DC      
00002248  42B9 0803 3711          clr.l     _Trace.L
0000224C  00D8      
                    3712   ; Echo = 1 ;
0000224E  23FC 0000 3713          move.l    #1,_Echo.L
00002252  0001 0803 
00002256  00E0      
                    3714   ; // Initialise Breakpoint variables
                    3715   ; for(i = 0; i < 8; i++)  {
00002258  4282      3716          clr.l     D2
                    3717   main_1:
0000225A  0C82 0000 3718          cmp.l     #8,D2
0000225E  0008      
00002260  6C00 004C 3719          bge       main_3
                    3720   ; BreakPointAddress[i] = 0;               //array of 8 breakpoint addresses
00002264  2002      3721          move.l    D2,D0
00002266  E588      3722          lsl.l     #2,D0
00002268  41F9 0803 3723          lea       _BreakPointAddress.L,A0
0000226C  012E      
0000226E  42B0 0800 3724          clr.l     0(A0,D0.L)
                    3725   ; WatchPointAddress[i] = 0 ;
00002272  2002      3726          move.l    D2,D0
00002274  E588      3727          lsl.l     #2,D0
00002276  41F9 0803 3728          lea       _WatchPointAddress.L,A0
0000227A  0182      
0000227C  42B0 0800 3729          clr.l     0(A0,D0.L)
                    3730   ; BreakPointInstruction[i] = 0;           // to hold the instruction at the break point
00002280  2002      3731          move.l    D2,D0
00002282  E388      3732          lsl.l     #1,D0
00002284  41F9 0803 3733          lea       _BreakPointInstruction.L,A0
00002288  014E      
0000228A  4270 0800 3734          clr.w     0(A0,D0.L)
                    3735   ; BreakPointSetOrCleared[i] = 0;          // indicates if break point set
0000228E  2002      3736          move.l    D2,D0
00002290  E588      3737          lsl.l     #2,D0
00002292  41F9 0803 3738          lea       _BreakPointSetOrCleared.L,A0
00002296  015E      
00002298  42B0 0800 3739          clr.l     0(A0,D0.L)
                    3740   ; WatchPointSetOrCleared[i] = 0;
0000229C  2002      3741          move.l    D2,D0
0000229E  E588      3742          lsl.l     #2,D0
000022A0  41F9 0803 3743          lea       _WatchPointSetOrCleared.L,A0
000022A4  01A2      
000022A6  42B0 0800 3744          clr.l     0(A0,D0.L)
000022AA  5282      3745          addq.l    #1,D2
000022AC  60AC      3746          bra       main_1
                    3747   main_3:
                    3748   ; }
                    3749   ; Init_RS232() ;     // initialise the RS232 port
000022AE  4EB8 09D0 3750          jsr       _Init_RS232
                    3751   ; for( i = 32; i < 48; i++)
000022B2  7420      3752          moveq     #32,D2
                    3753   main_4:
000022B4  0C82 0000 3754          cmp.l     #48,D2
000022B8  0030      
000022BA  6C0E      3755          bge.s     main_6
                    3756   ; InstallExceptionHandler(UnhandledTrap, i) ;		        // install Trap exception handler on vector 32-47
000022BC  2F02      3757          move.l    D2,-(A7)
000022BE  4878 2178 3758          pea       _UnhandledTrap.L
000022C2  4E92      3759          jsr       (A2)
000022C4  504F      3760          addq.w    #8,A7
000022C6  5282      3761          addq.l    #1,D2
000022C8  60EA      3762          bra       main_4
                    3763   main_6:
                    3764   ; InstallExceptionHandler(menu, 47) ;		                   // TRAP #15 call debug and end program
000022CA  4878 002F 3765          pea       47
000022CE  4878 1FD6 3766          pea       _menu.L
000022D2  4E92      3767          jsr       (A2)
000022D4  504F      3768          addq.w    #8,A7
                    3769   ; InstallExceptionHandler(UnhandledIRQ1, 25) ;		      // install handler for interrupts
000022D6  4878 0019 3770          pea       25
000022DA  4878 211E 3771          pea       _UnhandledIRQ1.L
000022DE  4E92      3772          jsr       (A2)
000022E0  504F      3773          addq.w    #8,A7
                    3774   ; InstallExceptionHandler(UnhandledIRQ2, 26) ;		      // install handler for interrupts
000022E2  4878 001A 3775          pea       26
000022E6  4878 212A 3776          pea       _UnhandledIRQ2.L
000022EA  4E92      3777          jsr       (A2)
000022EC  504F      3778          addq.w    #8,A7
                    3779   ; InstallExceptionHandler(UnhandledIRQ3, 27) ;		      // install handler for interrupts
000022EE  4878 001B 3780          pea       27
000022F2  4878 2136 3781          pea       _UnhandledIRQ3.L
000022F6  4E92      3782          jsr       (A2)
000022F8  504F      3783          addq.w    #8,A7
                    3784   ; InstallExceptionHandler(UnhandledIRQ4, 28) ;		      // install handler for interrupts
000022FA  4878 001C 3785          pea       28
000022FE  4878 2142 3786          pea       _UnhandledIRQ4.L
00002302  4E92      3787          jsr       (A2)
00002304  504F      3788          addq.w    #8,A7
                    3789   ; InstallExceptionHandler(UnhandledIRQ5, 29) ;		      // install handler for interrupts
00002306  4878 001D 3790          pea       29
0000230A  4878 214E 3791          pea       _UnhandledIRQ5.L
0000230E  4E92      3792          jsr       (A2)
00002310  504F      3793          addq.w    #8,A7
                    3794   ; InstallExceptionHandler(UnhandledIRQ6, 30) ;		      // install handler for interrupts
00002312  4878 001E 3795          pea       30
00002316  4878 215A 3796          pea       _UnhandledIRQ6.L
0000231A  4E92      3797          jsr       (A2)
0000231C  504F      3798          addq.w    #8,A7
                    3799   ; InstallExceptionHandler(UnhandledIRQ7, 31) ;		      // install handler for interrupts
0000231E  4878 001F 3800          pea       31
00002322  4878 216C 3801          pea       _UnhandledIRQ7.L
00002326  4E92      3802          jsr       (A2)
00002328  504F      3803          addq.w    #8,A7
                    3804   ; InstallExceptionHandler(HandleBreakPoint, 46) ;		           // install Trap 14 Break Point exception handler on vector 46
0000232A  4878 002E 3805          pea       46
0000232E  4878 1D56 3806          pea       _HandleBreakPoint.L
00002332  4E92      3807          jsr       (A2)
00002334  504F      3808          addq.w    #8,A7
                    3809   ; InstallExceptionHandler(DumpRegistersandPause, 29) ;		   // install TRACE handler for IRQ5 on vector 29
00002336  4878 001D 3810          pea       29
0000233A  4878 1436 3811          pea       _DumpRegistersandPause.L
0000233E  4E92      3812          jsr       (A2)
00002340  504F      3813          addq.w    #8,A7
                    3814   ; InstallExceptionHandler(BusError,2) ;                          // install Bus error handler
00002342  4878 0002 3815          pea       2
00002346  4878 2186 3816          pea       _BusError.L
0000234A  4E92      3817          jsr       (A2)
0000234C  504F      3818          addq.w    #8,A7
                    3819   ; InstallExceptionHandler(AddressError,3) ;                      // install address error handler (doesn't work on soft core 68k implementation)
0000234E  4878 0003 3820          pea       3
00002352  4878 2194 3821          pea       _AddressError.L
00002356  4E92      3822          jsr       (A2)
00002358  504F      3823          addq.w    #8,A7
                    3824   ; InstallExceptionHandler(IllegalInstruction,4) ;                // install illegal instruction exception handler
0000235A  4878 0004 3825          pea       4
0000235E  4878 21A2 3826          pea       _IllegalInstruction.L
00002362  4E92      3827          jsr       (A2)
00002364  504F      3828          addq.w    #8,A7
                    3829   ; InstallExceptionHandler(Dividebyzero,5) ;                      // install /0 exception handler
00002366  4878 0005 3830          pea       5
0000236A  4878 21B0 3831          pea       _Dividebyzero.L
0000236E  4E92      3832          jsr       (A2)
00002370  504F      3833          addq.w    #8,A7
                    3834   ; InstallExceptionHandler(Check,6) ;                             // install check instruction exception handler
00002372  4878 0006 3835          pea       6
00002376  4878 21BE 3836          pea       _Check.L
0000237A  4E92      3837          jsr       (A2)
0000237C  504F      3838          addq.w    #8,A7
                    3839   ; InstallExceptionHandler(Trapv,7) ;                             // install trapv instruction exception handler
0000237E  4878 0007 3840          pea       7
00002382  4878 21CC 3841          pea       _Trapv.L
00002386  4E92      3842          jsr       (A2)
00002388  504F      3843          addq.w    #8,A7
                    3844   ; InstallExceptionHandler(PrivError,8) ;                         // install Priv Violation exception handler
0000238A  4878 0008 3845          pea       8
0000238E  4878 21DA 3846          pea       _PrivError.L
00002392  4E92      3847          jsr       (A2)
00002394  504F      3848          addq.w    #8,A7
                    3849   ; InstallExceptionHandler(UnitIRQ,15) ;                          // install uninitialised IRQ exception handler
00002396  4878 000F 3850          pea       15
0000239A  4878 21E8 3851          pea       _UnitIRQ.L
0000239E  4E92      3852          jsr       (A2)
000023A0  504F      3853          addq.w    #8,A7
                    3854   ; InstallExceptionHandler(Check,24) ;                            // install spurious IRQ exception handler
000023A2  4878 0018 3855          pea       24
000023A6  4878 21BE 3856          pea       _Check.L
000023AA  4E92      3857          jsr       (A2)
000023AC  504F      3858          addq.w    #8,A7
                    3859   ; FlushKeyboard() ;                        // dump unread characters from keyboard
000023AE  4EB8 0A64 3860          jsr       _FlushKeyboard
                    3861   ; TraceException = 0 ;                     // clear trace exception port to remove any software generated single step/trace
000023B2  4239 0040 3862          clr.b     4194314
000023B6  000A      
                    3863   ; printf("\r\n%s", BugMessage) ;
000023B8  2F2E FFF8 3864          move.l    -8(A6),-(A7)
000023BC  4879 0000 3865          pea       @m68kde~1_111.L
000023C0  5154      
000023C2  4EB9 0000 3866          jsr       _printf
000023C6  3CF8      
000023C8  504F      3867          addq.w    #8,A7
                    3868   ; printf("\r\n%s", CopyrightMessage) ;
000023CA  2F2E FFFC 3869          move.l    -4(A6),-(A7)
000023CE  4879 0000 3870          pea       @m68kde~1_111.L
000023D2  5154      
000023D4  4EB9 0000 3871          jsr       _printf
000023D8  3CF8      
000023DA  504F      3872          addq.w    #8,A7
                    3873   ; // update_cursor(40, 20);
                    3874   ; // octlAddress = 0xF2;
                    3875   ; // octlAddress1 = 0xF2;
                    3876   ; // changeChar(20 * 80 + 39, ' ');
                    3877   ; menu();
000023DC  4EB8 1FD6 3878          jsr       _menu
000023E0  4CDF 0404 3879          movem.l   (A7)+,D2/A2
000023E4  4E5E      3880          unlk      A6
000023E6  4E75      3881          rts
                    3882   ; }
                    3883   ; C:\USERS\10054\ONEDRIVE\CPEN 412 FINAL PROJECT\FINAL_PROJECT_2023_SEM2_STUDENT_TEMPLATE\FINAL_PROJECT_2023_SEM2_STUDENT_TEMPLATE\PROGRAMS\DEBUGMONITORCODE\SAY_PHONEME.C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                    3884   ; #include "say_phoneme.h"
                    3885   ; void talkphonemeAA (){ say_phoneme(phoneme_AA  ) ; };
                    3886   _talkphonemeAA:
000023E8  4878 0018 3887          pea       24
000023EC  4EB8 095A 3888          jsr       _say_phoneme
000023F0  584F      3889          addq.w    #4,A7
000023F2  4E75      3890          rts
                    3891   ; void talkphonemeAE (){ say_phoneme(phoneme_AE  ) ; };
                    3892   _talkphonemeAE:
000023F4  4878 001A 3893          pea       26
000023F8  4EB8 095A 3894          jsr       _say_phoneme
000023FC  584F      3895          addq.w    #4,A7
000023FE  4E75      3896          rts
                    3897   ; void talkphonemeAO (){ say_phoneme(phoneme_AO  ) ; };
                    3898   _talkphonemeAO:
00002400  4878 0017 3899          pea       23
00002404  4EB8 095A 3900          jsr       _say_phoneme
00002408  584F      3901          addq.w    #4,A7
0000240A  4E75      3902          rts
                    3903   ; void talkphonemeAR (){ say_phoneme(phoneme_AR  ) ; };
                    3904   _talkphonemeAR:
0000240C  4878 003B 3905          pea       59
00002410  4EB8 095A 3906          jsr       _say_phoneme
00002414  584F      3907          addq.w    #4,A7
00002416  4E75      3908          rts
                    3909   ; void talkphonemeAW (){ say_phoneme(phoneme_AW  ) ; };
                    3910   _talkphonemeAW:
00002418  4878 0020 3911          pea       32
0000241C  4EB8 095A 3912          jsr       _say_phoneme
00002420  584F      3913          addq.w    #4,A7
00002422  4E75      3914          rts
                    3915   ; void talkphonemeAX (){ say_phoneme(phoneme_AX  ) ; };
                    3916   _talkphonemeAX:
00002424  4878 000F 3917          pea       15
00002428  4EB8 095A 3918          jsr       _say_phoneme
0000242C  584F      3919          addq.w    #4,A7
0000242E  4E75      3920          rts
                    3921   ; void talkphonemeAY (){ say_phoneme(phoneme_AY  ) ; };
                    3922   _talkphonemeAY:
00002430  4878 0006 3923          pea       6
00002434  4EB8 095A 3924          jsr       _say_phoneme
00002438  584F      3925          addq.w    #4,A7
0000243A  4E75      3926          rts
                    3927   ; void talkphonemeBB1(){ say_phoneme(phoneme_BB1 ) ; };
                    3928   _talkphonemeBB1:
0000243C  4878 001C 3929          pea       28
00002440  4EB8 095A 3930          jsr       _say_phoneme
00002444  584F      3931          addq.w    #4,A7
00002446  4E75      3932          rts
                    3933   ; void talkphonemeBB2(){ say_phoneme(phoneme_BB2 ) ; };
                    3934   _talkphonemeBB2:
00002448  4878 003F 3935          pea       63
0000244C  4EB8 095A 3936          jsr       _say_phoneme
00002450  584F      3937          addq.w    #4,A7
00002452  4E75      3938          rts
                    3939   ; void talkphonemeCH (){ say_phoneme(phoneme_CH  ) ; };
                    3940   _talkphonemeCH:
00002454  4878 0032 3941          pea       50
00002458  4EB8 095A 3942          jsr       _say_phoneme
0000245C  584F      3943          addq.w    #4,A7
0000245E  4E75      3944          rts
                    3945   ; void talkphonemeDD1(){ say_phoneme(phoneme_DD1 ) ; };
                    3946   _talkphonemeDD1:
00002460  4878 0015 3947          pea       21
00002464  4EB8 095A 3948          jsr       _say_phoneme
00002468  584F      3949          addq.w    #4,A7
0000246A  4E75      3950          rts
                    3951   ; void talkphonemeDD2(){ say_phoneme(phoneme_DD2 ) ; };
                    3952   _talkphonemeDD2:
0000246C  4878 0021 3953          pea       33
00002470  4EB8 095A 3954          jsr       _say_phoneme
00002474  584F      3955          addq.w    #4,A7
00002476  4E75      3956          rts
                    3957   ; void talkphonemeDH1(){ say_phoneme(phoneme_DH1 ) ; };
                    3958   _talkphonemeDH1:
00002478  4878 0012 3959          pea       18
0000247C  4EB8 095A 3960          jsr       _say_phoneme
00002480  584F      3961          addq.w    #4,A7
00002482  4E75      3962          rts
                    3963   ; void talkphonemeDH2(){ say_phoneme(phoneme_DH2 ) ; };
                    3964   _talkphonemeDH2:
00002484  4878 0036 3965          pea       54
00002488  4EB8 095A 3966          jsr       _say_phoneme
0000248C  584F      3967          addq.w    #4,A7
0000248E  4E75      3968          rts
                    3969   ; void talkphonemeEH (){ say_phoneme(phoneme_EH  ) ; };
                    3970   _talkphonemeEH:
00002490  4878 0007 3971          pea       7
00002494  4EB8 095A 3972          jsr       _say_phoneme
00002498  584F      3973          addq.w    #4,A7
0000249A  4E75      3974          rts
                    3975   ; void talkphonemeEL (){ say_phoneme(phoneme_EL  ) ; };
                    3976   _talkphonemeEL:
0000249C  4878 003E 3977          pea       62
000024A0  4EB8 095A 3978          jsr       _say_phoneme
000024A4  584F      3979          addq.w    #4,A7
000024A6  4E75      3980          rts
                    3981   ; void talkphonemeER1(){ say_phoneme(phoneme_ER1 ) ; };
                    3982   _talkphonemeER1:
000024A8  4878 0033 3983          pea       51
000024AC  4EB8 095A 3984          jsr       _say_phoneme
000024B0  584F      3985          addq.w    #4,A7
000024B2  4E75      3986          rts
                    3987   ; void talkphonemeER2(){ say_phoneme(phoneme_ER2 ) ; };
                    3988   _talkphonemeER2:
000024B4  4878 0034 3989          pea       52
000024B8  4EB8 095A 3990          jsr       _say_phoneme
000024BC  584F      3991          addq.w    #4,A7
000024BE  4E75      3992          rts
                    3993   ; void talkphonemeEY (){ say_phoneme(phoneme_EY  ) ; };
                    3994   _talkphonemeEY:
000024C0  4878 0014 3995          pea       20
000024C4  4EB8 095A 3996          jsr       _say_phoneme
000024C8  584F      3997          addq.w    #4,A7
000024CA  4E75      3998          rts
                    3999   ; void talkphonemeFF (){ say_phoneme(phoneme_FF  ) ; };
                    4000   _talkphonemeFF:
000024CC  4878 0028 4001          pea       40
000024D0  4EB8 095A 4002          jsr       _say_phoneme
000024D4  584F      4003          addq.w    #4,A7
000024D6  4E75      4004          rts
                    4005   ; void talkphonemeGG1(){ say_phoneme(phoneme_GG1 ) ; };
                    4006   _talkphonemeGG1:
000024D8  4878 0024 4007          pea       36
000024DC  4EB8 095A 4008          jsr       _say_phoneme
000024E0  584F      4009          addq.w    #4,A7
000024E2  4E75      4010          rts
                    4011   ; void talkphonemeGG2(){ say_phoneme(phoneme_GG2 ) ; };
                    4012   _talkphonemeGG2:
000024E4  4878 003D 4013          pea       61
000024E8  4EB8 095A 4014          jsr       _say_phoneme
000024EC  584F      4015          addq.w    #4,A7
000024EE  4E75      4016          rts
                    4017   ; void talkphonemeGG3(){ say_phoneme(phoneme_GG3 ) ; };
                    4018   _talkphonemeGG3:
000024F0  4878 0022 4019          pea       34
000024F4  4EB8 095A 4020          jsr       _say_phoneme
000024F8  584F      4021          addq.w    #4,A7
000024FA  4E75      4022          rts
                    4023   ; void talkphonemeHH1(){ say_phoneme(phoneme_HH1 ) ; };
                    4024   _talkphonemeHH1:
000024FC  4878 001B 4025          pea       27
00002500  4EB8 095A 4026          jsr       _say_phoneme
00002504  584F      4027          addq.w    #4,A7
00002506  4E75      4028          rts
                    4029   ; void talkphonemeHH2(){ say_phoneme(phoneme_HH2 ) ; };
                    4030   _talkphonemeHH2:
00002508  4878 0039 4031          pea       57
0000250C  4EB8 095A 4032          jsr       _say_phoneme
00002510  584F      4033          addq.w    #4,A7
00002512  4E75      4034          rts
                    4035   ; void talkphonemeIH (){ say_phoneme(phoneme_IH  ) ; };
                    4036   _talkphonemeIH:
00002514  4878 000C 4037          pea       12
00002518  4EB8 095A 4038          jsr       _say_phoneme
0000251C  584F      4039          addq.w    #4,A7
0000251E  4E75      4040          rts
                    4041   ; void talkphonemeIY (){ say_phoneme(phoneme_IY  ) ; };
                    4042   _talkphonemeIY:
00002520  4878 0013 4043          pea       19
00002524  4EB8 095A 4044          jsr       _say_phoneme
00002528  584F      4045          addq.w    #4,A7
0000252A  4E75      4046          rts
                    4047   ; void talkphonemeJH (){ say_phoneme(phoneme_JH  ) ; };
                    4048   _talkphonemeJH:
0000252C  4878 000A 4049          pea       10
00002530  4EB8 095A 4050          jsr       _say_phoneme
00002534  584F      4051          addq.w    #4,A7
00002536  4E75      4052          rts
                    4053   ; void talkphonemeKK1(){ say_phoneme(phoneme_KK1 ) ; };
                    4054   _talkphonemeKK1:
00002538  4878 002A 4055          pea       42
0000253C  4EB8 095A 4056          jsr       _say_phoneme
00002540  584F      4057          addq.w    #4,A7
00002542  4E75      4058          rts
                    4059   ; void talkphonemeKK2(){ say_phoneme(phoneme_KK2 ) ; };
                    4060   _talkphonemeKK2:
00002544  4878 0029 4061          pea       41
00002548  4EB8 095A 4062          jsr       _say_phoneme
0000254C  584F      4063          addq.w    #4,A7
0000254E  4E75      4064          rts
                    4065   ; void talkphonemeKK3(){ say_phoneme(phoneme_KK3 ) ; };
                    4066   _talkphonemeKK3:
00002550  4878 0008 4067          pea       8
00002554  4EB8 095A 4068          jsr       _say_phoneme
00002558  584F      4069          addq.w    #4,A7
0000255A  4E75      4070          rts
                    4071   ; void talkphonemeLL (){ say_phoneme(phoneme_LL  ) ; };
                    4072   _talkphonemeLL:
0000255C  4878 002D 4073          pea       45
00002560  4EB8 095A 4074          jsr       _say_phoneme
00002564  584F      4075          addq.w    #4,A7
00002566  4E75      4076          rts
                    4077   ; void talkphonemeMM (){ say_phoneme(phoneme_MM  ) ; };
                    4078   _talkphonemeMM:
00002568  4878 0010 4079          pea       16
0000256C  4EB8 095A 4080          jsr       _say_phoneme
00002570  584F      4081          addq.w    #4,A7
00002572  4E75      4082          rts
                    4083   ; void talkphonemeNG (){ say_phoneme(phoneme_NG  ) ; };
                    4084   _talkphonemeNG:
00002574  4878 002C 4085          pea       44
00002578  4EB8 095A 4086          jsr       _say_phoneme
0000257C  584F      4087          addq.w    #4,A7
0000257E  4E75      4088          rts
                    4089   ; void talkphonemeNN1(){ say_phoneme(phoneme_NN1 ) ; };
                    4090   _talkphonemeNN1:
00002580  4878 000B 4091          pea       11
00002584  4EB8 095A 4092          jsr       _say_phoneme
00002588  584F      4093          addq.w    #4,A7
0000258A  4E75      4094          rts
                    4095   ; void talkphonemeNN2(){ say_phoneme(phoneme_NN2 ) ; };
                    4096   _talkphonemeNN2:
0000258C  4878 0038 4097          pea       56
00002590  4EB8 095A 4098          jsr       _say_phoneme
00002594  584F      4099          addq.w    #4,A7
00002596  4E75      4100          rts
                    4101   ; void talkphonemeOR (){ say_phoneme(phoneme_OR  ) ; };
                    4102   _talkphonemeOR:
00002598  4878 003A 4103          pea       58
0000259C  4EB8 095A 4104          jsr       _say_phoneme
000025A0  584F      4105          addq.w    #4,A7
000025A2  4E75      4106          rts
                    4107   ; void talkphonemeOW (){ say_phoneme(phoneme_OW  ) ; };
                    4108   _talkphonemeOW:
000025A4  4878 0035 4109          pea       53
000025A8  4EB8 095A 4110          jsr       _say_phoneme
000025AC  584F      4111          addq.w    #4,A7
000025AE  4E75      4112          rts
                    4113   ; void talkphonemeOY (){ say_phoneme(phoneme_OY  ) ; };
                    4114   _talkphonemeOY:
000025B0  4878 0005 4115          pea       5
000025B4  4EB8 095A 4116          jsr       _say_phoneme
000025B8  584F      4117          addq.w    #4,A7
000025BA  4E75      4118          rts
                    4119   ; void talkphonemePP (){ say_phoneme(phoneme_PP  ) ; };
                    4120   _talkphonemePP:
000025BC  4878 0009 4121          pea       9
000025C0  4EB8 095A 4122          jsr       _say_phoneme
000025C4  584F      4123          addq.w    #4,A7
000025C6  4E75      4124          rts
                    4125   ; void talkphonemeRR1(){ say_phoneme(phoneme_RR1 ) ; };
                    4126   _talkphonemeRR1:
000025C8  4878 000E 4127          pea       14
000025CC  4EB8 095A 4128          jsr       _say_phoneme
000025D0  584F      4129          addq.w    #4,A7
000025D2  4E75      4130          rts
                    4131   ; void talkphonemeRR2(){ say_phoneme(phoneme_RR2 ) ; };
                    4132   _talkphonemeRR2:
000025D4  4878 0027 4133          pea       39
000025D8  4EB8 095A 4134          jsr       _say_phoneme
000025DC  584F      4135          addq.w    #4,A7
000025DE  4E75      4136          rts
                    4137   ; void talkphonemeSH (){ say_phoneme(phoneme_SH  ) ; };
                    4138   _talkphonemeSH:
000025E0  4878 0025 4139          pea       37
000025E4  4EB8 095A 4140          jsr       _say_phoneme
000025E8  584F      4141          addq.w    #4,A7
000025EA  4E75      4142          rts
                    4143   ; void talkphonemeSS (){ say_phoneme(phoneme_SS  ) ; };
                    4144   _talkphonemeSS:
000025EC  4878 0037 4145          pea       55
000025F0  4EB8 095A 4146          jsr       _say_phoneme
000025F4  584F      4147          addq.w    #4,A7
000025F6  4E75      4148          rts
                    4149   ; void talkphonemeTH (){ say_phoneme(phoneme_TH  ) ; };
                    4150   _talkphonemeTH:
000025F8  4878 001D 4151          pea       29
000025FC  4EB8 095A 4152          jsr       _say_phoneme
00002600  584F      4153          addq.w    #4,A7
00002602  4E75      4154          rts
                    4155   ; void talkphonemeTT1(){ say_phoneme(phoneme_TT1 ) ; };
                    4156   _talkphonemeTT1:
00002604  4878 0011 4157          pea       17
00002608  4EB8 095A 4158          jsr       _say_phoneme
0000260C  584F      4159          addq.w    #4,A7
0000260E  4E75      4160          rts
                    4161   ; void talkphonemeTT2(){ say_phoneme(phoneme_TT2 ) ; };
                    4162   _talkphonemeTT2:
00002610  4878 000D 4163          pea       13
00002614  4EB8 095A 4164          jsr       _say_phoneme
00002618  584F      4165          addq.w    #4,A7
0000261A  4E75      4166          rts
                    4167   ; void talkphonemeUH (){ say_phoneme(phoneme_UH  ) ; };
                    4168   _talkphonemeUH:
0000261C  4878 001E 4169          pea       30
00002620  4EB8 095A 4170          jsr       _say_phoneme
00002624  584F      4171          addq.w    #4,A7
00002626  4E75      4172          rts
                    4173   ; void talkphonemeUW1(){ say_phoneme(phoneme_UW1 ) ; };
                    4174   _talkphonemeUW1:
00002628  4878 0016 4175          pea       22
0000262C  4EB8 095A 4176          jsr       _say_phoneme
00002630  584F      4177          addq.w    #4,A7
00002632  4E75      4178          rts
                    4179   ; void talkphonemeUW2(){ say_phoneme(phoneme_UW2 ) ; };
                    4180   _talkphonemeUW2:
00002634  4878 001F 4181          pea       31
00002638  4EB8 095A 4182          jsr       _say_phoneme
0000263C  584F      4183          addq.w    #4,A7
0000263E  4E75      4184          rts
                    4185   ; void talkphonemeVV (){ say_phoneme(phoneme_VV  ) ; };
                    4186   _talkphonemeVV:
00002640  4878 0023 4187          pea       35
00002644  4EB8 095A 4188          jsr       _say_phoneme
00002648  584F      4189          addq.w    #4,A7
0000264A  4E75      4190          rts
                    4191   ; void talkphonemeWH (){ say_phoneme(phoneme_WH  ) ; };
                    4192   _talkphonemeWH:
0000264C  4878 0030 4193          pea       48
00002650  4EB8 095A 4194          jsr       _say_phoneme
00002654  584F      4195          addq.w    #4,A7
00002656  4E75      4196          rts
                    4197   ; void talkphonemeWW (){ say_phoneme(phoneme_WW  ) ; };
                    4198   _talkphonemeWW:
00002658  4878 002E 4199          pea       46
0000265C  4EB8 095A 4200          jsr       _say_phoneme
00002660  584F      4201          addq.w    #4,A7
00002662  4E75      4202          rts
                    4203   ; void talkphonemeXR (){ say_phoneme(phoneme_XR  ) ; };
                    4204   _talkphonemeXR:
00002664  4878 002F 4205          pea       47
00002668  4EB8 095A 4206          jsr       _say_phoneme
0000266C  584F      4207          addq.w    #4,A7
0000266E  4E75      4208          rts
                    4209   ; void talkphonemeYR (){ say_phoneme(phoneme_YR  ) ; };
                    4210   _talkphonemeYR:
00002670  4878 003C 4211          pea       60
00002674  4EB8 095A 4212          jsr       _say_phoneme
00002678  584F      4213          addq.w    #4,A7
0000267A  4E75      4214          rts
                    4215   ; void talkphonemeYY1(){ say_phoneme(phoneme_YY1 ) ; };
                    4216   _talkphonemeYY1:
0000267C  4878 0031 4217          pea       49
00002680  4EB8 095A 4218          jsr       _say_phoneme
00002684  584F      4219          addq.w    #4,A7
00002686  4E75      4220          rts
                    4221   ; void talkphonemeYY2(){ say_phoneme(phoneme_YY2 ) ; };
                    4222   _talkphonemeYY2:
00002688  4878 0019 4223          pea       25
0000268C  4EB8 095A 4224          jsr       _say_phoneme
00002690  584F      4225          addq.w    #4,A7
00002692  4E75      4226          rts
                    4227   ; void talkphonemeZH (){ say_phoneme(phoneme_ZH  ) ; };
                    4228   _talkphonemeZH:
00002694  4878 0026 4229          pea       38
00002698  4EB8 095A 4230          jsr       _say_phoneme
0000269C  584F      4231          addq.w    #4,A7
0000269E  4E75      4232          rts
                    4233   ; void talkphonemeZZ (){ say_phoneme(phoneme_ZZ  ) ; };
                    4234   _talkphonemeZZ:
000026A0  4878 002B 4235          pea       43
000026A4  4EB8 095A 4236          jsr       _say_phoneme
000026A8  584F      4237          addq.w    #4,A7
000026AA  4E75      4238          rts
                    4239   ; void talkphonemePA1(){ say_phoneme(phoneme_PA1 ) ; };
                    4240   _talkphonemePA1:
000026AC  42A7      4241          clr.l     -(A7)
000026AE  4EB8 095A 4242          jsr       _say_phoneme
000026B2  584F      4243          addq.w    #4,A7
000026B4  4E75      4244          rts
                    4245   ; void talkphonemePA2(){ say_phoneme(phoneme_PA2 ) ; };
                    4246   _talkphonemePA2:
000026B6  4878 0001 4247          pea       1
000026BA  4EB8 095A 4248          jsr       _say_phoneme
000026BE  584F      4249          addq.w    #4,A7
000026C0  4E75      4250          rts
                    4251   ; void talkphonemePA3(){ say_phoneme(phoneme_PA3 ) ; };
                    4252   _talkphonemePA3:
000026C2  4878 0002 4253          pea       2
000026C6  4EB8 095A 4254          jsr       _say_phoneme
000026CA  584F      4255          addq.w    #4,A7
000026CC  4E75      4256          rts
                    4257   ; void talkphonemePA4(){ say_phoneme(phoneme_PA4 ) ; };
                    4258   _talkphonemePA4:
000026CE  4878 0003 4259          pea       3
000026D2  4EB8 095A 4260          jsr       _say_phoneme
000026D6  584F      4261          addq.w    #4,A7
000026D8  4E75      4262          rts
                    4263   ; void talkphonemePA5(){ say_phoneme(phoneme_PA5 ) ; };
                    4264   _talkphonemePA5:
000026DA  4878 0004 4265          pea       4
000026DE  4EB8 095A 4266          jsr       _say_phoneme
000026E2  584F      4267          addq.w    #4,A7
000026E4  4E75      4268          rts
                    4269   ; void talkword0() {
                    4270   _talkword0:
                    4271   ; talkphonemeZZ  ()   ;
000026E6  4EB8 26A0 4272          jsr       _talkphonemeZZ
                    4273   ; talkphonemeEH  ()   ;
000026EA  4EB8 2490 4274          jsr       _talkphonemeEH
                    4275   ; talkphonemeRR2 ()   ;
000026EE  4EB8 25D4 4276          jsr       _talkphonemeRR2
                    4277   ; talkphonemeOW  ()   ;
000026F2  4EB8 25A4 4278          jsr       _talkphonemeOW
000026F6  4E75      4279          rts
                    4280   ; }
                    4281   ; void talkword1() {
                    4282   _talkword1:
                    4283   ; talkphonemeWW    ()  ;
000026F8  4EB8 2658 4284          jsr       _talkphonemeWW
                    4285   ; talkphonemeAO    ()  ;
000026FC  4EB8 2400 4286          jsr       _talkphonemeAO
                    4287   ; talkphonemeNN1   ()  ;
00002700  4EB8 2580 4288          jsr       _talkphonemeNN1
00002704  4E75      4289          rts
                    4290   ; }
                    4291   ; void talkword2() {
                    4292   _talkword2:
                    4293   ; talkphonemeTT2();
00002706  4EB8 2610 4294          jsr       _talkphonemeTT2
                    4295   ; talkphonemeUW2();
0000270A  4EB8 2634 4296          jsr       _talkphonemeUW2
0000270E  4E75      4297          rts
                    4298   ; }
                    4299   ; void talkword3() {
                    4300   _talkword3:
                    4301   ; talkphonemeTH ();
00002710  4EB8 25F8 4302          jsr       _talkphonemeTH
                    4303   ; talkphonemeRR2();
00002714  4EB8 25D4 4304          jsr       _talkphonemeRR2
                    4305   ; talkphonemeIY ();
00002718  4EB8 2520 4306          jsr       _talkphonemeIY
0000271C  4E75      4307          rts
                    4308   ; }
                    4309   ; void talkword4() {
                    4310   _talkword4:
                    4311   ; talkphonemeFF  ();
0000271E  4EB8 24CC 4312          jsr       _talkphonemeFF
                    4313   ; talkphonemeOR  ();
00002722  4EB8 2598 4314          jsr       _talkphonemeOR
00002726  4E75      4315          rts
                    4316   ; }
                    4317   ; void talkword5() {
                    4318   _talkword5:
                    4319   ; talkphonemeFF();
00002728  4EB8 24CC 4320          jsr       _talkphonemeFF
                    4321   ; talkphonemeAY();
0000272C  4EB8 2430 4322          jsr       _talkphonemeAY
                    4323   ; talkphonemeVV();
00002730  4EB8 2640 4324          jsr       _talkphonemeVV
00002734  4E75      4325          rts
                    4326   ; }
                    4327   ; void talkword6() {
                    4328   _talkword6:
00002736  2F0A      4329          move.l    A2,-(A7)
00002738  45F8 25EC 4330          lea       _talkphonemeSS.L,A2
                    4331   ; talkphonemeSS  ();
0000273C  4E92      4332          jsr       (A2)
                    4333   ; talkphonemeIH  ();
0000273E  4EB8 2514 4334          jsr       _talkphonemeIH
                    4335   ; talkphonemeKK2 ();
00002742  4EB8 2544 4336          jsr       _talkphonemeKK2
                    4337   ; talkphonemeSS  ();
00002746  4E92      4338          jsr       (A2)
                    4339   ; talkphonemeSS  ();
00002748  4E92      4340          jsr       (A2)
0000274A  245F      4341          move.l    (A7)+,A2
0000274C  4E75      4342          rts
                    4343   ; }
                    4344   ; void talkword7() {
                    4345   _talkword7:
                    4346   ; talkphonemeSS    ();
0000274E  4EB8 25EC 4347          jsr       _talkphonemeSS
                    4348   ; talkphonemeEH    ();
00002752  4EB8 2490 4349          jsr       _talkphonemeEH
                    4350   ; talkphonemeVV    ();
00002756  4EB8 2640 4351          jsr       _talkphonemeVV
                    4352   ; talkphonemeAX    ();
0000275A  4EB8 2424 4353          jsr       _talkphonemeAX
                    4354   ; talkphonemeNN1   ();
0000275E  4EB8 2580 4355          jsr       _talkphonemeNN1
00002762  4E75      4356          rts
                    4357   ; }
                    4358   ; void talkword8() {
                    4359   _talkword8:
                    4360   ; talkphonemeEY  ();
00002764  4EB8 24C0 4361          jsr       _talkphonemeEY
                    4362   ; talkphonemeTT1 ();
00002768  4EB8 2604 4363          jsr       _talkphonemeTT1
0000276C  4E75      4364          rts
                    4365   ; }
                    4366   ; void talkword9() {
                    4367   _talkword9:
                    4368   ; talkphonemeNN2();
0000276E  4EB8 258C 4369          jsr       _talkphonemeNN2
                    4370   ; talkphonemeAY ();
00002772  4EB8 2430 4371          jsr       _talkphonemeAY
                    4372   ; talkphonemeNN1();
00002776  4EB8 2580 4373          jsr       _talkphonemeNN1
0000277A  4E75      4374          rts
                    4375   ; }
                    4376   ; void talkword10() {
                    4377   _talkword10:
                    4378   ; talkphonemeTT2 ();
0000277C  4EB8 2610 4379          jsr       _talkphonemeTT2
                    4380   ; talkphonemeEH  ();
00002780  4EB8 2490 4381          jsr       _talkphonemeEH
                    4382   ; talkphonemeNN1 ();
00002784  4EB8 2580 4383          jsr       _talkphonemeNN1
00002788  4E75      4384          rts
                    4385   ; }
                    4386   ; void talkword11() {
                    4387   _talkword11:
                    4388   ; talkphonemeIH ();
0000278A  4EB8 2514 4389          jsr       _talkphonemeIH
                    4390   ; talkphonemeLL ();
0000278E  4EB8 255C 4391          jsr       _talkphonemeLL
                    4392   ; talkphonemeEH ();
00002792  4EB8 2490 4393          jsr       _talkphonemeEH
                    4394   ; talkphonemeVV ();
00002796  4EB8 2640 4395          jsr       _talkphonemeVV
                    4396   ; talkphonemeEH ();
0000279A  4EB8 2490 4397          jsr       _talkphonemeEH
                    4398   ; talkphonemeNN1();
0000279E  4EB8 2580 4399          jsr       _talkphonemeNN1
000027A2  4E75      4400          rts
                    4401   ; }
                    4402   ; void talkword12() {
                    4403   _talkword12:
                    4404   ; talkphonemeTT2 ();
000027A4  4EB8 2610 4405          jsr       _talkphonemeTT2
                    4406   ; talkphonemeWW  ();
000027A8  4EB8 2658 4407          jsr       _talkphonemeWW
                    4408   ; talkphonemeEH  ();
000027AC  4EB8 2490 4409          jsr       _talkphonemeEH
                    4410   ; talkphonemeEL  ();
000027B0  4EB8 249C 4411          jsr       _talkphonemeEL
                    4412   ; talkphonemeVV  ();
000027B4  4EB8 2640 4413          jsr       _talkphonemeVV
000027B8  4E75      4414          rts
                    4415   ; }
                    4416   ; void talkword13() {
                    4417   _talkword13:
                    4418   ; talkphonemeTH  ();
000027BA  4EB8 25F8 4419          jsr       _talkphonemeTH
                    4420   ; talkphonemeER2 ();
000027BE  4EB8 24B4 4421          jsr       _talkphonemeER2
000027C2  4E75      4422          rts
                    4423   ; }
                    4424   ; void talkwordteen() {
                    4425   _talkwordteen:
                    4426   ; talkphonemeTT2   ();
000027C4  4EB8 2610 4427          jsr       _talkphonemeTT2
                    4428   ; talkphonemeIY    ();
000027C8  4EB8 2520 4429          jsr       _talkphonemeIY
                    4430   ; talkphonemeNN1   ();
000027CC  4EB8 2580 4431          jsr       _talkphonemeNN1
000027D0  4E75      4432          rts
                    4433   ; }
                    4434   ; void talkword14() {
                    4435   _talkword14:
                    4436   ; talkword4();
000027D2  4EB8 271E 4437          jsr       _talkword4
                    4438   ; talkwordteen();
000027D6  4EB8 27C4 4439          jsr       _talkwordteen
000027DA  4E75      4440          rts
                    4441   ; }
                    4442   ; void talkword15() {
                    4443   _talkword15:
                    4444   ; talkphonemeFF ();
000027DC  4EB8 24CC 4445          jsr       _talkphonemeFF
                    4446   ; talkphonemeIH ();
000027E0  4EB8 2514 4447          jsr       _talkphonemeIH
                    4448   ; talkphonemeFF ();
000027E4  4EB8 24CC 4449          jsr       _talkphonemeFF
                    4450   ; talkwordteen  ();
000027E8  4EB8 27C4 4451          jsr       _talkwordteen
000027EC  4E75      4452          rts
                    4453   ; }
                    4454   ; void talkword16() {
                    4455   _talkword16:
                    4456   ; talkword6    ();
000027EE  4EB8 2736 4457          jsr       _talkword6
                    4458   ; talkwordteen ();
000027F2  4EB8 27C4 4459          jsr       _talkwordteen
000027F6  4E75      4460          rts
                    4461   ; }
                    4462   ; void talkword17() {
                    4463   _talkword17:
                    4464   ; talkword7      ();
000027F8  4EB8 274E 4465          jsr       _talkword7
                    4466   ; talkwordteen   ();
000027FC  4EB8 27C4 4467          jsr       _talkwordteen
00002800  4E75      4468          rts
                    4469   ; }
                    4470   ; void talkword18() {
                    4471   _talkword18:
                    4472   ; talkword8    ();
00002802  4EB8 2764 4473          jsr       _talkword8
                    4474   ; talkwordteen ();
00002806  4EB8 27C4 4475          jsr       _talkwordteen
0000280A  4E75      4476          rts
                    4477   ; }
                    4478   ; void talkword19() {
                    4479   _talkword19:
                    4480   ; talkword9     ();
0000280C  4EB8 276E 4481          jsr       _talkword9
                    4482   ; talkwordteen  ();
00002810  4EB8 27C4 4483          jsr       _talkwordteen
00002814  4E75      4484          rts
                    4485   ; }
                    4486   ; void talkword20() {
                    4487   _talkword20:
                    4488   ; talkphonemeTT2 ();
00002816  4EB8 2610 4489          jsr       _talkphonemeTT2
                    4490   ; talkphonemeWW  ();
0000281A  4EB8 2658 4491          jsr       _talkphonemeWW
                    4492   ; talkphonemeEH  ();
0000281E  4EB8 2490 4493          jsr       _talkphonemeEH
                    4494   ; talkphonemeNN1 ();
00002822  4EB8 2580 4495          jsr       _talkphonemeNN1
00002826  4E75      4496          rts
                    4497   ; }
                    4498   ; void talkwordty() {
                    4499   _talkwordty:
                    4500   ; talkphonemeTT2 ();
00002828  4EB8 2610 4501          jsr       _talkphonemeTT2
                    4502   ; talkphonemeIY  ();
0000282C  4EB8 2520 4503          jsr       _talkphonemeIY
00002830  4E75      4504          rts
                    4505   ; }
                    4506   ; void talkword30() {
                    4507   _talkword30:
                    4508   ; talkphonemeTH  ();
00002832  4EB8 25F8 4509          jsr       _talkphonemeTH
                    4510   ; talkphonemeER1 ();
00002836  4EB8 24A8 4511          jsr       _talkphonemeER1
                    4512   ; talkwordty     ();
0000283A  4EB8 2828 4513          jsr       _talkwordty
0000283E  4E75      4514          rts
                    4515   ; }
                    4516   ; void talkword40() {
                    4517   _talkword40:
                    4518   ; talkword4  ();
00002840  4EB8 271E 4519          jsr       _talkword4
                    4520   ; talkwordty ();
00002844  4EB8 2828 4521          jsr       _talkwordty
00002848  4E75      4522          rts
                    4523   ; }
                    4524   ; void talkword50() {
                    4525   _talkword50:
                    4526   ; talkphonemeFF ();
0000284A  4EB8 24CC 4527          jsr       _talkphonemeFF
                    4528   ; talkphonemeIH ();
0000284E  4EB8 2514 4529          jsr       _talkphonemeIH
                    4530   ; talkphonemeFF ();
00002852  4EB8 24CC 4531          jsr       _talkphonemeFF
                    4532   ; talkwordty    ();
00002856  4EB8 2828 4533          jsr       _talkwordty
0000285A  4E75      4534          rts
                    4535   ; }
                    4536   ; void talkword60() {
                    4537   _talkword60:
                    4538   ; talkword6  ();
0000285C  4EB8 2736 4539          jsr       _talkword6
                    4540   ; talkwordty ();
00002860  4EB8 2828 4541          jsr       _talkwordty
00002864  4E75      4542          rts
                    4543   ; }
                    4544   ; void talkword70() {
                    4545   _talkword70:
                    4546   ; talkword7  ();
00002866  4EB8 274E 4547          jsr       _talkword7
                    4548   ; talkwordty ();
0000286A  4EB8 2828 4549          jsr       _talkwordty
0000286E  4E75      4550          rts
                    4551   ; }
                    4552   ; void talkword80() {
                    4553   _talkword80:
                    4554   ; talkword8   ();
00002870  4EB8 2764 4555          jsr       _talkword8
                    4556   ; talkwordty  ();
00002874  4EB8 2828 4557          jsr       _talkwordty
00002878  4E75      4558          rts
                    4559   ; }
                    4560   ; void talkword90() {
                    4561   _talkword90:
                    4562   ; talkword9   ();
0000287A  4EB8 276E 4563          jsr       _talkword9
                    4564   ; talkwordty  ();
0000287E  4EB8 2828 4565          jsr       _talkwordty
00002882  4E75      4566          rts
                    4567   ; }
                    4568   ; void talkwordhundred() {
                    4569   _talkwordhundred:
                    4570   ; talkphonemeHH2  ();
00002884  4EB8 2508 4571          jsr       _talkphonemeHH2
                    4572   ; talkphonemeAX   ();
00002888  4EB8 2424 4573          jsr       _talkphonemeAX
                    4574   ; talkphonemeNN1  ();
0000288C  4EB8 2580 4575          jsr       _talkphonemeNN1
                    4576   ; talkphonemeDD2  ();
00002890  4EB8 246C 4577          jsr       _talkphonemeDD2
                    4578   ; talkphonemeRR2  ();
00002894  4EB8 25D4 4579          jsr       _talkphonemeRR2
                    4580   ; talkphonemeDD1  ();
00002898  4EB8 2460 4581          jsr       _talkphonemeDD1
0000289C  4E75      4582          rts
                    4583   ; }
                    4584   ; void talkworddepth() {
                    4585   _talkworddepth:
                    4586   ; talkphonemeDD2   ();
0000289E  4EB8 246C 4587          jsr       _talkphonemeDD2
                    4588   ; talkphonemeEH    ();
000028A2  4EB8 2490 4589          jsr       _talkphonemeEH
                    4590   ; talkphonemeEH    ();
000028A6  4EB8 2490 4591          jsr       _talkphonemeEH
                    4592   ; talkphonemePP    ();
000028AA  4EB8 25BC 4593          jsr       _talkphonemePP
                    4594   ; talkphonemeTH    ();
000028AE  4EB8 25F8 4595          jsr       _talkphonemeTH
                    4596   ; endword          ();
000028B2  4EB9 0000 4597          jsr       _endword
000028B6  2A8E      
000028B8  4E75      4598          rts
                    4599   ; }
                    4600   ; void talkwordpoint() {
                    4601   _talkwordpoint:
                    4602   ; talkphonemePP   ();
000028BA  4EB8 25BC 4603          jsr       _talkphonemePP
                    4604   ; talkphonemeOY   ();
000028BE  4EB8 25B0 4605          jsr       _talkphonemeOY
                    4606   ; talkphonemeTT1  ();
000028C2  4EB8 2604 4607          jsr       _talkphonemeTT1
                    4608   ; endword         ();
000028C6  4EB9 0000 4609          jsr       _endword
000028CA  2A8E      
000028CC  4E75      4610          rts
                    4611   ; }
                    4612   ; void talkwordanchor() {
                    4613   _talkwordanchor:
                    4614   ; talkphonemeEY   ();
000028CE  4EB8 24C0 4615          jsr       _talkphonemeEY
                    4616   ; talkphonemeKK3  ();
000028D2  4EB8 2550 4617          jsr       _talkphonemeKK3
                    4618   ; talkphonemeAE   ();
000028D6  4EB8 23F4 4619          jsr       _talkphonemeAE
                    4620   ; endword         ();
000028DA  4EB9 0000 4621          jsr       _endword
000028DE  2A8E      
000028E0  4E75      4622          rts
                    4623   ; }
                    4624   ; void talkwordalarm() {
                    4625   _talkwordalarm:
                    4626   ; talkphonemeAE  ();
000028E2  4EB8 23F4 4627          jsr       _talkphonemeAE
                    4628   ; talkphonemeLL  ();
000028E6  4EB8 255C 4629          jsr       _talkphonemeLL
                    4630   ; talkphonemeAR  ();
000028EA  4EB8 240C 4631          jsr       _talkphonemeAR
                    4632   ; talkphonemeMM  ();
000028EE  4EB8 2568 4633          jsr       _talkphonemeMM
                    4634   ; endword        ();
000028F2  4EB9 0000 4635          jsr       _endword
000028F6  2A8E      
000028F8  4E75      4636          rts
                    4637   ; }
                    4638   ; void talkwordon() {
                    4639   _talkwordon:
                    4640   ; talkphonemeAO ();
000028FA  4EB8 2400 4641          jsr       _talkphonemeAO
                    4642   ; talkphonemeNG ();
000028FE  4EB8 2574 4643          jsr       _talkphonemeNG
                    4644   ; endword       ();
00002902  4EB9 0000 4645          jsr       _endword
00002906  2A8E      
00002908  4E75      4646          rts
                    4647   ; }
                    4648   ; void talkwordoff() {
                    4649   _talkwordoff:
                    4650   ; talkphonemeAO  ();
0000290A  4EB8 2400 4651          jsr       _talkphonemeAO
                    4652   ; talkphonemeFF  ();
0000290E  4EB8 24CC 4653          jsr       _talkphonemeFF
                    4654   ; talkphonemeFF  ();
00002912  4EB8 24CC 4655          jsr       _talkphonemeFF
                    4656   ; endword        ();
00002916  4EB9 0000 4657          jsr       _endword
0000291A  2A8E      
0000291C  4E75      4658          rts
                    4659   ; }
                    4660   ; void talkwordshallow() {
                    4661   _talkwordshallow:
                    4662   ; talkphonemeSH ();
0000291E  4EB8 25E0 4663          jsr       _talkphonemeSH
                    4664   ; talkphonemeAE ();
00002922  4EB8 23F4 4665          jsr       _talkphonemeAE
                    4666   ; talkphonemeLL ();
00002926  4EB8 255C 4667          jsr       _talkphonemeLL
                    4668   ; talkphonemeOW ();
0000292A  4EB8 25A4 4669          jsr       _talkphonemeOW
                    4670   ; endword       ();
0000292E  4EB9 0000 4671          jsr       _endword
00002932  2A8E      
00002934  4E75      4672          rts
                    4673   ; }
                    4674   ; void talkwordand() {
                    4675   _talkwordand:
                    4676   ; talkphonemeIH    ();
00002936  4EB8 2514 4677          jsr       _talkphonemeIH
                    4678   ; talkphonemeIH    ();
0000293A  4EB8 2514 4679          jsr       _talkphonemeIH
                    4680   ; talkphonemeNN1   ();
0000293E  4EB8 2580 4681          jsr       _talkphonemeNN1
                    4682   ; talkphonemeDD2   ();
00002942  4EB8 246C 4683          jsr       _talkphonemeDD2
                    4684   ; endword          ();
00002946  4EB9 0000 4685          jsr       _endword
0000294A  2A8E      
0000294C  4E75      4686          rts
                    4687   ; }
                    4688   ; void talkwordwatch() {
                    4689   _talkwordwatch:
                    4690   ; talkphonemeWW  ();
0000294E  4EB8 2658 4691          jsr       _talkphonemeWW
                    4692   ; talkphonemeAO  ();
00002952  4EB8 2400 4693          jsr       _talkphonemeAO
                    4694   ; talkphonemeTT1 ();
00002956  4EB8 2604 4695          jsr       _talkphonemeTT1
                    4696   ; talkphonemeCH  ();
0000295A  4EB8 2454 4697          jsr       _talkphonemeCH
                    4698   ; endword        ();
0000295E  4EB9 0000 4699          jsr       _endword
00002962  2A8E      
00002964  4E75      4700          rts
                    4701   ; }
                    4702   ; void talkwordlimit() {
                    4703   _talkwordlimit:
                    4704   ; talkphonemeLL   ();
00002966  4EB8 255C 4705          jsr       _talkphonemeLL
                    4706   ; talkphonemeIH   ();
0000296A  4EB8 2514 4707          jsr       _talkphonemeIH
                    4708   ; talkphonemeMM   ();
0000296E  4EB8 2568 4709          jsr       _talkphonemeMM
                    4710   ; talkphonemeIH   ();
00002972  4EB8 2514 4711          jsr       _talkphonemeIH
                    4712   ; talkphonemeTT1  ();
00002976  4EB8 2604 4713          jsr       _talkphonemeTT1
                    4714   ; endword         ();
0000297A  4EB9 0000 4715          jsr       _endword
0000297E  2A8E      
00002980  4E75      4716          rts
                    4717   ; }
                    4718   ; void talkwordset()  {
                    4719   _talkwordset:
                    4720   ; talkphonemeSS    ();
00002982  4EB8 25EC 4721          jsr       _talkphonemeSS
                    4722   ; talkphonemeSS    ();
00002986  4EB8 25EC 4723          jsr       _talkphonemeSS
                    4724   ; talkphonemeEH    ();
0000298A  4EB8 2490 4725          jsr       _talkphonemeEH
                    4726   ; talkphonemeTT2   ();
0000298E  4EB8 2610 4727          jsr       _talkphonemeTT2
                    4728   ; endword          ();
00002992  4EB9 0000 4729          jsr       _endword
00002996  2A8E      
00002998  4E75      4730          rts
                    4731   ; }
                    4732   ; void talkwordheading() {
                    4733   _talkwordheading:
                    4734   ; talkphonemeHH1   ();
0000299A  4EB8 24FC 4735          jsr       _talkphonemeHH1
                    4736   ; talkphonemeEH    ();
0000299E  4EB8 2490 4737          jsr       _talkphonemeEH
                    4738   ; talkphonemeDD2   ();
000029A2  4EB8 246C 4739          jsr       _talkphonemeDD2
                    4740   ; talkphonemeIH    ();
000029A6  4EB8 2514 4741          jsr       _talkphonemeIH
                    4742   ; talkphonemeNG    ();
000029AA  4EB8 2574 4743          jsr       _talkphonemeNG
                    4744   ; endword          ();
000029AE  4EB9 0000 4745          jsr       _endword
000029B2  2A8E      
000029B4  4E75      4746          rts
                    4747   ; }
                    4748   ; void talkwordgps() {
                    4749   _talkwordgps:
                    4750   ; talkphonemeJH  ();
000029B6  4EB8 252C 4751          jsr       _talkphonemeJH
                    4752   ; talkphonemeIY  ();
000029BA  4EB8 2520 4753          jsr       _talkphonemeIY
                    4754   ; talkphonemePP  ();
000029BE  4EB8 25BC 4755          jsr       _talkphonemePP
                    4756   ; talkphonemeIY  ();
000029C2  4EB8 2520 4757          jsr       _talkphonemeIY
                    4758   ; talkphonemeEH  ();
000029C6  4EB8 2490 4759          jsr       _talkphonemeEH
                    4760   ; talkphonemeSS  ();
000029CA  4EB8 25EC 4761          jsr       _talkphonemeSS
                    4762   ; talkphonemeSS  ();
000029CE  4EB8 25EC 4763          jsr       _talkphonemeSS
                    4764   ; endword        ();
000029D2  4EB9 0000 4765          jsr       _endword
000029D6  2A8E      
000029D8  4E75      4766          rts
                    4767   ; }
                    4768   ; void talkwordno() {
                    4769   _talkwordno:
                    4770   ; talkphonemeNN2  ();
000029DA  4EB8 258C 4771          jsr       _talkphonemeNN2
                    4772   ; talkphonemeOW   ();
000029DE  4EB8 25A4 4773          jsr       _talkphonemeOW
                    4774   ; endword         ();
000029E2  4EB9 0000 4775          jsr       _endword
000029E6  2A8E      
000029E8  4E75      4776          rts
                    4777   ; }
                    4778   ; void talkworddata() {
                    4779   _talkworddata:
                    4780   ; talkphonemeDD2   ();
000029EA  4EB8 246C 4781          jsr       _talkphonemeDD2
                    4782   ; talkphonemeEY    ();
000029EE  4EB8 24C0 4783          jsr       _talkphonemeEY
                    4784   ; talkphonemeTT2   ();
000029F2  4EB8 2610 4785          jsr       _talkphonemeTT2
                    4786   ; talkphonemeAX    ();
000029F6  4EB8 2424 4787          jsr       _talkphonemeAX
                    4788   ; endword          ();
000029FA  4EB9 0000 4789          jsr       _endword
000029FE  2A8E      
00002A00  4E75      4790          rts
                    4791   ; }
                    4792   ; void talkwordnorth() {
                    4793   _talkwordnorth:
                    4794   ; talkphonemeNN2 ();
00002A02  4EB8 258C 4795          jsr       _talkphonemeNN2
                    4796   ; talkphonemeOR  ();
00002A06  4EB8 2598 4797          jsr       _talkphonemeOR
                    4798   ; talkphonemeHH1 ();
00002A0A  4EB8 24FC 4799          jsr       _talkphonemeHH1
                    4800   ; endword        ();
00002A0E  4EB9 0000 4801          jsr       _endword
00002A12  2A8E      
00002A14  4E75      4802          rts
                    4803   ; }
                    4804   ; void talkwordsouth() {
                    4805   _talkwordsouth:
                    4806   ; talkphonemeSS();
00002A16  4EB8 25EC 4807          jsr       _talkphonemeSS
                    4808   ; talkphonemeSS();
00002A1A  4EB8 25EC 4809          jsr       _talkphonemeSS
                    4810   ; talkphonemeAW();
00002A1E  4EB8 2418 4811          jsr       _talkphonemeAW
                    4812   ; talkphonemeTH();
00002A22  4EB8 25F8 4813          jsr       _talkphonemeTH
                    4814   ; talkphonemeTH();
00002A26  4EB8 25F8 4815          jsr       _talkphonemeTH
00002A2A  4E75      4816          rts
                    4817   ; }
                    4818   ; void talkwordeast() {
                    4819   _talkwordeast:
                    4820   ; talkphonemeIY   ();
00002A2C  4EB8 2520 4821          jsr       _talkphonemeIY
                    4822   ; talkphonemeSS   ();
00002A30  4EB8 25EC 4823          jsr       _talkphonemeSS
                    4824   ; talkphonemeSS   ();
00002A34  4EB8 25EC 4825          jsr       _talkphonemeSS
                    4826   ; talkphonemeTT2  ();
00002A38  4EB8 2610 4827          jsr       _talkphonemeTT2
                    4828   ; endword         ();
00002A3C  4EB9 0000 4829          jsr       _endword
00002A40  2A8E      
00002A42  4E75      4830          rts
                    4831   ; }
                    4832   ; void talkwordwest() {
                    4833   _talkwordwest:
                    4834   ; talkphonemeWW     ();
00002A44  4EB8 2658 4835          jsr       _talkphonemeWW
                    4836   ; talkphonemeEH     ();
00002A48  4EB8 2490 4837          jsr       _talkphonemeEH
                    4838   ; talkphonemeSS     ();
00002A4C  4EB8 25EC 4839          jsr       _talkphonemeSS
                    4840   ; talkphonemeSS     ();
00002A50  4EB8 25EC 4841          jsr       _talkphonemeSS
                    4842   ; talkphonemeTT2    ();
00002A54  4EB8 2610 4843          jsr       _talkphonemeTT2
                    4844   ; endword           ();
00002A58  4EB9 0000 4845          jsr       _endword
00002A5C  2A8E      
00002A5E  4E75      4846          rts
                    4847   ; }
                    4848   ; void talkwordposition() {
                    4849   _talkwordposition:
                    4850   ; talkphonemePP   ();
00002A60  4EB8 25BC 4851          jsr       _talkphonemePP
                    4852   ; talkphonemeIH   ();
00002A64  4EB8 2514 4853          jsr       _talkphonemeIH
                    4854   ; talkphonemeZZ   ();
00002A68  4EB8 26A0 4855          jsr       _talkphonemeZZ
                    4856   ; talkphonemeIH   ();
00002A6C  4EB8 2514 4857          jsr       _talkphonemeIH
                    4858   ; talkphonemeSH   ();
00002A70  4EB8 25E0 4859          jsr       _talkphonemeSH
                    4860   ; talkphonemeNN1  ();
00002A74  4EB8 2580 4861          jsr       _talkphonemeNN1
                    4862   ; endword         ();
00002A78  4EB9 0000 4863          jsr       _endword
00002A7C  2A8E      
00002A7E  4E75      4864          rts
                    4865   ; }
                    4866   ; void talkphonemePA6() {
                    4867   _talkphonemePA6:
                    4868   ; talkphonemePA5();
00002A80  4EB8 26DA 4869          jsr       _talkphonemePA5
                    4870   ; talkphonemePA5();
00002A84  4EB8 26DA 4871          jsr       _talkphonemePA5
                    4872   ; talkphonemePA4();
00002A88  4EB8 26CE 4873          jsr       _talkphonemePA4
00002A8C  4E75      4874          rts
                    4875   ; }
                    4876   ; void endword() {
                    4877   _endword:
                    4878   ; talkphonemePA5();
00002A8E  4EB8 26DA 4879          jsr       _talkphonemePA5
                    4880   ; talkphonemePA4();
00002A92  4EB8 26CE 4881          jsr       _talkphonemePA4
00002A96  4E75      4882          rts
                    4883   ; }
                    4884   ; C:\USERS\10054\ONEDRIVE\CPEN 412 FINAL PROJECT\FINAL_PROJECT_2023_SEM2_STUDENT_TEMPLATE\FINAL_PROJECT_2023_SEM2_STUDENT_TEMPLATE\PROGRAMS\DEBUGMONITORCODE\TETRIS.C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                    4885   ; #include <stdio.h>
                    4886   ; #include <stdlib.h>
                    4887   ; #include <limits.h>
                    4888   ; #include "tetris.h"
                    4889   ; #include "say_phoneme.h"
                    4890   ; #define Timer1Data *(volatile unsigned char *)(0x00400030)
                    4891   ; #define Timer1Control *(volatile unsigned char *)(0x00400032)
                    4892   ; #define Timer1Status *(volatile unsigned char *)(0x00400032)
                    4893   ; #define octlAddress1 *(char *)(0xFF030001)
                    4894   ; #define octlAddress *(char *)(0xFF030000)
                    4895   ; char Table[TETRIS_ROWS][TETRIS_COLS];
                    4896   ; char TableColor[TETRIS_ROWS + 1][TETRIS_COLS];
                    4897   ; char currentColor;
                    4898   ; int tetris_score;
                    4899   ; char GameOn;
                    4900   ; int tetris_timer;
                    4901   ; char octl;
                    4902   ; typedef struct
                    4903   ; {
                    4904   ; char array[MAX_SHAPE_SIZE][MAX_SHAPE_SIZE];
                    4905   ; int width, row, col;
                    4906   ; } Shape;
                    4907   ; Shape current;
                    4908   ; Shape ShapesArray[NUM_SHAPES];
                    4909   ; struct
                    4910   ; {
                    4911   ; int speed;
                    4912   ; int speed_increase;
                    4913   ; } Tetris_Speed;
                    4914   ; int printw_x; // hint: could be a useful variable
                    4915   ; int printw_y; // hint: could be a useful variable
                    4916   ; char cx, cy;
                    4917   ; int timer_count;
                    4918   ; /* Compute x mod y using binary long division. */
                    4919   ; int mod_bld(int x, int y)
                    4920   ; {
                    4921   _mod_bld:
00002A98  4E56 0000 4922          link      A6,#0
00002A9C  48E7 3000 4923          movem.l   D2/D3,-(A7)
                    4924   ; int modulus = x, divisor = y;
00002AA0  262E 0008 4925          move.l    8(A6),D3
00002AA4  242E 000C 4926          move.l    12(A6),D2
                    4927   ; while (divisor <= modulus && divisor <= 16384)
                    4928   mod_bld_1:
00002AA8  B483      4929          cmp.l     D3,D2
00002AAA  6E0C      4930          bgt.s     mod_bld_3
00002AAC  0C82 0000 4931          cmp.l     #16384,D2
00002AB0  4000      
00002AB2  6E04      4932          bgt.s     mod_bld_3
                    4933   ; divisor <<= 1;
00002AB4  E382      4934          asl.l     #1,D2
00002AB6  60F0      4935          bra       mod_bld_1
                    4936   mod_bld_3:
                    4937   ; while (modulus >= y)
                    4938   mod_bld_4:
00002AB8  B6AE 000C 4939          cmp.l     12(A6),D3
00002ABC  6D0C      4940          blt.s     mod_bld_6
                    4941   ; {
                    4942   ; while (divisor > modulus)
                    4943   mod_bld_7:
00002ABE  B483      4944          cmp.l     D3,D2
00002AC0  6F04      4945          ble.s     mod_bld_9
                    4946   ; divisor >>= 1;
00002AC2  E282      4947          asr.l     #1,D2
00002AC4  60F8      4948          bra       mod_bld_7
                    4949   mod_bld_9:
                    4950   ; modulus -= divisor;
00002AC6  9682      4951          sub.l     D2,D3
00002AC8  60EE      4952          bra       mod_bld_4
                    4953   mod_bld_6:
                    4954   ; }
                    4955   ; return modulus;
00002ACA  2003      4956          move.l    D3,D0
00002ACC  4CDF 000C 4957          movem.l   (A7)+,D2/D3
00002AD0  4E5E      4958          unlk      A6
00002AD2  4E75      4959          rts
                    4960   ; }
                    4961   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    4962   ; //
                    4963   ; //
                    4964   ; //                        functions to implement
                    4965   ; //
                    4966   ; //
                    4967   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    4968   ; void Timer_ISR()
                    4969   ; {
                    4970   _Timer_ISR:
                    4971   ; ++timer_count;
00002AD4  52B9 0803 4972          addq.l    #1,_timer_count.L
00002AD8  08B0      
                    4973   ; // printf("Timer ISR, %d\n", timer_count);
                    4974   ; Timer1Control = 3;
00002ADA  13FC 0003 4975          move.b    #3,4194354
00002ADE  0040 0032 
00002AE2  4E75      4976          rts
                    4977   ; }
                    4978   ; // #define StartOfExceptionVectorTable 0x08030000
                    4979   ; // void InstallExceptionHandler(void (*function_ptr)(), int level)
                    4980   ; // {
                    4981   ; //     volatile long int *RamVectorAddress = (volatile long int *)(StartOfExceptionVectorTable); // pointer to the Ram based interrupt vector table created in Cstart in debug monitor
                    4982   ; //     RamVectorAddress[level] = (long int *)(function_ptr); // install the address of our function into the exception table
                    4983   ; // }
                    4984   ; void Wait1ms_here(void)
                    4985   ; {
                    4986   _Wait1ms_here:
00002AE4  2F02      4987          move.l    D2,-(A7)
                    4988   ; int what;
                    4989   ; for (what = 0; what < 1000; what++)
00002AE6  4282      4990          clr.l     D2
                    4991   Wait1ms_here_1:
00002AE8  0C82 0000 4992          cmp.l     #1000,D2
00002AEC  03E8      
00002AEE  6C04      4993          bge.s     Wait1ms_here_3
00002AF0  5282      4994          addq.l    #1,D2
00002AF2  60F4      4995          bra       Wait1ms_here_1
                    4996   Wait1ms_here_3:
00002AF4  241F      4997          move.l    (A7)+,D2
00002AF6  4E75      4998          rts
                    4999   ; ;
                    5000   ; }
                    5001   ; void Wait250ms_here(void)
                    5002   ; {
                    5003   _Wait250ms_here:
00002AF8  2F02      5004          move.l    D2,-(A7)
                    5005   ; int what;
                    5006   ; for (what = 0; what < 250; what++)
00002AFA  4282      5007          clr.l     D2
                    5008   Wait250ms_here_1:
00002AFC  0C82 0000 5009          cmp.l     #250,D2
00002B00  00FA      
00002B02  6C08      5010          bge.s     Wait250ms_here_3
                    5011   ; Wait1ms_here();
00002B04  4EB8 2AE4 5012          jsr       _Wait1ms_here
00002B08  5282      5013          addq.l    #1,D2
00002B0A  60F0      5014          bra       Wait250ms_here_1
                    5015   Wait250ms_here_3:
00002B0C  241F      5016          move.l    (A7)+,D2
00002B0E  4E75      5017          rts
                    5018   ; }
                    5019   ; void changeChar(int addr, char c)
                    5020   ; {
                    5021   _changeChar:
00002B10  4E56 0000 5022          link      A6,#0
                    5023   ; *(char *)(VGA_ADDRESS + addr * 2 + 1) = c;
00002B14  203C FFFF 5024          move.l    #-65536,D0
00002B18  0000      
00002B1A  2F2E 0008 5025          move.l    8(A6),-(A7)
00002B1E  4878 0002 5026          pea       2
00002B22  4EB9 0000 5027          jsr       LMUL
00002B26  3B98      
00002B28  2217      5028          move.l    (A7),D1
00002B2A  504F      5029          addq.w    #8,A7
00002B2C  5281      5030          addq.l    #1,D1
00002B2E  D081      5031          add.l     D1,D0
00002B30  2040      5032          move.l    D0,A0
00002B32  10AE 000F 5033          move.b    15(A6),(A0)
                    5034   ; *(char *)(VGA_ADDRESS + addr * 2) = c;
00002B36  203C FFFF 5035          move.l    #-65536,D0
00002B3A  0000      
00002B3C  2F2E 0008 5036          move.l    8(A6),-(A7)
00002B40  4878 0002 5037          pea       2
00002B44  4EB9 0000 5038          jsr       LMUL
00002B48  3B98      
00002B4A  2217      5039          move.l    (A7),D1
00002B4C  504F      5040          addq.w    #8,A7
00002B4E  D081      5041          add.l     D1,D0
00002B50  2040      5042          move.l    D0,A0
00002B52  10AE 000F 5043          move.b    15(A6),(A0)
00002B56  4E5E      5044          unlk      A6
00002B58  4E75      5045          rts
                    5046   ; }
                    5047   ; void changeColor(int addr, char color)
                    5048   ; {
                    5049   _changeColor:
00002B5A  4E56 0000 5050          link      A6,#0
00002B5E  2F02      5051          move.l    D2,-(A7)
                    5052   ; char change = octl & 0xF8;
00002B60  1039 0803 5053          move.b    _octl.L,D0
00002B64  07BA      
00002B66  4880      5054          ext.w     D0
00002B68  C07C 00F8 5055          and.w     #248,D0
00002B6C  1400      5056          move.b    D0,D2
                    5057   ; change |= color;
00002B6E  102E 000F 5058          move.b    15(A6),D0
00002B72  8400      5059          or.b      D0,D2
                    5060   ; octlAddress = change;
00002B74  13C2 FF03 5061          move.b    D2,-16580608
00002B78  0000      
                    5062   ; octlAddress1 = change;
00002B7A  13C2 FF03 5063          move.b    D2,-16580607
00002B7E  0001      
00002B80  241F      5064          move.l    (A7)+,D2
00002B82  4E5E      5065          unlk      A6
00002B84  4E75      5066          rts
                    5067   ; }
                    5068   ; void writeVGAColor(int addr, char c, char color)
                    5069   ; {
                    5070   _writeVGAColor:
00002B86  4E56 0000 5071          link      A6,#0
                    5072   ; changeColor(addr, color);
00002B8A  122E 0013 5073          move.b    19(A6),D1
00002B8E  4881      5074          ext.w     D1
00002B90  48C1      5075          ext.l     D1
00002B92  2F01      5076          move.l    D1,-(A7)
00002B94  2F2E 0008 5077          move.l    8(A6),-(A7)
00002B98  4EB8 2B5A 5078          jsr       _changeColor
00002B9C  504F      5079          addq.w    #8,A7
                    5080   ; changeChar(addr, c);
00002B9E  122E 000F 5081          move.b    15(A6),D1
00002BA2  4881      5082          ext.w     D1
00002BA4  48C1      5083          ext.l     D1
00002BA6  2F01      5084          move.l    D1,-(A7)
00002BA8  2F2E 0008 5085          move.l    8(A6),-(A7)
00002BAC  4EB8 2B10 5086          jsr       _changeChar
00002BB0  504F      5087          addq.w    #8,A7
00002BB2  4E5E      5088          unlk      A6
00002BB4  4E75      5089          rts
                    5090   ; }
                    5091   ; void writeVGA(int addr, char c)
                    5092   ; {
                    5093   _writeVGA:
00002BB6  4E56 0000 5094          link      A6,#0
                    5095   ; changeColor(addr, octl);
00002BBA  1239 0803 5096          move.b    _octl.L,D1
00002BBE  07BA      
00002BC0  4881      5097          ext.w     D1
00002BC2  48C1      5098          ext.l     D1
00002BC4  2F01      5099          move.l    D1,-(A7)
00002BC6  2F2E 0008 5100          move.l    8(A6),-(A7)
00002BCA  4EB8 2B5A 5101          jsr       _changeColor
00002BCE  504F      5102          addq.w    #8,A7
                    5103   ; changeChar(addr, c);
00002BD0  122E 000F 5104          move.b    15(A6),D1
00002BD4  4881      5105          ext.w     D1
00002BD6  48C1      5106          ext.l     D1
00002BD8  2F01      5107          move.l    D1,-(A7)
00002BDA  2F2E 0008 5108          move.l    8(A6),-(A7)
00002BDE  4EB8 2B10 5109          jsr       _changeChar
00002BE2  504F      5110          addq.w    #8,A7
00002BE4  4E5E      5111          unlk      A6
00002BE6  4E75      5112          rts
                    5113   ; }
                    5114   ; void updateVGAColor(int x, int y, char c, char color)
                    5115   ; {
                    5116   _updateVGAColor:
00002BE8  4E56 0000 5117          link      A6,#0
                    5118   ; writeVGAColor(y * screen_width + x, c, color);
00002BEC  122E 0017 5119          move.b    23(A6),D1
00002BF0  4881      5120          ext.w     D1
00002BF2  48C1      5121          ext.l     D1
00002BF4  2F01      5122          move.l    D1,-(A7)
00002BF6  122E 0013 5123          move.b    19(A6),D1
00002BFA  4881      5124          ext.w     D1
00002BFC  48C1      5125          ext.l     D1
00002BFE  2F01      5126          move.l    D1,-(A7)
00002C00  2F2E 000C 5127          move.l    12(A6),-(A7)
00002C04  4878 0050 5128          pea       80
00002C08  4EB9 0000 5129          jsr       LMUL
00002C0C  3B98      
00002C0E  2217      5130          move.l    (A7),D1
00002C10  504F      5131          addq.w    #8,A7
00002C12  D2AE 0008 5132          add.l     8(A6),D1
00002C16  2F01      5133          move.l    D1,-(A7)
00002C18  4EB8 2B86 5134          jsr       _writeVGAColor
00002C1C  DEFC 000C 5135          add.w     #12,A7
00002C20  4E5E      5136          unlk      A6
00002C22  4E75      5137          rts
                    5138   ; }
                    5139   ; void updateVGA(int x, int y, char c)
                    5140   ; {
                    5141   _updateVGA:
00002C24  4E56 0000 5142          link      A6,#0
                    5143   ; writeVGA(y * screen_width + x, c);
00002C28  122E 0013 5144          move.b    19(A6),D1
00002C2C  4881      5145          ext.w     D1
00002C2E  48C1      5146          ext.l     D1
00002C30  2F01      5147          move.l    D1,-(A7)
00002C32  2F2E 000C 5148          move.l    12(A6),-(A7)
00002C36  4878 0050 5149          pea       80
00002C3A  4EB9 0000 5150          jsr       LMUL
00002C3E  3B98      
00002C40  2217      5151          move.l    (A7),D1
00002C42  504F      5152          addq.w    #8,A7
00002C44  D2AE 0008 5153          add.l     8(A6),D1
00002C48  2F01      5154          move.l    D1,-(A7)
00002C4A  4EB8 2BB6 5155          jsr       _writeVGA
00002C4E  504F      5156          addq.w    #8,A7
00002C50  4E5E      5157          unlk      A6
00002C52  4E75      5158          rts
                    5159   ; }
                    5160   ; void update_cursor(int x, int y)
                    5161   ; {
                    5162   _update_cursor:
00002C54  4E56 0000 5163          link      A6,#0
                    5164   ; cx = x;
00002C58  202E 0008 5165          move.l    8(A6),D0
00002C5C  13C0 0803 5166          move.b    D0,_cx.L
00002C60  08AC      
                    5167   ; cy = y;
00002C62  202E 000C 5168          move.l    12(A6),D0
00002C66  13C0 0803 5169          move.b    D0,_cy.L
00002C6A  08AE      
                    5170   ; cursor_x = cx;
00002C6C  13F9 0803 5171          move.b    _cx.L,-16711680
00002C70  08AC FF01 
00002C74  0000      
                    5172   ; cursor_x1 = cx;
00002C76  13F9 0803 5173          move.b    _cx.L,-16711679
00002C7A  08AC FF01 
00002C7E  0001      
                    5174   ; cursor_y = cy;
00002C80  13F9 0803 5175          move.b    _cy.L,-16711678
00002C84  08AE FF01 
00002C88  0002      
                    5176   ; cursor_y1 = cy;
00002C8A  13F9 0803 5177          move.b    _cy.L,-16711677
00002C8E  08AE FF01 
00002C92  0003      
00002C94  4E5E      5178          unlk      A6
00002C96  4E75      5179          rts
                    5180   ; }
                    5181   ; void go_to_top_corner()
                    5182   ; {
                    5183   _go_to_top_corner:
                    5184   ; update_cursor(0, 0);
00002C98  42A7      5185          clr.l     -(A7)
00002C9A  42A7      5186          clr.l     -(A7)
00002C9C  4EB8 2C54 5187          jsr       _update_cursor
00002CA0  504F      5188          addq.w    #8,A7
00002CA2  4E75      5189          rts
                    5190   ; };
                    5191   ; void clear_screen()
                    5192   ; {
                    5193   _clear_screen:
00002CA4  2F02      5194          move.l    D2,-(A7)
                    5195   ; int i;
                    5196   ; for (i = 0; i <= 3200; i++)
00002CA6  4282      5197          clr.l     D2
                    5198   clear_screen_1:
00002CA8  0C82 0000 5199          cmp.l     #3200,D2
00002CAC  0C80      
00002CAE  6E10      5200          bgt.s     clear_screen_3
                    5201   ; {
                    5202   ; changeChar(i, ' ');
00002CB0  4878 0020 5203          pea       32
00002CB4  2F02      5204          move.l    D2,-(A7)
00002CB6  4EB8 2B10 5205          jsr       _changeChar
00002CBA  504F      5206          addq.w    #8,A7
00002CBC  5282      5207          addq.l    #1,D2
00002CBE  60E8      5208          bra       clear_screen_1
                    5209   clear_screen_3:
00002CC0  241F      5210          move.l    (A7)+,D2
00002CC2  4E75      5211          rts
                    5212   ; }
                    5213   ; };
                    5214   ; void say_game_over()
                    5215   ; {
                    5216   _say_game_over:
                    5217   ; talkphonemeGG2();
00002CC4  4EB8 24E4 5218          jsr       _talkphonemeGG2
                    5219   ; talkphonemeEY();
00002CC8  4EB8 24C0 5220          jsr       _talkphonemeEY
                    5221   ; talkphonemeMM();
00002CCC  4EB8 2568 5222          jsr       _talkphonemeMM
                    5223   ; endword();
00002CD0  4EB8 2A8E 5224          jsr       _endword
                    5225   ; talkphonemeOW();
00002CD4  4EB8 25A4 5226          jsr       _talkphonemeOW
                    5227   ; talkphonemeVV();
00002CD8  4EB8 2640 5228          jsr       _talkphonemeVV
                    5229   ; talkphonemeER2();
00002CDC  4EB8 24B4 5230          jsr       _talkphonemeER2
                    5231   ; endword();
00002CE0  4EB8 2A8E 5232          jsr       _endword
00002CE4  4E75      5233          rts
                    5234   ; }
                    5235   ; void say_awesome()
                    5236   ; {
                    5237   _say_awesome:
                    5238   ; talkphonemeAA();
00002CE6  4EB8 23E8 5239          jsr       _talkphonemeAA
                    5240   ; talkphonemeSS();
00002CEA  4EB8 25EC 5241          jsr       _talkphonemeSS
                    5242   ; talkphonemeAO();
00002CEE  4EB8 2400 5243          jsr       _talkphonemeAO
                    5244   ; talkphonemeMM();
00002CF2  4EB8 2568 5245          jsr       _talkphonemeMM
                    5246   ; endword();
00002CF6  4EB8 2A8E 5247          jsr       _endword
00002CFA  4E75      5248          rts
                    5249   ; }
                    5250   ; void say_cool()
                    5251   ; {
                    5252   _say_cool:
                    5253   ; talkphonemeKK2();
00002CFC  4EB8 2544 5254          jsr       _talkphonemeKK2
                    5255   ; talkphonemeUW2();
00002D00  4EB8 2634 5256          jsr       _talkphonemeUW2
                    5257   ; talkphonemeEL();
00002D04  4EB8 249C 5258          jsr       _talkphonemeEL
                    5259   ; endword();
00002D08  4EB8 2A8E 5260          jsr       _endword
00002D0C  4E75      5261          rts
                    5262   ; }
                    5263   ; void say_yeah()
                    5264   ; {
                    5265   _say_yeah:
                    5266   ; talkphonemeYY1();
00002D0E  4EB8 267C 5267          jsr       _talkphonemeYY1
                    5268   ; talkphonemeEH();
00002D12  4EB8 2490 5269          jsr       _talkphonemeEH
                    5270   ; talkphonemeEH();
00002D16  4EB8 2490 5271          jsr       _talkphonemeEH
                    5272   ; endword();
00002D1A  4EB8 2A8E 5273          jsr       _endword
00002D1E  4E75      5274          rts
                    5275   ; }
                    5276   ; void putcharxyColor(int x, int y, char ch, char color, char *error_message)
                    5277   ; {
                    5278   _putcharxyColor:
00002D20  4E56 0000 5279          link      A6,#0
00002D24  48E7 3000 5280          movem.l   D2/D3,-(A7)
00002D28  242E 000C 5281          move.l    12(A6),D2
00002D2C  262E 0008 5282          move.l    8(A6),D3
                    5283   ; if (x < 0 || x >= screen_width || y < 0 || y >= screen_height)
00002D30  0C83 0000 5284          cmp.l     #0,D3
00002D34  0000      
00002D36  6D18      5285          blt.s     putcharxyColor_3
00002D38  0C83 0000 5286          cmp.l     #80,D3
00002D3C  0050      
00002D3E  6C10      5287          bge.s     putcharxyColor_3
00002D40  0C82 0000 5288          cmp.l     #0,D2
00002D44  0000      
00002D46  6D08      5289          blt.s     putcharxyColor_3
00002D48  0C82 0000 5290          cmp.l     #40,D2
00002D4C  0028      
00002D4E  6D14      5291          blt.s     putcharxyColor_1
                    5292   putcharxyColor_3:
                    5293   ; {
                    5294   ; printf("%s\n", error_message);
00002D50  2F2E 0018 5295          move.l    24(A6),-(A7)
00002D54  4879 0000 5296          pea       @tetris_1.L
00002D58  515A      
00002D5A  4EB9 0000 5297          jsr       _printf
00002D5E  3CF8      
00002D60  504F      5298          addq.w    #8,A7
00002D62  6020      5299          bra.s     putcharxyColor_2
                    5300   putcharxyColor_1:
                    5301   ; // printf("x: %d, y: %d\n", x, y);
                    5302   ; }
                    5303   ; else
                    5304   ; {
                    5305   ; updateVGAColor(x, y, ch, color);
00002D64  122E 0017 5306          move.b    23(A6),D1
00002D68  4881      5307          ext.w     D1
00002D6A  48C1      5308          ext.l     D1
00002D6C  2F01      5309          move.l    D1,-(A7)
00002D6E  122E 0013 5310          move.b    19(A6),D1
00002D72  4881      5311          ext.w     D1
00002D74  48C1      5312          ext.l     D1
00002D76  2F01      5313          move.l    D1,-(A7)
00002D78  2F02      5314          move.l    D2,-(A7)
00002D7A  2F03      5315          move.l    D3,-(A7)
00002D7C  4EB8 2BE8 5316          jsr       _updateVGAColor
00002D80  DEFC 0010 5317          add.w     #16,A7
                    5318   putcharxyColor_2:
00002D84  4CDF 000C 5319          movem.l   (A7)+,D2/D3
00002D88  4E5E      5320          unlk      A6
00002D8A  4E75      5321          rts
                    5322   ; }
                    5323   ; }
                    5324   ; // default color
                    5325   ; void putcharxy(int x, int y, char ch, char *error_message)
                    5326   ; {
                    5327   _putcharxy:
00002D8C  4E56 0000 5328          link      A6,#0
00002D90  48E7 3000 5329          movem.l   D2/D3,-(A7)
00002D94  242E 000C 5330          move.l    12(A6),D2
00002D98  262E 0008 5331          move.l    8(A6),D3
                    5332   ; if (x < 0 || x >= screen_width || y < 0 || y >= screen_height)
00002D9C  0C83 0000 5333          cmp.l     #0,D3
00002DA0  0000      
00002DA2  6D18      5334          blt.s     putcharxy_3
00002DA4  0C83 0000 5335          cmp.l     #80,D3
00002DA8  0050      
00002DAA  6C10      5336          bge.s     putcharxy_3
00002DAC  0C82 0000 5337          cmp.l     #0,D2
00002DB0  0000      
00002DB2  6D08      5338          blt.s     putcharxy_3
00002DB4  0C82 0000 5339          cmp.l     #40,D2
00002DB8  0028      
00002DBA  6D14      5340          blt.s     putcharxy_1
                    5341   putcharxy_3:
                    5342   ; {
                    5343   ; printf("%s\n", error_message);
00002DBC  2F2E 0014 5344          move.l    20(A6),-(A7)
00002DC0  4879 0000 5345          pea       @tetris_1.L
00002DC4  515A      
00002DC6  4EB9 0000 5346          jsr       _printf
00002DCA  3CF8      
00002DCC  504F      5347          addq.w    #8,A7
00002DCE  6016      5348          bra.s     putcharxy_2
                    5349   putcharxy_1:
                    5350   ; // printf("x: %d, y: %d\n", x, y);
                    5351   ; }
                    5352   ; else
                    5353   ; {
                    5354   ; updateVGA(x, y, ch);
00002DD0  122E 0013 5355          move.b    19(A6),D1
00002DD4  4881      5356          ext.w     D1
00002DD6  48C1      5357          ext.l     D1
00002DD8  2F01      5358          move.l    D1,-(A7)
00002DDA  2F02      5359          move.l    D2,-(A7)
00002DDC  2F03      5360          move.l    D3,-(A7)
00002DDE  4EB8 2C24 5361          jsr       _updateVGA
00002DE2  DEFC 000C 5362          add.w     #12,A7
                    5363   putcharxy_2:
00002DE6  4CDF 000C 5364          movem.l   (A7)+,D2/D3
00002DEA  4E5E      5365          unlk      A6
00002DEC  4E75      5366          rts
                    5367   ; }
                    5368   ; }
                    5369   ; void gotoxy(int x, int y)
                    5370   ; {
                    5371   _gotoxy:
00002DEE  4E56 0000 5372          link      A6,#0
                    5373   ; update_cursor(x, y);
00002DF2  2F2E 000C 5374          move.l    12(A6),-(A7)
00002DF6  2F2E 0008 5375          move.l    8(A6),-(A7)
00002DFA  4EB8 2C54 5376          jsr       _update_cursor
00002DFE  504F      5377          addq.w    #8,A7
00002E00  4E5E      5378          unlk      A6
00002E02  4E75      5379          rts
                    5380   ; };
                    5381   ; void set_vga_control_reg(char x)
                    5382   ; {
                    5383   _set_vga_control_reg:
00002E04  4E56 0000 5384          link      A6,#0
                    5385   ; // Set the value of the control register in the VGA core
                    5386   ; // write this function
                    5387   ; octl = (x & 0xF8) | (octl & 0x7);
00002E08  102E 000B 5388          move.b    11(A6),D0
00002E0C  4880      5389          ext.w     D0
00002E0E  C07C 00F8 5390          and.w     #248,D0
00002E12  1239 0803 5391          move.b    _octl.L,D1
00002E16  07BA      
00002E18  C23C 0007 5392          and.b     #7,D1
00002E1C  4881      5393          ext.w     D1
00002E1E  8041      5394          or.w      D1,D0
00002E20  13C0 0803 5395          move.b    D0,_octl.L
00002E24  07BA      
00002E26  4E5E      5396          unlk      A6
00002E28  4E75      5397          rts
                    5398   ; }
                    5399   ; char get_vga_control_reg()
                    5400   ; {
                    5401   _get_vga_control_reg:
                    5402   ; // Get the value of the control register in the VGA core
                    5403   ; // write this function
                    5404   ; return octl;
00002E2A  1039 0803 5405          move.b    _octl.L,D0
00002E2E  07BA      
00002E30  4E75      5406          rts
                    5407   ; }
                    5408   ; void set_color(int color)
                    5409   ; {
                    5410   _set_color:
00002E32  4E56 0000 5411          link      A6,#0
                    5412   ; octl &= 0xF8;		   // 8'b1111_1000
00002E36  0239 00F8 5413          and.b     #248,_octl.L
00002E3A  0803 07BA 
                    5414   ; octl |= (color & 0x7); // 8'b0000_0111
00002E3E  202E 0008 5415          move.l    8(A6),D0
00002E42  C0BC 0000 5416          and.l     #7,D0
00002E46  0007      
00002E48  8139 0803 5417          or.b      D0,_octl.L
00002E4C  07BA      
00002E4E  4E5E      5418          unlk      A6
00002E50  4E75      5419          rts
                    5420   ; }
                    5421   ; int clock()
                    5422   ; {
                    5423   _clock:
                    5424   ; // Returns time in milliseconds since the timer was initialized
                    5425   ; // write this function
                    5426   ; return timer_count * 100;
00002E52  2F39 0803 5427          move.l    _timer_count.L,-(A7)
00002E56  08B0      
00002E58  4878 0064 5428          pea       100
00002E5C  4EB9 0000 5429          jsr       LMUL
00002E60  3B98      
00002E62  2017      5430          move.l    (A7),D0
00002E64  504F      5431          addq.w    #8,A7
00002E66  4E75      5432          rts
                    5433   ; }
                    5434   ; void printwColor(const char *str, char color, char *error_message)
                    5435   ; {
                    5436   _printwColor:
00002E68  4E56 0000 5437          link      A6,#0
00002E6C  48E7 3020 5438          movem.l   D2/D3/A2,-(A7)
00002E70  45F9 0803 5439          lea       _printw_x.L,A2
00002E74  08A4      
00002E76  262E 0008 5440          move.l    8(A6),D3
                    5441   ; int index = 0;
00002E7A  4282      5442          clr.l     D2
                    5443   ; while (str[index] != '\0')
                    5444   printwColor_1:
00002E7C  2043      5445          move.l    D3,A0
00002E7E  1030 2800 5446          move.b    0(A0,D2.L),D0
00002E82  6700 0048 5447          beq       printwColor_3
                    5448   ; {
                    5449   ; if (str[index] == '\n')
00002E86  2043      5450          move.l    D3,A0
00002E88  1030 2800 5451          move.b    0(A0,D2.L),D0
00002E8C  0C00 000A 5452          cmp.b     #10,D0
00002E90  660A      5453          bne.s     printwColor_4
                    5454   ; {
                    5455   ; printw_x = 0;
00002E92  4292      5456          clr.l     (A2)
                    5457   ; printw_y++;
00002E94  52B9 0803 5458          addq.l    #1,_printw_y.L
00002E98  08A8      
00002E9A  602C      5459          bra.s     printwColor_5
                    5460   printwColor_4:
                    5461   ; // printf("newline\n");
                    5462   ; }
                    5463   ; else
                    5464   ; {
                    5465   ; putcharxyColor(printw_x, printw_y, str[index], color, error_message);
00002E9C  2F2E 0010 5466          move.l    16(A6),-(A7)
00002EA0  122E 000F 5467          move.b    15(A6),D1
00002EA4  4881      5468          ext.w     D1
00002EA6  48C1      5469          ext.l     D1
00002EA8  2F01      5470          move.l    D1,-(A7)
00002EAA  2043      5471          move.l    D3,A0
00002EAC  1230 2800 5472          move.b    0(A0,D2.L),D1
00002EB0  4881      5473          ext.w     D1
00002EB2  48C1      5474          ext.l     D1
00002EB4  2F01      5475          move.l    D1,-(A7)
00002EB6  2F39 0803 5476          move.l    _printw_y.L,-(A7)
00002EBA  08A8      
00002EBC  2F12      5477          move.l    (A2),-(A7)
00002EBE  4EB8 2D20 5478          jsr       _putcharxyColor
00002EC2  DEFC 0014 5479          add.w     #20,A7
                    5480   ; printw_x++;
00002EC6  5292      5481          addq.l    #1,(A2)
                    5482   printwColor_5:
                    5483   ; }
                    5484   ; index++;
00002EC8  5282      5485          addq.l    #1,D2
00002ECA  60B0      5486          bra       printwColor_1
                    5487   printwColor_3:
00002ECC  4CDF 040C 5488          movem.l   (A7)+,D2/D3/A2
00002ED0  4E5E      5489          unlk      A6
00002ED2  4E75      5490          rts
                    5491   ; }
                    5492   ; }
                    5493   ; // default color
                    5494   ; void printw(const char *str, char *error_message)
                    5495   ; {
                    5496   _printw:
00002ED4  4E56 0000 5497          link      A6,#0
00002ED8  48E7 3020 5498          movem.l   D2/D3/A2,-(A7)
00002EDC  45F9 0803 5499          lea       _printw_x.L,A2
00002EE0  08A4      
00002EE2  262E 0008 5500          move.l    8(A6),D3
                    5501   ; int index = 0;
00002EE6  4282      5502          clr.l     D2
                    5503   ; while (str[index] != '\0')
                    5504   printw_1:
00002EE8  2043      5505          move.l    D3,A0
00002EEA  1030 2800 5506          move.b    0(A0,D2.L),D0
00002EEE  6700 003E 5507          beq       printw_3
                    5508   ; {
                    5509   ; if (str[index] == '\n')
00002EF2  2043      5510          move.l    D3,A0
00002EF4  1030 2800 5511          move.b    0(A0,D2.L),D0
00002EF8  0C00 000A 5512          cmp.b     #10,D0
00002EFC  660A      5513          bne.s     printw_4
                    5514   ; {
                    5515   ; printw_x = 0;
00002EFE  4292      5516          clr.l     (A2)
                    5517   ; printw_y++;
00002F00  52B9 0803 5518          addq.l    #1,_printw_y.L
00002F04  08A8      
00002F06  6022      5519          bra.s     printw_5
                    5520   printw_4:
                    5521   ; // printf("newline\n");
                    5522   ; }
                    5523   ; else
                    5524   ; {
                    5525   ; putcharxy(printw_x, printw_y, str[index], error_message);
00002F08  2F2E 000C 5526          move.l    12(A6),-(A7)
00002F0C  2043      5527          move.l    D3,A0
00002F0E  1230 2800 5528          move.b    0(A0,D2.L),D1
00002F12  4881      5529          ext.w     D1
00002F14  48C1      5530          ext.l     D1
00002F16  2F01      5531          move.l    D1,-(A7)
00002F18  2F39 0803 5532          move.l    _printw_y.L,-(A7)
00002F1C  08A8      
00002F1E  2F12      5533          move.l    (A2),-(A7)
00002F20  4EB8 2D8C 5534          jsr       _putcharxy
00002F24  DEFC 0010 5535          add.w     #16,A7
                    5536   ; printw_x++;
00002F28  5292      5537          addq.l    #1,(A2)
                    5538   printw_5:
                    5539   ; }
                    5540   ; index++;
00002F2A  5282      5541          addq.l    #1,D2
00002F2C  60BA      5542          bra       printw_1
                    5543   printw_3:
00002F2E  4CDF 040C 5544          movem.l   (A7)+,D2/D3/A2
00002F32  4E5E      5545          unlk      A6
00002F34  4E75      5546          rts
                    5547   ; }
                    5548   ; }
                    5549   ; void display_game_over(char *str, int x, int y)
                    5550   ; {
                    5551   _display_game_over:
00002F36  4E56 0000 5552          link      A6,#0
00002F3A  48E7 3C00 5553          movem.l   D2/D3/D4/D5,-(A7)
00002F3E  242E 000C 5554          move.l    12(A6),D2
00002F42  262E 0010 5555          move.l    16(A6),D3
00002F46  2A2E 0008 5556          move.l    8(A6),D5
                    5557   ; int num;
                    5558   ; num = 0;
00002F4A  4284      5559          clr.l     D4
                    5560   ; while (str[num] != '\0')
                    5561   display_game_over_1:
00002F4C  2045      5562          move.l    D5,A0
00002F4E  1030 4800 5563          move.b    0(A0,D4.L),D0
00002F52  6700 0056 5564          beq       display_game_over_3
                    5565   ; {
                    5566   ; Wait250ms_here();
00002F56  4EB8 2AF8 5567          jsr       _Wait250ms_here
                    5568   ; update_cursor(x + 1, y);
00002F5A  2F03      5569          move.l    D3,-(A7)
00002F5C  2202      5570          move.l    D2,D1
00002F5E  5281      5571          addq.l    #1,D1
00002F60  2F01      5572          move.l    D1,-(A7)
00002F62  4EB8 2C54 5573          jsr       _update_cursor
00002F66  504F      5574          addq.w    #8,A7
                    5575   ; putcharxy(x + 1, y, ' ', "game over");
00002F68  4879 0000 5576          pea       @tetris_2.L
00002F6C  515E      
00002F6E  4878 0020 5577          pea       32
00002F72  2F03      5578          move.l    D3,-(A7)
00002F74  2202      5579          move.l    D2,D1
00002F76  5281      5580          addq.l    #1,D1
00002F78  2F01      5581          move.l    D1,-(A7)
00002F7A  4EB8 2D8C 5582          jsr       _putcharxy
00002F7E  DEFC 0010 5583          add.w     #16,A7
                    5584   ; // printf("cx: %d, cy: %d\n", cx, cy);
                    5585   ; Wait1ms_here();
00002F82  4EB8 2AE4 5586          jsr       _Wait1ms_here
                    5587   ; putcharxy(x, y, str[num], "game over");
00002F86  4879 0000 5588          pea       @tetris_2.L
00002F8A  515E      
00002F8C  2045      5589          move.l    D5,A0
00002F8E  1230 4800 5590          move.b    0(A0,D4.L),D1
00002F92  4881      5591          ext.w     D1
00002F94  48C1      5592          ext.l     D1
00002F96  2F01      5593          move.l    D1,-(A7)
00002F98  2F03      5594          move.l    D3,-(A7)
00002F9A  2F02      5595          move.l    D2,-(A7)
00002F9C  4EB8 2D8C 5596          jsr       _putcharxy
00002FA0  DEFC 0010 5597          add.w     #16,A7
                    5598   ; x++;
00002FA4  5282      5599          addq.l    #1,D2
                    5600   ; num++;
00002FA6  5284      5601          addq.l    #1,D4
00002FA8  60A2      5602          bra       display_game_over_1
                    5603   display_game_over_3:
                    5604   ; }
                    5605   ; if (str[0] == 'S')
00002FAA  2045      5606          move.l    D5,A0
00002FAC  1010      5607          move.b    (A0),D0
00002FAE  0C00 0053 5608          cmp.b     #83,D0
00002FB2  660E      5609          bne.s     display_game_over_4
                    5610   ; update_cursor(x - 1, y);
00002FB4  2F03      5611          move.l    D3,-(A7)
00002FB6  2202      5612          move.l    D2,D1
00002FB8  5381      5613          subq.l    #1,D1
00002FBA  2F01      5614          move.l    D1,-(A7)
00002FBC  4EB8 2C54 5615          jsr       _update_cursor
00002FC0  504F      5616          addq.w    #8,A7
                    5617   display_game_over_4:
00002FC2  4CDF 003C 5618          movem.l   (A7)+,D2/D3/D4/D5
00002FC6  4E5E      5619          unlk      A6
00002FC8  4E75      5620          rts
                    5621   ; }
                    5622   ; void gameOver()
                    5623   ; {
                    5624   _gameOver:
00002FCA  4E56 FF7C 5625          link      A6,#-132
00002FCE  48E7 3038 5626          movem.l   D2/D3/A2/A3/A4,-(A7)
00002FD2  45F9 0803 5627          lea       _printw_y.L,A2
00002FD6  08A8      
00002FD8  47F9 0803 5628          lea       _printw_x.L,A3
00002FDC  08A4      
00002FDE  49EE FF80 5629          lea       -128(A6),A4
                    5630   ; // 36, 20: Game over!
                    5631   ; int test = 5000;
00002FE2  2D7C 0000 5632          move.l    #5000,-132(A6)
00002FE6  1388 FF7C 
                    5633   ; char *game_over = " Game over! ";
00002FEA  41F9 0000 5634          lea       @tetris_3.L,A0
00002FEE  5168      
00002FF0  2608      5635          move.l    A0,D3
                    5636   ; char score_str[128];
                    5637   ; char num;
                    5638   ; say_game_over();
00002FF2  4EB8 2CC4 5639          jsr       _say_game_over
                    5640   ; clear_screen();
00002FF6  4EB8 2CA4 5641          jsr       _clear_screen
                    5642   ; num = 1;
00002FFA  7401      5643          moveq     #1,D2
                    5644   ; sprintf(score_str, " Score: %d ", tetris_score);
00002FFC  2F39 0803 5645          move.l    _tetris_score.L,-(A7)
00003000  07B0      
00003002  4879 0000 5646          pea       @tetris_4.L
00003006  5176      
00003008  2F0C      5647          move.l    A4,-(A7)
0000300A  4EB9 0000 5648          jsr       _sprintf
0000300E  3C82      
00003010  DEFC 000C 5649          add.w     #12,A7
                    5650   ; // 36, 22: Score: %d
                    5651   ; set_vga_control_reg(0xE0);
00003014  4878 00E0 5652          pea       224
00003018  4EB8 2E04 5653          jsr       _set_vga_control_reg
0000301C  584F      5654          addq.w    #4,A7
                    5655   ; printw_x = 34;
0000301E  26BC 0000 5656          move.l    #34,(A3)
00003022  0022      
                    5657   ; printw_y = 20;
00003024  24BC 0000 5658          move.l    #20,(A2)
00003028  0014      
                    5659   ; display_game_over(game_over, printw_x, printw_y);
0000302A  2F12      5660          move.l    (A2),-(A7)
0000302C  2F13      5661          move.l    (A3),-(A7)
0000302E  2F03      5662          move.l    D3,-(A7)
00003030  4EB8 2F36 5663          jsr       _display_game_over
00003034  DEFC 000C 5664          add.w     #12,A7
                    5665   ; printw_x = 34;
00003038  26BC 0000 5666          move.l    #34,(A3)
0000303C  0022      
                    5667   ; printw_y = 22;
0000303E  24BC 0000 5668          move.l    #22,(A2)
00003042  0016      
                    5669   ; display_game_over(score_str, printw_x, printw_y);
00003044  2F12      5670          move.l    (A2),-(A7)
00003046  2F13      5671          move.l    (A3),-(A7)
00003048  2F0C      5672          move.l    A4,-(A7)
0000304A  4EB8 2F36 5673          jsr       _display_game_over
0000304E  DEFC 000C 5674          add.w     #12,A7
                    5675   ; FlushKeyboard() ; 
00003052  4EB8 0A64 5676          jsr       _FlushKeyboard
                    5677   ; printf("Press any key to continue\n");
00003056  4879 0000 5678          pea       @tetris_5.L
0000305A  5182      
0000305C  4EB9 0000 5679          jsr       _printf
00003060  3CF8      
00003062  584F      5680          addq.w    #4,A7
                    5681   ; while (1)
                    5682   gameOver_1:
                    5683   ; {
                    5684   ; printw_x = 34;
00003064  26BC 0000 5685          move.l    #34,(A3)
00003068  0022      
                    5686   ; printw_y = 20;
0000306A  24BC 0000 5687          move.l    #20,(A2)
0000306E  0014      
                    5688   ; set_color(num);
00003070  4882      5689          ext.w     D2
00003072  48C2      5690          ext.l     D2
00003074  2F02      5691          move.l    D2,-(A7)
00003076  4EB8 2E32 5692          jsr       _set_color
0000307A  584F      5693          addq.w    #4,A7
                    5694   ; printw(game_over, "game over");
0000307C  4879 0000 5695          pea       @tetris_2.L
00003080  515E      
00003082  2F03      5696          move.l    D3,-(A7)
00003084  4EB8 2ED4 5697          jsr       _printw
00003088  504F      5698          addq.w    #8,A7
                    5699   ; printw_x = 34;
0000308A  26BC 0000 5700          move.l    #34,(A3)
0000308E  0022      
                    5701   ; printw_y = 22;
00003090  24BC 0000 5702          move.l    #22,(A2)
00003094  0016      
                    5703   ; printw(score_str, "score");
00003096  4879 0000 5704          pea       @tetris_6.L
0000309A  519E      
0000309C  2F0C      5705          move.l    A4,-(A7)
0000309E  4EB8 2ED4 5706          jsr       _printw
000030A2  504F      5707          addq.w    #8,A7
                    5708   ; if (kbhit())
000030A4  4EB8 09E2 5709          jsr       _kbhit
000030A8  4A80      5710          tst.l     D0
000030AA  6702      5711          beq.s     gameOver_4
                    5712   ; {
                    5713   ; break;
000030AC  6010      5714          bra.s     gameOver_3
                    5715   gameOver_4:
                    5716   ; }
                    5717   ; Wait250ms_here();
000030AE  4EB8 2AF8 5718          jsr       _Wait250ms_here
                    5719   ; ++num;
000030B2  5202      5720          addq.b    #1,D2
                    5721   ; if (num > 7)
000030B4  0C02 0007 5722          cmp.b     #7,D2
000030B8  6F02      5723          ble.s     gameOver_6
                    5724   ; {
                    5725   ; num = 1;
000030BA  7401      5726          moveq     #1,D2
                    5727   gameOver_6:
000030BC  60A6      5728          bra       gameOver_1
                    5729   gameOver_3:
                    5730   ; }
                    5731   ; }
                    5732   ; set_vga_control_reg(0xA2);
000030BE  4878 00A2 5733          pea       162
000030C2  4EB8 2E04 5734          jsr       _set_vga_control_reg
000030C6  584F      5735          addq.w    #4,A7
000030C8  4CDF 1C0C 5736          movem.l   (A7)+,D2/D3/A2/A3/A4
000030CC  4E5E      5737          unlk      A6
000030CE  4E75      5738          rts
                    5739   ; }
                    5740   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    5741   ; //
                    5742   ; //
                    5743   ; //                      end  functions to implement
                    5744   ; //
                    5745   ; //
                    5746   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    5747   ; void delay_ms(int num_ms)
                    5748   ; {
                    5749   _delay_ms:
000030D0  4E56 0000 5750          link      A6,#0
000030D4  48E7 3000 5751          movem.l   D2/D3,-(A7)
                    5752   ; int start_time;
                    5753   ; int current_time;
                    5754   ; start_time = clock();
000030D8  4EB8 2E52 5755          jsr       _clock
000030DC  2400      5756          move.l    D0,D2
                    5757   ; do
                    5758   ; {
                    5759   delay_ms_1:
                    5760   ; current_time = clock();
000030DE  4EB8 2E52 5761          jsr       _clock
000030E2  2600      5762          move.l    D0,D3
                    5763   ; if (current_time < start_time)
000030E4  B682      5764          cmp.l     D2,D3
000030E6  6C0E      5765          bge.s     delay_ms_3
                    5766   ; { // handle wraparound
                    5767   ; num_ms = num_ms - (INT_MAX - start_time);
000030E8  203C 7FFF 5768          move.l    #2147483647,D0
000030EC  FFFF      
000030EE  9082      5769          sub.l     D2,D0
000030F0  91AE 0008 5770          sub.l     D0,8(A6)
                    5771   ; start_time = current_time;
000030F4  2403      5772          move.l    D3,D2
                    5773   delay_ms_3:
000030F6  2003      5774          move.l    D3,D0
000030F8  9082      5775          sub.l     D2,D0
000030FA  B0AE 0008 5776          cmp.l     8(A6),D0
000030FE  6DDE      5777          blt       delay_ms_1
00003100  4CDF 000C 5778          movem.l   (A7)+,D2/D3
00003104  4E5E      5779          unlk      A6
00003106  4E75      5780          rts
                    5781   ; }
                    5782   ; } while ((current_time - start_time) < num_ms);
                    5783   ; }
                    5784   ; int tetris_rand()
                    5785   ; {
                    5786   _tetris_rand:
                    5787   ; return ((clock() >> 4) & 0xFFFF); // divide by 4 because clock increases by 10 every interrupt, ensure last digit is "random" too
00003108  4EB8 2E52 5788          jsr       _clock
0000310C  E880      5789          asr.l     #4,D0
0000310E  C0BC 0000 5790          and.l     #65535,D0
00003112  FFFF      
00003114  4E75      5791          rts
                    5792   ; }
                    5793   ; void CopyShape(Shape *shape, Shape *new_shape)
                    5794   ; {
                    5795   _CopyShape:
00003116  4E56 0000 5796          link      A6,#0
0000311A  48E7 3C00 5797          movem.l   D2/D3/D4/D5,-(A7)
0000311E  242E 000C 5798          move.l    12(A6),D2
00003122  2A2E 0008 5799          move.l    8(A6),D5
                    5800   ; int i;
                    5801   ; int j;
                    5802   ; new_shape->width = shape->width;
00003126  2045      5803          move.l    D5,A0
00003128  2242      5804          move.l    D2,A1
0000312A  2368 0010 5805          move.l    16(A0),16(A1)
0000312E  0010      
                    5806   ; new_shape->row = shape->row;
00003130  2045      5807          move.l    D5,A0
00003132  2242      5808          move.l    D2,A1
00003134  2368 0014 5809          move.l    20(A0),20(A1)
00003138  0014      
                    5810   ; new_shape->col = shape->col;
0000313A  2045      5811          move.l    D5,A0
0000313C  2242      5812          move.l    D2,A1
0000313E  2368 0018 5813          move.l    24(A0),24(A1)
00003142  0018      
                    5814   ; for (i = 0; i < new_shape->width; i++)
00003144  4284      5815          clr.l     D4
                    5816   CopyShape_1:
00003146  2042      5817          move.l    D2,A0
00003148  B8A8 0010 5818          cmp.l     16(A0),D4
0000314C  6C00 002A 5819          bge       CopyShape_3
                    5820   ; {
                    5821   ; for (j = 0; j < new_shape->width; j++)
00003150  4283      5822          clr.l     D3
                    5823   CopyShape_4:
00003152  2042      5824          move.l    D2,A0
00003154  B6A8 0010 5825          cmp.l     16(A0),D3
00003158  6C1A      5826          bge.s     CopyShape_6
                    5827   ; {
                    5828   ; new_shape->array[i][j] = shape->array[i][j];
0000315A  2045      5829          move.l    D5,A0
0000315C  2004      5830          move.l    D4,D0
0000315E  E588      5831          lsl.l     #2,D0
00003160  D1C0      5832          add.l     D0,A0
00003162  2242      5833          move.l    D2,A1
00003164  2004      5834          move.l    D4,D0
00003166  E588      5835          lsl.l     #2,D0
00003168  D3C0      5836          add.l     D0,A1
0000316A  13B0 3800 5837          move.b    0(A0,D3.L),0(A1,D3.L)
0000316E  3800      
00003170  5283      5838          addq.l    #1,D3
00003172  60DE      5839          bra       CopyShape_4
                    5840   CopyShape_6:
00003174  5284      5841          addq.l    #1,D4
00003176  60CE      5842          bra       CopyShape_1
                    5843   CopyShape_3:
00003178  4CDF 003C 5844          movem.l   (A7)+,D2/D3/D4/D5
0000317C  4E5E      5845          unlk      A6
0000317E  4E75      5846          rts
                    5847   ; }
                    5848   ; }
                    5849   ; }
                    5850   ; int CheckPosition(Shape *shape)
                    5851   ; { // Check the position of the copied shape
                    5852   _CheckPosition:
00003180  4E56 0000 5853          link      A6,#0
00003184  48E7 3800 5854          movem.l   D2/D3/D4,-(A7)
00003188  242E 0008 5855          move.l    8(A6),D2
                    5856   ; int i, j;
                    5857   ; for (i = 0; i < shape->width; i++)
0000318C  4284      5858          clr.l     D4
                    5859   CheckPosition_1:
0000318E  2042      5860          move.l    D2,A0
00003190  B8A8 0010 5861          cmp.l     16(A0),D4
00003194  6C00 0096 5862          bge       CheckPosition_3
                    5863   ; {
                    5864   ; for (j = 0; j < shape->width; j++)
00003198  4283      5865          clr.l     D3
                    5866   CheckPosition_4:
0000319A  2042      5867          move.l    D2,A0
0000319C  B6A8 0010 5868          cmp.l     16(A0),D3
000031A0  6C00 0084 5869          bge       CheckPosition_6
                    5870   ; {
                    5871   ; if ((shape->col + j < 0 || shape->col + j >= TETRIS_COLS || shape->row + i >= TETRIS_ROWS))
000031A4  2042      5872          move.l    D2,A0
000031A6  2028 0018 5873          move.l    24(A0),D0
000031AA  D083      5874          add.l     D3,D0
000031AC  0C80 0000 5875          cmp.l     #0,D0
000031B0  0000      
000031B2  6D20      5876          blt.s     CheckPosition_9
000031B4  2042      5877          move.l    D2,A0
000031B6  2028 0018 5878          move.l    24(A0),D0
000031BA  D083      5879          add.l     D3,D0
000031BC  0C80 0000 5880          cmp.l     #15,D0
000031C0  000F      
000031C2  6C10      5881          bge.s     CheckPosition_9
000031C4  2042      5882          move.l    D2,A0
000031C6  2028 0014 5883          move.l    20(A0),D0
000031CA  D084      5884          add.l     D4,D0
000031CC  0C80 0000 5885          cmp.l     #20,D0
000031D0  0014      
000031D2  6D18      5886          blt.s     CheckPosition_7
                    5887   CheckPosition_9:
                    5888   ; {							// Out of borders
                    5889   ; if (shape->array[i][j]) // but is it just a phantom?
000031D4  2042      5890          move.l    D2,A0
000031D6  2004      5891          move.l    D4,D0
000031D8  E588      5892          lsl.l     #2,D0
000031DA  D1C0      5893          add.l     D0,A0
000031DC  4A30 3800 5894          tst.b     0(A0,D3.L)
000031E0  6706      5895          beq.s     CheckPosition_10
                    5896   ; return FALSE;
000031E2  4280      5897          clr.l     D0
000031E4  6000 0048 5898          bra       CheckPosition_12
                    5899   CheckPosition_10:
000031E8  6000 0036 5900          bra       CheckPosition_13
                    5901   CheckPosition_7:
                    5902   ; }
                    5903   ; else if (Table[shape->row + i][shape->col + j] && shape->array[i][j])
000031EC  2042      5904          move.l    D2,A0
000031EE  2028 0014 5905          move.l    20(A0),D0
000031F2  D084      5906          add.l     D4,D0
000031F4  C1FC 000F 5907          muls      #15,D0
000031F8  41F9 0803 5908          lea       _Table.L,A0
000031FC  0546      
000031FE  D1C0      5909          add.l     D0,A0
00003200  2242      5910          move.l    D2,A1
00003202  2029 0018 5911          move.l    24(A1),D0
00003206  D083      5912          add.l     D3,D0
00003208  4A30 0800 5913          tst.b     0(A0,D0.L)
0000320C  6712      5914          beq.s     CheckPosition_13
0000320E  2042      5915          move.l    D2,A0
00003210  2004      5916          move.l    D4,D0
00003212  E588      5917          lsl.l     #2,D0
00003214  D1C0      5918          add.l     D0,A0
00003216  4A30 3800 5919          tst.b     0(A0,D3.L)
0000321A  6704      5920          beq.s     CheckPosition_13
                    5921   ; return FALSE;
0000321C  4280      5922          clr.l     D0
0000321E  600E      5923          bra.s     CheckPosition_12
                    5924   CheckPosition_13:
00003220  5283      5925          addq.l    #1,D3
00003222  6000 FF76 5926          bra       CheckPosition_4
                    5927   CheckPosition_6:
00003226  5284      5928          addq.l    #1,D4
00003228  6000 FF64 5929          bra       CheckPosition_1
                    5930   CheckPosition_3:
                    5931   ; }
                    5932   ; }
                    5933   ; return TRUE;
0000322C  7001      5934          moveq     #1,D0
                    5935   CheckPosition_12:
0000322E  4CDF 001C 5936          movem.l   (A7)+,D2/D3/D4
00003232  4E5E      5937          unlk      A6
00003234  4E75      5938          rts
                    5939   ; }
                    5940   ; void SetNewRandomShape()
                    5941   ; { // updates [current] with new shape
                    5942   _SetNewRandomShape:
00003236  2F0A      5943          move.l    A2,-(A7)
00003238  45F9 0803 5944          lea       _current.L,A2
0000323C  07BC      
                    5945   ; currentColor = mod_bld(tetris_rand(), NUM_SHAPES);
0000323E  4878 0007 5946          pea       7
00003242  2F00      5947          move.l    D0,-(A7)
00003244  4EB8 3108 5948          jsr       _tetris_rand
00003248  2200      5949          move.l    D0,D1
0000324A  201F      5950          move.l    (A7)+,D0
0000324C  2F01      5951          move.l    D1,-(A7)
0000324E  4EB8 2A98 5952          jsr       _mod_bld
00003252  504F      5953          addq.w    #8,A7
00003254  13C0 0803 5954          move.b    D0,_currentColor.L
00003258  07AE      
                    5955   ; CopyShape(&ShapesArray[currentColor], &current);
0000325A  2F0A      5956          move.l    A2,-(A7)
0000325C  41F9 0803 5957          lea       _ShapesArray.L,A0
00003260  07D8      
00003262  1239 0803 5958          move.b    _currentColor.L,D1
00003266  07AE      
00003268  4881      5959          ext.w     D1
0000326A  48C1      5960          ext.l     D1
0000326C  C3FC 001C 5961          muls      #28,D1
00003270  D1C1      5962          add.l     D1,A0
00003272  2F08      5963          move.l    A0,-(A7)
00003274  4EB8 3116 5964          jsr       _CopyShape
00003278  504F      5965          addq.w    #8,A7
                    5966   ; ++currentColor;
0000327A  5239 0803 5967          addq.b    #1,_currentColor.L
0000327E  07AE      
                    5968   ; current.col = mod_bld(tetris_rand(), (TETRIS_COLS - current.width + 1));
00003280  720F      5969          moveq     #15,D1
00003282  4881      5970          ext.w     D1
00003284  48C1      5971          ext.l     D1
00003286  92AA 0010 5972          sub.l     16(A2),D1
0000328A  5281      5973          addq.l    #1,D1
0000328C  2F01      5974          move.l    D1,-(A7)
0000328E  2F00      5975          move.l    D0,-(A7)
00003290  4EB8 3108 5976          jsr       _tetris_rand
00003294  2200      5977          move.l    D0,D1
00003296  201F      5978          move.l    (A7)+,D0
00003298  2F01      5979          move.l    D1,-(A7)
0000329A  4EB8 2A98 5980          jsr       _mod_bld
0000329E  504F      5981          addq.w    #8,A7
000032A0  2540 0018 5982          move.l    D0,24(A2)
                    5983   ; current.row = 0;
000032A4  42AA 0014 5984          clr.l     20(A2)
                    5985   ; if (!CheckPosition(&current))
000032A8  2F0A      5986          move.l    A2,-(A7)
000032AA  4EB8 3180 5987          jsr       _CheckPosition
000032AE  584F      5988          addq.w    #4,A7
000032B0  4A80      5989          tst.l     D0
000032B2  6606      5990          bne.s     SetNewRandomShape_1
                    5991   ; {
                    5992   ; GameOn = FALSE;
000032B4  4239 0803 5993          clr.b     _GameOn.L
000032B8  07B4      
                    5994   SetNewRandomShape_1:
000032BA  245F      5995          move.l    (A7)+,A2
000032BC  4E75      5996          rts
                    5997   ; // printf("Game on = false\n");
                    5998   ; }
                    5999   ; }
                    6000   ; void RotateShape(Shape *shape)
                    6001   ; { // rotates clockwise
                    6002   _RotateShape:
000032BE  4E56 FFE4 6003          link      A6,#-28
000032C2  48E7 3E00 6004          movem.l   D2/D3/D4/D5/D6,-(A7)
000032C6  2C2E 0008 6005          move.l    8(A6),D6
                    6006   ; Shape temp;
                    6007   ; int i, j, k, width;
                    6008   ; CopyShape(shape, &temp);
000032CA  486E FFE4 6009          pea       -28(A6)
000032CE  2F06      6010          move.l    D6,-(A7)
000032D0  4EB8 3116 6011          jsr       _CopyShape
000032D4  504F      6012          addq.w    #8,A7
                    6013   ; width = shape->width;
000032D6  2046      6014          move.l    D6,A0
000032D8  2828 0010 6015          move.l    16(A0),D4
                    6016   ; for (i = 0; i < width; i++)
000032DC  4282      6017          clr.l     D2
                    6018   RotateShape_1:
000032DE  B484      6019          cmp.l     D4,D2
000032E0  6C00 0030 6020          bge       RotateShape_3
                    6021   ; {
                    6022   ; for (j = 0, k = width - 1; j < width; j++, k--)
000032E4  4283      6023          clr.l     D3
000032E6  2004      6024          move.l    D4,D0
000032E8  5380      6025          subq.l    #1,D0
000032EA  2A00      6026          move.l    D0,D5
                    6027   RotateShape_4:
000032EC  B684      6028          cmp.l     D4,D3
000032EE  6C1E      6029          bge.s     RotateShape_6
                    6030   ; {
                    6031   ; shape->array[i][j] = temp.array[k][i];
000032F0  41EE FFE4 6032          lea       -28(A6),A0
000032F4  2005      6033          move.l    D5,D0
000032F6  E588      6034          lsl.l     #2,D0
000032F8  D1C0      6035          add.l     D0,A0
000032FA  2246      6036          move.l    D6,A1
000032FC  2002      6037          move.l    D2,D0
000032FE  E588      6038          lsl.l     #2,D0
00003300  D3C0      6039          add.l     D0,A1
00003302  13B0 2800 6040          move.b    0(A0,D2.L),0(A1,D3.L)
00003306  3800      
00003308  5283      6041          addq.l    #1,D3
0000330A  5385      6042          subq.l    #1,D5
0000330C  60DE      6043          bra       RotateShape_4
                    6044   RotateShape_6:
0000330E  5282      6045          addq.l    #1,D2
00003310  60CC      6046          bra       RotateShape_1
                    6047   RotateShape_3:
00003312  4CDF 007C 6048          movem.l   (A7)+,D2/D3/D4/D5/D6
00003316  4E5E      6049          unlk      A6
00003318  4E75      6050          rts
                    6051   ; }
                    6052   ; }
                    6053   ; }
                    6054   ; void WriteToTable()
                    6055   ; {
                    6056   _WriteToTable:
0000331A  48E7 3020 6057          movem.l   D2/D3/A2,-(A7)
0000331E  45F9 0803 6058          lea       _current.L,A2
00003322  07BC      
                    6059   ; int i, j;
                    6060   ; for (i = 0; i < current.width; i++)
00003324  4283      6061          clr.l     D3
                    6062   WriteToTable_1:
00003326  B6AA 0010 6063          cmp.l     16(A2),D3
0000332A  6C00 0048 6064          bge       WriteToTable_3
                    6065   ; {
                    6066   ; for (j = 0; j < current.width; j++)
0000332E  4282      6067          clr.l     D2
                    6068   WriteToTable_4:
00003330  B4AA 0010 6069          cmp.l     16(A2),D2
00003334  6C00 003A 6070          bge       WriteToTable_6
                    6071   ; {
                    6072   ; if (current.array[i][j])
00003338  2003      6073          move.l    D3,D0
0000333A  E588      6074          lsl.l     #2,D0
0000333C  41F2 0800 6075          lea       0(A2,D0.L),A0
00003340  4A30 2800 6076          tst.b     0(A0,D2.L)
00003344  6726      6077          beq.s     WriteToTable_7
                    6078   ; Table[current.row + i][current.col + j] = current.array[i][j];
00003346  2003      6079          move.l    D3,D0
00003348  E588      6080          lsl.l     #2,D0
0000334A  41F2 0800 6081          lea       0(A2,D0.L),A0
0000334E  202A 0014 6082          move.l    20(A2),D0
00003352  D083      6083          add.l     D3,D0
00003354  C1FC 000F 6084          muls      #15,D0
00003358  43F9 0803 6085          lea       _Table.L,A1
0000335C  0546      
0000335E  D3C0      6086          add.l     D0,A1
00003360  202A 0018 6087          move.l    24(A2),D0
00003364  D082      6088          add.l     D2,D0
00003366  13B0 2800 6089          move.b    0(A0,D2.L),0(A1,D0.L)
0000336A  0800      
                    6090   WriteToTable_7:
0000336C  5282      6091          addq.l    #1,D2
0000336E  60C0      6092          bra       WriteToTable_4
                    6093   WriteToTable_6:
00003370  5283      6094          addq.l    #1,D3
00003372  60B2      6095          bra       WriteToTable_1
                    6096   WriteToTable_3:
00003374  4CDF 040C 6097          movem.l   (A7)+,D2/D3/A2
00003378  4E75      6098          rts
                    6099   ; }
                    6100   ; }
                    6101   ; }
                    6102   ; void RemoveFullRowsAndUpdateScore()
                    6103   ; {
                    6104   _RemoveFullRowsAndUpdateScore:
0000337A  4E56 FFFC 6105          link      A6,#-4
0000337E  48E7 3F30 6106          movem.l   D2/D3/D4/D5/D6/D7/A2/A3,-(A7)
00003382  45F9 0803 6107          lea       _Table.L,A2
00003386  0546      
00003388  47F9 0803 6108          lea       _Tetris_Speed.L,A3
0000338C  089C      
                    6109   ; int i, j, sum, count = 0;
0000338E  7E00      6110          moveq     #0,D7
                    6111   ; int l, k;
                    6112   ; int compliment_to_say;
                    6113   ; for (i = 0; i < TETRIS_ROWS; i++)
00003390  4284      6114          clr.l     D4
                    6115   RemoveFullRowsAndUpdateScore_1:
00003392  0C84 0000 6116          cmp.l     #20,D4
00003396  0014      
00003398  6C00 00E2 6117          bge       RemoveFullRowsAndUpdateScore_3
                    6118   ; {
                    6119   ; sum = 0;
0000339C  4286      6120          clr.l     D6
                    6121   ; for (j = 0; j < TETRIS_COLS; j++)
0000339E  4285      6122          clr.l     D5
                    6123   RemoveFullRowsAndUpdateScore_4:
000033A0  0C85 0000 6124          cmp.l     #15,D5
000033A4  000F      
000033A6  6C18      6125          bge.s     RemoveFullRowsAndUpdateScore_6
                    6126   ; {
                    6127   ; sum += Table[i][j];
000033A8  2004      6128          move.l    D4,D0
000033AA  C1FC 000F 6129          muls      #15,D0
000033AE  41F2 0800 6130          lea       0(A2,D0.L),A0
000033B2  1030 5800 6131          move.b    0(A0,D5.L),D0
000033B6  4880      6132          ext.w     D0
000033B8  48C0      6133          ext.l     D0
000033BA  DC80      6134          add.l     D0,D6
000033BC  5285      6135          addq.l    #1,D5
000033BE  60E0      6136          bra       RemoveFullRowsAndUpdateScore_4
                    6137   RemoveFullRowsAndUpdateScore_6:
                    6138   ; }
                    6139   ; if (sum == TETRIS_COLS)
000033C0  0C86 0000 6140          cmp.l     #15,D6
000033C4  000F      
000033C6  6600 00AE 6141          bne       RemoveFullRowsAndUpdateScore_7
                    6142   ; {
                    6143   ; count++;
000033CA  5287      6144          addq.l    #1,D7
                    6145   ; for (k = i; k >= 1; k--)
000033CC  2604      6146          move.l    D4,D3
                    6147   RemoveFullRowsAndUpdateScore_9:
000033CE  0C83 0000 6148          cmp.l     #1,D3
000033D2  0001      
000033D4  6D2E      6149          blt.s     RemoveFullRowsAndUpdateScore_11
                    6150   ; for (l = 0; l < TETRIS_COLS; l++)
000033D6  4282      6151          clr.l     D2
                    6152   RemoveFullRowsAndUpdateScore_12:
000033D8  0C82 0000 6153          cmp.l     #15,D2
000033DC  000F      
000033DE  6C20      6154          bge.s     RemoveFullRowsAndUpdateScore_14
                    6155   ; Table[k][l] = Table[k - 1][l];
000033E0  2003      6156          move.l    D3,D0
000033E2  5380      6157          subq.l    #1,D0
000033E4  C1FC 000F 6158          muls      #15,D0
000033E8  41F2 0800 6159          lea       0(A2,D0.L),A0
000033EC  2003      6160          move.l    D3,D0
000033EE  C1FC 000F 6161          muls      #15,D0
000033F2  43F2 0800 6162          lea       0(A2,D0.L),A1
000033F6  13B0 2800 6163          move.b    0(A0,D2.L),0(A1,D2.L)
000033FA  2800      
000033FC  5282      6164          addq.l    #1,D2
000033FE  60D8      6165          bra       RemoveFullRowsAndUpdateScore_12
                    6166   RemoveFullRowsAndUpdateScore_14:
00003400  5383      6167          subq.l    #1,D3
00003402  60CA      6168          bra       RemoveFullRowsAndUpdateScore_9
                    6169   RemoveFullRowsAndUpdateScore_11:
                    6170   ; for (l = 0; l < TETRIS_COLS; l++)
00003404  4282      6171          clr.l     D2
                    6172   RemoveFullRowsAndUpdateScore_15:
00003406  0C82 0000 6173          cmp.l     #15,D2
0000340A  000F      
0000340C  6C12      6174          bge.s     RemoveFullRowsAndUpdateScore_17
                    6175   ; Table[k][l] = 0;
0000340E  2003      6176          move.l    D3,D0
00003410  C1FC 000F 6177          muls      #15,D0
00003414  41F2 0800 6178          lea       0(A2,D0.L),A0
00003418  4230 2800 6179          clr.b     0(A0,D2.L)
0000341C  5282      6180          addq.l    #1,D2
0000341E  60E6      6181          bra       RemoveFullRowsAndUpdateScore_15
                    6182   RemoveFullRowsAndUpdateScore_17:
                    6183   ; compliment_to_say = mod_bld(tetris_rand(), NUM_LINE_SUCCESS_MESSAGES);
00003420  4878 0003 6184          pea       3
00003424  2F00      6185          move.l    D0,-(A7)
00003426  4EB8 3108 6186          jsr       _tetris_rand
0000342A  2200      6187          move.l    D0,D1
0000342C  201F      6188          move.l    (A7)+,D0
0000342E  2F01      6189          move.l    D1,-(A7)
00003430  4EB8 2A98 6190          jsr       _mod_bld
00003434  504F      6191          addq.w    #8,A7
00003436  2D40 FFFC 6192          move.l    D0,-4(A6)
                    6193   ; switch (compliment_to_say)
0000343A  202E FFFC 6194          move.l    -4(A6),D0
0000343E  0C80 0000 6195          cmp.l     #1,D0
00003442  0001      
00003444  6718      6196          beq.s     RemoveFullRowsAndUpdateScore_21
00003446  6E06      6197          bgt.s     RemoveFullRowsAndUpdateScore_24
00003448  4A80      6198          tst.l     D0
0000344A  670C      6199          beq.s     RemoveFullRowsAndUpdateScore_20
0000344C  601C      6200          bra.s     RemoveFullRowsAndUpdateScore_18
                    6201   RemoveFullRowsAndUpdateScore_24:
0000344E  0C80 0000 6202          cmp.l     #2,D0
00003452  0002      
00003454  670E      6203          beq.s     RemoveFullRowsAndUpdateScore_22
00003456  6012      6204          bra.s     RemoveFullRowsAndUpdateScore_18
                    6205   RemoveFullRowsAndUpdateScore_20:
                    6206   ; {
                    6207   ; case 0:
                    6208   ; say_awesome();
00003458  4EB8 2CE6 6209          jsr       _say_awesome
                    6210   ; break;
0000345C  6010      6211          bra.s     RemoveFullRowsAndUpdateScore_19
                    6212   RemoveFullRowsAndUpdateScore_21:
                    6213   ; case 1:
                    6214   ; say_cool();
0000345E  4EB8 2CFC 6215          jsr       _say_cool
                    6216   ; break;
00003462  600A      6217          bra.s     RemoveFullRowsAndUpdateScore_19
                    6218   RemoveFullRowsAndUpdateScore_22:
                    6219   ; case 2:
                    6220   ; say_yeah();
00003464  4EB8 2D0E 6221          jsr       _say_yeah
                    6222   ; break;
00003468  6004      6223          bra.s     RemoveFullRowsAndUpdateScore_19
                    6224   RemoveFullRowsAndUpdateScore_18:
                    6225   ; default:
                    6226   ; say_yeah();
0000346A  4EB8 2D0E 6227          jsr       _say_yeah
                    6228   ; break;
                    6229   RemoveFullRowsAndUpdateScore_19:
                    6230   ; }
                    6231   ; Tetris_Speed.speed = Tetris_Speed.speed + Tetris_Speed.speed_increase;
0000346E  2013      6232          move.l    (A3),D0
00003470  D0AB 0004 6233          add.l     4(A3),D0
00003474  2680      6234          move.l    D0,(A3)
                    6235   RemoveFullRowsAndUpdateScore_7:
00003476  5284      6236          addq.l    #1,D4
00003478  6000 FF18 6237          bra       RemoveFullRowsAndUpdateScore_1
                    6238   RemoveFullRowsAndUpdateScore_3:
                    6239   ; }
                    6240   ; }
                    6241   ; tetris_score += 100 * count;
0000347C  2F07      6242          move.l    D7,-(A7)
0000347E  4878 0064 6243          pea       100
00003482  4EB9 0000 6244          jsr       LMUL
00003486  3B98      
00003488  2017      6245          move.l    (A7),D0
0000348A  504F      6246          addq.w    #8,A7
0000348C  D1B9 0803 6247          add.l     D0,_tetris_score.L
00003490  07B0      
00003492  4CDF 0CFC 6248          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3
00003496  4E5E      6249          unlk      A6
00003498  4E75      6250          rts
                    6251   ; }
                    6252   ; void PrintTable()
                    6253   ; {
                    6254   _PrintTable:
0000349A  4E56 FE54 6255          link      A6,#-428
0000349E  48E7 3038 6256          movem.l   D2/D3/A2/A3/A4,-(A7)
000034A2  45F9 0803 6257          lea       _current.L,A2
000034A6  07BC      
000034A8  47F8 2ED4 6258          lea       _printw.L,A3
000034AC  49EE FED4 6259          lea       -300(A6),A4
                    6260   ; int i, j;
                    6261   ; char score_str[128];
                    6262   ; char Buffer[TETRIS_ROWS][TETRIS_COLS];
                    6263   ; printw_x = 0;
000034B0  42B9 0803 6264          clr.l     _printw_x.L
000034B4  08A4      
                    6265   ; printw_y = 0;
000034B6  42B9 0803 6266          clr.l     _printw_y.L
000034BA  08A8      
                    6267   ; for (i = 0; i < TETRIS_ROWS; i++)
000034BC  4282      6268          clr.l     D2
                    6269   PrintTable_1:
000034BE  0C82 0000 6270          cmp.l     #20,D2
000034C2  0014      
000034C4  6C20      6271          bge.s     PrintTable_3
                    6272   ; {
                    6273   ; for (j = 0; j < TETRIS_COLS; j++)
000034C6  4283      6274          clr.l     D3
                    6275   PrintTable_4:
000034C8  0C83 0000 6276          cmp.l     #15,D3
000034CC  000F      
000034CE  6C12      6277          bge.s     PrintTable_6
                    6278   ; {
                    6279   ; Buffer[i][j] = 0;
000034D0  2002      6280          move.l    D2,D0
000034D2  C1FC 000F 6281          muls      #15,D0
000034D6  41F4 0800 6282          lea       0(A4,D0.L),A0
000034DA  4230 3800 6283          clr.b     0(A0,D3.L)
000034DE  5283      6284          addq.l    #1,D3
000034E0  60E6      6285          bra       PrintTable_4
                    6286   PrintTable_6:
000034E2  5282      6287          addq.l    #1,D2
000034E4  60D8      6288          bra       PrintTable_1
                    6289   PrintTable_3:
                    6290   ; }
                    6291   ; }
                    6292   ; for (i = 0; i < current.width; i++)
000034E6  4282      6293          clr.l     D2
                    6294   PrintTable_7:
000034E8  B4AA 0010 6295          cmp.l     16(A2),D2
000034EC  6C00 0066 6296          bge       PrintTable_9
                    6297   ; {
                    6298   ; for (j = 0; j < current.width; j++)
000034F0  4283      6299          clr.l     D3
                    6300   PrintTable_10:
000034F2  B6AA 0010 6301          cmp.l     16(A2),D3
000034F6  6C00 0058 6302          bge       PrintTable_12
                    6303   ; {
                    6304   ; if (current.array[i][j])
000034FA  2002      6305          move.l    D2,D0
000034FC  E588      6306          lsl.l     #2,D0
000034FE  41F2 0800 6307          lea       0(A2,D0.L),A0
00003502  4A30 3800 6308          tst.b     0(A0,D3.L)
00003506  6700 0044 6309          beq       PrintTable_13
                    6310   ; {
                    6311   ; Buffer[current.row + i][current.col + j] = current.array[i][j];
0000350A  2002      6312          move.l    D2,D0
0000350C  E588      6313          lsl.l     #2,D0
0000350E  41F2 0800 6314          lea       0(A2,D0.L),A0
00003512  202A 0014 6315          move.l    20(A2),D0
00003516  D082      6316          add.l     D2,D0
00003518  C1FC 000F 6317          muls      #15,D0
0000351C  43F4 0800 6318          lea       0(A4,D0.L),A1
00003520  202A 0018 6319          move.l    24(A2),D0
00003524  D083      6320          add.l     D3,D0
00003526  13B0 3800 6321          move.b    0(A0,D3.L),0(A1,D0.L)
0000352A  0800      
                    6322   ; TableColor[current.row + i][current.col + j] = currentColor;
0000352C  202A 0014 6323          move.l    20(A2),D0
00003530  D082      6324          add.l     D2,D0
00003532  C1FC 000F 6325          muls      #15,D0
00003536  41F9 0803 6326          lea       _TableColor.L,A0
0000353A  0672      
0000353C  D1C0      6327          add.l     D0,A0
0000353E  202A 0018 6328          move.l    24(A2),D0
00003542  D083      6329          add.l     D3,D0
00003544  11B9 0803 6330          move.b    _currentColor.L,0(A0,D0.L)
00003548  07AE 0800 
                    6331   PrintTable_13:
0000354C  5283      6332          addq.l    #1,D3
0000354E  60A2      6333          bra       PrintTable_10
                    6334   PrintTable_12:
00003550  5282      6335          addq.l    #1,D2
00003552  6094      6336          bra       PrintTable_7
                    6337   PrintTable_9:
                    6338   ; }
                    6339   ; }
                    6340   ; }
                    6341   ; go_to_top_corner();
00003554  4EB8 2C98 6342          jsr       _go_to_top_corner
                    6343   ; printw("\n\n\n", "initial_newline");
00003558  4879 0000 6344          pea       @tetris_8.L
0000355C  51A8      
0000355E  4879 0000 6345          pea       @tetris_7.L
00003562  51A4      
00003564  4E93      6346          jsr       (A3)
00003566  504F      6347          addq.w    #8,A7
                    6348   ; for (i = 0; i < TETRIS_COLS - 9; i++)
00003568  4282      6349          clr.l     D2
                    6350   PrintTable_15:
0000356A  0C82 0000 6351          cmp.l     #6,D2
0000356E  0006      
00003570  6C14      6352          bge.s     PrintTable_17
                    6353   ; {
                    6354   ; printw(" ", "space");
00003572  4879 0000 6355          pea       @tetris_10.L
00003576  51BA      
00003578  4879 0000 6356          pea       @tetris_9.L
0000357C  51B8      
0000357E  4E93      6357          jsr       (A3)
00003580  504F      6358          addq.w    #8,A7
00003582  5282      6359          addq.l    #1,D2
00003584  60E4      6360          bra       PrintTable_15
                    6361   PrintTable_17:
                    6362   ; }
                    6363   ; printw("CPEN412 Tetris\n", "title");
00003586  4879 0000 6364          pea       @tetris_12.L
0000358A  51D0      
0000358C  4879 0000 6365          pea       @tetris_11.L
00003590  51C0      
00003592  4E93      6366          jsr       (A3)
00003594  504F      6367          addq.w    #8,A7
                    6368   ; for (i = 0; i < TETRIS_ROWS; i++)
00003596  4282      6369          clr.l     D2
                    6370   PrintTable_18:
00003598  0C82 0000 6371          cmp.l     #20,D2
0000359C  0014      
0000359E  6C00 0088 6372          bge       PrintTable_20
                    6373   ; {
                    6374   ; for (j = 0; j < TETRIS_COLS; j++)
000035A2  4283      6375          clr.l     D3
                    6376   PrintTable_21:
000035A4  0C83 0000 6377          cmp.l     #15,D3
000035A8  000F      
000035AA  6C00 0066 6378          bge       PrintTable_23
                    6379   ; {
                    6380   ; if (Table[i][j] + Buffer[i][j])
000035AE  2002      6381          move.l    D2,D0
000035B0  C1FC 000F 6382          muls      #15,D0
000035B4  41F9 0803 6383          lea       _Table.L,A0
000035B8  0546      
000035BA  D1C0      6384          add.l     D0,A0
000035BC  1030 3800 6385          move.b    0(A0,D3.L),D0
000035C0  2202      6386          move.l    D2,D1
000035C2  C3FC 000F 6387          muls      #15,D1
000035C6  41F4 1800 6388          lea       0(A4,D1.L),A0
000035CA  D030 3800 6389          add.b     0(A0,D3.L),D0
000035CE  672E      6390          beq.s     PrintTable_24
                    6391   ; {
                    6392   ; printwColor("#", TableColor[i][j], "table#");
000035D0  4879 0000 6393          pea       @tetris_14.L
000035D4  51D8      
000035D6  2202      6394          move.l    D2,D1
000035D8  C3FC 000F 6395          muls      #15,D1
000035DC  41F9 0803 6396          lea       _TableColor.L,A0
000035E0  0672      
000035E2  D1C1      6397          add.l     D1,A0
000035E4  1230 3800 6398          move.b    0(A0,D3.L),D1
000035E8  4881      6399          ext.w     D1
000035EA  48C1      6400          ext.l     D1
000035EC  2F01      6401          move.l    D1,-(A7)
000035EE  4879 0000 6402          pea       @tetris_13.L
000035F2  51D6      
000035F4  4EB8 2E68 6403          jsr       _printwColor
000035F8  DEFC 000C 6404          add.w     #12,A7
000035FC  6010      6405          bra.s     PrintTable_25
                    6406   PrintTable_24:
                    6407   ; }
                    6408   ; else
                    6409   ; {
                    6410   ; printw(".", "table.");
000035FE  4879 0000 6411          pea       @tetris_16.L
00003602  51E2      
00003604  4879 0000 6412          pea       @tetris_15.L
00003608  51E0      
0000360A  4E93      6413          jsr       (A3)
0000360C  504F      6414          addq.w    #8,A7
                    6415   PrintTable_25:
0000360E  5283      6416          addq.l    #1,D3
00003610  6092      6417          bra       PrintTable_21
                    6418   PrintTable_23:
                    6419   ; }
                    6420   ; // printw(" ","space2");
                    6421   ; }
                    6422   ; printw("\n", "newline1");
00003612  4879 0000 6423          pea       @tetris_18.L
00003616  51EC      
00003618  4879 0000 6424          pea       @tetris_17.L
0000361C  51EA      
0000361E  4E93      6425          jsr       (A3)
00003620  504F      6426          addq.w    #8,A7
00003622  5282      6427          addq.l    #1,D2
00003624  6000 FF72 6428          bra       PrintTable_18
                    6429   PrintTable_20:
                    6430   ; }
                    6431   ; sprintf(score_str, "\nScore: %d\n", tetris_score);
00003628  2F39 0803 6432          move.l    _tetris_score.L,-(A7)
0000362C  07B0      
0000362E  4879 0000 6433          pea       @tetris_19.L
00003632  51F6      
00003634  486E FE54 6434          pea       -428(A6)
00003638  4EB9 0000 6435          jsr       _sprintf
0000363C  3C82      
0000363E  DEFC 000C 6436          add.w     #12,A7
                    6437   ; printw(score_str, "scoreprint");
00003642  4879 0000 6438          pea       @tetris_20.L
00003646  5202      
00003648  486E FE54 6439          pea       -428(A6)
0000364C  4E93      6440          jsr       (A3)
0000364E  504F      6441          addq.w    #8,A7
00003650  4CDF 1C0C 6442          movem.l   (A7)+,D2/D3/A2/A3/A4
00003654  4E5E      6443          unlk      A6
00003656  4E75      6444          rts
                    6445   ; }
                    6446   ; void ManipulateCurrent(int action)
                    6447   ; {
                    6448   _ManipulateCurrent:
00003658  4E56 FFE4 6449          link      A6,#-28
0000365C  48E7 0038 6450          movem.l   A2/A3/A4,-(A7)
00003660  45EE FFE4 6451          lea       -28(A6),A2
00003664  47F9 0803 6452          lea       _current.L,A3
00003668  07BC      
0000366A  49F8 3180 6453          lea       _CheckPosition.L,A4
                    6454   ; Shape temp;
                    6455   ; CopyShape(&current, &temp);
0000366E  2F0A      6456          move.l    A2,-(A7)
00003670  2F0B      6457          move.l    A3,-(A7)
00003672  4EB8 3116 6458          jsr       _CopyShape
00003676  504F      6459          addq.w    #8,A7
                    6460   ; switch (action)
00003678  202E 0008 6461          move.l    8(A6),D0
0000367C  0C80 0000 6462          cmp.l     #115,D0
00003680  0073      
00003682  672C      6463          beq.s     ManipulateCurrent_3
00003684  6E1C      6464          bgt.s     ManipulateCurrent_7
00003686  0C80 0000 6465          cmp.l     #100,D0
0000368A  0064      
0000368C  6700 0056 6466          beq       ManipulateCurrent_4
00003690  6E00 00B6 6467          bgt       ManipulateCurrent_2
00003694  0C80 0000 6468          cmp.l     #97,D0
00003698  0061      
0000369A  6700 006E 6469          beq       ManipulateCurrent_5
0000369E  6000 00A8 6470          bra       ManipulateCurrent_2
                    6471   ManipulateCurrent_7:
000036A2  0C80 0000 6472          cmp.l     #119,D0
000036A6  0077      
000036A8  6700 0084 6473          beq       ManipulateCurrent_6
000036AC  6000 009A 6474          bra       ManipulateCurrent_2
                    6475   ManipulateCurrent_3:
                    6476   ; {
                    6477   ; case 's':
                    6478   ; temp.row++; // move down
000036B0  200A      6479          move.l    A2,D0
000036B2  0680 0000 6480          add.l     #20,D0
000036B6  0014      
000036B8  2040      6481          move.l    D0,A0
000036BA  5290      6482          addq.l    #1,(A0)
                    6483   ; if (CheckPosition(&temp))
000036BC  2F0A      6484          move.l    A2,-(A7)
000036BE  4E94      6485          jsr       (A4)
000036C0  584F      6486          addq.w    #4,A7
000036C2  4A80      6487          tst.l     D0
000036C4  670E      6488          beq.s     ManipulateCurrent_8
                    6489   ; {
                    6490   ; current.row++;
000036C6  200B      6491          move.l    A3,D0
000036C8  0680 0000 6492          add.l     #20,D0
000036CC  0014      
000036CE  2040      6493          move.l    D0,A0
000036D0  5290      6494          addq.l    #1,(A0)
000036D2  600C      6495          bra.s     ManipulateCurrent_9
                    6496   ManipulateCurrent_8:
                    6497   ; }
                    6498   ; else
                    6499   ; {
                    6500   ; WriteToTable();
000036D4  4EB8 331A 6501          jsr       _WriteToTable
                    6502   ; RemoveFullRowsAndUpdateScore();
000036D8  4EB8 337A 6503          jsr       _RemoveFullRowsAndUpdateScore
                    6504   ; SetNewRandomShape();
000036DC  4EB8 3236 6505          jsr       _SetNewRandomShape
                    6506   ManipulateCurrent_9:
                    6507   ; }
                    6508   ; break;
000036E0  6000 0066 6509          bra       ManipulateCurrent_2
                    6510   ManipulateCurrent_4:
                    6511   ; case 'd':
                    6512   ; temp.col++; // move right
000036E4  200A      6513          move.l    A2,D0
000036E6  0680 0000 6514          add.l     #24,D0
000036EA  0018      
000036EC  2040      6515          move.l    D0,A0
000036EE  5290      6516          addq.l    #1,(A0)
                    6517   ; if (CheckPosition(&temp))
000036F0  2F0A      6518          move.l    A2,-(A7)
000036F2  4E94      6519          jsr       (A4)
000036F4  584F      6520          addq.w    #4,A7
000036F6  4A80      6521          tst.l     D0
000036F8  670C      6522          beq.s     ManipulateCurrent_10
                    6523   ; current.col++;
000036FA  200B      6524          move.l    A3,D0
000036FC  0680 0000 6525          add.l     #24,D0
00003700  0018      
00003702  2040      6526          move.l    D0,A0
00003704  5290      6527          addq.l    #1,(A0)
                    6528   ManipulateCurrent_10:
                    6529   ; break;
00003706  6000 0040 6530          bra       ManipulateCurrent_2
                    6531   ManipulateCurrent_5:
                    6532   ; case 'a':
                    6533   ; temp.col--; // move left
0000370A  200A      6534          move.l    A2,D0
0000370C  0680 0000 6535          add.l     #24,D0
00003710  0018      
00003712  2040      6536          move.l    D0,A0
00003714  5390      6537          subq.l    #1,(A0)
                    6538   ; if (CheckPosition(&temp))
00003716  2F0A      6539          move.l    A2,-(A7)
00003718  4E94      6540          jsr       (A4)
0000371A  584F      6541          addq.w    #4,A7
0000371C  4A80      6542          tst.l     D0
0000371E  670C      6543          beq.s     ManipulateCurrent_12
                    6544   ; current.col--;
00003720  200B      6545          move.l    A3,D0
00003722  0680 0000 6546          add.l     #24,D0
00003726  0018      
00003728  2040      6547          move.l    D0,A0
0000372A  5390      6548          subq.l    #1,(A0)
                    6549   ManipulateCurrent_12:
                    6550   ; break;
0000372C  601A      6551          bra.s     ManipulateCurrent_2
                    6552   ManipulateCurrent_6:
                    6553   ; case 'w':
                    6554   ; RotateShape(&temp); // rotate clockwise
0000372E  2F0A      6555          move.l    A2,-(A7)
00003730  4EB8 32BE 6556          jsr       _RotateShape
00003734  584F      6557          addq.w    #4,A7
                    6558   ; if (CheckPosition(&temp))
00003736  2F0A      6559          move.l    A2,-(A7)
00003738  4E94      6560          jsr       (A4)
0000373A  584F      6561          addq.w    #4,A7
0000373C  4A80      6562          tst.l     D0
0000373E  6708      6563          beq.s     ManipulateCurrent_14
                    6564   ; RotateShape(&current);
00003740  2F0B      6565          move.l    A3,-(A7)
00003742  4EB8 32BE 6566          jsr       _RotateShape
00003746  584F      6567          addq.w    #4,A7
                    6568   ManipulateCurrent_14:
                    6569   ; break;
                    6570   ManipulateCurrent_2:
                    6571   ; }
                    6572   ; PrintTable();
00003748  4EB8 349A 6573          jsr       _PrintTable
0000374C  4CDF 1C00 6574          movem.l   (A7)+,A2/A3/A4
00003750  4E5E      6575          unlk      A6
00003752  4E75      6576          rts
                    6577   ; }
                    6578   ; void initTetris_Speed()
                    6579   ; {
                    6580   _initTetris_Speed:
                    6581   ; Tetris_Speed.speed = INITIAL_TETRIS_SPEED;
00003754  23FC 0000 6582          move.l    #2,_Tetris_Speed.L
00003758  0002 0803 
0000375C  089C      
                    6583   ; Tetris_Speed.speed_increase = TETRIS_SPEED_INCREASE;
0000375E  23FC 0000 6584          move.l    #1,_Tetris_Speed+4.L
00003762  0001 0803 
00003766  08A0      
00003768  4E75      6585          rts
                    6586   ; }
                    6587   ; void tetris_mainloop()
                    6588   ; {
                    6589   _tetris_mainloop:
0000376A  4E56 FFFC 6590          link      A6,#-4
0000376E  2F02      6591          move.l    D2,-(A7)
                    6592   ; int current_time;
                    6593   ; int got_game_over;
                    6594   ; while (1)
                    6595   tetris_mainloop_1:
                    6596   ; {
                    6597   ; current_time = clock();
00003770  4EB8 2E52 6598          jsr       _clock
00003774  2400      6599          move.l    D0,D2
                    6600   ; if (kbhit())
00003776  4EB8 09E2 6601          jsr       _kbhit
0000377A  4A80      6602          tst.l     D0
0000377C  6720      6603          beq.s     tetris_mainloop_6
                    6604   ; {
                    6605   ; ManipulateCurrent(getch());
0000377E  2F00      6606          move.l    D0,-(A7)
00003780  4EB9 0000 6607          jsr       _getch
00003784  3D2A      
00003786  2200      6608          move.l    D0,D1
00003788  201F      6609          move.l    (A7)+,D0
0000378A  2F01      6610          move.l    D1,-(A7)
0000378C  4EB8 3658 6611          jsr       _ManipulateCurrent
00003790  584F      6612          addq.w    #4,A7
                    6613   ; if (!GameOn)
00003792  4A39 0803 6614          tst.b     _GameOn.L
00003796  07B4      
00003798  6604      6615          bne.s     tetris_mainloop_6
                    6616   ; {
                    6617   ; break;
0000379A  6000 003C 6618          bra       tetris_mainloop_3
                    6619   tetris_mainloop_6:
                    6620   ; }
                    6621   ; }
                    6622   ; if (current_time >= ((MILLISECONDS_PER_SEC / Tetris_Speed.speed) + tetris_timer))
0000379E  4878 03E8 6623          pea       1000
000037A2  2F39 0803 6624          move.l    _Tetris_Speed.L,-(A7)
000037A6  089C      
000037A8  4EB9 0000 6625          jsr       LDIV
000037AC  3ABA      
000037AE  2017      6626          move.l    (A7),D0
000037B0  504F      6627          addq.w    #8,A7
000037B2  D0B9 0803 6628          add.l     _tetris_timer.L,D0
000037B6  07B6      
000037B8  B480      6629          cmp.l     D0,D2
000037BA  6D1A      6630          blt.s     tetris_mainloop_8
                    6631   ; {
                    6632   ; ManipulateCurrent('s');
000037BC  4878 0073 6633          pea       115
000037C0  4EB8 3658 6634          jsr       _ManipulateCurrent
000037C4  584F      6635          addq.w    #4,A7
                    6636   ; if (!GameOn)
000037C6  4A39 0803 6637          tst.b     _GameOn.L
000037CA  07B4      
000037CC  6602      6638          bne.s     tetris_mainloop_10
                    6639   ; {
                    6640   ; break;
000037CE  6008      6641          bra.s     tetris_mainloop_3
                    6642   tetris_mainloop_10:
                    6643   ; }
                    6644   ; tetris_timer = current_time;
000037D0  23C2 0803 6645          move.l    D2,_tetris_timer.L
000037D4  07B6      
                    6646   tetris_mainloop_8:
000037D6  6098      6647          bra       tetris_mainloop_1
                    6648   tetris_mainloop_3:
000037D8  241F      6649          move.l    (A7)+,D2
000037DA  4E5E      6650          unlk      A6
000037DC  4E75      6651          rts
                    6652   ; }
                    6653   ; }
                    6654   ; }
                    6655   ; // void test(){
                    6656   ; // 	printf("Testing\n");
                    6657   ; // 	while (1){
                    6658   ; // 		octlAddress = 0xF3;
                    6659   ; // 		octlAddress1 = 0xE2;
                    6660   ; // 	}
                    6661   ; // }
                    6662   ; void testSound(){
                    6663   _testSound:
000037DE  2F0A      6664          move.l    A2,-(A7)
000037E0  45F8 2AF8 6665          lea       _Wait250ms_here.L,A2
                    6666   ; say_awesome();
000037E4  4EB8 2CE6 6667          jsr       _say_awesome
                    6668   ; Wait250ms_here();
000037E8  4E92      6669          jsr       (A2)
                    6670   ; say_cool();
000037EA  4EB8 2CFC 6671          jsr       _say_cool
                    6672   ; Wait250ms_here();
000037EE  4E92      6673          jsr       (A2)
                    6674   ; say_yeah();
000037F0  4EB8 2D0E 6675          jsr       _say_yeah
                    6676   ; Wait250ms_here();
000037F4  4E92      6677          jsr       (A2)
                    6678   ; say_game_over();
000037F6  4EB8 2CC4 6679          jsr       _say_game_over
                    6680   ; Wait250ms_here();
000037FA  4E92      6681          jsr       (A2)
000037FC  245F      6682          move.l    (A7)+,A2
000037FE  4E75      6683          rts
                    6684   ; }
                    6685   ; int tetris_main()
                    6686   ; {
                    6687   _tetris_main:
00003800  4E56 FF7C 6688          link      A6,#-132
00003804  48E7 3038 6689          movem.l   D2/D3/A2/A3/A4,-(A7)
00003808  45F9 0803 6690          lea       _ShapesArray.L,A2
0000380C  07D8      
0000380E  47F9 0000 6691          lea       _printf.L,A3
00003812  3CF8      
00003814  49F9 0803 6692          lea       _Table.L,A4
00003818  0546      
                    6693   ; int i, j;
                    6694   ; int test1;
                    6695   ; char score_str[128];
                    6696   ; while(1){
                    6697   tetris_main_1:
                    6698   ; testSound();
0000381A  4EB8 37DE 6699          jsr       _testSound
0000381E  60FA      6700          bra       tetris_main_1
                    6701   tetris_main_4:
00003820  0C82 0000 6702          cmp.l     #15,D2
00003824  000F      
00003826  6C00 003E 6703          bge       tetris_main_6
                    6704   ; }
                    6705   ; // test();
                    6706   ; timer_count = 0;
                    6707   ; printw_x = 0;
                    6708   ; printw_y = 0;
                    6709   ; GameOn = TRUE;
                    6710   ; InstallExceptionHandler(Timer_ISR, 30);
                    6711   ; Timer1Data = 0x25; // 100 ms
                    6712   ; Timer1Control = 3; // enable timer, periodic mode
                    6713   ; // InstallExceptionHandler(Timer_ISR, 29);
                    6714   ; // InstallExceptionHandler(Timer_ISR, 28);
                    6715   ; // InstallExceptionHandler(Timer_ISR, 27);
                    6716   ; // InstallExceptionHandler(Timer_ISR, 26);
                    6717   ; // InstallExceptionHandler(Timer_ISR, 25);
                    6718   ; octl = OCTL_TETRIS_DEFAULT;
                    6719   ; octlAddress = octl;
                    6720   ; for (j = 0; j < TETRIS_COLS; j++)
                    6721   ; {
                    6722   ; Table[0][j] = 2; // default color
0000382A  19BC 0002 6723          move.b    #2,0(A4,D2.L)
0000382E  2800      
                    6724   ; for (i = 0; i < TETRIS_ROWS; i++)
00003830  4283      6725          clr.l     D3
                    6726   tetris_main_7:
00003832  0C83 0000 6727          cmp.l     #20,D3
00003836  0014      
00003838  6C28      6728          bge.s     tetris_main_9
                    6729   ; {
                    6730   ; Table[i][j] = 0;
0000383A  2003      6731          move.l    D3,D0
0000383C  C1FC 000F 6732          muls      #15,D0
00003840  41F4 0800 6733          lea       0(A4,D0.L),A0
00003844  4230 2800 6734          clr.b     0(A0,D2.L)
                    6735   ; TableColor[i + 1][j] = 2; // default color
00003848  2003      6736          move.l    D3,D0
0000384A  5280      6737          addq.l    #1,D0
0000384C  C1FC 000F 6738          muls      #15,D0
00003850  41F9 0803 6739          lea       _TableColor.L,A0
00003854  0672      
00003856  D1C0      6740          add.l     D0,A0
00003858  11BC 0002 6741          move.b    #2,0(A0,D2.L)
0000385C  2800      
0000385E  5283      6742          addq.l    #1,D3
00003860  60D0      6743          bra       tetris_main_7
                    6744   tetris_main_9:
00003862  5282      6745          addq.l    #1,D2
00003864  60BA      6746          bra       tetris_main_4
                    6747   tetris_main_6:
                    6748   ; }
                    6749   ; }
                    6750   ; // S shape
                    6751   ; ShapesArray[0].array[0][0] = 0;
00003866  4212      6752          clr.b     (A2)
                    6753   ; ShapesArray[0].array[0][1] = 1;
00003868  157C 0001 6754          move.b    #1,1(A2)
0000386C  0001      
                    6755   ; ShapesArray[0].array[0][2] = 1;
0000386E  157C 0001 6756          move.b    #1,2(A2)
00003872  0002      
                    6757   ; ShapesArray[0].array[1][0] = 1;
00003874  157C 0001 6758          move.b    #1,4(A2)
00003878  0004      
                    6759   ; ShapesArray[0].array[1][1] = 1;
0000387A  157C 0001 6760          move.b    #1,4+1(A2)
0000387E  0005      
                    6761   ; ShapesArray[0].array[1][2] = 0;
00003880  422A 0006 6762          clr.b     4+2(A2)
                    6763   ; ShapesArray[0].array[2][0] = 0;
00003884  422A 0008 6764          clr.b     8(A2)
                    6765   ; ShapesArray[0].array[2][1] = 0;
00003888  422A 0009 6766          clr.b     8+1(A2)
                    6767   ; ShapesArray[0].array[2][2] = 0;
0000388C  422A 000A 6768          clr.b     8+2(A2)
                    6769   ; ShapesArray[0].width = 3;
00003890  257C 0000 6770          move.l    #3,16(A2)
00003894  0003 0010 
                    6771   ; // Z shape
                    6772   ; ShapesArray[1].array[0][0] = 1;
00003898  157C 0001 6773          move.b    #1,28(A2)
0000389C  001C      
                    6774   ; ShapesArray[1].array[0][1] = 1;
0000389E  157C 0001 6775          move.b    #1,28+1(A2)
000038A2  001D      
                    6776   ; ShapesArray[1].array[0][2] = 0;
000038A4  422A 001E 6777          clr.b     28+2(A2)
                    6778   ; ShapesArray[1].array[1][0] = 0;
000038A8  422A 0020 6779          clr.b     28+4(A2)
                    6780   ; ShapesArray[1].array[1][1] = 1;
000038AC  157C 0001 6781          move.b    #1,28+4+1(A2)
000038B0  0021      
                    6782   ; ShapesArray[1].array[1][2] = 1;
000038B2  157C 0001 6783          move.b    #1,28+4+2(A2)
000038B6  0022      
                    6784   ; ShapesArray[1].array[2][0] = 0;
000038B8  422A 0024 6785          clr.b     28+8(A2)
                    6786   ; ShapesArray[1].array[2][1] = 0;
000038BC  422A 0025 6787          clr.b     28+8+1(A2)
                    6788   ; ShapesArray[1].array[2][2] = 0;
000038C0  422A 0026 6789          clr.b     28+8+2(A2)
                    6790   ; ShapesArray[1].width = 3;
000038C4  257C 0000 6791          move.l    #3,44(A2)
000038C8  0003 002C 
                    6792   ; // T shape
                    6793   ; ShapesArray[2].array[0][0] = 0;
000038CC  422A 0038 6794          clr.b     56(A2)
                    6795   ; ShapesArray[2].array[0][1] = 1;
000038D0  157C 0001 6796          move.b    #1,56+1(A2)
000038D4  0039      
                    6797   ; ShapesArray[2].array[0][2] = 0;
000038D6  422A 003A 6798          clr.b     56+2(A2)
                    6799   ; ShapesArray[2].array[1][0] = 1;
000038DA  157C 0001 6800          move.b    #1,56+4(A2)
000038DE  003C      
                    6801   ; ShapesArray[2].array[1][1] = 1;
000038E0  157C 0001 6802          move.b    #1,56+4+1(A2)
000038E4  003D      
                    6803   ; ShapesArray[2].array[1][2] = 1;
000038E6  157C 0001 6804          move.b    #1,56+4+2(A2)
000038EA  003E      
                    6805   ; ShapesArray[2].array[2][0] = 0;
000038EC  422A 0040 6806          clr.b     56+8(A2)
                    6807   ; ShapesArray[2].array[2][1] = 0;
000038F0  422A 0041 6808          clr.b     56+8+1(A2)
                    6809   ; ShapesArray[2].array[2][2] = 0;
000038F4  422A 0042 6810          clr.b     56+8+2(A2)
                    6811   ; ShapesArray[2].width = 3;
000038F8  257C 0000 6812          move.l    #3,72(A2)
000038FC  0003 0048 
                    6813   ; // L shape
                    6814   ; ShapesArray[3].array[0][0] = 0;
00003900  422A 0054 6815          clr.b     84(A2)
                    6816   ; ShapesArray[3].array[0][1] = 0;
00003904  422A 0055 6817          clr.b     84+1(A2)
                    6818   ; ShapesArray[3].array[0][2] = 1;
00003908  157C 0001 6819          move.b    #1,84+2(A2)
0000390C  0056      
                    6820   ; ShapesArray[3].array[1][0] = 1;
0000390E  157C 0001 6821          move.b    #1,84+4(A2)
00003912  0058      
                    6822   ; ShapesArray[3].array[1][1] = 1;
00003914  157C 0001 6823          move.b    #1,84+4+1(A2)
00003918  0059      
                    6824   ; ShapesArray[3].array[1][2] = 1;
0000391A  157C 0001 6825          move.b    #1,84+4+2(A2)
0000391E  005A      
                    6826   ; ShapesArray[3].array[2][0] = 0;
00003920  422A 005C 6827          clr.b     84+8(A2)
                    6828   ; ShapesArray[3].array[2][1] = 0;
00003924  422A 005D 6829          clr.b     84+8+1(A2)
                    6830   ; ShapesArray[3].array[2][2] = 0;
00003928  422A 005E 6831          clr.b     84+8+2(A2)
                    6832   ; ShapesArray[3].width = 3;
0000392C  257C 0000 6833          move.l    #3,100(A2)
00003930  0003 0064 
                    6834   ; // flipped L shape
                    6835   ; ShapesArray[4].array[0][0] = 1;
00003934  157C 0001 6836          move.b    #1,112(A2)
00003938  0070      
                    6837   ; ShapesArray[4].array[0][1] = 0;
0000393A  422A 0071 6838          clr.b     112+1(A2)
                    6839   ; ShapesArray[4].array[0][2] = 0;
0000393E  422A 0072 6840          clr.b     112+2(A2)
                    6841   ; ShapesArray[4].array[1][0] = 1;
00003942  157C 0001 6842          move.b    #1,112+4(A2)
00003946  0074      
                    6843   ; ShapesArray[4].array[1][1] = 1;
00003948  157C 0001 6844          move.b    #1,112+4+1(A2)
0000394C  0075      
                    6845   ; ShapesArray[4].array[1][2] = 1;
0000394E  157C 0001 6846          move.b    #1,112+4+2(A2)
00003952  0076      
                    6847   ; ShapesArray[4].array[2][0] = 0;
00003954  422A 0078 6848          clr.b     112+8(A2)
                    6849   ; ShapesArray[4].array[2][1] = 0;
00003958  422A 0079 6850          clr.b     112+8+1(A2)
                    6851   ; ShapesArray[4].array[2][2] = 0;
0000395C  422A 007A 6852          clr.b     112+8+2(A2)
                    6853   ; ShapesArray[4].width = 3;
00003960  257C 0000 6854          move.l    #3,128(A2)
00003964  0003 0080 
                    6855   ; // square shape
                    6856   ; ShapesArray[5].array[0][0] = 1;
00003968  157C 0001 6857          move.b    #1,140(A2)
0000396C  008C      
                    6858   ; ShapesArray[5].array[0][1] = 1;
0000396E  157C 0001 6859          move.b    #1,140+1(A2)
00003972  008D      
                    6860   ; ShapesArray[5].array[1][0] = 1;
00003974  157C 0001 6861          move.b    #1,140+4(A2)
00003978  0090      
                    6862   ; ShapesArray[5].array[1][1] = 1;
0000397A  157C 0001 6863          move.b    #1,140+4+1(A2)
0000397E  0091      
                    6864   ; ShapesArray[5].width = 2;
00003980  257C 0000 6865          move.l    #2,156(A2)
00003984  0002 009C 
                    6866   ; // long bar shape
                    6867   ; ShapesArray[6].array[0][0] = 0;
00003988  422A 00A8 6868          clr.b     168(A2)
                    6869   ; ShapesArray[6].array[0][1] = 0;
0000398C  422A 00A9 6870          clr.b     168+1(A2)
                    6871   ; ShapesArray[6].array[0][2] = 0;
00003990  422A 00AA 6872          clr.b     168+2(A2)
                    6873   ; ShapesArray[6].array[0][3] = 0;
00003994  422A 00AB 6874          clr.b     168+3(A2)
                    6875   ; ShapesArray[6].array[1][0] = 1;
00003998  157C 0001 6876          move.b    #1,168+4(A2)
0000399C  00AC      
                    6877   ; ShapesArray[6].array[1][1] = 1;
0000399E  157C 0001 6878          move.b    #1,168+4+1(A2)
000039A2  00AD      
                    6879   ; ShapesArray[6].array[1][2] = 1;
000039A4  157C 0001 6880          move.b    #1,168+4+2(A2)
000039A8  00AE      
                    6881   ; ShapesArray[6].array[1][3] = 1;
000039AA  157C 0001 6882          move.b    #1,168+4+3(A2)
000039AE  00AF      
                    6883   ; ShapesArray[6].array[2][0] = 0;
000039B0  422A 00B0 6884          clr.b     168+8(A2)
                    6885   ; ShapesArray[6].array[2][1] = 0;
000039B4  422A 00B1 6886          clr.b     168+8+1(A2)
                    6887   ; ShapesArray[6].array[2][2] = 0;
000039B8  422A 00B2 6888          clr.b     168+8+2(A2)
                    6889   ; ShapesArray[6].array[2][3] = 0;
000039BC  422A 00B3 6890          clr.b     168+8+3(A2)
                    6891   ; ShapesArray[6].array[3][0] = 0;
000039C0  422A 00B4 6892          clr.b     168+12(A2)
                    6893   ; ShapesArray[6].array[3][1] = 0;
000039C4  422A 00B5 6894          clr.b     168+12+1(A2)
                    6895   ; ShapesArray[6].array[3][2] = 0;
000039C8  422A 00B6 6896          clr.b     168+12+2(A2)
                    6897   ; ShapesArray[6].array[3][3] = 0;
000039CC  422A 00B7 6898          clr.b     168+12+3(A2)
                    6899   ; ShapesArray[6].width = 4;
000039D0  257C 0000 6900          move.l    #4,184(A2)
000039D4  0004 00B8 
                    6901   ; set_color(OCTL_TETRIS_DEFAULT);
000039D8  4878 00A2 6902          pea       162
000039DC  4EB8 2E32 6903          jsr       _set_color
000039E0  584F      6904          addq.w    #4,A7
                    6905   ; set_vga_control_reg(OCTL_TETRIS_DEFAULT);
000039E2  4878 00A2 6906          pea       162
000039E6  4EB8 2E04 6907          jsr       _set_vga_control_reg
000039EA  584F      6908          addq.w    #4,A7
                    6909   ; tetris_score = 0;
000039EC  42B9 0803 6910          clr.l     _tetris_score.L
000039F0  07B0      
                    6911   ; initTetris_Speed();
000039F2  4EB8 3754 6912          jsr       _initTetris_Speed
                    6913   ; clear_screen();
000039F6  4EB8 2CA4 6914          jsr       _clear_screen
                    6915   ; tetris_timer = clock();
000039FA  4EB8 2E52 6916          jsr       _clock
000039FE  23C0 0803 6917          move.l    D0,_tetris_timer.L
00003A02  07B6      
                    6918   ; SetNewRandomShape();
00003A04  4EB8 3236 6919          jsr       _SetNewRandomShape
                    6920   ; PrintTable();
00003A08  4EB8 349A 6921          jsr       _PrintTable
                    6922   ; tetris_mainloop();
00003A0C  4EB8 376A 6923          jsr       _tetris_mainloop
                    6924   ; gameOver();
00003A10  4EB8 2FCA 6925          jsr       _gameOver
                    6926   ; for (i = 0; i < TETRIS_ROWS; i++)
00003A14  4283      6927          clr.l     D3
                    6928   tetris_main_10:
00003A16  0C83 0000 6929          cmp.l     #20,D3
00003A1A  0014      
00003A1C  6C00 0044 6930          bge       tetris_main_12
                    6931   ; {
                    6932   ; for (j = 0; j < TETRIS_COLS; j++)
00003A20  4282      6933          clr.l     D2
                    6934   tetris_main_13:
00003A22  0C82 0000 6935          cmp.l     #15,D2
00003A26  000F      
00003A28  6C2A      6936          bge.s     tetris_main_15
                    6937   ; {
                    6938   ; if (Table[i][j])
00003A2A  2003      6939          move.l    D3,D0
00003A2C  C1FC 000F 6940          muls      #15,D0
00003A30  41F4 0800 6941          lea       0(A4,D0.L),A0
00003A34  4A30 2800 6942          tst.b     0(A0,D2.L)
00003A38  670C      6943          beq.s     tetris_main_16
                    6944   ; {
                    6945   ; printf("#");
00003A3A  4879 0000 6946          pea       @tetris_13.L
00003A3E  51D6      
00003A40  4E93      6947          jsr       (A3)
00003A42  584F      6948          addq.w    #4,A7
00003A44  600A      6949          bra.s     tetris_main_17
                    6950   tetris_main_16:
                    6951   ; }
                    6952   ; else
                    6953   ; {
                    6954   ; printf(".");
00003A46  4879 0000 6955          pea       @tetris_15.L
00003A4A  51E0      
00003A4C  4E93      6956          jsr       (A3)
00003A4E  584F      6957          addq.w    #4,A7
                    6958   tetris_main_17:
00003A50  5282      6959          addq.l    #1,D2
00003A52  60CE      6960          bra       tetris_main_13
                    6961   tetris_main_15:
                    6962   ; }
                    6963   ; }
                    6964   ; printf("\n");
00003A54  4879 0000 6965          pea       @tetris_17.L
00003A58  51EA      
00003A5A  4E93      6966          jsr       (A3)
00003A5C  584F      6967          addq.w    #4,A7
00003A5E  5283      6968          addq.l    #1,D3
00003A60  60B4      6969          bra       tetris_main_10
                    6970   tetris_main_12:
                    6971   ; }
                    6972   ; printf("\nGame over!\n");
00003A62  4879 0000 6973          pea       @tetris_21.L
00003A66  520E      
00003A68  4E93      6974          jsr       (A3)
00003A6A  584F      6975          addq.w    #4,A7
                    6976   ; sprintf(score_str, "\nScore: %d\n", tetris_score);
00003A6C  2F39 0803 6977          move.l    _tetris_score.L,-(A7)
00003A70  07B0      
00003A72  4879 0000 6978          pea       @tetris_19.L
00003A76  51F6      
00003A78  486E FF80 6979          pea       -128(A6)
00003A7C  4EB9 0000 6980          jsr       _sprintf
00003A80  3C82      
00003A82  DEFC 000C 6981          add.w     #12,A7
                    6982   ; printf(score_str);
00003A86  486E FF80 6983          pea       -128(A6)
00003A8A  4E93      6984          jsr       (A3)
00003A8C  584F      6985          addq.w    #4,A7
                    6986   ; return 0;
00003A8E  4280      6987          clr.l     D0
00003A90  4CDF 1C0C 6988          movem.l   (A7)+,D2/D3/A2/A3/A4
00003A94  4E5E      6989          unlk      A6
00003A96  4E75      6990          rts
                    6991   ; }
                    6992   _strcpy:
00003A98  206F 0004 6993          move.l    (4,A7),A0
00003A9C  226F 0008 6994          move.l    (8,A7),A1
00003AA0  2008      6995          move.l    A0,D0
                    6996   strcpy_1:
00003AA2  10D9      6997          move.b    (A1)+,(A0)+
00003AA4  66FC      6998          bne       strcpy_1
00003AA6  4E75      6999          rts
                    7000   ULDIV:
00003AA8  4E56 0000 7001          link    A6,#0
00003AAC  48E7 C000 7002          movem.l D0/D1,-(A7)
00003AB0  222E 0008 7003          move.l  8(A6),D1
00003AB4  202E 000C 7004          move.l  12(A6),D0
00003AB8  6036      7005          bra.s   ldiv_3
                    7006   LDIV:
00003ABA  4E56 0000 7007          link    A6,#0
00003ABE  48E7 C000 7008          movem.l D0/D1,-(A7)
00003AC2  222E 0008 7009          move.l  8(A6),D1
00003AC6  202E 000C 7010          move.l  12(A6),D0
00003ACA  4A80      7011          tst.l   D0
00003ACC  6A0E      7012          bpl.s   ldiv_1
00003ACE  4480      7013          neg.l   D0
00003AD0  4A81      7014          tst.l   D1
00003AD2  6A14      7015          bpl.s   ldiv_2
00003AD4  4481      7016          neg.l   D1
00003AD6  612A      7017          bsr.s   dodiv
00003AD8  4481      7018          neg.l   D1
00003ADA  6016      7019          bra.s   ldiv_4
                    7020   ldiv_1:
00003ADC  4A81      7021          tst.l   D1
00003ADE  6A10      7022          bpl.s   ldiv_3
00003AE0  4481      7023          neg.l   D1
00003AE2  611E      7024          bsr.s   dodiv
00003AE4  4480      7025          neg.l   D0
00003AE6  600A      7026          bra.s   ldiv_4
                    7027   ldiv_2:
00003AE8  6118      7028          bsr.s   dodiv
00003AEA  4480      7029          neg.l   D0
00003AEC  4481      7030          neg.l   D1
00003AEE  6002      7031          bra.s   ldiv_4
                    7032   ldiv_3:
00003AF0  6110      7033          bsr.s   dodiv
                    7034   ldiv_4:
00003AF2  2D40 0008 7035          move.l  D0,8(A6)
00003AF6  2D41 000C 7036          move.l  D1,12(A6)
00003AFA  4CDF 0003 7037          movem.l (A7)+,D0/D1
00003AFE  4E5E      7038          unlk    A6
00003B00  4E75      7039          rts
                    7040   dodiv:
00003B02  0C81 0000 7041          cmpi.l  #$FFFF,D1
00003B06  FFFF      
00003B08  6236      7042          bhi.s   dodiv_2
00003B0A  0C80 0000 7043          cmpi.l  #$FFFF,D0
00003B0E  FFFF      
00003B10  6210      7044          bhi.s   dodiv_1
00003B12  80C1      7045          divu    D1,D0
00003B14  2200      7046          move.l  D0,D1
00003B16  4241      7047          clr.w   D1
00003B18  4841      7048          swap    D1
00003B1A  0280 0000 7049          andi.l  #$FFFF,D0
00003B1E  FFFF      
00003B20  4E75      7050          rts
                    7051   dodiv_1:
00003B22  48A7 A000 7052          movem.w D0/D2,-(A7)
00003B26  4240      7053          clr.w   D0
00003B28  4840      7054          swap    D0
00003B2A  80C1      7055          divu    D1,D0
00003B2C  3400      7056          move.w  D0,D2
00003B2E  301F      7057          move.w  (A7)+,D0
00003B30  80C1      7058          divu    D1,D0
00003B32  4840      7059          swap    D0
00003B34  4281      7060          clr.l   D1
00003B36  3200      7061          move.w  D0,D1
00003B38  3002      7062          move.w  D2,D0
00003B3A  4840      7063          swap    D0
00003B3C  341F      7064          move.w  (A7)+,D2
00003B3E  4E75      7065          rts
                    7066   dodiv_2:
00003B40  48E7 3800 7067          movem.l D2/D3/D4,-(A7)
00003B44  2401      7068          move.l  D1,D2
00003B46  4242      7069          clr.w   D2
00003B48  4842      7070          swap    D2
00003B4A  5282      7071          addq.l  #1,D2
00003B4C  2600      7072          move.l  D0,D3
00003B4E  2801      7073          move.l  D1,D4
00003B50  2202      7074          move.l  D2,D1
00003B52  61CE      7075          bsr.s   dodiv_1
00003B54  2204      7076          move.l  D4,D1
00003B56  82C2      7077          divu    D2,D1
00003B58  80C1      7078          divu    D1,D0
00003B5A  0280 0000 7079          andi.l  #$FFFF,D0
00003B5E  FFFF      
                    7080   dodiv_3:
00003B60  2204      7081          move.l  D4,D1
00003B62  2404      7082          move.l  D4,D2
00003B64  4842      7083          swap    D2
00003B66  C2C0      7084          mulu    D0,D1
00003B68  C4C0      7085          mulu    D0,D2
00003B6A  4842      7086          swap    D2
00003B6C  D282      7087          add.l   D2,D1
00003B6E  9283      7088          sub.l   D3,D1
00003B70  620A      7089          bhi.s   dodiv_4
00003B72  4481      7090          neg.l   D1
00003B74  B881      7091          cmp.l   D1,D4
00003B76  6208      7092          bhi.s   dodiv_5
00003B78  5280      7093          addq.l  #1,D0
00003B7A  60E4      7094          bra.s   dodiv_3
                    7095   dodiv_4:
00003B7C  5380      7096          subq.l  #1,D0
00003B7E  60E0      7097          bra.s   dodiv_3
                    7098   dodiv_5:
00003B80  4CDF 001C 7099          movem.l (A7)+,D2/D3/D4
00003B84  4E75      7100          rts
                    7101   ULMUL:
00003B86  4E56 0000 7102          link    A6,#0
00003B8A  48E7 C000 7103          movem.l D0/D1,-(A7)
00003B8E  222E 0008 7104          move.l  8(A6),D1
00003B92  202E 000C 7105          move.l  12(A6),D0
00003B96  602C      7106          bra.s   lmul_3
                    7107   LMUL:
00003B98  4E56 0000 7108          link    A6,#0
00003B9C  48E7 C000 7109          movem.l D0/D1,-(A7)
00003BA0  222E 0008 7110          move.l  8(A6),D1
00003BA4  202E 000C 7111          move.l  12(A6),D0
00003BA8  4A80      7112          tst.l   D0
00003BAA  6A0A      7113          bpl.s   lmul_1
00003BAC  4480      7114          neg.l   D0
00003BAE  4A81      7115          tst.l   D1
00003BB0  6A0A      7116          bpl.s   lmul_2
00003BB2  4481      7117          neg.l   D1
00003BB4  600E      7118          bra.s   lmul_3
                    7119   lmul_1:
00003BB6  4A81      7120          tst.l   D1
00003BB8  6A0A      7121          bpl.s   lmul_3
00003BBA  4481      7122          neg.l   D1
                    7123   lmul_2:
00003BBC  6114      7124          bsr.s   domul
00003BBE  4481      7125          neg.l   D1
00003BC0  4080      7126          negx.l  D0
00003BC2  6002      7127          bra.s   lmul_4
                    7128   lmul_3:
00003BC4  610C      7129          bsr.s   domul
                    7130   lmul_4:
00003BC6  2D41 0008 7131          move.l  D1,8(A6)
00003BCA  4CDF 0003 7132          movem.l (A7)+,D0/D1
00003BCE  4E5E      7133          unlk    A6
00003BD0  4E75      7134          rts
                    7135   domul:
00003BD2  0C81 0000 7136          cmpi.l  #$FFFF,D1
00003BD6  FFFF      
00003BD8  620C      7137          bhi.s   domul_1
00003BDA  0C80 0000 7138          cmpi.l  #$FFFF,D0
00003BDE  FFFF      
00003BE0  620E      7139          bhi.s   domul_2
00003BE2  C2C0      7140          mulu    D0,D1
00003BE4  4E75      7141          rts
                    7142   domul_1:
00003BE6  0C80 0000 7143          cmpi.l  #$FFFF,D0
00003BEA  FFFF      
00003BEC  6218      7144          bhi.s   domul_4
00003BEE  6002      7145          bra.s   domul_3
                    7146   domul_2
00003BF0  C141      7147          exg     D0,D1
                    7148   domul_3:
00003BF2  2F02      7149          move.l  D2,-(A7)
00003BF4  2401      7150          move.l  D1,D2
00003BF6  4842      7151          swap    D2
00003BF8  C2C0      7152          mulu    D0,D1
00003BFA  C4C0      7153          mulu    D0,D2
00003BFC  4842      7154          swap    D2
00003BFE  4242      7155          clr.w   D2
00003C00  D282      7156          add.l   D2,D1
00003C02  241F      7157          move.l  (A7)+,D2
00003C04  4E75      7158          rts
                    7159   domul_4:
00003C06  48E7 3000 7160          movem.l D2/D3,-(A7)
00003C0A  2401      7161          move.l  D1,D2
00003C0C  2601      7162          move.l  D1,D3
00003C0E  C2C0      7163          mulu    D0,D1
00003C10  4842      7164          swap    D2
00003C12  C4C0      7165          mulu    D0,D2
00003C14  4840      7166          swap    D0
00003C16  C6C0      7167          mulu    D0,D3
00003C18  D483      7168          add.l   D3,D2
00003C1A  4842      7169          swap    D2
00003C1C  4242      7170          clr.w   D2
00003C1E  D282      7171          add.l   D2,D1
00003C20  4CDF 000C 7172          movem.l (A7)+,D2/D3
00003C24  4E75      7173          rts
                    7174   _putch:
00003C26  4E56 0000 7175          link      A6,#0
00003C2A  48E7 2000 7176          movem.l   D2,-(A7)
00003C2E  242E 0008 7177          move.l    8(A6),D2
00003C32  0C82 0000 7178          cmp.l     #10,D2
00003C36  000A      
00003C38  660A      7179          bne.s     putch_1
00003C3A  4878 000D 7180          pea       13
00003C3E  6100 CDBA 7181          bsr       __putch
00003C42  584F      7182          addq.w    #4,A7
                    7183   putch_1:
00003C44  2F02      7184          move.l    D2,-(A7)
00003C46  6100 CDB2 7185          bsr       __putch
00003C4A  584F      7186          addq.w    #4,A7
00003C4C  2002      7187          move.l    D2,D0
00003C4E  4CDF 0004 7188          movem.l   (A7)+,D2
00003C52  4E5E      7189          unlk      A6
00003C54  4E75      7190          rts
                    7191   _tolower:
00003C56  4E56 0000 7192          link      A6,#0
00003C5A  48E7 2000 7193          movem.l   D2,-(A7)
00003C5E  242E 0008 7194          move.l    8(A6),D2
00003C62  0C82 0000 7195          cmp.l     #65,D2
00003C66  0041      
00003C68  6D0E      7196          blt.s     tolower_1
00003C6A  0C82 0000 7197          cmp.l     #90,D2
00003C6E  005A      
00003C70  6E06      7198          bgt.s     tolower_1
00003C72  84BC 0000 7199          or.l      #32,D2
00003C76  0020      
                    7200   tolower_1:
00003C78  2002      7201          move.l    D2,D0
00003C7A  4CDF 0004 7202          movem.l   (A7)+,D2
00003C7E  4E5E      7203          unlk      A6
00003C80  4E75      7204          rts
                    7205   _sprintf:
00003C82  4E56 FFFC 7206          link      A6,#-4
00003C86  48E7 2000 7207          movem.l   D2,-(A7)
00003C8A  41EE 000C 7208          lea       12(A6),A0
00003C8E  5848      7209          addq.w    #4,A0
00003C90  2408      7210          move.l    A0,D2
00003C92  2F02      7211          move.l    D2,-(A7)
00003C94  2F2E 000C 7212          move.l    12(A6),-(A7)
00003C98  2F2E 0008 7213          move.l    8(A6),-(A7)
00003C9C  6100 017A 7214          bsr       _vsprintf
00003CA0  DEFC 000C 7215          add.w     #12,A7
00003CA4  2D40 FFFC 7216          move.l    D0,-4(A6)
00003CA8  4282      7217          clr.l     D2
00003CAA  202E FFFC 7218          move.l    -4(A6),D0
00003CAE  4CDF 0004 7219          movem.l   (A7)+,D2
00003CB2  4E5E      7220          unlk      A6
00003CB4  4E75      7221          rts
                    7222   _strcat:
00003CB6  206F 0004 7223          move.l    (4,A7),A0	
00003CBA  226F 0008 7224          move.l    (8,A7),A1	
00003CBE  2008      7225          move.l    A0,D0		
                    7226   strcat_0:
00003CC0  4A18      7227          tst.b     (A0)+
00003CC2  66FC      7228          bne       strcat_0
00003CC4  5348      7229          subq      #1,A0
                    7230   strcat_1:
00003CC6  10D9      7231          move.b    (A1)+,(A0)+
00003CC8  66FC      7232          bne       strcat_1
00003CCA  4E75      7233          rts
                    7234   _toupper:
00003CCC  4E56 0000 7235          link      A6,#0
00003CD0  48E7 2000 7236          movem.l   D2,-(A7)
00003CD4  242E 0008 7237          move.l    8(A6),D2
00003CD8  0C82 0000 7238          cmp.l     #97,D2
00003CDC  0061      
00003CDE  6D0E      7239          blt.s     toupper_1
00003CE0  0C82 0000 7240          cmp.l     #122,D2
00003CE4  007A      
00003CE6  6E06      7241          bgt.s     toupper_1
00003CE8  C4BC 0000 7242          and.l     #95,D2
00003CEC  005F      
                    7243   toupper_1:
00003CEE  2002      7244          move.l    D2,D0
00003CF0  4CDF 0004 7245          movem.l   (A7)+,D2
00003CF4  4E5E      7246          unlk      A6
00003CF6  4E75      7247          rts
                    7248   _printf:
00003CF8  4E56 FFFC 7249          link      A6,#-4
00003CFC  48E7 2000 7250          movem.l   D2,-(A7)
00003D00  41EE 0008 7251          lea       8(A6),A0
00003D04  5848      7252          addq.w    #4,A0
00003D06  2408      7253          move.l    A0,D2
00003D08  2F02      7254          move.l    D2,-(A7)
00003D0A  2F2E 0008 7255          move.l    8(A6),-(A7)
00003D0E  42A7      7256          clr.l     -(A7)
00003D10  6100 0106 7257          bsr       _vsprintf
00003D14  DEFC 000C 7258          add.w     #12,A7
00003D18  2D40 FFFC 7259          move.l    D0,-4(A6)
00003D1C  4282      7260          clr.l     D2
00003D1E  202E FFFC 7261          move.l    -4(A6),D0
00003D22  4CDF 0004 7262          movem.l   (A7)+,D2
00003D26  4E5E      7263          unlk      A6
00003D28  4E75      7264          rts
                    7265   _getch:
00003D2A  48E7 2000 7266          movem.l   D2,-(A7)
00003D2E  2439 0803 7267          move.l    __ungetbuf,D2
00003D32  00C0      
00003D34  2039 0803 7268          move.l    __ungetbuf,D0
00003D38  00C0      
00003D3A  0C80 FFFF 7269          cmp.l     #-1,D0
00003D3E  FFFF      
00003D40  670C      7270          beq.s     getch_1
00003D42  23FC FFFF 7271          move.l    #-1,__ungetbuf
00003D46  FFFF 0803 
00003D4A  00C0      
00003D4C  6010      7272          bra.s     getch_3
                    7273   getch_1:
00003D4E  6100 CCD6 7274          bsr       __getch
00003D52  2400      7275          move.l    D0,D2
00003D54  0C80 0000 7276          cmp.l     #13,D0
00003D58  000D      
00003D5A  6602      7277          bne.s     getch_3
00003D5C  740A      7278          moveq     #10,D2
                    7279   getch_3:
00003D5E  2002      7280          move.l    D2,D0
00003D60  4CDF 0004 7281          movem.l   (A7)+,D2
00003D64  4E75      7282          rts
                    7283   @vsprintf_copy:
00003D66  4E56 0000 7284          link      A6,#0
00003D6A  206E 0008 7285          move.l    8(A6),A0
00003D6E  4A90      7286          tst.l     (A0)
00003D70  6710      7287          beq.s     @vsprintf_copy_1
00003D72  202E 000C 7288          move.l    12(A6),D0
00003D76  206E 0008 7289          move.l    8(A6),A0
00003D7A  2250      7290          move.l    (A0),A1
00003D7C  5290      7291          addq.l    #1,(A0)
00003D7E  1280      7292          move.b    D0,(A1)
00003D80  600A      7293          bra.s     @vsprintf_copy_2
                    7294   @vsprintf_copy_1:
00003D82  2F2E 000C 7295          move.l    12(A6),-(A7)
00003D86  6100 FE9E 7296          bsr       _putch
00003D8A  584F      7297          addq.w    #4,A7
                    7298   @vsprintf_copy_2:
00003D8C  4E5E      7299          unlk      A6
00003D8E  4E75      7300          rts
                    7301   @vsprintf_getval:
00003D90  4E56 0000 7302          link      A6,#0
00003D94  48E7 3000 7303          movem.l   D2/D3,-(A7)
00003D98  242E 0008 7304          move.l    8(A6),D2
00003D9C  4283      7305          clr.l     D3
00003D9E  2042      7306          move.l    D2,A0
00003DA0  2050      7307          move.l    (A0),A0
00003DA2  1010      7308          move.b    (A0),D0
00003DA4  4880      7309          ext.w     D0
00003DA6  48C0      7310          ext.l     D0
00003DA8  0C80 0000 7311          cmp.l     #42,D0
00003DAC  002A      
00003DAE  6612      7312          bne.s     @vsprintf_getval_1
00003DB0  206E 000C 7313          move.l    12(A6),A0
00003DB4  2250      7314          move.l    (A0),A1
00003DB6  5890      7315          addq.l    #4,(A0)
00003DB8  2611      7316          move.l    (A1),D3
00003DBA  2042      7317          move.l    D2,A0
00003DBC  5290      7318          addq.l    #1,(A0)
00003DBE  6000 004E 7319          bra       @vsprintf_getval_5
                    7320   @vsprintf_getval_1:
00003DC2  2042      7321          move.l    D2,A0
00003DC4  2050      7322          move.l    (A0),A0
00003DC6  1010      7323          move.b    (A0),D0
00003DC8  4880      7324          ext.w     D0
00003DCA  48C0      7325          ext.l     D0
00003DCC  0C80 0000 7326          cmp.l     #48,D0
00003DD0  0030      
00003DD2  6D00 003A 7327          blt       @vsprintf_getval_5
00003DD6  2042      7328          move.l    D2,A0
00003DD8  2050      7329          move.l    (A0),A0
00003DDA  1010      7330          move.b    (A0),D0
00003DDC  4880      7331          ext.w     D0
00003DDE  48C0      7332          ext.l     D0
00003DE0  0C80 0000 7333          cmp.l     #57,D0
00003DE4  0039      
00003DE6  6E26      7334          bgt.s     @vsprintf_getval_5
00003DE8  2F03      7335          move.l    D3,-(A7)
00003DEA  4878 000A 7336          pea       10
00003DEE  6100 FDA8 7337          bsr       LMUL
00003DF2  2017      7338          move.l    (A7),D0
00003DF4  504F      7339          addq.w    #8,A7
00003DF6  2042      7340          move.l    D2,A0
00003DF8  2250      7341          move.l    (A0),A1
00003DFA  5290      7342          addq.l    #1,(A0)
00003DFC  1211      7343          move.b    (A1),D1
00003DFE  4881      7344          ext.w     D1
00003E00  48C1      7345          ext.l     D1
00003E02  D081      7346          add.l     D1,D0
00003E04  0480 0000 7347          sub.l     #48,D0
00003E08  0030      
00003E0A  2600      7348          move.l    D0,D3
00003E0C  60B4      7349          bra       @vsprintf_getval_1
                    7350   @vsprintf_getval_5:
00003E0E  2003      7351          move.l    D3,D0
00003E10  4CDF 000C 7352          movem.l   (A7)+,D2/D3
00003E14  4E5E      7353          unlk      A6
00003E16  4E75      7354          rts
                    7355   _vsprintf:
00003E18  4E56 FFCC 7356          link      A6,#-52
00003E1C  48E7 3F3C 7357          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00003E20  45EE 0008 7358          lea       8(A6),A2
00003E24  47F8 3D66 7359          lea       @vsprintf_copy,A3
00003E28  49F9 0000 7360          lea       _ultoa,A4
00003E2C  4570      
00003E2E  4286      7361          clr.l     D6
                    7362   vsprintf_1:
00003E30  206E 000C 7363          move.l    12(A6),A0
00003E34  4A10      7364          tst.b     (A0)
00003E36  6700 0624 7365          beq       vsprintf_3
00003E3A  206E 000C 7366          move.l    12(A6),A0
00003E3E  1010      7367          move.b    (A0),D0
00003E40  4880      7368          ext.w     D0
00003E42  48C0      7369          ext.l     D0
00003E44  0C80 0000 7370          cmp.l     #37,D0
00003E48  0025      
00003E4A  671C      7371          beq.s     vsprintf_4
00003E4C  206E 000C 7372          move.l    12(A6),A0
00003E50  52AE 000C 7373          addq.l    #1,12(A6)
00003E54  1210      7374          move.b    (A0),D1
00003E56  4881      7375          ext.w     D1
00003E58  48C1      7376          ext.l     D1
00003E5A  2F01      7377          move.l    D1,-(A7)
00003E5C  2F0A      7378          move.l    A2,-(A7)
00003E5E  4E93      7379          jsr       (A3)
00003E60  504F      7380          addq.w    #8,A7
00003E62  5286      7381          addq.l    #1,D6
00003E64  6000 05F2 7382          bra       vsprintf_2
                    7383   vsprintf_4:
00003E68  52AE 000C 7384          addq.l    #1,12(A6)
00003E6C  422E FFD3 7385          clr.b     -45(A6)
00003E70  422E FFD2 7386          clr.b     -46(A6)
00003E74  422E FFD0 7387          clr.b     -48(A6)
00003E78  422E FFCF 7388          clr.b     -49(A6)
00003E7C  422E FFCE 7389          clr.b     -50(A6)
00003E80  422E FFCD 7390          clr.b     -51(A6)
00003E84  42AE FFFC 7391          clr.l     -4(A6)
00003E88  7AFF      7392          moveq     #-1,D5
00003E8A  41EE FFDC 7393          lea       -36(A6),A0
00003E8E  2608      7394          move.l    A0,D3
00003E90  2408      7395          move.l    A0,D2
                    7396   vsprintf_6:
00003E92  206E 000C 7397          move.l    12(A6),A0
00003E96  1010      7398          move.b    (A0),D0
00003E98  4880      7399          ext.w     D0
00003E9A  48C0      7400          ext.l     D0
00003E9C  0C80 0000 7401          cmp.l     #43,D0
00003EA0  002B      
00003EA2  6730      7402          beq.s     vsprintf_12
00003EA4  6E18      7403          bgt.s     vsprintf_15
00003EA6  0C80 0000 7404          cmp.l     #35,D0
00003EAA  0023      
00003EAC  6700 003E 7405          beq       vsprintf_14
00003EB0  6E00 0046 7406          bgt       vsprintf_9
00003EB4  0C80 0000 7407          cmp.l     #32,D0
00003EB8  0020      
00003EBA  6724      7408          beq.s     vsprintf_13
00003EBC  603A      7409          bra.s     vsprintf_9
                    7410   vsprintf_15:
00003EBE  0C80 0000 7411          cmp.l     #45,D0
00003EC2  002D      
00003EC4  6702      7412          beq.s     vsprintf_11
00003EC6  6030      7413          bra.s     vsprintf_9
                    7414   vsprintf_11:
00003EC8  1D7C 0001 7415          move.b    #1,-51(A6)
00003ECC  FFCD      
00003ECE  52AE 000C 7416          addq.l    #1,12(A6)
00003ED2  6026      7417          bra.s     vsprintf_7
                    7418   vsprintf_12:
00003ED4  1D7C 0001 7419          move.b    #1,-50(A6)
00003ED8  FFCE      
00003EDA  52AE 000C 7420          addq.l    #1,12(A6)
00003EDE  601A      7421          bra.s     vsprintf_7
                    7422   vsprintf_13:
00003EE0  1D7C 0001 7423          move.b    #1,-49(A6)
00003EE4  FFCF      
00003EE6  52AE 000C 7424          addq.l    #1,12(A6)
00003EEA  600E      7425          bra.s     vsprintf_7
                    7426   vsprintf_14:
00003EEC  1D7C 0001 7427          move.b    #1,-48(A6)
00003EF0  FFD0      
00003EF2  52AE 000C 7428          addq.l    #1,12(A6)
00003EF6  6002      7429          bra.s     vsprintf_7
                    7430   vsprintf_9:
00003EF8  6002      7431          bra.s     vsprintf_8
                    7432   vsprintf_7:
00003EFA  6096      7433          bra       vsprintf_6
                    7434   vsprintf_8:
00003EFC  206E 000C 7435          move.l    12(A6),A0
00003F00  1010      7436          move.b    (A0),D0
00003F02  4880      7437          ext.w     D0
00003F04  48C0      7438          ext.l     D0
00003F06  0C80 0000 7439          cmp.l     #48,D0
00003F0A  0030      
00003F0C  660A      7440          bne.s     vsprintf_16
00003F0E  52AE 000C 7441          addq.l    #1,12(A6)
00003F12  1D7C 0001 7442          move.b    #1,-46(A6)
00003F16  FFD2      
                    7443   vsprintf_16:
00003F18  486E 0010 7444          pea       16(A6)
00003F1C  486E 000C 7445          pea       12(A6)
00003F20  6100 FE6E 7446          bsr       @vsprintf_getval
00003F24  504F      7447          addq.w    #8,A7
00003F26  2A40      7448          move.l    D0,A5
00003F28  206E 000C 7449          move.l    12(A6),A0
00003F2C  1010      7450          move.b    (A0),D0
00003F2E  4880      7451          ext.w     D0
00003F30  48C0      7452          ext.l     D0
00003F32  0C80 0000 7453          cmp.l     #46,D0
00003F36  002E      
00003F38  6614      7454          bne.s     vsprintf_18
00003F3A  52AE 000C 7455          addq.l    #1,12(A6)
00003F3E  486E 0010 7456          pea       16(A6)
00003F42  486E 000C 7457          pea       12(A6)
00003F46  6100 FE48 7458          bsr       @vsprintf_getval
00003F4A  504F      7459          addq.w    #8,A7
00003F4C  2A00      7460          move.l    D0,D5
                    7461   vsprintf_18:
00003F4E  206E 000C 7462          move.l    12(A6),A0
00003F52  1010      7463          move.b    (A0),D0
00003F54  4880      7464          ext.w     D0
00003F56  48C0      7465          ext.l     D0
00003F58  0C80 0000 7466          cmp.l     #108,D0
00003F5C  006C      
00003F5E  660A      7467          bne.s     vsprintf_20
00003F60  52AE 000C 7468          addq.l    #1,12(A6)
00003F64  1D7C 0001 7469          move.b    #1,-45(A6)
00003F68  FFD3      
                    7470   vsprintf_20:
00003F6A  206E 000C 7471          move.l    12(A6),A0
00003F6E  1010      7472          move.b    (A0),D0
00003F70  4880      7473          ext.w     D0
00003F72  48C0      7474          ext.l     D0
00003F74  0C80 0000 7475          cmp.l     #111,D0
00003F78  006F      
00003F7A  6700 00D4 7476          beq       vsprintf_27
00003F7E  6E34      7477          bgt.s     vsprintf_33
00003F80  0C80 0000 7478          cmp.l     #100,D0
00003F84  0064      
00003F86  6700 0054 7479          beq       vsprintf_24
00003F8A  6E1C      7480          bgt.s     vsprintf_34
00003F8C  0C80 0000 7481          cmp.l     #99,D0
00003F90  0063      
00003F92  6700 012C 7482          beq       vsprintf_30
00003F96  6E00 016A 7483          bgt       vsprintf_22
00003F9A  0C80 0000 7484          cmp.l     #88,D0
00003F9E  0058      
00003FA0  6700 00E6 7485          beq       vsprintf_28
00003FA4  6000 015C 7486          bra       vsprintf_22
                    7487   vsprintf_34:
00003FA8  0C80 0000 7488          cmp.l     #105,D0
00003FAC  0069      
00003FAE  672C      7489          beq.s     vsprintf_24
00003FB0  6000 0150 7490          bra       vsprintf_22
                    7491   vsprintf_33:
00003FB4  0C80 0000 7492          cmp.l     #117,D0
00003FB8  0075      
00003FBA  6700 005C 7493          beq       vsprintf_26
00003FBE  6E0E      7494          bgt.s     vsprintf_35
00003FC0  0C80 0000 7495          cmp.l     #115,D0
00003FC4  0073      
00003FC6  6700 011C 7496          beq       vsprintf_31
00003FCA  6000 0136 7497          bra       vsprintf_22
                    7498   vsprintf_35:
00003FCE  0C80 0000 7499          cmp.l     #120,D0
00003FD2  0078      
00003FD4  6700 00B2 7500          beq       vsprintf_28
00003FD8  6000 0128 7501          bra       vsprintf_22
                    7502   vsprintf_24:
00003FDC  4A2E FFD3 7503          tst.b     -45(A6)
00003FE0  671A      7504          beq.s     vsprintf_36
00003FE2  4878 000A 7505          pea       10
00003FE6  2F03      7506          move.l    D3,-(A7)
00003FE8  206E 0010 7507          move.l    16(A6),A0
00003FEC  58AE 0010 7508          addq.l    #4,16(A6)
00003FF0  2F10      7509          move.l    (A0),-(A7)
00003FF2  6100 04F8 7510          bsr       _ltoa
00003FF6  DEFC 000C 7511          add.w     #12,A7
00003FFA  6018      7512          bra.s     vsprintf_37
                    7513   vsprintf_36:
00003FFC  4878 000A 7514          pea       10
00004000  2F03      7515          move.l    D3,-(A7)
00004002  206E 0010 7516          move.l    16(A6),A0
00004006  58AE 0010 7517          addq.l    #4,16(A6)
0000400A  2F10      7518          move.l    (A0),-(A7)
0000400C  6100 04DE 7519          bsr       _ltoa
00004010  DEFC 000C 7520          add.w     #12,A7
                    7521   vsprintf_37:
00004014  6000 00FA 7522          bra       vsprintf_23
                    7523   vsprintf_26:
00004018  4A2E FFD3 7524          tst.b     -45(A6)
0000401C  6718      7525          beq.s     vsprintf_38
0000401E  4878 000A 7526          pea       10
00004022  2F03      7527          move.l    D3,-(A7)
00004024  206E 0010 7528          move.l    16(A6),A0
00004028  58AE 0010 7529          addq.l    #4,16(A6)
0000402C  2F10      7530          move.l    (A0),-(A7)
0000402E  4E94      7531          jsr       (A4)
00004030  DEFC 000C 7532          add.w     #12,A7
00004034  6016      7533          bra.s     vsprintf_39
                    7534   vsprintf_38:
00004036  4878 000A 7535          pea       10
0000403A  2F03      7536          move.l    D3,-(A7)
0000403C  206E 0010 7537          move.l    16(A6),A0
00004040  58AE 0010 7538          addq.l    #4,16(A6)
00004044  2F10      7539          move.l    (A0),-(A7)
00004046  4E94      7540          jsr       (A4)
00004048  DEFC 000C 7541          add.w     #12,A7
                    7542   vsprintf_39:
0000404C  6000 00C2 7543          bra       vsprintf_23
                    7544   vsprintf_27:
00004050  4A2E FFD3 7545          tst.b     -45(A6)
00004054  6718      7546          beq.s     vsprintf_40
00004056  4878 0008 7547          pea       8
0000405A  2F03      7548          move.l    D3,-(A7)
0000405C  206E 0010 7549          move.l    16(A6),A0
00004060  58AE 0010 7550          addq.l    #4,16(A6)
00004064  2F10      7551          move.l    (A0),-(A7)
00004066  4E94      7552          jsr       (A4)
00004068  DEFC 000C 7553          add.w     #12,A7
0000406C  6016      7554          bra.s     vsprintf_41
                    7555   vsprintf_40:
0000406E  4878 0008 7556          pea       8
00004072  2F03      7557          move.l    D3,-(A7)
00004074  206E 0010 7558          move.l    16(A6),A0
00004078  58AE 0010 7559          addq.l    #4,16(A6)
0000407C  2F10      7560          move.l    (A0),-(A7)
0000407E  4E94      7561          jsr       (A4)
00004080  DEFC 000C 7562          add.w     #12,A7
                    7563   vsprintf_41:
00004084  6000 008A 7564          bra       vsprintf_23
                    7565   vsprintf_28:
00004088  4A2E FFD3 7566          tst.b     -45(A6)
0000408C  6718      7567          beq.s     vsprintf_42
0000408E  4878 0010 7568          pea       16
00004092  2F03      7569          move.l    D3,-(A7)
00004094  206E 0010 7570          move.l    16(A6),A0
00004098  58AE 0010 7571          addq.l    #4,16(A6)
0000409C  2F10      7572          move.l    (A0),-(A7)
0000409E  4E94      7573          jsr       (A4)
000040A0  DEFC 000C 7574          add.w     #12,A7
000040A4  6016      7575          bra.s     vsprintf_43
                    7576   vsprintf_42:
000040A6  4878 0010 7577          pea       16
000040AA  2F03      7578          move.l    D3,-(A7)
000040AC  206E 0010 7579          move.l    16(A6),A0
000040B0  58AE 0010 7580          addq.l    #4,16(A6)
000040B4  2F10      7581          move.l    (A0),-(A7)
000040B6  4E94      7582          jsr       (A4)
000040B8  DEFC 000C 7583          add.w     #12,A7
                    7584   vsprintf_43:
000040BC  6000 0052 7585          bra       vsprintf_23
                    7586   vsprintf_30:
000040C0  206E 0010 7587          move.l    16(A6),A0
000040C4  58AE 0010 7588          addq.l    #4,16(A6)
000040C8  2010      7589          move.l    (A0),D0
000040CA  2042      7590          move.l    D2,A0
000040CC  5282      7591          addq.l    #1,D2
000040CE  1080      7592          move.b    D0,(A0)
000040D0  2042      7593          move.l    D2,A0
000040D2  4210      7594          clr.b     (A0)
000040D4  200D      7595          move.l    A5,D0
000040D6  6704      7596          beq.s     vsprintf_44
000040D8  200D      7597          move.l    A5,D0
000040DA  6002      7598          bra.s     vsprintf_45
                    7599   vsprintf_44:
000040DC  7001      7600          moveq     #1,D0
                    7601   vsprintf_45:
000040DE  2A00      7602          move.l    D0,D5
000040E0  6000 002E 7603          bra       vsprintf_23
                    7604   vsprintf_31:
000040E4  206E 0010 7605          move.l    16(A6),A0
000040E8  58AE 0010 7606          addq.l    #4,16(A6)
000040EC  2610      7607          move.l    (A0),D3
000040EE  0C85 FFFF 7608          cmp.l     #-1,D5
000040F2  FFFF      
000040F4  660A      7609          bne.s     vsprintf_46
000040F6  2F03      7610          move.l    D3,-(A7)
000040F8  6100 04D8 7611          bsr       _strlen
000040FC  584F      7612          addq.w    #4,A7
000040FE  2A00      7613          move.l    D0,D5
                    7614   vsprintf_46:
00004100  600E      7615          bra.s     vsprintf_23
                    7616   vsprintf_22:
00004102  206E 000C 7617          move.l    12(A6),A0
00004106  2242      7618          move.l    D2,A1
00004108  5282      7619          addq.l    #1,D2
0000410A  1290      7620          move.b    (A0),(A1)
0000410C  2042      7621          move.l    D2,A0
0000410E  4210      7622          clr.b     (A0)
                    7623   vsprintf_23:
00004110  2F03      7624          move.l    D3,-(A7)
00004112  6100 04BE 7625          bsr       _strlen
00004116  584F      7626          addq.w    #4,A7
00004118  1800      7627          move.b    D0,D4
0000411A  206E 000C 7628          move.l    12(A6),A0
0000411E  1010      7629          move.b    (A0),D0
00004120  4880      7630          ext.w     D0
00004122  48C0      7631          ext.l     D0
00004124  0C80 0000 7632          cmp.l     #115,D0
00004128  0073      
0000412A  6618      7633          bne.s     vsprintf_48
0000412C  0C85 0000 7634          cmp.l     #0,D5
00004130  0000      
00004132  6D10      7635          blt.s     vsprintf_48
00004134  4884      7636          ext.w     D4
00004136  48C4      7637          ext.l     D4
00004138  B885      7638          cmp.l     D5,D4
0000413A  6F04      7639          ble.s     vsprintf_50
0000413C  1005      7640          move.b    D5,D0
0000413E  6002      7641          bra.s     vsprintf_51
                    7642   vsprintf_50:
00004140  1004      7643          move.b    D4,D0
                    7644   vsprintf_51:
00004142  1800      7645          move.b    D0,D4
                    7646   vsprintf_48:
00004144  206E 000C 7647          move.l    12(A6),A0
00004148  1010      7648          move.b    (A0),D0
0000414A  4880      7649          ext.w     D0
0000414C  48C0      7650          ext.l     D0
0000414E  0C80 0000 7651          cmp.l     #88,D0
00004152  0058      
00004154  6600 0026 7652          bne       vsprintf_56
00004158  41EE FFDC 7653          lea       -36(A6),A0
0000415C  2408      7654          move.l    A0,D2
                    7655   vsprintf_54:
0000415E  2042      7656          move.l    D2,A0
00004160  4A10      7657          tst.b     (A0)
00004162  6718      7658          beq.s     vsprintf_56
00004164  2042      7659          move.l    D2,A0
00004166  1210      7660          move.b    (A0),D1
00004168  4881      7661          ext.w     D1
0000416A  48C1      7662          ext.l     D1
0000416C  2F01      7663          move.l    D1,-(A7)
0000416E  6100 FB5C 7664          bsr       _toupper
00004172  584F      7665          addq.w    #4,A7
00004174  2042      7666          move.l    D2,A0
00004176  1080      7667          move.b    D0,(A0)
00004178  5282      7668          addq.l    #1,D2
0000417A  60E2      7669          bra       vsprintf_54
                    7670   vsprintf_56:
0000417C  7E00      7671          moveq     #0,D7
0000417E  41EE FFD4 7672          lea       -44(A6),A0
00004182  2408      7673          move.l    A0,D2
00004184  206E 000C 7674          move.l    12(A6),A0
00004188  1010      7675          move.b    (A0),D0
0000418A  4880      7676          ext.w     D0
0000418C  48C0      7677          ext.l     D0
0000418E  0C80 0000 7678          cmp.l     #100,D0
00004192  0064      
00004194  6714      7679          beq.s     vsprintf_59
00004196  206E 000C 7680          move.l    12(A6),A0
0000419A  1010      7681          move.b    (A0),D0
0000419C  4880      7682          ext.w     D0
0000419E  48C0      7683          ext.l     D0
000041A0  0C80 0000 7684          cmp.l     #105,D0
000041A4  0069      
000041A6  6600 0076 7685          bne       vsprintf_65
                    7686   vsprintf_59:
000041AA  4A2E FFCE 7687          tst.b     -50(A6)
000041AE  6612      7688          bne.s     vsprintf_62
000041B0  2043      7689          move.l    D3,A0
000041B2  1010      7690          move.b    (A0),D0
000041B4  4880      7691          ext.w     D0
000041B6  48C0      7692          ext.l     D0
000041B8  0C80 0000 7693          cmp.l     #45,D0
000041BC  002D      
000041BE  6600 002E 7694          bne       vsprintf_60
                    7695   vsprintf_62:
000041C2  2043      7696          move.l    D3,A0
000041C4  1010      7697          move.b    (A0),D0
000041C6  4880      7698          ext.w     D0
000041C8  48C0      7699          ext.l     D0
000041CA  0C80 0000 7700          cmp.l     #45,D0
000041CE  002D      
000041D0  660E      7701          bne.s     vsprintf_63
000041D2  2043      7702          move.l    D3,A0
000041D4  5283      7703          addq.l    #1,D3
000041D6  2242      7704          move.l    D2,A1
000041D8  5282      7705          addq.l    #1,D2
000041DA  1290      7706          move.b    (A0),(A1)
000041DC  5304      7707          subq.b    #1,D4
000041DE  6008      7708          bra.s     vsprintf_64
                    7709   vsprintf_63:
000041E0  2042      7710          move.l    D2,A0
000041E2  5282      7711          addq.l    #1,D2
000041E4  10BC 002B 7712          move.b    #43,(A0)
                    7713   vsprintf_64:
000041E8  5287      7714          addq.l    #1,D7
000041EA  6000 0032 7715          bra       vsprintf_65
                    7716   vsprintf_60:
000041EE  4A2E FFCF 7717          tst.b     -49(A6)
000041F2  6700 002A 7718          beq       vsprintf_65
000041F6  2043      7719          move.l    D3,A0
000041F8  1010      7720          move.b    (A0),D0
000041FA  4880      7721          ext.w     D0
000041FC  48C0      7722          ext.l     D0
000041FE  0C80 0000 7723          cmp.l     #45,D0
00004202  002D      
00004204  660E      7724          bne.s     vsprintf_67
00004206  2043      7725          move.l    D3,A0
00004208  5283      7726          addq.l    #1,D3
0000420A  2242      7727          move.l    D2,A1
0000420C  5282      7728          addq.l    #1,D2
0000420E  1290      7729          move.b    (A0),(A1)
00004210  5304      7730          subq.b    #1,D4
00004212  6008      7731          bra.s     vsprintf_68
                    7732   vsprintf_67:
00004214  2042      7733          move.l    D2,A0
00004216  5282      7734          addq.l    #1,D2
00004218  10BC 0020 7735          move.b    #32,(A0)
                    7736   vsprintf_68:
0000421C  5287      7737          addq.l    #1,D7
                    7738   vsprintf_65:
0000421E  4A2E FFD0 7739          tst.b     -48(A6)
00004222  6700 0066 7740          beq       vsprintf_77
00004226  206E 000C 7741          move.l    12(A6),A0
0000422A  1010      7742          move.b    (A0),D0
0000422C  4880      7743          ext.w     D0
0000422E  48C0      7744          ext.l     D0
00004230  0C80 0000 7745          cmp.l     #111,D0
00004234  006F      
00004236  671A      7746          beq.s     vsprintf_73
00004238  6E0C      7747          bgt.s     vsprintf_76
0000423A  0C80 0000 7748          cmp.l     #88,D0
0000423E  0058      
00004240  6710      7749          beq.s     vsprintf_73
00004242  6000 0046 7750          bra       vsprintf_77
                    7751   vsprintf_76:
00004246  0C80 0000 7752          cmp.l     #120,D0
0000424A  0078      
0000424C  6704      7753          beq.s     vsprintf_73
0000424E  6000 003A 7754          bra       vsprintf_77
                    7755   vsprintf_73:
00004252  2042      7756          move.l    D2,A0
00004254  5282      7757          addq.l    #1,D2
00004256  10BC 0030 7758          move.b    #48,(A0)
0000425A  5287      7759          addq.l    #1,D7
0000425C  206E 000C 7760          move.l    12(A6),A0
00004260  1010      7761          move.b    (A0),D0
00004262  4880      7762          ext.w     D0
00004264  48C0      7763          ext.l     D0
00004266  0C80 0000 7764          cmp.l     #120,D0
0000426A  0078      
0000426C  6712      7765          beq.s     vsprintf_79
0000426E  206E 000C 7766          move.l    12(A6),A0
00004272  1010      7767          move.b    (A0),D0
00004274  4880      7768          ext.w     D0
00004276  48C0      7769          ext.l     D0
00004278  0C80 0000 7770          cmp.l     #88,D0
0000427C  0058      
0000427E  660A      7771          bne.s     vsprintf_77
                    7772   vsprintf_79:
00004280  2042      7773          move.l    D2,A0
00004282  5282      7774          addq.l    #1,D2
00004284  10BC 0078 7775          move.b    #120,(A0)
00004288  5287      7776          addq.l    #1,D7
                    7777   vsprintf_77:
0000428A  2042      7778          move.l    D2,A0
0000428C  4210      7779          clr.b     (A0)
0000428E  206E 000C 7780          move.l    12(A6),A0
00004292  1010      7781          move.b    (A0),D0
00004294  4880      7782          ext.w     D0
00004296  48C0      7783          ext.l     D0
00004298  0C80 0000 7784          cmp.l     #105,D0
0000429C  0069      
0000429E  6700 0076 7785          beq       vsprintf_82
000042A2  6E42      7786          bgt.s     vsprintf_93
000042A4  0C80 0000 7787          cmp.l     #99,D0
000042A8  0063      
000042AA  6700 0084 7788          beq       vsprintf_96
000042AE  6E1C      7789          bgt.s     vsprintf_94
000042B0  0C80 0000 7790          cmp.l     #88,D0
000042B4  0058      
000042B6  6700 005E 7791          beq       vsprintf_82
000042BA  6E00 0184 7792          bgt       vsprintf_80
000042BE  0C80 0000 7793          cmp.l     #69,D0
000042C2  0045      
000042C4  6700 0050 7794          beq       vsprintf_82
000042C8  6000 0176 7795          bra       vsprintf_80
                    7796   vsprintf_94:
000042CC  0C80 0000 7797          cmp.l     #101,D0
000042D0  0065      
000042D2  6700 0042 7798          beq       vsprintf_82
000042D6  6E00 0168 7799          bgt       vsprintf_80
000042DA  0C80 0000 7800          cmp.l     #100,D0
000042DE  0064      
000042E0  6734      7801          beq.s     vsprintf_82
000042E2  6000 015C 7802          bra       vsprintf_80
                    7803   vsprintf_93:
000042E6  0C80 0000 7804          cmp.l     #117,D0
000042EA  0075      
000042EC  6728      7805          beq.s     vsprintf_82
000042EE  6E1A      7806          bgt.s     vsprintf_95
000042F0  0C80 0000 7807          cmp.l     #115,D0
000042F4  0073      
000042F6  6700 0038 7808          beq       vsprintf_96
000042FA  6E00 0144 7809          bgt       vsprintf_80
000042FE  0C80 0000 7810          cmp.l     #111,D0
00004302  006F      
00004304  6710      7811          beq.s     vsprintf_82
00004306  6000 0138 7812          bra       vsprintf_80
                    7813   vsprintf_95:
0000430A  0C80 0000 7814          cmp.l     #120,D0
0000430E  0078      
00004310  6704      7815          beq.s     vsprintf_82
00004312  6000 012C 7816          bra       vsprintf_80
                    7817   vsprintf_82:
00004316  4A2E FFD2 7818          tst.b     -46(A6)
0000431A  6714      7819          beq.s     vsprintf_96
0000431C  4A2E FFCD 7820          tst.b     -51(A6)
00004320  660E      7821          bne.s     vsprintf_96
00004322  200D      7822          move.l    A5,D0
00004324  9087      7823          sub.l     D7,D0
00004326  4884      7824          ext.w     D4
00004328  48C4      7825          ext.l     D4
0000432A  9084      7826          sub.l     D4,D0
0000432C  2D40 FFFC 7827          move.l    D0,-4(A6)
                    7828   vsprintf_96:
00004330  202E FFFC 7829          move.l    -4(A6),D0
00004334  0C80 0000 7830          cmp.l     #0,D0
00004338  0000      
0000433A  6C04      7831          bge.s     vsprintf_98
0000433C  42AE FFFC 7832          clr.l     -4(A6)
                    7833   vsprintf_98:
00004340  4A2E FFCD 7834          tst.b     -51(A6)
00004344  6600 0030 7835          bne       vsprintf_104
00004348  4884      7836          ext.w     D4
0000434A  48C4      7837          ext.l     D4
0000434C  2004      7838          move.l    D4,D0
0000434E  D0AE FFFC 7839          add.l     -4(A6),D0
00004352  D087      7840          add.l     D7,D0
00004354  1D40 FFD1 7841          move.b    D0,-47(A6)
                    7842   vsprintf_102:
00004358  102E FFD1 7843          move.b    -47(A6),D0
0000435C  4880      7844          ext.w     D0
0000435E  48C0      7845          ext.l     D0
00004360  220D      7846          move.l    A5,D1
00004362  534D      7847          subq.w    #1,A5
00004364  B081      7848          cmp.l     D1,D0
00004366  6C0E      7849          bge.s     vsprintf_104
00004368  4878 0020 7850          pea       32
0000436C  2F0A      7851          move.l    A2,-(A7)
0000436E  4E93      7852          jsr       (A3)
00004370  504F      7853          addq.w    #8,A7
00004372  5286      7854          addq.l    #1,D6
00004374  60E2      7855          bra       vsprintf_102
                    7856   vsprintf_104:
00004376  41EE FFD4 7857          lea       -44(A6),A0
0000437A  2408      7858          move.l    A0,D2
                    7859   vsprintf_105:
0000437C  2042      7860          move.l    D2,A0
0000437E  4A10      7861          tst.b     (A0)
00004380  6716      7862          beq.s     vsprintf_107
00004382  2042      7863          move.l    D2,A0
00004384  5282      7864          addq.l    #1,D2
00004386  1210      7865          move.b    (A0),D1
00004388  4881      7866          ext.w     D1
0000438A  48C1      7867          ext.l     D1
0000438C  2F01      7868          move.l    D1,-(A7)
0000438E  2F0A      7869          move.l    A2,-(A7)
00004390  4E93      7870          jsr       (A3)
00004392  504F      7871          addq.w    #8,A7
00004394  5286      7872          addq.l    #1,D6
00004396  60E4      7873          bra       vsprintf_105
                    7874   vsprintf_107:
00004398  202E FFFC 7875          move.l    -4(A6),D0
0000439C  1D40 FFD1 7876          move.b    D0,-47(A6)
                    7877   vsprintf_108:
000043A0  102E FFD1 7878          move.b    -47(A6),D0
000043A4  532E FFD1 7879          subq.b    #1,-47(A6)
000043A8  4A00      7880          tst.b     D0
000043AA  670E      7881          beq.s     vsprintf_110
000043AC  4878 0030 7882          pea       48
000043B0  2F0A      7883          move.l    A2,-(A7)
000043B2  4E93      7884          jsr       (A3)
000043B4  504F      7885          addq.w    #8,A7
000043B6  5286      7886          addq.l    #1,D6
000043B8  60E6      7887          bra       vsprintf_108
                    7888   vsprintf_110:
000043BA  2043      7889          move.l    D3,A0
000043BC  4A10      7890          tst.b     (A0)
000043BE  6700 0048 7891          beq       vsprintf_113
000043C2  206E 000C 7892          move.l    12(A6),A0
000043C6  1010      7893          move.b    (A0),D0
000043C8  4880      7894          ext.w     D0
000043CA  48C0      7895          ext.l     D0
000043CC  0C80 0000 7896          cmp.l     #115,D0
000043D0  0073      
000043D2  670C      7897          beq.s     vsprintf_116
000043D4  6E18      7898          bgt.s     vsprintf_119
000043D6  0C80 0000 7899          cmp.l     #99,D0
000043DA  0063      
000043DC  6702      7900          beq.s     vsprintf_116
000043DE  600E      7901          bra.s     vsprintf_119
                    7902   vsprintf_116:
000043E0  2005      7903          move.l    D5,D0
000043E2  5385      7904          subq.l    #1,D5
000043E4  0C80 0000 7905          cmp.l     #0,D0
000043E8  0000      
000043EA  6E02      7906          bgt.s     vsprintf_119
000043EC  6016      7907          bra.s     vsprintf_115
                    7908   vsprintf_119:
000043EE  2043      7909          move.l    D3,A0
000043F0  5283      7910          addq.l    #1,D3
000043F2  1210      7911          move.b    (A0),D1
000043F4  4881      7912          ext.w     D1
000043F6  48C1      7913          ext.l     D1
000043F8  2F01      7914          move.l    D1,-(A7)
000043FA  2F0A      7915          move.l    A2,-(A7)
000043FC  4E93      7916          jsr       (A3)
000043FE  504F      7917          addq.w    #8,A7
00004400  5286      7918          addq.l    #1,D6
00004402  6002      7919          bra.s     vsprintf_112
                    7920   vsprintf_115:
00004404  6002      7921          bra.s     vsprintf_113
                    7922   vsprintf_112:
00004406  60B2      7923          bra       vsprintf_110
                    7924   vsprintf_113:
00004408  4A2E FFCD 7925          tst.b     -51(A6)
0000440C  6700 0030 7926          beq       vsprintf_125
00004410  4884      7927          ext.w     D4
00004412  48C4      7928          ext.l     D4
00004414  2004      7929          move.l    D4,D0
00004416  D0AE FFFC 7930          add.l     -4(A6),D0
0000441A  D087      7931          add.l     D7,D0
0000441C  1D40 FFD1 7932          move.b    D0,-47(A6)
                    7933   vsprintf_123:
00004420  102E FFD1 7934          move.b    -47(A6),D0
00004424  4880      7935          ext.w     D0
00004426  48C0      7936          ext.l     D0
00004428  220D      7937          move.l    A5,D1
0000442A  534D      7938          subq.w    #1,A5
0000442C  B081      7939          cmp.l     D1,D0
0000442E  6C0E      7940          bge.s     vsprintf_125
00004430  4878 0020 7941          pea       32
00004434  2F0A      7942          move.l    A2,-(A7)
00004436  4E93      7943          jsr       (A3)
00004438  504F      7944          addq.w    #8,A7
0000443A  5386      7945          subq.l    #1,D6
0000443C  60E2      7946          bra       vsprintf_123
                    7947   vsprintf_125:
0000443E  6014      7948          bra.s     vsprintf_81
                    7949   vsprintf_80:
00004440  206E 000C 7950          move.l    12(A6),A0
00004444  1210      7951          move.b    (A0),D1
00004446  4881      7952          ext.w     D1
00004448  48C1      7953          ext.l     D1
0000444A  2F01      7954          move.l    D1,-(A7)
0000444C  2F0A      7955          move.l    A2,-(A7)
0000444E  4E93      7956          jsr       (A3)
00004450  504F      7957          addq.w    #8,A7
00004452  5286      7958          addq.l    #1,D6
                    7959   vsprintf_81:
00004454  52AE 000C 7960          addq.l    #1,12(A6)
                    7961   vsprintf_2:
00004458  6000 F9D6 7962          bra       vsprintf_1
                    7963   vsprintf_3:
0000445C  4A92      7964          tst.l     (A2)
0000445E  6710      7965          beq.s     vsprintf_126
00004460  4201      7966          clr.b     D1
00004462  C2BC 0000 7967          and.l     #255,D1
00004466  00FF      
00004468  2F01      7968          move.l    D1,-(A7)
0000446A  2F0A      7969          move.l    A2,-(A7)
0000446C  4E93      7970          jsr       (A3)
0000446E  504F      7971          addq.w    #8,A7
                    7972   vsprintf_126:
00004470  2006      7973          move.l    D6,D0
00004472  4CDF 3CFC 7974          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00004476  4E5E      7975          unlk      A6
00004478  4E75      7976          rts
                    7977   @itoa_convert:
0000447A  4E56 0000 7978          link      A6,#0
0000447E  48E7 3C00 7979          movem.l   D2/D3/D4/D5,-(A7)
00004482  242E 0008 7980          move.l    8(A6),D2
00004486  262E 0010 7981          move.l    16(A6),D3
0000448A  2A2E 000C 7982          move.l    12(A6),D5
0000448E  2F05      7983          move.l    D5,-(A7)
00004490  2F03      7984          move.l    D3,-(A7)
00004492  6100 F614 7985          bsr       ULDIV
00004496  202F 0004 7986          move.l    4(A7),D0
0000449A  504F      7987          addq.w    #8,A7
0000449C  2800      7988          move.l    D0,D4
0000449E  BA83      7989          cmp.l     D3,D5
000044A0  651A      7990          blo.s     @itoa_convert_1
000044A2  2F03      7991          move.l    D3,-(A7)
000044A4  2F05      7992          move.l    D5,-(A7)
000044A6  2F03      7993          move.l    D3,-(A7)
000044A8  6100 F5FE 7994          bsr       ULDIV
000044AC  2217      7995          move.l    (A7),D1
000044AE  504F      7996          addq.w    #8,A7
000044B0  2F01      7997          move.l    D1,-(A7)
000044B2  2F02      7998          move.l    D2,-(A7)
000044B4  61C4      7999          bsr       @itoa_convert
000044B6  DEFC 000C 8000          add.w     #12,A7
000044BA  2400      8001          move.l    D0,D2
                    8002   @itoa_convert_1:
000044BC  0C84 0000 8003          cmp.l     #9,D4
000044C0  0009      
000044C2  6E0A      8004          bgt.s     @itoa_convert_3
000044C4  2004      8005          move.l    D4,D0
000044C6  0680 0000 8006          add.l     #48,D0
000044CA  0030      
000044CC  600E      8007          bra.s     @itoa_convert_4
                    8008   @itoa_convert_3:
000044CE  2004      8009          move.l    D4,D0
000044D0  0680 0000 8010          add.l     #97,D0
000044D4  0061      
000044D6  0480 0000 8011          sub.l     #10,D0
000044DA  000A      
                    8012   @itoa_convert_4:
000044DC  2042      8013          move.l    D2,A0
000044DE  1080      8014          move.b    D0,(A0)
000044E0  2002      8015          move.l    D2,D0
000044E2  5280      8016          addq.l    #1,D0
000044E4  4CDF 003C 8017          movem.l   (A7)+,D2/D3/D4/D5
000044E8  4E5E      8018          unlk      A6
000044EA  4E75      8019          rts
                    8020   _ltoa:
000044EC  4E56 0000 8021          link      A6,#0
000044F0  48E7 3C00 8022          movem.l   D2/D3/D4/D5,-(A7)
000044F4  242E 0008 8023          move.l    8(A6),D2
000044F8  262E 000C 8024          move.l    12(A6),D3
000044FC  2A2E 0010 8025          move.l    16(A6),D5
00004500  2803      8026          move.l    D3,D4
00004502  0C85 0000 8027          cmp.l     #2,D5
00004506  0002      
00004508  6D08      8028          blt.s     ltoa_3
0000450A  0C85 0000 8029          cmp.l     #36,D5
0000450E  0024      
00004510  6F06      8030          ble.s     ltoa_1
                    8031   ltoa_3:
00004512  2003      8032          move.l    D3,D0
00004514  6000 0052 8033          bra       ltoa_4
                    8034   ltoa_1:
00004518  0C85 0000 8035          cmp.l     #10,D5
0000451C  000A      
0000451E  6600 0032 8036          bne       ltoa_5
00004522  0C82 0000 8037          cmp.l     #0,D2
00004526  0000      
00004528  6C28      8038          bge.s     ltoa_5
0000452A  2002      8039          move.l    D2,D0
0000452C  4480      8040          neg.l     D0
0000452E  2400      8041          move.l    D0,D2
00004530  0C82 0000 8042          cmp.l     #0,D2
00004534  0000      
00004536  6C12      8043          bge.s     ltoa_7
00004538  4879 0000 8044          pea       @itoa_1
0000453C  521C      
0000453E  2F03      8045          move.l    D3,-(A7)
00004540  6100 F556 8046          bsr       _strcpy
00004544  504F      8047          addq.w    #8,A7
00004546  2003      8048          move.l    D3,D0
00004548  601E      8049          bra.s     ltoa_4
                    8050   ltoa_7:
0000454A  2044      8051          move.l    D4,A0
0000454C  5284      8052          addq.l    #1,D4
0000454E  10BC 002D 8053          move.b    #45,(A0)
                    8054   ltoa_5:
00004552  2F05      8055          move.l    D5,-(A7)
00004554  2F02      8056          move.l    D2,-(A7)
00004556  2F04      8057          move.l    D4,-(A7)
00004558  6100 FF20 8058          bsr       @itoa_convert
0000455C  DEFC 000C 8059          add.w     #12,A7
00004560  2800      8060          move.l    D0,D4
00004562  2044      8061          move.l    D4,A0
00004564  4210      8062          clr.b     (A0)
00004566  2003      8063          move.l    D3,D0
                    8064   ltoa_4:
00004568  4CDF 003C 8065          movem.l   (A7)+,D2/D3/D4/D5
0000456C  4E5E      8066          unlk      A6
0000456E  4E75      8067          rts
                    8068   _ultoa:
00004570  4E56 0000 8069          link      A6,#0
00004574  48E7 3800 8070          movem.l   D2/D3/D4,-(A7)
00004578  262E 0010 8071          move.l    16(A6),D3
0000457C  282E 000C 8072          move.l    12(A6),D4
00004580  2404      8073          move.l    D4,D2
00004582  0C83 0000 8074          cmp.l     #2,D3
00004586  0002      
00004588  6D08      8075          blt.s     ultoa_3
0000458A  0C83 0000 8076          cmp.l     #36,D3
0000458E  0024      
00004590  6F04      8077          ble.s     ultoa_1
                    8078   ultoa_3:
00004592  2004      8079          move.l    D4,D0
00004594  6018      8080          bra.s     ultoa_4
                    8081   ultoa_1:
00004596  2F03      8082          move.l    D3,-(A7)
00004598  2F2E 0008 8083          move.l    8(A6),-(A7)
0000459C  2F02      8084          move.l    D2,-(A7)
0000459E  6100 FEDA 8085          bsr       @itoa_convert
000045A2  DEFC 000C 8086          add.w     #12,A7
000045A6  2400      8087          move.l    D0,D2
000045A8  2042      8088          move.l    D2,A0
000045AA  4210      8089          clr.b     (A0)
000045AC  2004      8090          move.l    D4,D0
                    8091   ultoa_4:
000045AE  4CDF 001C 8092          movem.l   (A7)+,D2/D3/D4
000045B2  4E5E      8093          unlk      A6
000045B4  4E75      8094          rts
                    8095   _itoa:
000045B6  4E56 0000 8096          link      A6,#0
000045BA  2F2E 0010 8097          move.l    16(A6),-(A7)
000045BE  2F2E 000C 8098          move.l    12(A6),-(A7)
000045C2  2F2E 0008 8099          move.l    8(A6),-(A7)
000045C6  6100 FF24 8100          bsr       _ltoa
000045CA  DEFC 000C 8101          add.w     #12,A7
000045CE  4E5E      8102          unlk      A6
000045D0  4E75      8103          rts
                    8104   _strlen:
000045D2  206F 0004 8105          move.l    (4,A7),A0
000045D6  2248      8106          move.l    A0,A1
                    8107   strlen_1:
000045D8  4A19      8108          tst.b     (A1)+
000045DA  66FC      8109          bne       strlen_1
000045DC  2009      8110          move.l    A1,D0
000045DE  9088      8111          sub.l     A0,D0
000045E0  5380      8112          subq.l    #1,D0
000045E2  4E75      8113          rts
                    8114          section   const
                    8115   
                    8116   @m68kde~1_1:
000045E4  0D0A 4475 8117          dc.b      13,10,68,117,109,112,32,77,101,109,111,114,121
000045E8  6D70 204D 
000045EC  656D 6F72 
000045F0  79        
000045F1  2042 6C6F 8118          dc.b      32,66,108,111,99,107,58,32,60,69,83,67,62,32
000045F5  636B 3A20 
000045F9  3C45 5343 
000045FD  3E20      
000045FF  746F 2041 8119          dc.b      116,111,32,65,98,111,114,116,44,32,60,83,80
00004603  626F 7274 
00004607  2C20 3C53 
0000460B  50        
0000460C  4143 453E 8120          dc.b      65,67,69,62,32,116,111,32,67,111,110,116,105
00004610  2074 6F20 
00004614  436F 6E74 
00004618  69        
00004619  6E75 6500 8121          dc.b      110,117,101,0
                    8122   @m68kde~1_2:
0000461E  0D0A 456E 8123          dc.b      13,10,69,110,116,101,114,32,83,116,97,114,116
00004622  7465 7220 
00004626  5374 6172 
0000462A  74        
0000462B  2041 6464 8124          dc.b      32,65,100,100,114,101,115,115,58,32,0
0000462F  7265 7373 
00004633  3A20 00   
                    8125   @m68kde~1_3:
00004636  0D0A 2530 8126          dc.b      13,10,37,48,56,120,32,0
0000463A  3878 2000 
                    8127   @m68kde~1_4:
0000463E  2530 3258 8128          dc.b      37,48,50,88,0
00004642  00        
                    8129   @m68kde~1_5:
00004644  2020 00   8130          dc.b      32,32,0
                    8131   @m68kde~1_6:
00004648  0D0A 00   8132          dc.b      13,10,0
                    8133   @m68kde~1_7:
0000464C  0D0A 4669 8134          dc.b      13,10,70,105,108,108,32,77,101,109,111,114,121
00004650  6C6C 204D 
00004654  656D 6F72 
00004658  79        
00004659  2042 6C6F 8135          dc.b      32,66,108,111,99,107,0
0000465D  636B 00   
                    8136   @m68kde~1_8:
00004660  0D0A 456E 8137          dc.b      13,10,69,110,116,101,114,32,69,110,100,32,65
00004664  7465 7220 
00004668  456E 6420 
0000466C  41        
0000466D  6464 7265 8138          dc.b      100,100,114,101,115,115,58,32,0
00004671  7373 3A20 
00004675  00        
                    8139   @m68kde~1_9:
00004676  0D0A 456E 8140          dc.b      13,10,69,110,116,101,114,32,70,105,108,108,32
0000467A  7465 7220 
0000467E  4669 6C6C 
00004682  20        
00004683  4461 7461 8141          dc.b      68,97,116,97,58,32,0
00004687  3A20 00   
                    8142   @m68kde~1_10:
0000468A  0D0A 4669 8143          dc.b      13,10,70,105,108,108,105,110,103,32,65,100,100
0000468E  6C6C 696E 
00004692  6720 4164 
00004696  64        
00004697  7265 7373 8144          dc.b      114,101,115,115,101,115,32,91,36,37,48,56,88
0000469B  6573 205B 
0000469F  2425 3038 
000046A3  58        
000046A4  202D 2024 8145          dc.b      32,45,32,36,37,48,56,88,93,32,119,105,116,104
000046A8  2530 3858 
000046AC  5D20 7769 
000046B0  7468      
000046B2  2024 2530 8146          dc.b      32,36,37,48,50,88,0
000046B6  3258 00   
                    8147   @m68kde~1_11:
000046BA  0D0A 5573 8148          dc.b      13,10,85,115,101,32,72,121,112,101,114,84,101
000046BE  6520 4879 
000046C2  7065 7254 
000046C6  65        
000046C7  726D 696E 8149          dc.b      114,109,105,110,97,108,32,116,111,32,83,101
000046CB  616C 2074 
000046CF  6F20 5365 
000046D3  6E64 2054 8150          dc.b      110,100,32,84,101,120,116,32,70,105,108,101
000046D7  6578 7420 
000046DB  4669 6C65 
000046DF  2028 2E68 8151          dc.b      32,40,46,104,101,120,41,13,10,0
000046E3  6578 290D 
000046E7  0A00      
                    8152   @m68kde~1_12:
000046EA  0D0A 4C6F 8153          dc.b      13,10,76,111,97,100,32,70,97,105,108,101,100
000046EE  6164 2046 
000046F2  6169 6C65 
000046F6  64        
000046F7  2061 7420 8154          dc.b      32,97,116,32,65,100,100,114,101,115,115,32,61
000046FB  4164 6472 
000046FF  6573 7320 
00004703  3D        
00004704  205B 2425 8155          dc.b      32,91,36,37,48,56,88,93,13,10,0
00004708  3038 585D 
0000470C  0D0A 00   
                    8156   @m68kde~1_13:
00004710  0D0A 5375 8157          dc.b      13,10,83,117,99,99,101,115,115,58,32,68,111
00004714  6363 6573 
00004718  733A 2044 
0000471C  6F        
0000471D  776E 6C6F 8158          dc.b      119,110,108,111,97,100,101,100,32,37,100,32
00004721  6164 6564 
00004725  2025 6420 
00004729  6279 7465 8159          dc.b      98,121,116,101,115,13,10,0
0000472D  730D 0A00 
                    8160   @m68kde~1_14:
00004732  0D0A 4578 8161          dc.b      13,10,69,120,97,109,105,110,101,32,97,110,100
00004736  616D 696E 
0000473A  6520 616E 
0000473E  64        
0000473F  2043 6861 8162          dc.b      32,67,104,97,110,103,101,32,77,101,109,111,114
00004743  6E67 6520 
00004747  4D65 6D6F 
0000474B  72        
0000474C  7900      8163          dc.b      121,0
                    8164   @m68kde~1_15:
0000474E  0D0A 3C45 8165          dc.b      13,10,60,69,83,67,62,32,116,111,32,83,116,111
00004752  5343 3E20 
00004756  746F 2053 
0000475A  746F      
0000475C  702C 203C 8166          dc.b      112,44,32,60,83,80,65,67,69,62,32,116,111,32
00004760  5350 4143 
00004764  453E 2074 
00004768  6F20      
0000476A  4164 7661 8167          dc.b      65,100,118,97,110,99,101,44,32,39,45,39,32,116
0000476E  6E63 652C 
00004772  2027 2D27 
00004776  2074      
00004778  6F20 476F 8168          dc.b      111,32,71,111,32,66,97,99,107,44,32,60,68,65
0000477C  2042 6163 
00004780  6B2C 203C 
00004784  4441      
00004786  5441 3E20 8169          dc.b      84,65,62,32,116,111,32,99,104,97,110,103,101
0000478A  746F 2063 
0000478E  6861 6E67 
00004792  65        
00004793  00        8170          dc.b      0
                    8171   @m68kde~1_16:
00004794  0D0A 456E 8172          dc.b      13,10,69,110,116,101,114,32,65,100,100,114,101
00004798  7465 7220 
0000479C  4164 6472 
000047A0  65        
000047A1  7373 3A20 8173          dc.b      115,115,58,32,0
000047A5  00        
                    8174   @m68kde~1_17:
000047A6  0D0A 5B25 8175          dc.b      13,10,91,37,48,56,120,93,32,58,32,37,48,50,120
000047AA  3038 785D 
000047AE  203A 2025 
000047B2  3032 78   
000047B5  2020 00   8176          dc.b      32,32,0
                    8177   @m68kde~1_18:
000047B8  0D0A 5761 8178          dc.b      13,10,87,97,114,110,105,110,103,32,67,104,97
000047BC  726E 696E 
000047C0  6720 4368 
000047C4  61        
000047C5  6E67 6520 8179          dc.b      110,103,101,32,70,97,105,108,101,100,58,32,87
000047C9  4661 696C 
000047CD  6564 3A20 
000047D1  57        
000047D2  726F 7465 8180          dc.b      114,111,116,101,32,91,37,48,50,120,93,44,32
000047D6  205B 2530 
000047DA  3278 5D2C 
000047DE  20        
000047DF  5265 6164 8181          dc.b      82,101,97,100,32,91,37,48,50,120,93,0
000047E3  205B 2530 
000047E7  3278 5D00 
                    8182   @m68kde~1_19:
000047EC  2425 3038 8183          dc.b      36,37,48,56,88,32,32,0
000047F0  5820 2000 
                    8184   @m68kde~1_20:
000047F4  2000      8185          dc.b      32,0
                    8186   @m68kde~1_21:
000047F6  2E00      8187          dc.b      46,0
                    8188   @m68kde~1_22:
000047F8  2563 00   8189          dc.b      37,99,0
                    8190   @m68kde~1_23:
000047FC  00        8191          dc.b      0
                    8192   @m68kde~1_24:
000047FE  0D0A 0D0A 8193          dc.b      13,10,13,10,32,68,48,32,61,32,36,37,48,56,88
00004802  2044 3020 
00004806  3D20 2425 
0000480A  3038 58   
0000480D  2020 4130 8194          dc.b      32,32,65,48,32,61,32,36,37,48,56,88,0
00004811  203D 2024 
00004815  2530 3858 
00004819  00        
                    8195   @m68kde~1_25:
0000481A  0D0A 2044 8196          dc.b      13,10,32,68,49,32,61,32,36,37,48,56,88,32,32
0000481E  3120 3D20 
00004822  2425 3038 
00004826  5820 20   
00004829  4131 203D 8197          dc.b      65,49,32,61,32,36,37,48,56,88,0
0000482D  2024 2530 
00004831  3858 00   
                    8198   @m68kde~1_26:
00004834  0D0A 2044 8199          dc.b      13,10,32,68,50,32,61,32,36,37,48,56,88,32,32
00004838  3220 3D20 
0000483C  2425 3038 
00004840  5820 20   
00004843  4132 203D 8200          dc.b      65,50,32,61,32,36,37,48,56,88,0
00004847  2024 2530 
0000484B  3858 00   
                    8201   @m68kde~1_27:
0000484E  0D0A 2044 8202          dc.b      13,10,32,68,51,32,61,32,36,37,48,56,88,32,32
00004852  3320 3D20 
00004856  2425 3038 
0000485A  5820 20   
0000485D  4133 203D 8203          dc.b      65,51,32,61,32,36,37,48,56,88,0
00004861  2024 2530 
00004865  3858 00   
                    8204   @m68kde~1_28:
00004868  0D0A 2044 8205          dc.b      13,10,32,68,52,32,61,32,36,37,48,56,88,32,32
0000486C  3420 3D20 
00004870  2425 3038 
00004874  5820 20   
00004877  4134 203D 8206          dc.b      65,52,32,61,32,36,37,48,56,88,0
0000487B  2024 2530 
0000487F  3858 00   
                    8207   @m68kde~1_29:
00004882  0D0A 2044 8208          dc.b      13,10,32,68,53,32,61,32,36,37,48,56,88,32,32
00004886  3520 3D20 
0000488A  2425 3038 
0000488E  5820 20   
00004891  4135 203D 8209          dc.b      65,53,32,61,32,36,37,48,56,88,0
00004895  2024 2530 
00004899  3858 00   
                    8210   @m68kde~1_30:
0000489C  0D0A 2044 8211          dc.b      13,10,32,68,54,32,61,32,36,37,48,56,88,32,32
000048A0  3620 3D20 
000048A4  2425 3038 
000048A8  5820 20   
000048AB  4136 203D 8212          dc.b      65,54,32,61,32,36,37,48,56,88,0
000048AF  2024 2530 
000048B3  3858 00   
                    8213   @m68kde~1_31:
000048B6  0D0A 2044 8214          dc.b      13,10,32,68,55,32,61,32,36,37,48,56,88,32,32
000048BA  3720 3D20 
000048BE  2425 3038 
000048C2  5820 20   
000048C5  4137 203D 8215          dc.b      65,55,32,61,32,36,37,48,56,88,0
000048C9  2024 2530 
000048CD  3858 00   
                    8216   @m68kde~1_32:
000048D0  0D0A 0D0A 8217          dc.b      13,10,13,10,85,83,80,32,61,32,36,37,48,56,88
000048D4  5553 5020 
000048D8  3D20 2425 
000048DC  3038 58   
000048DF  2020 2841 8218          dc.b      32,32,40,65,55,41,32,85,115,101,114,32,83,80
000048E3  3729 2055 
000048E7  7365 7220 
000048EB  5350      
000048ED  00        8219          dc.b      0
                    8220   @m68kde~1_33:
000048EE  0D0A 5353 8221          dc.b      13,10,83,83,80,32,61,32,36,37,48,56,88,32,32
000048F2  5020 3D20 
000048F6  2425 3038 
000048FA  5820 20   
000048FD  2841 3729 8222          dc.b      40,65,55,41,32,83,117,112,101,114,118,105,115
00004901  2053 7570 
00004905  6572 7669 
00004909  73        
0000490A  6F72 2053 8223          dc.b      111,114,32,83,80,0
0000490E  5000      
                    8224   @m68kde~1_34:
00004910  0D0A 2053 8225          dc.b      13,10,32,83,82,32,61,32,36,37,48,52,88,32,32
00004914  5220 3D20 
00004918  2425 3034 
0000491C  5820 20   
0000491F  2000      8226          dc.b      32,0
                    8227   @m68kde~1_35:
00004922  2020 205B 8228          dc.b      32,32,32,91,0
00004926  00        
                    8229   @m68kde~1_36:
00004928  0D0A 2050 8230          dc.b      13,10,32,80,67,32,61,32,36,37,48,56,88,32,32
0000492C  4320 3D20 
00004930  2425 3038 
00004934  5820 20   
00004937  00        8231          dc.b      0
                    8232   @m68kde~1_37:
00004938  5B40 2042 8233          dc.b      91,64,32,66,82,69,65,75,80,79,73,78,84,93,0
0000493C  5245 414B 
00004940  504F 494E 
00004944  545D 00   
                    8234   @m68kde~1_38:
00004948  0D0A 5750 8235          dc.b      13,10,87,80,37,100,32,61,32,37,115,0
0000494C  2564 203D 
00004950  2025 7300 
                    8236   @m68kde~1_39:
00004954  0D0A 0D0A 8237          dc.b      13,10,13,10,13,10,13,10,13,10,13,10,83,105,110
00004958  0D0A 0D0A 
0000495C  0D0A 0D0A 
00004960  5369 6E   
00004963  676C 6520 8238          dc.b      103,108,101,32,83,116,101,112,32,32,58,91,79
00004967  5374 6570 
0000496B  2020 3A5B 
0000496F  4F        
00004970  4E5D 00   8239          dc.b      78,93,0
                    8240   @m68kde~1_40:
00004974  0D0A 4272 8241          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004978  6561 6B20 
0000497C  506F 696E 
00004980  74        
00004981  7320 3A5B 8242          dc.b      115,32,58,91,68,105,115,97,98,108,101,100,93
00004985  4469 7361 
00004989  626C 6564 
0000498D  5D        
0000498E  00        8243          dc.b      0
                    8244   @m68kde~1_41:
00004990  0D0A 5072 8245          dc.b      13,10,80,114,101,115,115,32,60,83,80,65,67,69
00004994  6573 7320 
00004998  3C53 5041 
0000499C  4345      
0000499E  3E20 746F 8246          dc.b      62,32,116,111,32,69,120,101,99,117,116,101,32
000049A2  2045 7865 
000049A6  6375 7465 
000049AA  20        
000049AB  4E65 7874 8247          dc.b      78,101,120,116,32,73,110,115,116,114,117,99
000049AF  2049 6E73 
000049B3  7472 7563 
000049B7  7469 6F6E 8248          dc.b      116,105,111,110,0
000049BB  00        
                    8249   @m68kde~1_42:
000049BC  0D0A 5072 8250          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
000049C0  6573 7320 
000049C4  3C45 5343 
000049C8  3E20      
000049CA  746F 2052 8251          dc.b      116,111,32,82,101,115,117,109,101,32,80,114
000049CE  6573 756D 
000049D2  6520 5072 
000049D6  6F67 7261 8252          dc.b      111,103,114,97,109,0
000049DA  6D00      
                    8253   @m68kde~1_43:
000049DC  0D0A 496C 8254          dc.b      13,10,73,108,108,101,103,97,108,32,68,97,116
000049E0  6C65 6761 
000049E4  6C20 4461 
000049E8  74        
000049E9  6120 5265 8255          dc.b      97,32,82,101,103,105,115,116,101,114,32,58,32
000049ED  6769 7374 
000049F1  6572 203A 
000049F5  20        
000049F6  5573 6520 8256          dc.b      85,115,101,32,68,48,45,68,55,46,46,46,46,46
000049FA  4430 2D44 
000049FE  372E 2E2E 
00004A02  2E2E      
00004A04  0D0A 00   8257          dc.b      13,10,0
                    8258   @m68kde~1_44:
00004A08  0D0A 4425 8259          dc.b      13,10,68,37,99,32,61,32,0
00004A0C  6320 3D20 
00004A10  00        
                    8260   @m68kde~1_45:
00004A12  0D0A 496C 8261          dc.b      13,10,73,108,108,101,103,97,108,32,65,100,100
00004A16  6C65 6761 
00004A1A  6C20 4164 
00004A1E  64        
00004A1F  7265 7373 8262          dc.b      114,101,115,115,32,82,101,103,105,115,116,101
00004A23  2052 6567 
00004A27  6973 7465 
00004A2B  7220 3A20 8263          dc.b      114,32,58,32,85,115,101,32,65,48,45,65,55,46
00004A2F  5573 6520 
00004A33  4130 2D41 
00004A37  372E      
00004A39  2E2E 2E2E 8264          dc.b      46,46,46,46,13,10,0
00004A3D  0D0A 00   
                    8265   @m68kde~1_46:
00004A40  0D0A 4125 8266          dc.b      13,10,65,37,99,32,61,32,0
00004A44  6320 3D20 
00004A48  00        
                    8267   @m68kde~1_47:
00004A4A  0D0A 5573 8268          dc.b      13,10,85,115,101,114,32,83,80,32,61,32,0
00004A4E  6572 2053 
00004A52  5020 3D20 
00004A56  00        
                    8269   @m68kde~1_48:
00004A58  0D0A 496C 8270          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
00004A5C  6C65 6761 
00004A60  6C20 5265 
00004A64  67        
00004A65  6973 7465 8271          dc.b      105,115,116,101,114,46,46,46,46,0
00004A69  722E 2E2E 
00004A6D  2E00      
                    8272   @m68kde~1_49:
00004A70  0D0A 5379 8273          dc.b      13,10,83,121,115,116,101,109,32,83,80,32,61
00004A74  7374 656D 
00004A78  2053 5020 
00004A7C  3D        
00004A7D  2000      8274          dc.b      32,0
                    8275   @m68kde~1_50:
00004A80  0D0A 5043 8276          dc.b      13,10,80,67,32,61,32,0
00004A84  203D 2000 
                    8277   @m68kde~1_51:
00004A88  0D0A 5352 8278          dc.b      13,10,83,82,32,61,32,0
00004A8C  203D 2000 
                    8279   @m68kde~1_52:
00004A90  0D0A 496C 8280          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
00004A94  6C65 6761 
00004A98  6C20 5265 
00004A9C  67        
00004A9D  6973 7465 8281          dc.b      105,115,116,101,114,58,32,85,115,101,32,65,48
00004AA1  723A 2055 
00004AA5  7365 2041 
00004AA9  30        
00004AAA  2D41 372C 8282          dc.b      45,65,55,44,32,68,48,45,68,55,44,32,83,83,80
00004AAE  2044 302D 
00004AB2  4437 2C20 
00004AB6  5353 50   
00004AB9  2C20 5553 8283          dc.b      44,32,85,83,80,44,32,80,67,32,111,114,32,83
00004ABD  502C 2050 
00004AC1  4320 6F72 
00004AC5  2053      
00004AC7  520D 0A00 8284          dc.b      82,13,10,0
                    8285   @m68kde~1_53:
00004ACC  0D0A 0D0A 8286          dc.b      13,10,13,10,78,117,109,32,32,32,32,32,65,100
00004AD0  4E75 6D20 
00004AD4  2020 2020 
00004AD8  4164      
00004ADA  6472 6573 8287          dc.b      100,114,101,115,115,32,32,32,32,32,32,73,110
00004ADE  7320 2020 
00004AE2  2020 2049 
00004AE6  6E        
00004AE7  7374 7275 8288          dc.b      115,116,114,117,99,116,105,111,110,0
00004AEB  6374 696F 
00004AEF  6E00      
                    8289   @m68kde~1_54:
00004AF2  0D0A 2D2D 8290          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
00004AF6  2D20 2020 
00004AFA  2020 2D2D 
00004AFE  2D2D 2D   
00004B01  2D2D 2D2D 8291          dc.b      45,45,45,45,32,32,32,32,45,45,45,45,45,45,45
00004B05  2020 2020 
00004B09  2D2D 2D2D 
00004B0D  2D2D 2D   
00004B10  2D2D 2D2D 8292          dc.b      45,45,45,45,0
00004B14  00        
                    8293   @m68kde~1_55:
00004B16  0D0A 4E6F 8294          dc.b      13,10,78,111,32,66,114,101,97,107,80,111,105
00004B1A  2042 7265 
00004B1E  616B 506F 
00004B22  69        
00004B23  6E74 7320 8295          dc.b      110,116,115,32,83,101,116,0
00004B27  5365 7400 
                    8296   @m68kde~1_56:
00004B2C  0D0A 2533 8297          dc.b      13,10,37,51,100,32,32,32,32,32,36,37,48,56,120
00004B30  6420 2020 
00004B34  2020 2425 
00004B38  3038 78   
00004B3B  00        8298          dc.b      0
                    8299   @m68kde~1_57:
00004B3C  0D0A 4E75 8300          dc.b      13,10,78,117,109,32,32,32,32,32,65,100,100,114
00004B40  6D20 2020 
00004B44  2020 4164 
00004B48  6472      
00004B4A  6573 7300 8301          dc.b      101,115,115,0
                    8302   @m68kde~1_58:
00004B4E  0D0A 2D2D 8303          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
00004B52  2D20 2020 
00004B56  2020 2D2D 
00004B5A  2D2D 2D   
00004B5D  2D2D 2D2D 8304          dc.b      45,45,45,45,0
00004B61  00        
                    8305   @m68kde~1_59:
00004B62  0D0A 4E6F 8306          dc.b      13,10,78,111,32,87,97,116,99,104,80,111,105
00004B66  2057 6174 
00004B6A  6368 506F 
00004B6E  69        
00004B6F  6E74 7320 8307          dc.b      110,116,115,32,83,101,116,0
00004B73  5365 7400 
                    8308   @m68kde~1_60:
00004B78  0D0A 456E 8309          dc.b      13,10,69,110,116,101,114,32,66,114,101,97,107
00004B7C  7465 7220 
00004B80  4272 6561 
00004B84  6B        
00004B85  2050 6F69 8310          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
00004B89  6E74 204E 
00004B8D  756D 6265 
00004B91  72        
00004B92  3A20 00   8311          dc.b      58,32,0
                    8312   @m68kde~1_61:
00004B96  0D0A 496C 8313          dc.b      13,10,73,108,108,101,103,97,108,32,82,97,110
00004B9A  6C65 6761 
00004B9E  6C20 5261 
00004BA2  6E        
00004BA3  6765 203A 8314          dc.b      103,101,32,58,32,85,115,101,32,48,32,45,32,55
00004BA7  2055 7365 
00004BAB  2030 202D 
00004BAF  2037      
00004BB1  00        8315          dc.b      0
                    8316   @m68kde~1_62:
00004BB2  0D0A 4272 8317          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004BB6  6561 6B20 
00004BBA  506F 696E 
00004BBE  74        
00004BBF  2043 6C65 8318          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
00004BC3  6172 6564 
00004BC7  2E2E 2E2E 
00004BCB  2E        
00004BCC  0D0A 00   8319          dc.b      13,10,0
                    8320   @m68kde~1_63:
00004BD0  0D0A 4272 8321          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004BD4  6561 6B20 
00004BD8  506F 696E 
00004BDC  74        
00004BDD  2077 6173 8322          dc.b      32,119,97,115,110,39,116,32,83,101,116,46,46
00004BE1  6E27 7420 
00004BE5  5365 742E 
00004BE9  2E        
00004BEA  2E2E 2E00 8323          dc.b      46,46,46,0
                    8324   @m68kde~1_64:
00004BEE  0D0A 456E 8325          dc.b      13,10,69,110,116,101,114,32,87,97,116,99,104
00004BF2  7465 7220 
00004BF6  5761 7463 
00004BFA  68        
00004BFB  2050 6F69 8326          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
00004BFF  6E74 204E 
00004C03  756D 6265 
00004C07  72        
00004C08  3A20 00   8327          dc.b      58,32,0
                    8328   @m68kde~1_65:
00004C0C  0D0A 5761 8329          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004C10  7463 6820 
00004C14  506F 696E 
00004C18  74        
00004C19  2043 6C65 8330          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
00004C1D  6172 6564 
00004C21  2E2E 2E2E 
00004C25  2E        
00004C26  0D0A 00   8331          dc.b      13,10,0
                    8332   @m68kde~1_66:
00004C2A  0D0A 5761 8333          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004C2E  7463 6820 
00004C32  506F 696E 
00004C36  74        
00004C37  2057 6173 8334          dc.b      32,87,97,115,32,110,111,116,32,83,101,116,46
00004C3B  206E 6F74 
00004C3F  2053 6574 
00004C43  2E        
00004C44  2E2E 2E2E 8335          dc.b      46,46,46,46,0
00004C48  00        
                    8336   @m68kde~1_67:
00004C4A  0D0A 4E6F 8337          dc.b      13,10,78,111,32,70,82,69,69,32,66,114,101,97
00004C4E  2046 5245 
00004C52  4520 4272 
00004C56  6561      
00004C58  6B20 506F 8338          dc.b      107,32,80,111,105,110,116,115,46,46,46,46,46
00004C5C  696E 7473 
00004C60  2E2E 2E2E 
00004C64  2E        
00004C65  00        8339          dc.b      0
                    8340   @m68kde~1_68:
00004C66  0D0A 4272 8341          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004C6A  6561 6B20 
00004C6E  506F 696E 
00004C72  74        
00004C73  2041 6464 8342          dc.b      32,65,100,100,114,101,115,115,58,32,0
00004C77  7265 7373 
00004C7B  3A20 00   
                    8343   @m68kde~1_69:
00004C7E  0D0A 4572 8344          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
00004C82  726F 7220 
00004C86  3A20 4272 
00004C8A  65        
00004C8B  616B 2050 8345          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
00004C8F  6F69 6E74 
00004C93  7320 4341 
00004C97  4E        
00004C98  4E4F 5420 8346          dc.b      78,79,84,32,98,101,32,115,101,116,32,97,116
00004C9C  6265 2073 
00004CA0  6574 2061 
00004CA4  74        
00004CA5  204F 4444 8347          dc.b      32,79,68,68,32,97,100,100,114,101,115,115,101
00004CA9  2061 6464 
00004CAD  7265 7373 
00004CB1  65        
00004CB2  7300      8348          dc.b      115,0
                    8349   @m68kde~1_70:
00004CB4  0D0A 4572 8350          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
00004CB8  726F 7220 
00004CBC  3A20 4272 
00004CC0  65        
00004CC1  616B 2050 8351          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
00004CC5  6F69 6E74 
00004CC9  7320 4341 
00004CCD  4E        
00004CCE  4E4F 5420 8352          dc.b      78,79,84,32,98,101,32,115,101,116,32,102,111
00004CD2  6265 2073 
00004CD6  6574 2066 
00004CDA  6F        
00004CDB  7220 524F 8353          dc.b      114,32,82,79,77,32,105,110,32,82,97,110,103
00004CDF  4D20 696E 
00004CE3  2052 616E 
00004CE7  67        
00004CE8  6520 3A20 8354          dc.b      101,32,58,32,91,36,48,45,36,48,48,48,48,55,70
00004CEC  5B24 302D 
00004CF0  2430 3030 
00004CF4  3037 46   
00004CF7  4646 5D00 8355          dc.b      70,70,93,0
                    8356   @m68kde~1_71:
00004CFC  0D0A 4572 8357          dc.b      13,10,69,114,114,111,114,58,32,66,114,101,97
00004D00  726F 723A 
00004D04  2042 7265 
00004D08  61        
00004D09  6B20 506F 8358          dc.b      107,32,80,111,105,110,116,32,65,108,114,101
00004D0D  696E 7420 
00004D11  416C 7265 
00004D15  6164 7920 8359          dc.b      97,100,121,32,69,120,105,115,116,115,32,97,116
00004D19  4578 6973 
00004D1D  7473 2061 
00004D21  74        
00004D22  2041 6464 8360          dc.b      32,65,100,100,114,101,115,115,32,58,32,37,48
00004D26  7265 7373 
00004D2A  203A 2025 
00004D2E  30        
00004D2F  3878 0D0A 8361          dc.b      56,120,13,10,0
00004D33  00        
                    8362   @m68kde~1_72:
00004D34  0D0A 4272 8363          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004D38  6561 6B20 
00004D3C  506F 696E 
00004D40  74        
00004D41  2053 6574 8364          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
00004D45  2061 7420 
00004D49  4164 6472 
00004D4D  65        
00004D4E  7373 3A20 8365          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
00004D52  5B24 2530 
00004D56  3878 5D00 
                    8366   @m68kde~1_73:
00004D5A  0D0A 4E6F 8367          dc.b      13,10,78,111,32,70,82,69,69,32,87,97,116,99
00004D5E  2046 5245 
00004D62  4520 5761 
00004D66  7463      
00004D68  6820 506F 8368          dc.b      104,32,80,111,105,110,116,115,46,46,46,46,46
00004D6C  696E 7473 
00004D70  2E2E 2E2E 
00004D74  2E        
00004D75  00        8369          dc.b      0
                    8370   @m68kde~1_74:
00004D76  0D0A 5761 8371          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004D7A  7463 6820 
00004D7E  506F 696E 
00004D82  74        
00004D83  2041 6464 8372          dc.b      32,65,100,100,114,101,115,115,58,32,0
00004D87  7265 7373 
00004D8B  3A20 00   
                    8373   @m68kde~1_75:
00004D8E  0D0A 4572 8374          dc.b      13,10,69,114,114,111,114,58,32,87,97,116,99
00004D92  726F 723A 
00004D96  2057 6174 
00004D9A  63        
00004D9B  6820 506F 8375          dc.b      104,32,80,111,105,110,116,32,65,108,114,101
00004D9F  696E 7420 
00004DA3  416C 7265 
00004DA7  6164 7920 8376          dc.b      97,100,121,32,83,101,116,32,97,116,32,65,100
00004DAB  5365 7420 
00004DAF  6174 2041 
00004DB3  64        
00004DB4  6472 6573 8377          dc.b      100,114,101,115,115,32,58,32,37,48,56,120,13
00004DB8  7320 3A20 
00004DBC  2530 3878 
00004DC0  0D        
00004DC1  0A00      8378          dc.b      10,0
                    8379   @m68kde~1_76:
00004DC4  0D0A 5761 8380          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004DC8  7463 6820 
00004DCC  506F 696E 
00004DD0  74        
00004DD1  2053 6574 8381          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
00004DD5  2061 7420 
00004DD9  4164 6472 
00004DDD  65        
00004DDE  7373 3A20 8382          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
00004DE2  5B24 2530 
00004DE6  3878 5D00 
                    8383   @m68kde~1_77:
00004DEA  0D0A 0D0A 8384          dc.b      13,10,13,10,13,10,13,10,64,66,82,69,65,75,80
00004DEE  0D0A 0D0A 
00004DF2  4042 5245 
00004DF6  414B 50   
00004DF9  4F49 4E54 8385          dc.b      79,73,78,84,0
00004DFD  00        
                    8386   @m68kde~1_78:
00004DFE  0D0A 5369 8387          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00004E02  6E67 6C65 
00004E06  2053 7465 
00004E0A  70        
00004E0B  203A 205B 8388          dc.b      32,58,32,91,79,78,93,0
00004E0F  4F4E 5D00 
                    8389   @m68kde~1_79:
00004E14  0D0A 4272 8390          dc.b      13,10,66,114,101,97,107,80,111,105,110,116,115
00004E18  6561 6B50 
00004E1C  6F69 6E74 
00004E20  73        
00004E21  203A 205B 8391          dc.b      32,58,32,91,69,110,97,98,108,101,100,93,0
00004E25  456E 6162 
00004E29  6C65 645D 
00004E2D  00        
                    8392   @m68kde~1_80:
00004E2E  0D0A 5072 8393          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00004E32  6573 7320 
00004E36  3C45 5343 
00004E3A  3E20      
00004E3C  746F 2052 8394          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
00004E40  6573 756D 
00004E44  6520 5573 
00004E48  6572 2050 8395          dc.b      101,114,32,80,114,111,103,114,97,109,13,10,0
00004E4C  726F 6772 
00004E50  616D 0D0A 
00004E54  00        
                    8396   @m68kde~1_81:
00004E56  0D0A 556E 8397          dc.b      13,10,85,110,107,110,111,119,110,32,67,111,109
00004E5A  6B6E 6F77 
00004E5E  6E20 436F 
00004E62  6D        
00004E63  6D61 6E64 8398          dc.b      109,97,110,100,46,46,46,46,46,13,10,0
00004E67  2E2E 2E2E 
00004E6B  2E0D 0A00 
                    8399   @m68kde~1_82:
00004E70  0D0A 5072 8400          dc.b      13,10,80,114,111,103,114,97,109,32,69,110,100
00004E74  6F67 7261 
00004E78  6D20 456E 
00004E7C  64        
00004E7D  6564 2028 8401          dc.b      101,100,32,40,84,82,65,80,32,35,49,53,41,46
00004E81  5452 4150 
00004E85  2023 3135 
00004E89  292E      
00004E8B  2E2E 2E00 8402          dc.b      46,46,46,0
                    8403   @m68kde~1_83:
00004E90  0D0A 4B69 8404          dc.b      13,10,75,105,108,108,32,65,108,108,32,66,114
00004E94  6C6C 2041 
00004E98  6C6C 2042 
00004E9C  72        
00004E9D  6561 6B20 8405          dc.b      101,97,107,32,80,111,105,110,116,115,46,46,46
00004EA1  506F 696E 
00004EA5  7473 2E2E 
00004EA9  2E        
00004EAA  2879 2F6E 8406          dc.b      40,121,47,110,41,63,0
00004EAE  293F 00   
                    8407   @m68kde~1_84:
00004EB2  0D0A 4B69 8408          dc.b      13,10,75,105,108,108,32,65,108,108,32,87,97
00004EB6  6C6C 2041 
00004EBA  6C6C 2057 
00004EBE  61        
00004EBF  7463 6820 8409          dc.b      116,99,104,32,80,111,105,110,116,115,46,46,46
00004EC3  506F 696E 
00004EC7  7473 2E2E 
00004ECB  2E        
00004ECC  2879 2F6E 8410          dc.b      40,121,47,110,41,63,0
00004ED0  293F 00   
                    8411   @m68kde~1_85:
00004ED4  0D0A 2D2D 8412          dc.b      13,10,45,45,45,45,45,45,45,45,45,45,45,45,45
00004ED8  2D2D 2D2D 
00004EDC  2D2D 2D2D 
00004EE0  2D2D 2D   
00004EE3  2D2D 2D2D 8413          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00004EE7  2D2D 2D2D 
00004EEB  2D2D 2D2D 
00004EEF  2D2D 2D   
00004EF2  2D2D 2D2D 8414          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00004EF6  2D2D 2D2D 
00004EFA  2D2D 2D2D 
00004EFE  2D2D 2D   
00004F01  2D2D 2D2D 8415          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00004F05  2D2D 2D2D 
00004F09  2D2D 2D2D 
00004F0D  2D2D 2D   
00004F10  2D2D 2D2D 8416          dc.b      45,45,45,45,45,45,0
00004F14  2D2D 00   
                    8417   @m68kde~1_86:
00004F18  0D0A 2020 8418          dc.b      13,10,32,32,70,105,110,97,108,32,80,114,111
00004F1C  4669 6E61 
00004F20  6C20 5072 
00004F24  6F        
00004F25  6A65 6374 8419          dc.b      106,101,99,116,0
00004F29  00        
                    8420   @m68kde~1_87:
00004F2A  0D0A 2020 8421          dc.b      13,10,32,32,72,32,32,32,32,45,32,83,97,121,32
00004F2E  4820 2020 
00004F32  202D 2053 
00004F36  6179 20   
00004F39  4865 6C6C 8422          dc.b      72,101,108,108,111,32,87,111,114,108,100,0
00004F3D  6F20 576F 
00004F41  726C 6400 
                    8423   @m68kde~1_88:
00004F46  0D0A 2020 8424          dc.b      13,10,32,32,84,32,32,32,32,45,32,82,117,110
00004F4A  5420 2020 
00004F4E  202D 2052 
00004F52  756E      
00004F54  2054 6574 8425          dc.b      32,84,101,116,114,105,115,32,71,97,109,101,0
00004F58  7269 7320 
00004F5C  4761 6D65 
00004F60  00        
                    8426   @m68kde~1_89:
00004F62  0D0A 2300 8427          dc.b      13,10,35,0
                    8428   @m68kde~1_90:
00004F66  0A52 756E 8429          dc.b      10,82,117,110,110,105,110,103,32,84,101,116
00004F6A  6E69 6E67 
00004F6E  2054 6574 
00004F72  7269 7320 8430          dc.b      114,105,115,32,71,97,109,101,10,0
00004F76  4761 6D65 
00004F7A  0A00      
                    8431   @m68kde~1_91:
00004F7C  0A53 6179 8432          dc.b      10,83,97,121,105,110,103,32,72,101,108,108,111
00004F80  696E 6720 
00004F84  4865 6C6C 
00004F88  6F        
00004F89  2057 6F72 8433          dc.b      32,87,111,114,108,100,10,0
00004F8D  6C64 0A00 
                    8434   @m68kde~1_92:
00004F92  0A4D 656D 8435          dc.b      10,77,101,109,111,114,121,32,67,104,97,110,103
00004F96  6F72 7920 
00004F9A  4368 616E 
00004F9E  67        
00004F9F  6520 696E 8436          dc.b      101,32,105,110,32,86,71,65,10,0
00004FA3  2056 4741 
00004FA7  0A00      
                    8437   @m68kde~1_93:
00004FAA  0A41 6464 8438          dc.b      10,65,100,100,114,101,115,115,58,32,48,120,37
00004FAE  7265 7373 
00004FB2  3A20 3078 
00004FB6  25        
00004FB7  3034 582C 8439          dc.b      48,52,88,44,32,68,97,116,97,58,32,37,99,0
00004FBB  2044 6174 
00004FBF  613A 2025 
00004FC3  6300      
                    8440   @m68kde~1_94:
00004FC6  0D0A 0D0A 8441          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
00004FCA  5072 6F67 
00004FCE  7261 6D20 
00004FD2  41        
00004FD3  424F 5254 8442          dc.b      66,79,82,84,32,33,33,33,33,33,33,13,10,0
00004FD7  2021 2121 
00004FDB  2121 210D 
00004FDF  0A00      
                    8443   @m68kde~1_95:
00004FE2  2573 0D0A 8444          dc.b      37,115,13,10,0
00004FE6  00        
                    8445   @m68kde~1_96:
00004FE8  0D0A 0D0A 8446          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
00004FEC  5072 6F67 
00004FF0  7261 6D20 
00004FF4  41        
00004FF5  424F 5254 8447          dc.b      66,79,82,84,32,33,33,33,33,33,0
00004FF9  2021 2121 
00004FFD  2121 00   
                    8448   @m68kde~1_97:
00005000  0D0A 556E 8449          dc.b      13,10,85,110,104,97,110,100,108,101,100,32,73
00005004  6861 6E64 
00005008  6C65 6420 
0000500C  49        
0000500D  6E74 6572 8450          dc.b      110,116,101,114,114,117,112,116,58,32,73,82
00005011  7275 7074 
00005015  3A20 4952 
00005019  5125 6420 8451          dc.b      81,37,100,32,33,33,33,33,33,0
0000501D  2121 2121 
00005021  2100      
                    8452   @m68kde~1_98:
00005024  4144 4452 8453          dc.b      65,68,68,82,69,83,83,32,69,82,82,79,82,58,32
00005028  4553 5320 
0000502C  4552 524F 
00005030  523A 20   
00005033  3136 206F 8454          dc.b      49,54,32,111,114,32,51,50,32,66,105,116,32,84
00005037  7220 3332 
0000503B  2042 6974 
0000503F  2054      
00005041  7261 6E73 8455          dc.b      114,97,110,115,102,101,114,32,116,111,47,102
00005045  6665 7220 
00005049  746F 2F66 
0000504D  726F 6D20 8456          dc.b      114,111,109,32,97,110,32,79,68,68,32,65,100
00005051  616E 204F 
00005055  4444 2041 
00005059  64        
0000505A  6472 6573 8457          dc.b      100,114,101,115,115,46,46,46,46,0
0000505E  732E 2E2E 
00005062  2E00      
                    8458   @m68kde~1_99:
00005064  556E 6861 8459          dc.b      85,110,104,97,110,100,108,101,100,32,84,114
00005068  6E64 6C65 
0000506C  6420 5472 
00005070  6170 2021 8460          dc.b      97,112,32,33,33,33,33,33,0
00005074  2121 2121 
00005078  00        
                    8461   @m68kde~1_100:
0000507A  4255 5320 8462          dc.b      66,85,83,32,69,114,114,111,114,33,0
0000507E  4572 726F 
00005082  7221 00   
                    8463   @m68kde~1_101:
00005086  4144 4452 8464          dc.b      65,68,68,82,69,83,83,32,69,114,114,111,114,33
0000508A  4553 5320 
0000508E  4572 726F 
00005092  7221      
00005094  00        8465          dc.b      0
                    8466   @m68kde~1_102:
00005096  494C 4C45 8467          dc.b      73,76,76,69,71,65,76,32,73,78,83,84,82,85,67
0000509A  4741 4C20 
0000509E  494E 5354 
000050A2  5255 43   
000050A5  5449 4F4E 8468          dc.b      84,73,79,78,0
000050A9  00        
                    8469   @m68kde~1_103:
000050AA  4449 5649 8470          dc.b      68,73,86,73,68,69,32,66,89,32,90,69,82,79,0
000050AE  4445 2042 
000050B2  5920 5A45 
000050B6  524F 00   
                    8471   @m68kde~1_104:
000050BA  2743 484B 8472          dc.b      39,67,72,75,39,32,73,78,83,84,82,85,67,84,73
000050BE  2720 494E 
000050C2  5354 5255 
000050C6  4354 49   
000050C9  4F4E 00   8473          dc.b      79,78,0
                    8474   @m68kde~1_105:
000050CC  5452 4150 8475          dc.b      84,82,65,80,86,32,73,78,83,84,82,85,67,84,73
000050D0  5620 494E 
000050D4  5354 5255 
000050D8  4354 49   
000050DB  4F4E 00   8476          dc.b      79,78,0
                    8477   @m68kde~1_106:
000050DE  5052 4956 8478          dc.b      80,82,73,86,73,76,69,71,69,32,86,73,79,76,65
000050E2  494C 4547 
000050E6  4520 5649 
000050EA  4F4C 41   
000050ED  5449 4F4E 8479          dc.b      84,73,79,78,0
000050F1  00        
                    8480   @m68kde~1_107:
000050F2  554E 494E 8481          dc.b      85,78,73,78,73,84,73,65,76,73,83,69,68,32,73
000050F6  4954 4941 
000050FA  4C49 5345 
000050FE  4420 49   
00005101  5251 00   8482          dc.b      82,81,0
                    8483   @m68kde~1_108:
00005104  5350 5552 8484          dc.b      83,80,85,82,73,79,85,83,32,73,82,81,0
00005108  494F 5553 
0000510C  2049 5251 
00005110  00        
                    8485   @m68kde~1_109:
00005112  4350 454E 8486          dc.b      67,80,69,78,32,52,49,50,32,50,48,50,51,87,50
00005116  2034 3132 
0000511A  2032 3032 
0000511E  3357 32   
00005121  0D0A 546F 8487          dc.b      13,10,84,111,109,32,87,97,110,103,44,32,55,54
00005125  6D20 5761 
00005129  6E67 2C20 
0000512D  3736      
0000512F  3334 3033 8488          dc.b      51,52,48,51,52,56,0
00005133  3438 00   
                    8489   @m68kde~1_110:
00005136  436F 7079 8490          dc.b      67,111,112,121,114,105,103,104,116,32,40,67
0000513A  7269 6768 
0000513E  7420 2843 
00005142  2920 504A 8491          dc.b      41,32,80,74,32,68,97,118,105,101,115,32,50,48
00005146  2044 6176 
0000514A  6965 7320 
0000514E  3230      
00005150  3136 00   8492          dc.b      49,54,0
                    8493   @m68kde~1_111:
00005154  0D0A 2573 8494          dc.b      13,10,37,115,0
00005158  00        
                    8495   @tetris_1:
0000515A  2573 0A00 8496          dc.b      37,115,10,0
                    8497   @tetris_2:
0000515E  6761 6D65 8498          dc.b      103,97,109,101,32,111,118,101,114,0
00005162  206F 7665 
00005166  7200      
                    8499   @tetris_3:
00005168  2047 616D 8500          dc.b      32,71,97,109,101,32,111,118,101,114,33,32,0
0000516C  6520 6F76 
00005170  6572 2120 
00005174  00        
                    8501   @tetris_4:
00005176  2053 636F 8502          dc.b      32,83,99,111,114,101,58,32,37,100,32,0
0000517A  7265 3A20 
0000517E  2564 2000 
                    8503   @tetris_5:
00005182  5072 6573 8504          dc.b      80,114,101,115,115,32,97,110,121,32,107,101
00005186  7320 616E 
0000518A  7920 6B65 
0000518E  7920 746F 8505          dc.b      121,32,116,111,32,99,111,110,116,105,110,117
00005192  2063 6F6E 
00005196  7469 6E75 
0000519A  650A 00   8506          dc.b      101,10,0
                    8507   @tetris_6:
0000519E  7363 6F72 8508          dc.b      115,99,111,114,101,0
000051A2  6500      
                    8509   @tetris_7:
000051A4  0A0A 0A00 8510          dc.b      10,10,10,0
                    8511   @tetris_8:
000051A8  696E 6974 8512          dc.b      105,110,105,116,105,97,108,95,110,101,119,108
000051AC  6961 6C5F 
000051B0  6E65 776C 
000051B4  696E 6500 8513          dc.b      105,110,101,0
                    8514   @tetris_9:
000051B8  2000      8515          dc.b      32,0
                    8516   @tetris_10:
000051BA  7370 6163 8517          dc.b      115,112,97,99,101,0
000051BE  6500      
                    8518   @tetris_11:
000051C0  4350 454E 8519          dc.b      67,80,69,78,52,49,50,32,84,101,116,114,105,115
000051C4  3431 3220 
000051C8  5465 7472 
000051CC  6973      
000051CE  0A00      8520          dc.b      10,0
                    8521   @tetris_12:
000051D0  7469 746C 8522          dc.b      116,105,116,108,101,0
000051D4  6500      
                    8523   @tetris_13:
000051D6  2300      8524          dc.b      35,0
                    8525   @tetris_14:
000051D8  7461 626C 8526          dc.b      116,97,98,108,101,35,0
000051DC  6523 00   
                    8527   @tetris_15:
000051E0  2E00      8528          dc.b      46,0
                    8529   @tetris_16:
000051E2  7461 626C 8530          dc.b      116,97,98,108,101,46,0
000051E6  652E 00   
                    8531   @tetris_17:
000051EA  0A00      8532          dc.b      10,0
                    8533   @tetris_18:
000051EC  6E65 776C 8534          dc.b      110,101,119,108,105,110,101,49,0
000051F0  696E 6531 
000051F4  00        
                    8535   @tetris_19:
000051F6  0A53 636F 8536          dc.b      10,83,99,111,114,101,58,32,37,100,10,0
000051FA  7265 3A20 
000051FE  2564 0A00 
                    8537   @tetris_20:
00005202  7363 6F72 8538          dc.b      115,99,111,114,101,112,114,105,110,116,0
00005206  6570 7269 
0000520A  6E74 00   
                    8539   @tetris_21:
0000520E  0A47 616D 8540          dc.b      10,71,97,109,101,32,111,118,101,114,33,10,0
00005212  6520 6F76 
00005216  6572 210A 
0000521A  00        
                    8541          section   data
0000521C            8542                   align
          0000 521C 8543   DataStart       equ       *
                    8544   
                    8545   *********************************************************************************************************
                    8546   * Data Section for Initialised Data - these will be placed in rom as constants and have to be copied
                    8547   * to ram as part of the CStart routine in this file
                    8548   *********************************************************************************************************
                    8549   
                    8550   @itoa_1:
0000521C  2D32 3134 8551          dc.b      45,50,49,52,55,52,56,51,54,52,56,0
00005220  3734 3833 
00005224  3634 3800 
                    8552          section   bss
00005228            8553                   align
          0000 5228 8554   DataEnd         equ     *                       this label will equate to the address of the last byte of global variable in it
                    8555   
                    8556   *********************************************************************************************************
                    8557   * Section for Uninitialised Data held in ROM as constants
                    8558   *********************************************************************************************************
                    8559   
08030000            8560                   org     RamVectorTable          Ram based vector table must be stored here otherwise InstallException Handler will not work
          0000 000C 8561   DataLength      equ     DataEnd-DataStart       length of data needed to copy to Ram on bootup
                    8562   
                    8563   
08030000            8564   bss             org       bss
                    8565   
                    8566   *********************************************************************************************************
                    8567   * Build a ram based vector table for interrupts so we can install our own Exception Handlers in C code at run time
                    8568   * install the exception handler using the C function InstallExceptionHandler()
                    8569   *********************************************************************************************************
                    8570   
                    8571   
                    8572   
08030000            8573   VInitialSP       ds.l    1      dummy as we can't really install a handler for this
08030004            8574   VInitialPC       ds.l    1      dummy as we can't reallin install a handler for this
08030008            8575   VBusError        ds.l    1      storage for address of Bus Error Handler
0803000C            8576   VAddressError    ds.l    1      storage for address of Address Error Handler
08030010            8577   VIllegalInstr    ds.l    1      storage for address of Illegal Instruction handler
08030014            8578   VDividebyZero    ds.l    1      storage for address of divide by zero handler
08030018            8579   VCheck           ds.l    1      ditto
0803001C            8580   VTrapV           ds.l    1      ditto
08030020            8581   VPrivilege       ds.l    1      ditto
08030024            8582   VTrace           ds.l    1
08030028            8583   VLine1010emul    ds.l    1
0803002C            8584   VLine1111emul    ds.l    1
08030030            8585   VUnassigned1     ds.l    1
08030034            8586   VUnassigned2     ds.l    1
08030038            8587   VUnassigned3     ds.l    1
0803003C            8588   VUninit_IRQ      ds.l    1
08030040            8589   VUnassigned4     ds.l    1
08030044            8590   VUnassigned5     ds.l    1
08030048            8591   VUnassigned6     ds.l    1
0803004C            8592   VUnassigned7     ds.l    1
08030050            8593   VUnassigned8     ds.l    1
08030054            8594   VUnassigned9     ds.l    1
08030058            8595   VUnassigned10    ds.l    1
0803005C            8596   VUnassigned11    ds.l    1
08030060            8597   VSpuriousIRQ     ds.l    1
                    8598   
                    8599   * Interrupt handlers Vector 25-31
08030064            8600   VL1IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030068            8601   VL2IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0803006C            8602   VL3IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030070            8603   VL4IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030074            8604   VL5IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030078            8605   VL6IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0803007C            8606   VL7IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
                    8607   
                    8608   * Trap Handler vectors 32-47
08030080            8609   VTrap0           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030084            8610   VTrap1           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030088            8611   VTrap2           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0803008C            8612   VTrap3           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030090            8613   VTrap4           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030094            8614   VTrap5           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030098            8615   VTrap6           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0803009C            8616   VTrap7           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300A0            8617   VTrap8           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300A4            8618   VTrap9           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300A8            8619   VTrap10          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300AC            8620   VTrap11          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300B0            8621   VTrap12          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300B4            8622   VTrap13          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300B8            8623   VTrap14          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300BC            8624   VTrap15          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
                    8625   
                    8626   * the remaining exceptions are unassigned in the 68000 so no need to allocate storage for them here
                    8627   
                    8628   ***********************************************************************************************************
                    8629   * Other Variables
                    8630   ***********************************************************************************************************
                    8631   *__DebugA5       ds.l    1
                    8632   *__UserA5        ds.l    1
                    8633   
                    8634   ***********************************************************************************************************
080300C0            8635   __ungetbuf:     ds.l    1       ; ungetbuffer for stdio functions
080300C4            8636   __allocp:       ds.l    0       ; start of allocation units
080300C4            8637   __heap:         ds.l    0       ; pointers for malloc functions
                    8638   
                    8639   *__himem:       ds.l    himem            ; highest memory location + 1
                    8640   *__stklen:      ds.l    stklen           ; default stack size
                    8641   
                    8642   *********************************************************************************************************
                    8643   * Section for Heap
                    8644   *********************************************************************************************************
                    8645   
                    8646   _i:
080300C4            8647          ds.b      4
                    8648   _x:
080300C8            8649          ds.b      4
                    8650   _y:
080300CC            8651          ds.b      4
                    8652   _z:
080300D0            8653          ds.b      4
                    8654   _PortA_Count:
080300D4            8655          ds.b      4
                    8656   _Trace:
080300D8            8657          ds.b      4
                    8658   _GoFlag:
080300DC            8659          ds.b      4
                    8660   _Echo:
080300E0            8661          ds.b      4
                    8662   _d0:
080300E4            8663          ds.b      4
                    8664   _d1:
080300E8            8665          ds.b      4
                    8666   _d2:
080300EC            8667          ds.b      4
                    8668   _d3:
080300F0            8669          ds.b      4
                    8670   _d4:
080300F4            8671          ds.b      4
                    8672   _d5:
080300F8            8673          ds.b      4
                    8674   _d6:
080300FC            8675          ds.b      4
                    8676   _d7:
08030100            8677          ds.b      4
                    8678   _a0:
08030104            8679          ds.b      4
                    8680   _a1:
08030108            8681          ds.b      4
                    8682   _a2:
0803010C            8683          ds.b      4
                    8684   _a3:
08030110            8685          ds.b      4
                    8686   _a4:
08030114            8687          ds.b      4
                    8688   _a5:
08030118            8689          ds.b      4
                    8690   _a6:
0803011C            8691          ds.b      4
                    8692   _PC:
08030120            8693          ds.b      4
                    8694   _SSP:
08030124            8695          ds.b      4
                    8696   _USP:
08030128            8697          ds.b      4
                    8698   _SR:
0803012C            8699          ds.b      2
                    8700   _BreakPointAddress:
0803012E            8701          ds.b      32
                    8702   _BreakPointInstruction:
0803014E            8703          ds.b      16
                    8704   _BreakPointSetOrCleared:
0803015E            8705          ds.b      32
                    8706   _InstructionSize:
0803017E            8707          ds.b      4
                    8708   _WatchPointAddress:
08030182            8709          ds.b      32
                    8710   _WatchPointSetOrCleared:
080301A2            8711          ds.b      32
                    8712   _WatchPointString:
080301C2            8713          ds.b      800
                    8714   _TempString:
080304E2            8715          ds.b      100
                    8716   _Table:
08030546            8717          ds.b      300
                    8718   _TableColor:
08030672            8719          ds.b      315
                    8720   _currentColor:
080307AE            8721          ds.b      1
                    8722   _tetris_score:
080307B0            8723          ds.b      4
                    8724   _GameOn:
080307B4            8725          ds.b      1
                    8726   _tetris_timer:
080307B6            8727          ds.b      4
                    8728   _octl:
080307BA            8729          ds.b      1
                    8730   _current:
080307BC            8731          ds.b      28
                    8732   _ShapesArray:
080307D8            8733          ds.b      196
                    8734   _Tetris_Speed:
0803089C            8735          ds.b      8
                    8736   _printw_x:
080308A4            8737          ds.b      4
                    8738   _printw_y:
080308A8            8739          ds.b      4
                    8740   _cx:
080308AC            8741          ds.b      1
                    8742   _cy:
080308AE            8743          ds.b      1
                    8744   _timer_count:
080308B0            8745          ds.b      4
                    8746          section   heap
080308B4            8747                   align
          0803 08B4 8748   bssEnd          equ *                   end of storage space for unitialised variables
                    8749   *                                       we have to copy all initialised variable from rom to here at startup
          0803 08B4 8750   heap   equ       *
080308B4            8751                    align
          0000 0000

Assembly errors: 0
