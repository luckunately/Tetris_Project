680x0 MACRO ASSEMBLER   Version 5.00   (c) 1992-2005 Peter J. Fondse

Date: 12 Apr 2024      Time: 19:46:37          Source: C:\USERS\10054\ONEDRIVE\CPEN 412 FINAL PROJECT\FINAL_PROJECT_2023_SEM2_STUDENT_TEMPLATE\FINAL_PROJECT_2023_SEM2_STUDENT_TEMPLATE\PROGRAMS\TETRIS.SRC

                       1          section   code
                       2   ; for initial stack use $08040000 if your system uses SRAM for main memory (top of 256kbyte SRAM space)
                       3   ; When your system is converted to use DRAM for main memory set this constant to $0C000000 (top of 64MByte DRAM space
                       4   
          0804 0000    5   StackPointerVal     equ $08040000      when using sram
                       6   ;StackPointerVal     equ $0C000000      when using dram
                       7   
                       8   ; define RamVectorTable as $0803000 if your system uses SRAM for main memory
                       9   ; When your system is converted to use DRAM for main memory define RamVectorTable constant as $0B000000 (top of 64MByte DRAM space)
                      10   
          0803 0000   11   RamVectorTable      equ $08030000      when using sram
                      12   ;RamVectorTable      equ $0B000000      when using dram
                      13   
                      14   
                      15   
                      16   ; CSTART.ASM  -  C startup-code for Debug Monitor
00000000              17                   align
                      18   
00000000              19                   org $00000000          ;start of rom based vector table, 68k hard wired to expect this at $0
                      20   
00000000  0804 0000   21   InitialSP       dc.l StackPointerVal   ;initial supervisor state stack pointer(stack decrements first before being used)
00000004  0000 0400   22   InitialPC       dc.l start             ;address of 1st instruction of program after a reset
00000008  0000 0796   23   BusError        dc.l E_BErro           ;bus error - stop program
0000000C  0000 07A8   24   AddressError    dc.l E_AErro           ;address error - stop program
00000010  0000 07BA   25   IllegalInstr    dc.l E_IInst           ;illegal instruction - stop program
00000014  0000 07CC   26   DividebyZero    dc.l E_DZero           ;divide by zero error - stop program
00000018  0000 07DE   27   Check           dc.l E_Check           ;Check instruction - stop program
0000001C  0000 07F0   28   TrapV           dc.l E_Trapv           ;Trapv instruction - stop program
00000020  0000 0802   29   Privilege       dc.l E_Priv            ;privilige violation - stop program
00000024  0000 0814   30   Trace           dc.l E_Trace           ;stop on trace
00000028  0000 0826   31   Line1010emul    dc.l E_1010            ;1010 instructions stop
0000002C  0000 0838   32   Line1111emul    dc.l E_1111            ;1111 instructions stop
00000030  0000 084A   33   Unassigned1     dc.l E_Unnas1           ;unassigned vector
00000034  0000 084A   34   Unassigned2     dc.l E_Unnas2           ;unassigned vector
00000038  0000 084A   35   Unassigned3     dc.l E_Unnas3           ;unassigned vector
0000003C  0000 084A   36   Uninit_IRQ      dc.l E_UnitI           ;uninitialised interrupt
00000040  0000 084A   37   Unassigned4     dc.l E_Unnas4           ;unassigned vector
00000044  0000 084A   38   Unassigned5     dc.l E_Unnas5           ;unassigned vector
00000048  0000 084A   39   Unassigned6     dc.l E_Unnas6           ;unassigned vector
0000004C  0000 084A   40   Unassigned7     dc.l E_Unnas7           ;unassigned vector
00000050  0000 084A   41   Unassigned8     dc.l E_Unnas8           ;unassigned vector
00000054  0000 084A   42   Unassigned9     dc.l E_Unnas9           ;unassigned vector
00000058  0000 084A   43   Unassigned10    dc.l E_Unnas10           ;unassigned vector
0000005C  0000 084A   44   Unassigned11    dc.l E_Unnas11           ;unassigned vector
00000060  0000 084A   45   SpuriousIRQ     dc.l E_Spuri           ;stop on spurious irq
                      46   *
                      47   *
00000064  0000 042E   48   Level1IRQ       dc.l Level1RamISR
00000068  0000 0440   49   Level2IRQ       dc.l Level2RamISR
0000006C  0000 0452   50   Level3IRQ       dc.l Level3RamISR
00000070  0000 0464   51   Level4IRQ       dc.l Level4RamISR
00000074  0000 0476   52   Level5IRQ       dc.l Level5RamISR
00000078  0000 0580   53   Level6IRQ       dc.l Level6RamISR
0000007C  0000 0592   54   Level7IRQ       dc.l Level7RamISR
                      55   *
                      56   *
00000080  0000 05A4   57   Trap0           dc.l Trap0RamISR        ; User installed trap handler
00000084  0000 05B6   58   Trap1           dc.l Trap1RamISR        ; User installed trap handler
00000088  0000 05C8   59   Trap2           dc.l Trap2RamISR        ; User installed trap handler
0000008C  0000 05DA   60   Trap3           dc.l Trap3RamISR        ; User installed trap handler
00000090  0000 05EC   61   Trap4           dc.l Trap4RamISR        ; User installed trap handler
00000094  0000 05FE   62   Trap5           dc.l Trap5RamISR        ; User installed trap handler
00000098  0000 0610   63   Trap6           dc.l Trap6RamISR        ; User installed trap handler
0000009C  0000 0622   64   Trap7           dc.l Trap7RamISR        ; User installed trap handler
000000A0  0000 0634   65   Trap8           dc.l Trap8RamISR        ; User installed trap handler
000000A4  0000 0646   66   Trap9           dc.l Trap9RamISR        ; User installed trap handler
000000A8  0000 0658   67   Trap10          dc.l Trap10RamISR       ; User installed trap handler
000000AC  0000 066A   68   Trap11          dc.l Trap11RamISR       ; User installed trap handler
000000B0  0000 067C   69   Trap12          dc.l Trap12RamISR       ; User installed trap handler
000000B4  0000 068E   70   Trap13          dc.l Trap13RamISR       ; User installed trap handler
000000B8  0000 06A0   71   Trap14          dc.l Trap14RamISR       ; User installed trap handler
000000BC  0000 0790   72   Trap15          dc.l Trap15RamISR       ; User installed trap handler
                      73   
                      74   *
                      75   * Other vectors 64-255 are users vectors for autovectored IO device (not implemented in TG68)
                      76   *
                      77   
00000400              78                   org       $00000400
                      79   
00000400  46FC 2700   80   start:          move.w     #$2700,SR             ;set interrupts to disable until later
                      81   
                      82   *************************************************************************************
                      83   ** add some 68000 instruction to read and write to memory, IO etc. This doesn't do anything
                      84   ** important, it just creates read and write bus cycles to specific addresses which
                      85   ** help with debugging hardware in Quartus simulations
                      86   **************************************************************************************
                      87   
                      88                   ; some important initialisation do not modify
00000404  23FC FFFF   89                   move.l    #-1,__ungetbuf  ; unget-buffer for keyboard input
00000408  FFFF 0803 
0000040C  00C0      
0000040E  23FC 0000   90                   move.l    #0,__allocp     ; pointer to allocated memory for malloc-function
00000412  0000 0803 
00000416  00C4      
00000418  23FC 0803   91                   move.l    #heap,__heap    ; pointer to free memory
0000041C  08B4 0803 
00000420  00C4      
00000422  46FC 2000   92                   move.w    #$2000,SR       ; enable interrupts
                      93   
00000426  4EB9 0000   94   mainloop        jsr       _main
0000042A  217E      
0000042C  60F8        95                   bra       mainloop
                      96   
                      97   *********************************************************************************************************
                      98   * Code to call Ram Based Interrupt handler and other exeception handler code
                      99   *********************************************************************************************************
0000042E  48E7 FFFE  100   Level1RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000432  2079 0803  101                   move.l    VL1IRQ,a0               get ram based address into a0
00000436  0064      
00000438  4E90       102                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000043A  4CDF 7FFF  103                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000043E  4E73       104                   rte
00000440  48E7 FFFE  105   Level2RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000444  2079 0803  106                   move.l    VL2IRQ,a0               get ram based address into a0
00000448  0068      
0000044A  4E90       107                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000044C  4CDF 7FFF  108                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000450  4E73       109                   rte
00000452  48E7 FFFE  110   Level3RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000456  2079 0803  111                   move.l    VL3IRQ,a0               get ram based address into a0
0000045A  006C      
0000045C  4E90       112                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000045E  4CDF 7FFF  113                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000462  4E73       114                   rte
00000464  48E7 FFFE  115   Level4RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000468  2079 0803  116                   move.l    VL4IRQ,a0               get ram based address into a0
0000046C  0070      
0000046E  4E90       117                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
00000470  4CDF 7FFF  118                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000474  4E73       119                   rte
                     120   
                     121   * Trace trap Handler
                     122   
                     123   Level5RamISR
                     124   *
                     125   **         Copy 68000 registers from debug monitor Variables,
                     126   *
                     127   *
00000476  23FC 0000  128                   move.l    #1,_Trace              switch on Trace Mode
0000047A  0001 0803 
0000047E  00D8      
00000480  13FC 0000  129                   move.b    #$0,$0040000A          turn off a trace exception so we don't when generate a trace when disassembling instruction in the register dump (disassembling causes access to use program)
00000484  0040 000A 
00000488  33DF 0803  130                   move.w    (sp)+,_SR              get at the users status register pointed to by stack pointer and copy
0000048C  012C      
0000048E  23DF 0803  131                   move.l    (sp)+,_PC              get at the users program counter and copy
00000492  0120      
                     132   *
00000494  23CF 0803  133                   move.l    SP,_SSP                copy system stack pointer to debug monitor variable
00000498  0124      
0000049A  23C0 0803  134                   move.l    d0,_d0
0000049E  00E4      
000004A0  23C1 0803  135                   move.l    d1,_d1
000004A4  00E8      
000004A6  23C2 0803  136                   move.l    d2,_d2
000004AA  00EC      
000004AC  23C3 0803  137                   move.l    d3,_d3
000004B0  00F0      
000004B2  23C4 0803  138                   move.l    d4,_d4
000004B6  00F4      
000004B8  23C5 0803  139                   move.l    d5,_d5
000004BC  00F8      
000004BE  23C6 0803  140                   move.l    d6,_d6
000004C2  00FC      
000004C4  23C7 0803  141                   move.l    d7,_d7
000004C8  0100      
                     142   *
000004CA  23C8 0803  143                   move.l    a0,_a0
000004CE  0104      
000004D0  23C9 0803  144                   move.l    a1,_a1
000004D4  0108      
000004D6  23CA 0803  145                   move.l    a2,_a2
000004DA  010C      
000004DC  23CB 0803  146                   move.l    a3,_a3
000004E0  0110      
000004E2  23CC 0803  147                   move.l    a4,_a4
000004E6  0114      
000004E8  23CD 0803  148                   move.l    a5,_a5
000004EC  0118      
000004EE  23CE 0803  149                   move.l    a6,_a6
000004F2  011C      
000004F4  4E68       150                   move.l    usp,a0
000004F6  23C8 0803  151                   move.l    a0,_USP
000004FA  0128      
                     152   *
000004FC  2079 0803  153                   move.l    VL5IRQ,a0              get ram based address into a0, trace exception for next instruction will be generated in Menu SPACE command
00000500  0074      
00000502  4E90       154                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     155   
                     156   ** After trace, reload 68000 registers with new values before continuing
                     157   
00000504  2039 0803  158                   move.l   _d0,d0
00000508  00E4      
0000050A  2239 0803  159                   move.l   _d1,d1
0000050E  00E8      
00000510  2439 0803  160                   move.l   _d2,d2
00000514  00EC      
00000516  2639 0803  161                   move.l   _d3,d3
0000051A  00F0      
0000051C  2839 0803  162                   move.l   _d4,d4
00000520  00F4      
00000522  2A39 0803  163                   move.l   _d5,d5
00000526  00F8      
00000528  2C39 0803  164                   move.l   _d6,d6
0000052C  00FC      
0000052E  2E39 0803  165                   move.l   _d7,d7
00000532  0100      
                     166   
00000534  2079 0803  167                   move.l   _USP,a0
00000538  0128      
0000053A  4E60       168                   move.l   a0,USP                     load user stack pointer
0000053C  2079 0803  169                   move.l   _a0,a0
00000540  0104      
00000542  2279 0803  170                   move.l   _a1,a1
00000546  0108      
00000548  2479 0803  171                   move.l   _a2,a2
0000054C  010C      
0000054E  2679 0803  172                   move.l   _a3,a3
00000552  0110      
00000554  2879 0803  173                   move.l   _a4,a4
00000558  0114      
0000055A  2A79 0803  174                   move.l   _a5,a5
0000055E  0118      
00000560  2C79 0803  175                   move.l   _a6,a6
00000564  011C      
                     176   
00000566  2E79 0803  177                   move.l   _SSP,sp
0000056A  0124      
0000056C  2F39 0803  178                   move.l   _PC,-(sp)
00000570  0120      
00000572  3F39 0803  179                   move.w   _SR,-(sp)
00000576  012C      
00000578  11F8 0074  180                   move.b    $00000074,$0	          read trace exception vector after accessing disassembly to reset the trace request causes by disassembling program above
0000057C  0000      
0000057E  4E73       181                   rte
                     182   
                     183   * address trap handler
                     184   
00000580  48E7 FFFE  185   Level6RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000584  2079 0803  186                   move.l    VL6IRQ,a0               get ram based address into a0
00000588  0078      
0000058A  4E90       187                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000058C  4CDF 7FFF  188                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000590  4E73       189                   rte
                     190   
00000592  48E7 FFFE  191   Level7RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000596  2079 0803  192                   move.l    VL7IRQ,a0               get ram based address into a0
0000059A  007C      
0000059C  4E90       193                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000059E  4CDF 7FFF  194                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005A2  4E73       195                   rte
                     196   
                     197   
                     198   ********************************************************************************************************
                     199   * Ram based Trap handler and other exeception handler code
                     200   *********************************************************************************************************
                     201   
000005A4  48E7 FFFE  202   Trap0RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005A8  2079 0803  203                   move.l    VTrap0,a0                get ram based address into a0
000005AC  0080      
000005AE  4E90       204                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000005B0  4CDF 7FFF  205                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005B4  4E73       206                   rte
                     207   
000005B6  48E7 FFFE  208   Trap1RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005BA  2079 0803  209                   move.l    VTrap1,a0                get ram based address into a0
000005BE  0084      
000005C0  4E90       210                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000005C2  4CDF 7FFF  211                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005C6  4E73       212                   rte
                     213   
000005C8  48E7 FFFE  214   Trap2RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005CC  2079 0803  215                   move.l    VTrap2,a0                get ram based address into a0
000005D0  0088      
000005D2  4E90       216                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000005D4  4CDF 7FFF  217                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005D8  4E73       218                   rte
                     219   
000005DA  48E7 FFFE  220   Trap3RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005DE  2079 0803  221                   move.l    VTrap3,a0                get ram based address into a0
000005E2  008C      
000005E4  4E90       222                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000005E6  4CDF 7FFF  223                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005EA  4E73       224                   rte
                     225   
000005EC  48E7 FFFE  226   Trap4RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005F0  2079 0803  227                   move.l    VTrap4,a0                get ram based address into a0
000005F4  0090      
000005F6  4E90       228                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000005F8  4CDF 7FFF  229                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005FC  4E73       230                   rte
                     231   
000005FE  48E7 FFFE  232   Trap5RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000602  2079 0803  233                   move.l    VTrap5,a0                get ram based address into a0
00000606  0094      
00000608  4E90       234                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000060A  4CDF 7FFF  235                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000060E  4E73       236                   rte
                     237   
00000610  48E7 FFFE  238   Trap6RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000614  2079 0803  239                   move.l    VTrap6,a0                get ram based address into a0
00000618  0098      
0000061A  4E90       240                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000061C  4CDF 7FFF  241                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000620  4E73       242                   rte
                     243   
00000622  48E7 FFFE  244   Trap7RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000626  2079 0803  245                   move.l    VTrap7,a0                get ram based address into a0
0000062A  009C      
0000062C  4E90       246                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000062E  4CDF 7FFF  247                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000632  4E73       248                   rte
                     249   
00000634  48E7 FFFE  250   Trap8RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000638  2079 0803  251                   move.l    VTrap8,a0                get ram based address into a0
0000063C  00A0      
0000063E  4E90       252                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000640  4CDF 7FFF  253                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000644  4E73       254                   rte
                     255   
00000646  48E7 FFFE  256   Trap9RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000064A  2079 0803  257                   move.l    VTrap9,a0                get ram based address into a0
0000064E  00A4      
00000650  4E90       258                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000652  4CDF 7FFF  259                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000656  4E73       260                   rte
                     261   
00000658  48E7 FFFE  262   Trap10RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000065C  2079 0803  263                   move.l    VTrap10,a0                get ram based address into a0
00000660  00A8      
00000662  4E90       264                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000664  4CDF 7FFF  265                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000668  4E73       266                   rte
                     267   
0000066A  48E7 FFFE  268   Trap11RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000066E  2079 0803  269                   move.l    VTrap11,a0                get ram based address into a0
00000672  00AC      
00000674  4E90       270                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000676  4CDF 7FFF  271                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000067A  4E73       272                   rte
                     273   
0000067C  48E7 FFFE  274   Trap12RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000680  2079 0803  275                   move.l    VTrap12,a0                get ram based address into a0
00000684  00B0      
00000686  4E90       276                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000688  4CDF 7FFF  277                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000068C  4E73       278                   rte
                     279   
0000068E  48E7 FFFE  280   Trap13RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000692  2079 0803  281                   move.l    VTrap13,a0                get ram based address into a0
00000696  00B4      
00000698  4E90       282                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000069A  4CDF 7FFF  283                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000069E  4E73       284                   rte
                     285   
                     286   Trap14RamISR    ;Break Point Handler
                     287   *
                     288   **         Copy 68000 registers from debug monitor Variables
                     289   *
000006A0  23FC 0000  290                   move.l    #1,_Trace      switch on Trace Mode
000006A4  0001 0803 
000006A8  00D8      
000006AA  33DF 0803  291                   move.w    (sp)+,_SR       get at the users status register pointed to by stack pointer and copy
000006AE  012C      
000006B0  23DF 0803  292                   move.l    (sp)+,_PC      get at the users program counter and copy
000006B4  0120      
                     293   *
000006B6  23C0 0803  294                   move.l    d0,_d0
000006BA  00E4      
000006BC  23C1 0803  295                   move.l    d1,_d1
000006C0  00E8      
000006C2  23C2 0803  296                   move.l    d2,_d2
000006C6  00EC      
000006C8  23C3 0803  297                   move.l    d3,_d3
000006CC  00F0      
000006CE  23C4 0803  298                   move.l    d4,_d4
000006D2  00F4      
000006D4  23C5 0803  299                   move.l    d5,_d5
000006D8  00F8      
000006DA  23C6 0803  300                   move.l    d6,_d6
000006DE  00FC      
000006E0  23C7 0803  301                   move.l    d7,_d7
000006E4  0100      
                     302   *
000006E6  23C8 0803  303                   move.l    a0,_a0
000006EA  0104      
000006EC  23C9 0803  304                   move.l    a1,_a1
000006F0  0108      
000006F2  23CA 0803  305                   move.l    a2,_a2
000006F6  010C      
000006F8  23CB 0803  306                   move.l    a3,_a3
000006FC  0110      
000006FE  23CC 0803  307                   move.l    a4,_a4
00000702  0114      
00000704  23CD 0803  308                   move.l    a5,_a5
00000708  0118      
0000070A  23CE 0803  309                   move.l    a6,_a6
0000070E  011C      
00000710  4E68       310                   move.l    USP,a0
00000712  23C8 0803  311                   move.l    a0,_USP
00000716  0128      
                     312   *
00000718  2079 0803  313                   move.l    VTrap14,a0             get ram based address into a0
0000071C  00B8      
0000071E  4E90       314                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     315   
                     316   ** After breakpoint reload 68000 registers with new values before continuing
                     317   
                     318   *                move.b    #$ff,$0040000A     generate a trace exception for the next instruction
00000720  2039 0803  319                   move.l   _d0,d0
00000724  00E4      
00000726  2239 0803  320                   move.l   _d1,d1
0000072A  00E8      
0000072C  2439 0803  321                   move.l   _d2,d2
00000730  00EC      
00000732  2639 0803  322                   move.l   _d3,d3
00000736  00F0      
00000738  2839 0803  323                   move.l   _d4,d4
0000073C  00F4      
0000073E  2A39 0803  324                   move.l   _d5,d5
00000742  00F8      
00000744  2C39 0803  325                   move.l   _d6,d6
00000748  00FC      
0000074A  2E39 0803  326                   move.l   _d7,d7
0000074E  0100      
                     327   
00000750  2079 0803  328                   move.l   _USP,a0
00000754  0128      
00000756  4E60       329                   move.l   a0,USP        load user stack pointer A7
00000758  2079 0803  330                   move.l   _a0,a0
0000075C  0104      
0000075E  2279 0803  331                   move.l   _a1,a1
00000762  0108      
00000764  2479 0803  332                   move.l   _a2,a2
00000768  010C      
0000076A  2679 0803  333                   move.l   _a3,a3
0000076E  0110      
00000770  2879 0803  334                   move.l   _a4,a4
00000774  0114      
00000776  2A79 0803  335                   move.l   _a5,a5
0000077A  0118      
0000077C  2C79 0803  336                   move.l   _a6,a6
00000780  011C      
                     337   
00000782  2F39 0803  338                   move.l   _PC,-(sp)
00000786  0120      
00000788  3F39 0803  339                   move.w   _SR,-(sp)
0000078C  012C      
0000078E  4E73       340                   rte
                     341   
00000790  4EF9 0000  342   Trap15RamISR    jmp     _CallDebugMonitor
00000794  1E32      
                     343   *                movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                     344   *                move.l    VTrap15,a0                get ram based address into a0
                     345   *                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                     346   *                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                     347   *                rte
                     348   
                     349   *********************************************************************************************************
                     350   *Default exception handler for everything without a specific handler
                     351   *********************************************************************************************************
                     352   
                     353   *
                     354   **              Jump here for each unhandled exception
                     355   **              If you need to, MAKE SURE YOU SAVE ALL IMPORTANT REGISTERS AND RESTORE THEM BEFORE RETURNING (IF APPROPRIATE)
                     356   *
                     357   
00000796  48E7 FFFE  358   E_BErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000079A  2079 0803  359                   move.l    VBusError,a0            get ram based address into a0
0000079E  0008      
000007A0  4E90       360                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000007A2  4CDF 7FFF  361                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000007A6  4E73       362                   rte
000007A8  48E7 FFFE  363   E_AErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000007AC  2079 0803  364                   move.l    VAddressError,a0        get ram based address into a0
000007B0  000C      
000007B2  4E90       365                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000007B4  4CDF 7FFF  366                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000007B8  4E73       367                   rte
000007BA  48E7 FFFE  368   E_IInst         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000007BE  2079 0803  369                   move.l    VIllegalInstr,a0        get ram based address into a0
000007C2  0010      
000007C4  4E90       370                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000007C6  4CDF 7FFF  371                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000007CA  4E73       372                   rte
000007CC  48E7 FFFE  373   E_DZero         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000007D0  2079 0803  374                   move.l    VDividebyZero,a0        get ram based address into a0
000007D4  0014      
000007D6  4E90       375                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000007D8  4CDF 7FFF  376                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000007DC  4E73       377                   rte
000007DE  48E7 FFFE  378   E_Check         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000007E2  2079 0803  379                   move.l    VCheck,a0               get ram based address into a0
000007E6  0018      
000007E8  4E90       380                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000007EA  4CDF 7FFF  381                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000007EE  4E73       382                   rte
000007F0  48E7 FFFE  383   E_Trapv         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000007F4  2079 0803  384                   move.l    VTrapV,a0               get ram based address into a0
000007F8  001C      
000007FA  4E90       385                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000007FC  4CDF 7FFF  386                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000800  4E73       387                   rte
00000802  48E7 FFFE  388   E_Priv          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000806  2079 0803  389                   move.l    VPrivilege,a0           get ram based address into a0
0000080A  0020      
0000080C  4E90       390                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000080E  4CDF 7FFF  391                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000812  4E73       392                   rte
00000814  48E7 FFFE  393   E_Trace         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000818  2079 0803  394                   move.l    VTrace,a0               get ram based address into a0
0000081C  0024      
0000081E  4E90       395                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000820  4CDF 7FFF  396                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000824  4E73       397                   rte
00000826  48E7 FFFE  398   E_1010          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000082A  2079 0803  399                   move.l    VLine1010emul,a0        get ram based address into a0
0000082E  0028      
00000830  4E90       400                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000832  4CDF 7FFF  401                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000836  4E73       402                   rte
00000838  48E7 FFFE  403   E_1111          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000083C  2079 0803  404                   move.l    VLine1111emul,a0        get ram based address into a0
00000840  002C      
00000842  4E90       405                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000844  4CDF 7FFF  406                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000848  4E73       407                   rte
                     408   E_Unnas1
                     409   E_Unnas2
                     410   E_Unnas3
                     411   E_UnitI
                     412   E_Unnas4
                     413   E_Unnas5
                     414   E_Unnas6
                     415   E_Unnas7
                     416   E_Unnas8
                     417   E_Unnas9
                     418   E_Unnas10
                     419   E_Unnas11
                     420   E_Spuri
0000084A  60FE       421   _stop            bra _stop                         stop
                     422   ***************************************************************************************************
                     423   * Go() function in debug monitor
                     424   ***************************************************************************************************
                     425   _go
0000084C  2E79 0803  426                   move.l   _SSP,a7        load system stack pointer (remember we are in supervisor mode when running this so a7 is the System stack pointer)
00000850  0124      
00000852  2F39 0803  427                   move.l   _PC,-(sp)      copy debug monitor PC variable to the stack
00000856  0120      
00000858  3F39 0803  428                   move.w   _SR,-(sp)      copy debug monitor status reg to the stack
0000085C  012C      
                     429   
0000085E  1038 0078  430                   move.b   $00000078,d0  remove any spurious address exception arising after power on
00000862  2039 0803  431                   move.l   _d0,d0
00000866  00E4      
00000868  2239 0803  432                   move.l   _d1,d1
0000086C  00E8      
0000086E  2439 0803  433                   move.l   _d2,d2
00000872  00EC      
00000874  2639 0803  434                   move.l   _d3,d3
00000878  00F0      
0000087A  2839 0803  435                   move.l   _d4,d4
0000087E  00F4      
00000880  2A39 0803  436                   move.l   _d5,d5
00000884  00F8      
00000886  2C39 0803  437                   move.l   _d6,d6
0000088A  00FC      
0000088C  2E39 0803  438                   move.l   _d7,d7
00000890  0100      
                     439   
00000892  2079 0803  440                   move.l   _USP,a0
00000896  0128      
00000898  4E60       441                   move.l   a0,USP        load user stack pointer (remember we are in supervisor mode when running this, so a7 is the System stack pointer)
0000089A  2079 0803  442                   move.l   _a0,a0
0000089E  0104      
000008A0  2279 0803  443                   move.l   _a1,a1
000008A4  0108      
000008A6  2479 0803  444                   move.l   _a2,a2
000008AA  010C      
000008AC  2679 0803  445                   move.l   _a3,a3
000008B0  0110      
000008B2  2879 0803  446                   move.l   _a4,a4
000008B6  0114      
000008B8  2A79 0803  447                   move.l   _a5,a5
000008BC  0118      
000008BE  2C79 0803  448                   move.l   _a6,a6
000008C2  011C      
000008C4  4E73       449                   rte                    load the status reg and PC from the stack and commence running
                     450                                          *used to be rte but this didn't load the status byte
                     451   
                     452   ; C:\USERS\10054\ONEDRIVE\CPEN 412 FINAL PROJECT\FINAL_PROJECT_2023_SEM2_STUDENT_TEMPLATE\FINAL_PROJECT_2023_SEM2_STUDENT_TEMPLATE\PROGRAMS\DEBUGMONITORCODE\M68KDEBUG (NO DISASSEMBLER).C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                     453   ; #include "DebugMonitor.h"
                     454   ; #include "say_phoneme.h"
                     455   ; // use 08030000 for a system running from sram or 0B000000 for system running from dram
                     456   ; #define StartOfExceptionVectorTable 0x08030000
                     457   ; //#define StartOfExceptionVectorTable 0x0B000000
                     458   ; // use 0C000000 for dram or hex 08040000 for sram
                     459   ; #define TopOfStack 0x08040000
                     460   ; //#define TopOfStack 0x0C000000
                     461   ; #define voice *(char*)(0xFF00FFFE)
                     462   ; #define VGA_ADDRESS 0xFFFF0000 
                     463   ; #define octlAddress1 *(char *)(0xFF030001)
                     464   ; #define octlAddress *(char *)(0xFF030000)
                     465   ; /* DO NOT INITIALISE GLOBAL VARIABLES - DO IT in MAIN() */
                     466   ; unsigned int i, x, y, z, PortA_Count;
                     467   ; int     Trace, GoFlag, Echo;                       // used in tracing/single stepping
                     468   ; // 68000 register dump and preintialise value (these can be changed by the user program when it is running, e.g. stack pointer, registers etc
                     469   ; unsigned int d0,d1,d2,d3,d4,d5,d6,d7 ;
                     470   ; unsigned int a0,a1,a2,a3,a4,a5,a6 ;
                     471   ; unsigned int PC, SSP, USP ;
                     472   ; unsigned short int SR;
                     473   ; // Breakpoint variables
                     474   ; unsigned int BreakPointAddress[8];                      //array of 8 breakpoint addresses
                     475   ; unsigned short int BreakPointInstruction[8] ;           // to hold the instruction opcode at the breakpoint
                     476   ; unsigned int BreakPointSetOrCleared[8] ;
                     477   ; unsigned int InstructionSize ;
                     478   ; // watchpoint variables
                     479   ; unsigned int WatchPointAddress[8];                      //array of 8 breakpoint addresses
                     480   ; unsigned int WatchPointSetOrCleared[8] ;
                     481   ; char WatchPointString[8][100] ;
                     482   ; char    TempString[100] ;
                     483   ; void Wait1ms(void)
                     484   ; {
                     485   _Wait1ms:
000008C6  2F02       486          move.l    D2,-(A7)
                     487   ; int i;
                     488   ; for (i = 0; i < 1000; i++)
000008C8  4282       489          clr.l     D2
                     490   Wait1ms_1:
000008CA  0C82 0000  491          cmp.l     #1000,D2
000008CE  03E8      
000008D0  6C04       492          bge.s     Wait1ms_3
000008D2  5282       493          addq.l    #1,D2
000008D4  60F4       494          bra       Wait1ms_1
                     495   Wait1ms_3:
000008D6  241F       496          move.l    (A7)+,D2
000008D8  4E75       497          rts
                     498   ; ;
                     499   ; }
                     500   ; void Wait3ms(void)
                     501   ; {
                     502   _Wait3ms:
000008DA  2F02       503          move.l    D2,-(A7)
                     504   ; int i;
                     505   ; for (i = 0; i < 3; i++)
000008DC  4282       506          clr.l     D2
                     507   Wait3ms_1:
000008DE  0C82 0000  508          cmp.l     #3,D2
000008E2  0003      
000008E4  6C08       509          bge.s     Wait3ms_3
                     510   ; Wait1ms();
000008E6  4EB8 08C6  511          jsr       _Wait1ms
000008EA  5282       512          addq.l    #1,D2
000008EC  60F0       513          bra       Wait3ms_1
                     514   Wait3ms_3:
000008EE  241F       515          move.l    (A7)+,D2
000008F0  4E75       516          rts
                     517   ; }
                     518   ; void Wait250ms(void)
                     519   ; {
                     520   _Wait250ms:
000008F2  2F02       521          move.l    D2,-(A7)
                     522   ; int i;
                     523   ; for (i = 0; i < 250; i++)
000008F4  4282       524          clr.l     D2
                     525   Wait250ms_1:
000008F6  0C82 0000  526          cmp.l     #250,D2
000008FA  00FA      
000008FC  6C08       527          bge.s     Wait250ms_3
                     528   ; Wait1ms();
000008FE  4EB8 08C6  529          jsr       _Wait1ms
00000902  5282       530          addq.l    #1,D2
00000904  60F0       531          bra       Wait250ms_1
                     532   Wait250ms_3:
00000906  241F       533          move.l    (A7)+,D2
00000908  4E75       534          rts
                     535   ; }
                     536   ; void Wait500ms(void)
                     537   ; {
                     538   _Wait500ms:
0000090A  2F02       539          move.l    D2,-(A7)
                     540   ; int i;
                     541   ; for (i = 0; i < 500; i++)
0000090C  4282       542          clr.l     D2
                     543   Wait500ms_1:
0000090E  0C82 0000  544          cmp.l     #500,D2
00000912  01F4      
00000914  6C08       545          bge.s     Wait500ms_3
                     546   ; Wait1ms();
00000916  4EB8 08C6  547          jsr       _Wait1ms
0000091A  5282       548          addq.l    #1,D2
0000091C  60F0       549          bra       Wait500ms_1
                     550   Wait500ms_3:
0000091E  241F       551          move.l    (A7)+,D2
00000920  4E75       552          rts
                     553   ; }
                     554   ; void Wait750ms(void)
                     555   ; {
                     556   _Wait750ms:
00000922  2F02       557          move.l    D2,-(A7)
                     558   ; int i;
                     559   ; for (i = 0; i < 750; i++)
00000924  4282       560          clr.l     D2
                     561   Wait750ms_1:
00000926  0C82 0000  562          cmp.l     #750,D2
0000092A  02EE      
0000092C  6C08       563          bge.s     Wait750ms_3
                     564   ; Wait1ms();
0000092E  4EB8 08C6  565          jsr       _Wait1ms
00000932  5282       566          addq.l    #1,D2
00000934  60F0       567          bra       Wait750ms_1
                     568   Wait750ms_3:
00000936  241F       569          move.l    (A7)+,D2
00000938  4E75       570          rts
                     571   ; }
                     572   ; void InstallExceptionHandler( void (*function_ptr)(), int level)
                     573   ; {
                     574   _InstallExceptionHandler:
0000093A  4E56 FFFC  575          link      A6,#-4
                     576   ; volatile long int *RamVectorAddress = (volatile long int *)(StartOfExceptionVectorTable) ;   // pointer to the Ram based interrupt vector table created in Cstart in debug monitor
0000093E  2D7C 0803  577          move.l    #134414336,-4(A6)
00000942  0000 FFFC 
                     578   ; RamVectorAddress[level] = (long int *)(function_ptr);
00000946  206E FFFC  579          move.l    -4(A6),A0
0000094A  202E 000C  580          move.l    12(A6),D0
0000094E  E588       581          lsl.l     #2,D0
00000950  21AE 0008  582          move.l    8(A6),0(A0,D0.L)
00000954  0800      
00000956  4E5E       583          unlk      A6
00000958  4E75       584          rts
                     585   ; }
                     586   ; void say_phoneme   (char phoneme_code) {
                     587   _say_phoneme:
0000095A  4E56 0000  588          link      A6,#0
                     589   ; //you need to write this function
                     590   ; voice = phoneme_code;
0000095E  13EE 000B  591          move.b    11(A6),-16711682
00000962  FF00 FFFE 
00000966  4E5E       592          unlk      A6
00000968  4E75       593          rts
                     594   ; }
                     595   ; void say_Sasha(){
                     596   _say_Sasha:
                     597   ; talkphonemeSS();
0000096A  4EB9 0000  598          jsr       _talkphonemeSS
0000096E  2566      
                     599   ; talkphonemeAA();
00000970  4EB9 0000  600          jsr       _talkphonemeAA
00000974  2362      
                     601   ; talkphonemeSH();
00000976  4EB9 0000  602          jsr       _talkphonemeSH
0000097A  255A      
                     603   ; // talkphonemeHH1();
                     604   ; talkphonemeAA();
0000097C  4EB9 0000  605          jsr       _talkphonemeAA
00000980  2362      
                     606   ; endword();
00000982  4EB9 0000  607          jsr       _endword
00000986  2A08      
00000988  4E75       608          rts
                     609   ; }
                     610   ; void say_hello() {
                     611   _say_hello:
                     612   ; talkphonemeHH1();
0000098A  4EB9 0000  613          jsr       _talkphonemeHH1
0000098E  2476      
                     614   ; talkphonemeEH();
00000990  4EB9 0000  615          jsr       _talkphonemeEH
00000994  240A      
                     616   ; talkphonemeLL();
00000996  4EB9 0000  617          jsr       _talkphonemeLL
0000099A  24D6      
                     618   ; talkphonemeAX();
0000099C  4EB9 0000  619          jsr       _talkphonemeAX
000009A0  239E      
                     620   ; talkphonemeOW();
000009A2  4EB9 0000  621          jsr       _talkphonemeOW
000009A6  251E      
                     622   ; endword();
000009A8  4EB9 0000  623          jsr       _endword
000009AC  2A08      
000009AE  4E75       624          rts
                     625   ; }
                     626   ; void say_world() {
                     627   _say_world:
                     628   ; talkphonemeWW();
000009B0  4EB9 0000  629          jsr       _talkphonemeWW
000009B4  25D2      
                     630   ; talkphonemeER2();
000009B6  4EB9 0000  631          jsr       _talkphonemeER2
000009BA  242E      
                     632   ; talkphonemeLL();
000009BC  4EB9 0000  633          jsr       _talkphonemeLL
000009C0  24D6      
                     634   ; talkphonemeDD1();
000009C2  4EB9 0000  635          jsr       _talkphonemeDD1
000009C6  23DA      
                     636   ; endword();
000009C8  4EB9 0000  637          jsr       _endword
000009CC  2A08      
000009CE  4E75       638          rts
                     639   ; }
                     640   ; /*********************************************************************************************
                     641   ; *Subroutine to initialise the RS232 Port by writing some commands to the internal registers
                     642   ; *********************************************************************************************/
                     643   ; void Init_RS232(void)
                     644   ; {
                     645   _Init_RS232:
                     646   ; RS232_Control = (char)(0x15) ; //  %00010101    divide by 16 clock, set rts low, 8 bits no parity, 1 stop bit transmitter interrupt disabled
000009D0  13FC 0015  647          move.b    #21,4194368
000009D4  0040 0040 
                     648   ; RS232_Baud = (char)(0x1) ;      // program baud rate generator 000 = 230k, 001 = 115k, 010 = 57.6k, 011 = 38.4k, 100 = 19.2, all others = 9600
000009D8  13FC 0001  649          move.b    #1,4194372
000009DC  0040 0044 
000009E0  4E75       650          rts
                     651   ; }
                     652   ; int kbhit(void)
                     653   ; {
                     654   _kbhit:
                     655   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // wait for Rx bit in status register to be '1'
000009E2  1039 0040  656          move.b    4194368,D0
000009E6  0040      
000009E8  C03C 0001  657          and.b     #1,D0
000009EC  0C00 0001  658          cmp.b     #1,D0
000009F0  6604       659          bne.s     kbhit_1
                     660   ; return 1 ;
000009F2  7001       661          moveq     #1,D0
000009F4  6002       662          bra.s     kbhit_3
                     663   kbhit_1:
                     664   ; else
                     665   ; return 0 ;
000009F6  4280       666          clr.l     D0
                     667   kbhit_3:
000009F8  4E75       668          rts
                     669   ; }
                     670   ; /*********************************************************************************************************
                     671   ; **  Subroutine to provide a low level output function to 6850 ACIA
                     672   ; **  This routine provides the basic functionality to output a single character to the serial Port
                     673   ; **  to allow the board to communicate with HyperTerminal Program
                     674   ; **
                     675   ; **  NOTE you do not call this function directly, instead you call the normal putchar() function
                     676   ; **  which in turn calls _putch() below). Other functions like puts(), printf() call putchar() so will
                     677   ; **  call _putch() also
                     678   ; *********************************************************************************************************/
                     679   ; int _putch( int c)
                     680   ; {
                     681   __putch:
000009FA  4E56 0000  682          link      A6,#0
                     683   ; while(((char)(RS232_Status) & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
                     684   _putch_1:
000009FE  1039 0040  685          move.b    4194368,D0
00000A02  0040      
00000A04  C03C 0002  686          and.b     #2,D0
00000A08  0C00 0002  687          cmp.b     #2,D0
00000A0C  6702       688          beq.s     _putch_3
00000A0E  60EE       689          bra       _putch_1
                     690   _putch_3:
                     691   ; ;
                     692   ; (char)(RS232_TxData) = ((char)(c) & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
00000A10  202E 0008  693          move.l    8(A6),D0
00000A14  C03C 007F  694          and.b     #127,D0
00000A18  13C0 0040  695          move.b    D0,4194370
00000A1C  0042      
                     696   ; return c ;                                              // putchar() expects the character to be returned
00000A1E  202E 0008  697          move.l    8(A6),D0
00000A22  4E5E       698          unlk      A6
00000A24  4E75       699          rts
                     700   ; }
                     701   ; /*********************************************************************************************************
                     702   ; **  Subroutine to provide a low level input function to 6850 ACIA
                     703   ; **  This routine provides the basic functionality to input a single character from the serial Port
                     704   ; **  to allow the board to communicate with HyperTerminal Program Keyboard (your PC)
                     705   ; **
                     706   ; **  NOTE you do not call this function directly, instead you call the normal _getch() function
                     707   ; **  which in turn calls _getch() below). Other functions like gets(), scanf() call _getch() so will
                     708   ; **  call _getch() also
                     709   ; *********************************************************************************************************/
                     710   ; int _getch( void )
                     711   ; {
                     712   __getch:
00000A26  2F02       713          move.l    D2,-(A7)
                     714   ; int c ;
                     715   ; while(((char)(RS232_Status) & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
                     716   _getch_1:
00000A28  1039 0040  717          move.b    4194368,D0
00000A2C  0040      
00000A2E  C03C 0001  718          and.b     #1,D0
00000A32  0C00 0001  719          cmp.b     #1,D0
00000A36  6702       720          beq.s     _getch_3
00000A38  60EE       721          bra       _getch_1
                     722   _getch_3:
                     723   ; ;
                     724   ; c = (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
00000A3A  1039 0040  725          move.b    4194370,D0
00000A3E  0042      
00000A40  C0BC 0000  726          and.l     #255,D0
00000A44  00FF      
00000A46  C0BC 0000  727          and.l     #127,D0
00000A4A  007F      
00000A4C  2400       728          move.l    D0,D2
                     729   ; // shall we echo the character? Echo is set to TRUE at reset, but for speed we don't want to echo when downloading code with the 'L' debugger command
                     730   ; if(Echo)
00000A4E  4AB9 0803  731          tst.l     _Echo.L
00000A52  00E0      
00000A54  6708       732          beq.s     _getch_4
                     733   ; _putch(c);
00000A56  2F02       734          move.l    D2,-(A7)
00000A58  4EB8 09FA  735          jsr       __putch
00000A5C  584F       736          addq.w    #4,A7
                     737   _getch_4:
                     738   ; return c ;
00000A5E  2002       739          move.l    D2,D0
00000A60  241F       740          move.l    (A7)+,D2
00000A62  4E75       741          rts
                     742   ; }
                     743   ; // flush the input stream for any unread characters
                     744   ; void FlushKeyboard(void)
                     745   ; {
                     746   _FlushKeyboard:
00000A64  4E56 FFFC  747          link      A6,#-4
                     748   ; char c ;
                     749   ; while(1)    {
                     750   FlushKeyboard_1:
                     751   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // if Rx bit in status register is '1'
00000A68  1039 0040  752          move.b    4194368,D0
00000A6C  0040      
00000A6E  C03C 0001  753          and.b     #1,D0
00000A72  0C00 0001  754          cmp.b     #1,D0
00000A76  6610       755          bne.s     FlushKeyboard_4
                     756   ; c = ((char)(RS232_RxData) & (char)(0x7f)) ;
00000A78  1039 0040  757          move.b    4194370,D0
00000A7C  0042      
00000A7E  C03C 007F  758          and.b     #127,D0
00000A82  1D40 FFFF  759          move.b    D0,-1(A6)
00000A86  6002       760          bra.s     FlushKeyboard_5
                     761   FlushKeyboard_4:
                     762   ; else
                     763   ; return ;
00000A88  6002       764          bra.s     FlushKeyboard_6
                     765   FlushKeyboard_5:
00000A8A  60DC       766          bra       FlushKeyboard_1
                     767   FlushKeyboard_6:
00000A8C  4E5E       768          unlk      A6
00000A8E  4E75       769          rts
                     770   ; }
                     771   ; }
                     772   ; // converts hex char to 4 bit binary equiv in range 0000-1111 (0-F)
                     773   ; // char assumed to be a valid hex char 0-9, a-f, A-F
                     774   ; char xtod(int c)
                     775   ; {
                     776   _xtod:
00000A90  4E56 0000  777          link      A6,#0
00000A94  2F02       778          move.l    D2,-(A7)
00000A96  242E 0008  779          move.l    8(A6),D2
                     780   ; if ((char)(c) <= (char)('9'))
00000A9A  0C02 0039  781          cmp.b     #57,D2
00000A9E  6E08       782          bgt.s     xtod_1
                     783   ; return c - (char)(0x30);    // 0 - 9 = 0x30 - 0x39 so convert to number by sutracting 0x30
00000AA0  1002       784          move.b    D2,D0
00000AA2  0400 0030  785          sub.b     #48,D0
00000AA6  6014       786          bra.s     xtod_3
                     787   xtod_1:
                     788   ; else if((char)(c) > (char)('F'))    // assume lower case
00000AA8  0C02 0046  789          cmp.b     #70,D2
00000AAC  6F08       790          ble.s     xtod_4
                     791   ; return c - (char)(0x57);    // a-f = 0x61-66 so needs to be converted to 0x0A - 0x0F so subtract 0x57
00000AAE  1002       792          move.b    D2,D0
00000AB0  0400 0057  793          sub.b     #87,D0
00000AB4  6006       794          bra.s     xtod_3
                     795   xtod_4:
                     796   ; else
                     797   ; return c - (char)(0x37);    // A-F = 0x41-46 so needs to be converted to 0x0A - 0x0F so subtract 0x37
00000AB6  1002       798          move.b    D2,D0
00000AB8  0400 0037  799          sub.b     #55,D0
                     800   xtod_3:
00000ABC  241F       801          move.l    (A7)+,D2
00000ABE  4E5E       802          unlk      A6
00000AC0  4E75       803          rts
                     804   ; }
                     805   ; int Get2HexDigits(char *CheckSumPtr)
                     806   ; {
                     807   _Get2HexDigits:
00000AC2  4E56 0000  808          link      A6,#0
00000AC6  2F02       809          move.l    D2,-(A7)
                     810   ; register int i = (xtod(_getch()) << 4) | (xtod(_getch()));
00000AC8  2F00       811          move.l    D0,-(A7)
00000ACA  4EB8 0A26  812          jsr       __getch
00000ACE  2200       813          move.l    D0,D1
00000AD0  201F       814          move.l    (A7)+,D0
00000AD2  2F01       815          move.l    D1,-(A7)
00000AD4  4EB8 0A90  816          jsr       _xtod
00000AD8  584F       817          addq.w    #4,A7
00000ADA  C0BC 0000  818          and.l     #255,D0
00000ADE  00FF      
00000AE0  E980       819          asl.l     #4,D0
00000AE2  2F00       820          move.l    D0,-(A7)
00000AE4  2F01       821          move.l    D1,-(A7)
00000AE6  4EB8 0A26  822          jsr       __getch
00000AEA  221F       823          move.l    (A7)+,D1
00000AEC  2F00       824          move.l    D0,-(A7)
00000AEE  4EB8 0A90  825          jsr       _xtod
00000AF2  584F       826          addq.w    #4,A7
00000AF4  2200       827          move.l    D0,D1
00000AF6  201F       828          move.l    (A7)+,D0
00000AF8  C2BC 0000  829          and.l     #255,D1
00000AFC  00FF      
00000AFE  8081       830          or.l      D1,D0
00000B00  2400       831          move.l    D0,D2
                     832   ; if(CheckSumPtr)
00000B02  4AAE 0008  833          tst.l     8(A6)
00000B06  6706       834          beq.s     Get2HexDigits_1
                     835   ; *CheckSumPtr += i ;
00000B08  206E 0008  836          move.l    8(A6),A0
00000B0C  D510       837          add.b     D2,(A0)
                     838   Get2HexDigits_1:
                     839   ; return i ;
00000B0E  2002       840          move.l    D2,D0
00000B10  241F       841          move.l    (A7)+,D2
00000B12  4E5E       842          unlk      A6
00000B14  4E75       843          rts
                     844   ; }
                     845   ; int Get4HexDigits(char *CheckSumPtr)
                     846   ; {
                     847   _Get4HexDigits:
00000B16  4E56 0000  848          link      A6,#0
                     849   ; return (Get2HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000B1A  2F2E 0008  850          move.l    8(A6),-(A7)
00000B1E  4EB8 0AC2  851          jsr       _Get2HexDigits
00000B22  584F       852          addq.w    #4,A7
00000B24  E180       853          asl.l     #8,D0
00000B26  2F00       854          move.l    D0,-(A7)
00000B28  2F2E 0008  855          move.l    8(A6),-(A7)
00000B2C  4EB8 0AC2  856          jsr       _Get2HexDigits
00000B30  584F       857          addq.w    #4,A7
00000B32  2200       858          move.l    D0,D1
00000B34  201F       859          move.l    (A7)+,D0
00000B36  8081       860          or.l      D1,D0
00000B38  4E5E       861          unlk      A6
00000B3A  4E75       862          rts
                     863   ; }
                     864   ; int Get6HexDigits(char *CheckSumPtr)
                     865   ; {
                     866   _Get6HexDigits:
00000B3C  4E56 0000  867          link      A6,#0
                     868   ; return (Get4HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000B40  2F2E 0008  869          move.l    8(A6),-(A7)
00000B44  4EB8 0B16  870          jsr       _Get4HexDigits
00000B48  584F       871          addq.w    #4,A7
00000B4A  E180       872          asl.l     #8,D0
00000B4C  2F00       873          move.l    D0,-(A7)
00000B4E  2F2E 0008  874          move.l    8(A6),-(A7)
00000B52  4EB8 0AC2  875          jsr       _Get2HexDigits
00000B56  584F       876          addq.w    #4,A7
00000B58  2200       877          move.l    D0,D1
00000B5A  201F       878          move.l    (A7)+,D0
00000B5C  8081       879          or.l      D1,D0
00000B5E  4E5E       880          unlk      A6
00000B60  4E75       881          rts
                     882   ; }
                     883   ; int Get8HexDigits(char *CheckSumPtr)
                     884   ; {
                     885   _Get8HexDigits:
00000B62  4E56 0000  886          link      A6,#0
                     887   ; return (Get4HexDigits(CheckSumPtr) << 16) | (Get4HexDigits(CheckSumPtr));
00000B66  2F2E 0008  888          move.l    8(A6),-(A7)
00000B6A  4EB8 0B16  889          jsr       _Get4HexDigits
00000B6E  584F       890          addq.w    #4,A7
00000B70  E180       891          asl.l     #8,D0
00000B72  E180       892          asl.l     #8,D0
00000B74  2F00       893          move.l    D0,-(A7)
00000B76  2F2E 0008  894          move.l    8(A6),-(A7)
00000B7A  4EB8 0B16  895          jsr       _Get4HexDigits
00000B7E  584F       896          addq.w    #4,A7
00000B80  2200       897          move.l    D0,D1
00000B82  201F       898          move.l    (A7)+,D0
00000B84  8081       899          or.l      D1,D0
00000B86  4E5E       900          unlk      A6
00000B88  4E75       901          rts
                     902   ; }
                     903   ; void DumpMemory(void)   // simple dump memory fn
                     904   ; {
                     905   _DumpMemory:
00000B8A  48E7 3C30  906          movem.l   D2/D3/D4/D5/A2/A3,-(A7)
00000B8E  45F9 0000  907          lea       _printf.L,A2
00000B92  3CDE      
00000B94  47F9 0000  908          lea       _putch.L,A3
00000B98  3C0C      
                     909   ; int i, j ;
                     910   ; unsigned char *RamPtr,c ; // pointer to where the program is download (assumed)
                     911   ; printf("\r\nDump Memory Block: <ESC> to Abort, <SPACE> to Continue") ;
00000B9A  4879 0000  912          pea       @m68kde~1_1.L
00000B9E  45CA      
00000BA0  4E92       913          jsr       (A2)
00000BA2  584F       914          addq.w    #4,A7
                     915   ; printf("\r\nEnter Start Address: ") ;
00000BA4  4879 0000  916          pea       @m68kde~1_2.L
00000BA8  4604      
00000BAA  4E92       917          jsr       (A2)
00000BAC  584F       918          addq.w    #4,A7
                     919   ; RamPtr = Get8HexDigits(0) ;
00000BAE  42A7       920          clr.l     -(A7)
00000BB0  4EB8 0B62  921          jsr       _Get8HexDigits
00000BB4  584F       922          addq.w    #4,A7
00000BB6  2600       923          move.l    D0,D3
                     924   ; while(1)    {
                     925   DumpMemory_1:
                     926   ; for(i = 0; i < 16; i ++)    {
00000BB8  4285       927          clr.l     D5
                     928   DumpMemory_4:
00000BBA  0C85 0000  929          cmp.l     #16,D5
00000BBE  0010      
00000BC0  6C00 0096  930          bge       DumpMemory_6
                     931   ; printf("\r\n%08x ", RamPtr) ;
00000BC4  2F03       932          move.l    D3,-(A7)
00000BC6  4879 0000  933          pea       @m68kde~1_3.L
00000BCA  461C      
00000BCC  4E92       934          jsr       (A2)
00000BCE  504F       935          addq.w    #8,A7
                     936   ; for(j=0; j < 16; j ++)  {
00000BD0  4282       937          clr.l     D2
                     938   DumpMemory_7:
00000BD2  0C82 0000  939          cmp.l     #16,D2
00000BD6  0010      
00000BD8  6C24       940          bge.s     DumpMemory_9
                     941   ; printf("%02X",RamPtr[j]) ;
00000BDA  2043       942          move.l    D3,A0
00000BDC  1230 2800  943          move.b    0(A0,D2.L),D1
00000BE0  C2BC 0000  944          and.l     #255,D1
00000BE4  00FF      
00000BE6  2F01       945          move.l    D1,-(A7)
00000BE8  4879 0000  946          pea       @m68kde~1_4.L
00000BEC  4624      
00000BEE  4E92       947          jsr       (A2)
00000BF0  504F       948          addq.w    #8,A7
                     949   ; putchar(' ') ;
00000BF2  4878 0020  950          pea       32
00000BF6  4E93       951          jsr       (A3)
00000BF8  584F       952          addq.w    #4,A7
00000BFA  5282       953          addq.l    #1,D2
00000BFC  60D4       954          bra       DumpMemory_7
                     955   DumpMemory_9:
                     956   ; }
                     957   ; // now display the data as ASCII at the end
                     958   ; printf("  ") ;
00000BFE  4879 0000  959          pea       @m68kde~1_5.L
00000C02  462A      
00000C04  4E92       960          jsr       (A2)
00000C06  584F       961          addq.w    #4,A7
                     962   ; for(j = 0; j < 16; j++) {
00000C08  4282       963          clr.l     D2
                     964   DumpMemory_10:
00000C0A  0C82 0000  965          cmp.l     #16,D2
00000C0E  0010      
00000C10  6C00 003A  966          bge       DumpMemory_12
                     967   ; c = ((char)(RamPtr[j]) & 0x7f) ;
00000C14  2043       968          move.l    D3,A0
00000C16  1030 2800  969          move.b    0(A0,D2.L),D0
00000C1A  C03C 007F  970          and.b     #127,D0
00000C1E  1800       971          move.b    D0,D4
                     972   ; if((c > (char)(0x7f)) || (c < ' '))
00000C20  0C04 007F  973          cmp.b     #127,D4
00000C24  6206       974          bhi.s     DumpMemory_15
00000C26  0C04 0020  975          cmp.b     #32,D4
00000C2A  640A       976          bhs.s     DumpMemory_13
                     977   DumpMemory_15:
                     978   ; putchar('.') ;
00000C2C  4878 002E  979          pea       46
00000C30  4E93       980          jsr       (A3)
00000C32  584F       981          addq.w    #4,A7
00000C34  6012       982          bra.s     DumpMemory_14
                     983   DumpMemory_13:
                     984   ; else
                     985   ; putchar(RamPtr[j]) ;
00000C36  2043       986          move.l    D3,A0
00000C38  1230 2800  987          move.b    0(A0,D2.L),D1
00000C3C  C2BC 0000  988          and.l     #255,D1
00000C40  00FF      
00000C42  2F01       989          move.l    D1,-(A7)
00000C44  4E93       990          jsr       (A3)
00000C46  584F       991          addq.w    #4,A7
                     992   DumpMemory_14:
00000C48  5282       993          addq.l    #1,D2
00000C4A  60BE       994          bra       DumpMemory_10
                     995   DumpMemory_12:
                     996   ; }
                     997   ; RamPtr = RamPtr + 16 ;
00000C4C  0683 0000  998          add.l     #16,D3
00000C50  0010      
00000C52  5285       999          addq.l    #1,D5
00000C54  6000 FF64 1000          bra       DumpMemory_4
                    1001   DumpMemory_6:
                    1002   ; }
                    1003   ; printf("\r\n") ;
00000C58  4879 0000 1004          pea       @m68kde~1_6.L
00000C5C  462E      
00000C5E  4E92      1005          jsr       (A2)
00000C60  584F      1006          addq.w    #4,A7
                    1007   ; c = _getch() ;
00000C62  4EB8 0A26 1008          jsr       __getch
00000C66  1800      1009          move.b    D0,D4
                    1010   ; if(c == 0x1b)          // break on ESC
00000C68  0C04 001B 1011          cmp.b     #27,D4
00000C6C  6602      1012          bne.s     DumpMemory_16
                    1013   ; break ;
00000C6E  6004      1014          bra.s     DumpMemory_3
                    1015   DumpMemory_16:
00000C70  6000 FF46 1016          bra       DumpMemory_1
                    1017   DumpMemory_3:
00000C74  4CDF 0C3C 1018          movem.l   (A7)+,D2/D3/D4/D5/A2/A3
00000C78  4E75      1019          rts
                    1020   ; }
                    1021   ; }
                    1022   ; void FillMemory()
                    1023   ; {
                    1024   _FillMemory:
00000C7A  48E7 3820 1025          movem.l   D2/D3/D4/A2,-(A7)
00000C7E  45F9 0000 1026          lea       _printf.L,A2
00000C82  3CDE      
                    1027   ; char *StartRamPtr, *EndRamPtr ;
                    1028   ; unsigned char FillData ;
                    1029   ; printf("\r\nFill Memory Block") ;
00000C84  4879 0000 1030          pea       @m68kde~1_7.L
00000C88  4632      
00000C8A  4E92      1031          jsr       (A2)
00000C8C  584F      1032          addq.w    #4,A7
                    1033   ; printf("\r\nEnter Start Address: ") ;
00000C8E  4879 0000 1034          pea       @m68kde~1_2.L
00000C92  4604      
00000C94  4E92      1035          jsr       (A2)
00000C96  584F      1036          addq.w    #4,A7
                    1037   ; StartRamPtr = Get8HexDigits(0) ;
00000C98  42A7      1038          clr.l     -(A7)
00000C9A  4EB8 0B62 1039          jsr       _Get8HexDigits
00000C9E  584F      1040          addq.w    #4,A7
00000CA0  2400      1041          move.l    D0,D2
                    1042   ; printf("\r\nEnter End Address: ") ;
00000CA2  4879 0000 1043          pea       @m68kde~1_8.L
00000CA6  4646      
00000CA8  4E92      1044          jsr       (A2)
00000CAA  584F      1045          addq.w    #4,A7
                    1046   ; EndRamPtr = Get8HexDigits(0) ;
00000CAC  42A7      1047          clr.l     -(A7)
00000CAE  4EB8 0B62 1048          jsr       _Get8HexDigits
00000CB2  584F      1049          addq.w    #4,A7
00000CB4  2800      1050          move.l    D0,D4
                    1051   ; printf("\r\nEnter Fill Data: ") ;
00000CB6  4879 0000 1052          pea       @m68kde~1_9.L
00000CBA  465C      
00000CBC  4E92      1053          jsr       (A2)
00000CBE  584F      1054          addq.w    #4,A7
                    1055   ; FillData = Get2HexDigits(0) ;
00000CC0  42A7      1056          clr.l     -(A7)
00000CC2  4EB8 0AC2 1057          jsr       _Get2HexDigits
00000CC6  584F      1058          addq.w    #4,A7
00000CC8  1600      1059          move.b    D0,D3
                    1060   ; printf("\r\nFilling Addresses [$%08X - $%08X] with $%02X", StartRamPtr, EndRamPtr, FillData) ;
00000CCA  C6BC 0000 1061          and.l     #255,D3
00000CCE  00FF      
00000CD0  2F03      1062          move.l    D3,-(A7)
00000CD2  2F04      1063          move.l    D4,-(A7)
00000CD4  2F02      1064          move.l    D2,-(A7)
00000CD6  4879 0000 1065          pea       @m68kde~1_10.L
00000CDA  4670      
00000CDC  4E92      1066          jsr       (A2)
00000CDE  DEFC 0010 1067          add.w     #16,A7
                    1068   ; while(StartRamPtr < EndRamPtr)
                    1069   FillMemory_1:
00000CE2  B484      1070          cmp.l     D4,D2
00000CE4  6408      1071          bhs.s     FillMemory_3
                    1072   ; *StartRamPtr++ = FillData ;
00000CE6  2042      1073          move.l    D2,A0
00000CE8  5282      1074          addq.l    #1,D2
00000CEA  1083      1075          move.b    D3,(A0)
00000CEC  60F4      1076          bra       FillMemory_1
                    1077   FillMemory_3:
00000CEE  4CDF 041C 1078          movem.l   (A7)+,D2/D3/D4/A2
00000CF2  4E75      1079          rts
                    1080   ; }
                    1081   ; void Load_SRecordFile()
                    1082   ; {
                    1083   _Load_SRecordFile:
00000CF4  4E56 FFDC 1084          link      A6,#-36
00000CF8  48E7 3F3C 1085          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00000CFC  45EE FFFA 1086          lea       -6(A6),A2
00000D00  47F8 0AC2 1087          lea       _Get2HexDigits.L,A3
00000D04  49F9 0000 1088          lea       _printf.L,A4
00000D08  3CDE      
                    1089   ; int i, Address, AddressSize, DataByte, NumDataBytesToRead, LoadFailed, FailedAddress, AddressFail, SRecordCount = 0, ByteTotal = 0 ;
00000D0A  42AE FFEE 1090          clr.l     -18(A6)
00000D0E  3A7C 0000 1091          move.w    #0,A5
                    1092   ; int result, ByteCount ;
                    1093   ; char c, CheckSum, ReadCheckSum, HeaderType ;
                    1094   ; char *RamPtr ;                          // pointer to Memory where downloaded program will be stored
                    1095   ; LoadFailed = 0 ;                        //assume LOAD operation will pass
00000D12  7E00      1096          moveq     #0,D7
                    1097   ; AddressFail = 0 ;
00000D14  42AE FFEA 1098          clr.l     -22(A6)
                    1099   ; Echo = 0 ;                              // don't echo S records during download
00000D18  42B9 0803 1100          clr.l     _Echo.L
00000D1C  00E0      
                    1101   ; printf("\r\nUse HyperTerminal to Send Text File (.hex)\r\n") ;
00000D1E  4879 0000 1102          pea       @m68kde~1_11.L
00000D22  46A0      
00000D24  4E94      1103          jsr       (A4)
00000D26  584F      1104          addq.w    #4,A7
                    1105   ; while(1)    {
                    1106   Load_SRecordFile_1:
                    1107   ; CheckSum = 0 ;
00000D28  4212      1108          clr.b     (A2)
                    1109   ; do {
                    1110   Load_SRecordFile_4:
                    1111   ; c = toupper(_getch()) ;
00000D2A  2F00      1112          move.l    D0,-(A7)
00000D2C  4EB8 0A26 1113          jsr       __getch
00000D30  2200      1114          move.l    D0,D1
00000D32  201F      1115          move.l    (A7)+,D0
00000D34  2F01      1116          move.l    D1,-(A7)
00000D36  4EB9 0000 1117          jsr       _toupper
00000D3A  3CB2      
00000D3C  584F      1118          addq.w    #4,A7
00000D3E  1C00      1119          move.b    D0,D6
                    1120   ; if(c == 0x1b )      // if break
00000D40  0C06 001B 1121          cmp.b     #27,D6
00000D44  6604      1122          bne.s     Load_SRecordFile_6
                    1123   ; return;
00000D46  6000 0132 1124          bra       Load_SRecordFile_8
                    1125   Load_SRecordFile_6:
00000D4A  0C06 0053 1126          cmp.b     #83,D6
00000D4E  66DA      1127          bne       Load_SRecordFile_4
                    1128   ; }while(c != (char)('S'));   // wait for S start of header
                    1129   ; HeaderType = _getch() ;
00000D50  4EB8 0A26 1130          jsr       __getch
00000D54  1600      1131          move.b    D0,D3
                    1132   ; if(HeaderType == (char)('0') || HeaderType == (char)('5'))       // ignore s0, s5 records
00000D56  0C03 0030 1133          cmp.b     #48,D3
00000D5A  6706      1134          beq.s     Load_SRecordFile_11
00000D5C  0C03 0035 1135          cmp.b     #53,D3
00000D60  6604      1136          bne.s     Load_SRecordFile_9
                    1137   Load_SRecordFile_11:
                    1138   ; continue ;
00000D62  6000 00D2 1139          bra       Load_SRecordFile_23
                    1140   Load_SRecordFile_9:
                    1141   ; if(HeaderType >= (char)('7'))
00000D66  0C03 0037 1142          cmp.b     #55,D3
00000D6A  6D04      1143          blt.s     Load_SRecordFile_12
                    1144   ; break ;                 // end load on s7,s8,s9 records
00000D6C  6000 00CC 1145          bra       Load_SRecordFile_3
                    1146   Load_SRecordFile_12:
                    1147   ; // get the bytecount
                    1148   ; ByteCount = Get2HexDigits(&CheckSum) ;
00000D70  2F0A      1149          move.l    A2,-(A7)
00000D72  4E93      1150          jsr       (A3)
00000D74  584F      1151          addq.w    #4,A7
00000D76  2D40 FFF6 1152          move.l    D0,-10(A6)
                    1153   ; // get the address, 4 digits for s1, 6 digits for s2, and 8 digits for s3 record
                    1154   ; if(HeaderType == (char)('1')) {
00000D7A  0C03 0031 1155          cmp.b     #49,D3
00000D7E  660E      1156          bne.s     Load_SRecordFile_14
                    1157   ; AddressSize = 2 ;       // 2 byte address
00000D80  7A02      1158          moveq     #2,D5
                    1159   ; Address = Get4HexDigits(&CheckSum);
00000D82  2F0A      1160          move.l    A2,-(A7)
00000D84  4EB8 0B16 1161          jsr       _Get4HexDigits
00000D88  584F      1162          addq.w    #4,A7
00000D8A  2800      1163          move.l    D0,D4
00000D8C  6020      1164          bra.s     Load_SRecordFile_17
                    1165   Load_SRecordFile_14:
                    1166   ; }
                    1167   ; else if (HeaderType == (char)('2')) {
00000D8E  0C03 0032 1168          cmp.b     #50,D3
00000D92  660E      1169          bne.s     Load_SRecordFile_16
                    1170   ; AddressSize = 3 ;       // 3 byte address
00000D94  7A03      1171          moveq     #3,D5
                    1172   ; Address = Get6HexDigits(&CheckSum) ;
00000D96  2F0A      1173          move.l    A2,-(A7)
00000D98  4EB8 0B3C 1174          jsr       _Get6HexDigits
00000D9C  584F      1175          addq.w    #4,A7
00000D9E  2800      1176          move.l    D0,D4
00000DA0  600C      1177          bra.s     Load_SRecordFile_17
                    1178   Load_SRecordFile_16:
                    1179   ; }
                    1180   ; else    {
                    1181   ; AddressSize = 4 ;       // 4 byte address
00000DA2  7A04      1182          moveq     #4,D5
                    1183   ; Address = Get8HexDigits(&CheckSum) ;
00000DA4  2F0A      1184          move.l    A2,-(A7)
00000DA6  4EB8 0B62 1185          jsr       _Get8HexDigits
00000DAA  584F      1186          addq.w    #4,A7
00000DAC  2800      1187          move.l    D0,D4
                    1188   Load_SRecordFile_17:
                    1189   ; }
                    1190   ; RamPtr = (char *)(Address) ;                            // point to download area
00000DAE  2D44 FFFC 1191          move.l    D4,-4(A6)
                    1192   ; NumDataBytesToRead = ByteCount - AddressSize - 1 ;
00000DB2  202E FFF6 1193          move.l    -10(A6),D0
00000DB6  9085      1194          sub.l     D5,D0
00000DB8  5380      1195          subq.l    #1,D0
00000DBA  2D40 FFE2 1196          move.l    D0,-30(A6)
                    1197   ; for(i = 0; i < NumDataBytesToRead; i ++) {     // read in remaining data bytes (ignore address and checksum at the end
00000DBE  4282      1198          clr.l     D2
                    1199   Load_SRecordFile_18:
00000DC0  B4AE FFE2 1200          cmp.l     -30(A6),D2
00000DC4  6C1E      1201          bge.s     Load_SRecordFile_20
                    1202   ; DataByte = Get2HexDigits(&CheckSum) ;
00000DC6  2F0A      1203          move.l    A2,-(A7)
00000DC8  4E93      1204          jsr       (A3)
00000DCA  584F      1205          addq.w    #4,A7
00000DCC  2D40 FFDE 1206          move.l    D0,-34(A6)
                    1207   ; *RamPtr++ = DataByte ;                      // store downloaded byte in Ram at specified address
00000DD0  202E FFDE 1208          move.l    -34(A6),D0
00000DD4  206E FFFC 1209          move.l    -4(A6),A0
00000DD8  52AE FFFC 1210          addq.l    #1,-4(A6)
00000DDC  1080      1211          move.b    D0,(A0)
                    1212   ; ByteTotal++;
00000DDE  524D      1213          addq.w    #1,A5
00000DE0  5282      1214          addq.l    #1,D2
00000DE2  60DC      1215          bra       Load_SRecordFile_18
                    1216   Load_SRecordFile_20:
                    1217   ; }
                    1218   ; // checksum is the 1's complement of the sum of all data pairs following the bytecount, i.e. it includes the address and the data itself
                    1219   ; ReadCheckSum = Get2HexDigits(0) ;
00000DE4  42A7      1220          clr.l     -(A7)
00000DE6  4E93      1221          jsr       (A3)
00000DE8  584F      1222          addq.w    #4,A7
00000DEA  1D40 FFFB 1223          move.b    D0,-5(A6)
                    1224   ; if((~CheckSum&0Xff) != (ReadCheckSum&0Xff))   {
00000DEE  1012      1225          move.b    (A2),D0
00000DF0  4600      1226          not.b     D0
00000DF2  4880      1227          ext.w     D0
00000DF4  C07C 00FF 1228          and.w     #255,D0
00000DF8  122E FFFB 1229          move.b    -5(A6),D1
00000DFC  4881      1230          ext.w     D1
00000DFE  C27C 00FF 1231          and.w     #255,D1
00000E02  B041      1232          cmp.w     D1,D0
00000E04  6708      1233          beq.s     Load_SRecordFile_21
                    1234   ; LoadFailed = 1 ;
00000E06  7E01      1235          moveq     #1,D7
                    1236   ; FailedAddress = Address ;
00000E08  2D44 FFE6 1237          move.l    D4,-26(A6)
                    1238   ; break;
00000E0C  602C      1239          bra.s     Load_SRecordFile_3
                    1240   Load_SRecordFile_21:
                    1241   ; }
                    1242   ; SRecordCount++ ;
00000E0E  52AE FFEE 1243          addq.l    #1,-18(A6)
                    1244   ; // display feedback on progress
                    1245   ; if(SRecordCount % 25 == 0)
00000E12  2F2E FFEE 1246          move.l    -18(A6),-(A7)
00000E16  4878 0019 1247          pea       25
00000E1A  4EB9 0000 1248          jsr       LDIV
00000E1E  3AA0      
00000E20  202F 0004 1249          move.l    4(A7),D0
00000E24  504F      1250          addq.w    #8,A7
00000E26  4A80      1251          tst.l     D0
00000E28  660C      1252          bne.s     Load_SRecordFile_23
                    1253   ; putchar('.') ;
00000E2A  4878 002E 1254          pea       46
00000E2E  4EB9 0000 1255          jsr       _putch
00000E32  3C0C      
00000E34  584F      1256          addq.w    #4,A7
                    1257   Load_SRecordFile_23:
00000E36  6000 FEF0 1258          bra       Load_SRecordFile_1
                    1259   Load_SRecordFile_3:
                    1260   ; }
                    1261   ; if(LoadFailed == 1) {
00000E3A  0C87 0000 1262          cmp.l     #1,D7
00000E3E  0001      
00000E40  6610      1263          bne.s     Load_SRecordFile_25
                    1264   ; printf("\r\nLoad Failed at Address = [$%08X]\r\n", FailedAddress) ;
00000E42  2F2E FFE6 1265          move.l    -26(A6),-(A7)
00000E46  4879 0000 1266          pea       @m68kde~1_12.L
00000E4A  46D0      
00000E4C  4E94      1267          jsr       (A4)
00000E4E  504F      1268          addq.w    #8,A7
00000E50  600C      1269          bra.s     Load_SRecordFile_26
                    1270   Load_SRecordFile_25:
                    1271   ; }
                    1272   ; else
                    1273   ; printf("\r\nSuccess: Downloaded %d bytes\r\n", ByteTotal) ;
00000E52  2F0D      1274          move.l    A5,-(A7)
00000E54  4879 0000 1275          pea       @m68kde~1_13.L
00000E58  46F6      
00000E5A  4E94      1276          jsr       (A4)
00000E5C  504F      1277          addq.w    #8,A7
                    1278   Load_SRecordFile_26:
                    1279   ; // pause at the end to wait for download to finish transmitting at the end of S8 etc
                    1280   ; for(i = 0; i < 400000; i ++)
00000E5E  4282      1281          clr.l     D2
                    1282   Load_SRecordFile_27:
00000E60  0C82 0006 1283          cmp.l     #400000,D2
00000E64  1A80      
00000E66  6C04      1284          bge.s     Load_SRecordFile_29
00000E68  5282      1285          addq.l    #1,D2
00000E6A  60F4      1286          bra       Load_SRecordFile_27
                    1287   Load_SRecordFile_29:
                    1288   ; ;
                    1289   ; FlushKeyboard() ;
00000E6C  4EB8 0A64 1290          jsr       _FlushKeyboard
                    1291   ; Echo = 1;
00000E70  23FC 0000 1292          move.l    #1,_Echo.L
00000E74  0001 0803 
00000E78  00E0      
                    1293   Load_SRecordFile_8:
00000E7A  4CDF 3CFC 1294          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00000E7E  4E5E      1295          unlk      A6
00000E80  4E75      1296          rts
                    1297   ; }
                    1298   ; void MemoryChange(void)
                    1299   ; {
                    1300   _MemoryChange:
00000E82  48E7 3820 1301          movem.l   D2/D3/D4/A2,-(A7)
00000E86  45F9 0000 1302          lea       _printf.L,A2
00000E8A  3CDE      
                    1303   ; unsigned char *RamPtr,c ; // pointer to memory
                    1304   ; int Data ;
                    1305   ; printf("\r\nExamine and Change Memory") ;
00000E8C  4879 0000 1306          pea       @m68kde~1_14.L
00000E90  4718      
00000E92  4E92      1307          jsr       (A2)
00000E94  584F      1308          addq.w    #4,A7
                    1309   ; printf("\r\n<ESC> to Stop, <SPACE> to Advance, '-' to Go Back, <DATA> to change") ;
00000E96  4879 0000 1310          pea       @m68kde~1_15.L
00000E9A  4734      
00000E9C  4E92      1311          jsr       (A2)
00000E9E  584F      1312          addq.w    #4,A7
                    1313   ; printf("\r\nEnter Address: ") ;
00000EA0  4879 0000 1314          pea       @m68kde~1_16.L
00000EA4  477A      
00000EA6  4E92      1315          jsr       (A2)
00000EA8  584F      1316          addq.w    #4,A7
                    1317   ; RamPtr = Get8HexDigits(0) ;
00000EAA  42A7      1318          clr.l     -(A7)
00000EAC  4EB8 0B62 1319          jsr       _Get8HexDigits
00000EB0  584F      1320          addq.w    #4,A7
00000EB2  2600      1321          move.l    D0,D3
                    1322   ; while(1)    {
                    1323   MemoryChange_1:
                    1324   ; printf("\r\n[%08x] : %02x  ", RamPtr, *RamPtr) ;
00000EB4  2043      1325          move.l    D3,A0
00000EB6  1210      1326          move.b    (A0),D1
00000EB8  C2BC 0000 1327          and.l     #255,D1
00000EBC  00FF      
00000EBE  2F01      1328          move.l    D1,-(A7)
00000EC0  2F03      1329          move.l    D3,-(A7)
00000EC2  4879 0000 1330          pea       @m68kde~1_17.L
00000EC6  478C      
00000EC8  4E92      1331          jsr       (A2)
00000ECA  DEFC 000C 1332          add.w     #12,A7
                    1333   ; c = tolower(_getch()) ;
00000ECE  2F00      1334          move.l    D0,-(A7)
00000ED0  4EB8 0A26 1335          jsr       __getch
00000ED4  2200      1336          move.l    D0,D1
00000ED6  201F      1337          move.l    (A7)+,D0
00000ED8  2F01      1338          move.l    D1,-(A7)
00000EDA  4EB9 0000 1339          jsr       _tolower
00000EDE  3C3C      
00000EE0  584F      1340          addq.w    #4,A7
00000EE2  1400      1341          move.b    D0,D2
                    1342   ; if(c == (char)(0x1b))
00000EE4  0C02 001B 1343          cmp.b     #27,D2
00000EE8  6604      1344          bne.s     MemoryChange_4
                    1345   ; return ;                                // abort on escape
00000EEA  6000 0090 1346          bra       MemoryChange_6
                    1347   MemoryChange_4:
                    1348   ; else if((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f')) {  // are we trying to change data at this location by entering a hex char
00000EEE  0C02 0030 1349          cmp.b     #48,D2
00000EF2  6506      1350          blo.s     MemoryChange_10
00000EF4  0C02 0039 1351          cmp.b     #57,D2
00000EF8  6310      1352          bls.s     MemoryChange_9
                    1353   MemoryChange_10:
00000EFA  0C02 0061 1354          cmp.b     #97,D2
00000EFE  6500 006E 1355          blo       MemoryChange_7
00000F02  0C02 0066 1356          cmp.b     #102,D2
00000F06  6200 0066 1357          bhi       MemoryChange_7
                    1358   MemoryChange_9:
                    1359   ; Data = (xtod(c) << 4) | (xtod(_getch()));
00000F0A  C4BC 0000 1360          and.l     #255,D2
00000F0E  00FF      
00000F10  2F02      1361          move.l    D2,-(A7)
00000F12  4EB8 0A90 1362          jsr       _xtod
00000F16  584F      1363          addq.w    #4,A7
00000F18  C0BC 0000 1364          and.l     #255,D0
00000F1C  00FF      
00000F1E  E980      1365          asl.l     #4,D0
00000F20  2F00      1366          move.l    D0,-(A7)
00000F22  2F01      1367          move.l    D1,-(A7)
00000F24  4EB8 0A26 1368          jsr       __getch
00000F28  221F      1369          move.l    (A7)+,D1
00000F2A  2F00      1370          move.l    D0,-(A7)
00000F2C  4EB8 0A90 1371          jsr       _xtod
00000F30  584F      1372          addq.w    #4,A7
00000F32  2200      1373          move.l    D0,D1
00000F34  201F      1374          move.l    (A7)+,D0
00000F36  C2BC 0000 1375          and.l     #255,D1
00000F3A  00FF      
00000F3C  8081      1376          or.l      D1,D0
00000F3E  2800      1377          move.l    D0,D4
                    1378   ; *RamPtr = (char)(Data) ;
00000F40  2043      1379          move.l    D3,A0
00000F42  1084      1380          move.b    D4,(A0)
                    1381   ; if(*RamPtr != Data) {
00000F44  2043      1382          move.l    D3,A0
00000F46  1010      1383          move.b    (A0),D0
00000F48  C0BC 0000 1384          and.l     #255,D0
00000F4C  00FF      
00000F4E  B084      1385          cmp.l     D4,D0
00000F50  671A      1386          beq.s     MemoryChange_11
                    1387   ; printf("\r\nWarning Change Failed: Wrote [%02x], Read [%02x]", Data, *RamPtr) ;
00000F52  2043      1388          move.l    D3,A0
00000F54  1210      1389          move.b    (A0),D1
00000F56  C2BC 0000 1390          and.l     #255,D1
00000F5A  00FF      
00000F5C  2F01      1391          move.l    D1,-(A7)
00000F5E  2F04      1392          move.l    D4,-(A7)
00000F60  4879 0000 1393          pea       @m68kde~1_18.L
00000F64  479E      
00000F66  4E92      1394          jsr       (A2)
00000F68  DEFC 000C 1395          add.w     #12,A7
                    1396   MemoryChange_11:
00000F6C  6008      1397          bra.s     MemoryChange_13
                    1398   MemoryChange_7:
                    1399   ; }
                    1400   ; }
                    1401   ; else if(c == (char)('-'))
00000F6E  0C02 002D 1402          cmp.b     #45,D2
00000F72  6602      1403          bne.s     MemoryChange_13
                    1404   ; RamPtr -= 2 ; ;
00000F74  5583      1405          subq.l    #2,D3
                    1406   MemoryChange_13:
                    1407   ; RamPtr ++ ;
00000F76  5283      1408          addq.l    #1,D3
00000F78  6000 FF3A 1409          bra       MemoryChange_1
                    1410   MemoryChange_6:
00000F7C  4CDF 041C 1411          movem.l   (A7)+,D2/D3/D4/A2
00000F80  4E75      1412          rts
                    1413   ; }
                    1414   ; }
                    1415   ; //////////////////////////////////////////////////////////////////////////////////////////////////
                    1416   ; // IMPORTANT
                    1417   ; // TG68 does not support the Native Trace mode of the original 68000 so tracing
                    1418   ; // has to be done with an interrupt (IRQ Level 6)
                    1419   ; //
                    1420   ; // To allow the 68000 to execute one more instruction after each pseudo trace (IRQ6)
                    1421   ; // the IRQ is removed in hardware once the TG68 reads the IRQ autovector (i.e. acknowledges the IRQ)
                    1422   ; //
                    1423   ; // on return from the IRQ service handler, the first access to the user memory program space
                    1424   ; // generates a fresh IRQ (in hardware) to generate a new trace, this allows the tg68 to
                    1425   ; // execute one more new instruction (without it the TG68 would trace on the same instruction
                    1426   ; // each time and not after the next one). It also means it doesn't simgle step outside the user
                    1427   ; // program area
                    1428   ; //
                    1429   ; // The bottom line is the Trace handler, which includes the Dump registers below
                    1430   ; // cannot access the user memory to display for example the Instruction Opcode or to disassemble etc
                    1431   ; // as this would lead to a new IRQ being reset and the TG68 would trace on same instruction
                    1432   ; // NOT SURE THIS IS TRUE NOW THAT TRACE HANDLER HAS BEEN MODIVIED TO NOT AUTOMATICALLY GENERATE A TRACE EXCEPTION
                    1433   ; // INSTEAD IT IS DONE IN THE 'N' COMMAND FOR NEXT
                    1434   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    1435   ; void DumpRegisters()
                    1436   ; {
                    1437   _DumpRegisters:
00000F82  48E7 3F3C 1438          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00000F86  45F9 0000 1439          lea       _putch.L,A2
00000F8A  3C0C      
00000F8C  47F9 0000 1440          lea       _printf.L,A3
00000F90  3CDE      
00000F92  49F9 0803 1441          lea       _SR.L,A4
00000F96  012C      
00000F98  4BF9 0803 1442          lea       _WatchPointString.L,A5
00000F9C  01C2      
                    1443   ; short i, x, j, k ;
                    1444   ; unsigned char c, *BytePointer;
                    1445   ; // buld up strings for displaying watchpoints
                    1446   ; for(x = 0; x < (short)(8); x++)
00000F9E  4242      1447          clr.w     D2
                    1448   DumpRegisters_1:
00000FA0  0C42 0008 1449          cmp.w     #8,D2
00000FA4  6C00 01C6 1450          bge       DumpRegisters_3
                    1451   ; {
                    1452   ; if(WatchPointSetOrCleared[x] == 1)
00000FA8  48C2      1453          ext.l     D2
00000FAA  2002      1454          move.l    D2,D0
00000FAC  E588      1455          lsl.l     #2,D0
00000FAE  41F9 0803 1456          lea       _WatchPointSetOrCleared.L,A0
00000FB2  01A2      
00000FB4  2030 0800 1457          move.l    0(A0,D0.L),D0
00000FB8  0C80 0000 1458          cmp.l     #1,D0
00000FBC  0001      
00000FBE  6600 0186 1459          bne       DumpRegisters_4
                    1460   ; {
                    1461   ; sprintf(WatchPointString[x], "$%08X  ", WatchPointAddress[x]) ;
00000FC2  48C2      1462          ext.l     D2
00000FC4  2202      1463          move.l    D2,D1
00000FC6  E589      1464          lsl.l     #2,D1
00000FC8  41F9 0803 1465          lea       _WatchPointAddress.L,A0
00000FCC  0182      
00000FCE  2F30 1800 1466          move.l    0(A0,D1.L),-(A7)
00000FD2  4879 0000 1467          pea       @m68kde~1_19.L
00000FD6  47D2      
00000FD8  220D      1468          move.l    A5,D1
00000FDA  48C2      1469          ext.l     D2
00000FDC  2F00      1470          move.l    D0,-(A7)
00000FDE  2002      1471          move.l    D2,D0
00000FE0  C1FC 0064 1472          muls      #100,D0
00000FE4  D280      1473          add.l     D0,D1
00000FE6  201F      1474          move.l    (A7)+,D0
00000FE8  2F01      1475          move.l    D1,-(A7)
00000FEA  4EB9 0000 1476          jsr       _sprintf
00000FEE  3C68      
00000FF0  DEFC 000C 1477          add.w     #12,A7
                    1478   ; BytePointer = (char *)(WatchPointAddress[x]) ;
00000FF4  48C2      1479          ext.l     D2
00000FF6  2002      1480          move.l    D2,D0
00000FF8  E588      1481          lsl.l     #2,D0
00000FFA  41F9 0803 1482          lea       _WatchPointAddress.L,A0
00000FFE  0182      
00001000  2A30 0800 1483          move.l    0(A0,D0.L),D5
                    1484   ; for(j = 0; j < (short)(16); j+=2)
00001004  4243      1485          clr.w     D3
                    1486   DumpRegisters_6:
00001006  0C43 0010 1487          cmp.w     #16,D3
0000100A  6C00 0082 1488          bge       DumpRegisters_8
                    1489   ; {
                    1490   ; for(k = 0; k < (short)(2); k++)
0000100E  4246      1491          clr.w     D6
                    1492   DumpRegisters_9:
00001010  0C46 0002 1493          cmp.w     #2,D6
00001014  6C00 0052 1494          bge       DumpRegisters_11
                    1495   ; {
                    1496   ; sprintf(TempString, "%02X", BytePointer[j+k]) ;
00001018  2045      1497          move.l    D5,A0
0000101A  48C3      1498          ext.l     D3
0000101C  2203      1499          move.l    D3,D1
0000101E  48C6      1500          ext.l     D6
00001020  D286      1501          add.l     D6,D1
00001022  1230 1800 1502          move.b    0(A0,D1.L),D1
00001026  C2BC 0000 1503          and.l     #255,D1
0000102A  00FF      
0000102C  2F01      1504          move.l    D1,-(A7)
0000102E  4879 0000 1505          pea       @m68kde~1_4.L
00001032  4624      
00001034  4879 0803 1506          pea       _TempString.L
00001038  04E2      
0000103A  4EB9 0000 1507          jsr       _sprintf
0000103E  3C68      
00001040  DEFC 000C 1508          add.w     #12,A7
                    1509   ; strcat(WatchPointString[x], TempString) ;
00001044  4879 0803 1510          pea       _TempString.L
00001048  04E2      
0000104A  220D      1511          move.l    A5,D1
0000104C  48C2      1512          ext.l     D2
0000104E  2F00      1513          move.l    D0,-(A7)
00001050  2002      1514          move.l    D2,D0
00001052  C1FC 0064 1515          muls      #100,D0
00001056  D280      1516          add.l     D0,D1
00001058  201F      1517          move.l    (A7)+,D0
0000105A  2F01      1518          move.l    D1,-(A7)
0000105C  4EB9 0000 1519          jsr       _strcat
00001060  3C9C      
00001062  504F      1520          addq.w    #8,A7
00001064  5246      1521          addq.w    #1,D6
00001066  60A8      1522          bra       DumpRegisters_9
                    1523   DumpRegisters_11:
                    1524   ; }
                    1525   ; strcat(WatchPointString[x]," ") ;
00001068  4879 0000 1526          pea       @m68kde~1_20.L
0000106C  47DA      
0000106E  220D      1527          move.l    A5,D1
00001070  48C2      1528          ext.l     D2
00001072  2F00      1529          move.l    D0,-(A7)
00001074  2002      1530          move.l    D2,D0
00001076  C1FC 0064 1531          muls      #100,D0
0000107A  D280      1532          add.l     D0,D1
0000107C  201F      1533          move.l    (A7)+,D0
0000107E  2F01      1534          move.l    D1,-(A7)
00001080  4EB9 0000 1535          jsr       _strcat
00001084  3C9C      
00001086  504F      1536          addq.w    #8,A7
00001088  5443      1537          addq.w    #2,D3
0000108A  6000 FF7A 1538          bra       DumpRegisters_6
                    1539   DumpRegisters_8:
                    1540   ; }
                    1541   ; strcat(WatchPointString[x], "  ") ;
0000108E  4879 0000 1542          pea       @m68kde~1_5.L
00001092  462A      
00001094  220D      1543          move.l    A5,D1
00001096  48C2      1544          ext.l     D2
00001098  2F00      1545          move.l    D0,-(A7)
0000109A  2002      1546          move.l    D2,D0
0000109C  C1FC 0064 1547          muls      #100,D0
000010A0  D280      1548          add.l     D0,D1
000010A2  201F      1549          move.l    (A7)+,D0
000010A4  2F01      1550          move.l    D1,-(A7)
000010A6  4EB9 0000 1551          jsr       _strcat
000010AA  3C9C      
000010AC  504F      1552          addq.w    #8,A7
                    1553   ; BytePointer = (char *)(WatchPointAddress[x]) ;
000010AE  48C2      1554          ext.l     D2
000010B0  2002      1555          move.l    D2,D0
000010B2  E588      1556          lsl.l     #2,D0
000010B4  41F9 0803 1557          lea       _WatchPointAddress.L,A0
000010B8  0182      
000010BA  2A30 0800 1558          move.l    0(A0,D0.L),D5
                    1559   ; for(j = 0; j < (short)(16); j++)
000010BE  4243      1560          clr.w     D3
                    1561   DumpRegisters_12:
000010C0  0C43 0010 1562          cmp.w     #16,D3
000010C4  6C00 007E 1563          bge       DumpRegisters_14
                    1564   ; {
                    1565   ; c = ((char)(BytePointer[j]) & 0x7f) ;
000010C8  2045      1566          move.l    D5,A0
000010CA  48C3      1567          ext.l     D3
000010CC  1030 3800 1568          move.b    0(A0,D3.L),D0
000010D0  C03C 007F 1569          and.b     #127,D0
000010D4  1E00      1570          move.b    D0,D7
                    1571   ; if((c > (char)(0x7f)) || (c < (char)(' ')))
000010D6  0C07 007F 1572          cmp.b     #127,D7
000010DA  6206      1573          bhi.s     DumpRegisters_17
000010DC  0C07 0020 1574          cmp.b     #32,D7
000010E0  6416      1575          bhs.s     DumpRegisters_15
                    1576   DumpRegisters_17:
                    1577   ; sprintf(TempString, ".") ;
000010E2  4879 0000 1578          pea       @m68kde~1_21.L
000010E6  47DC      
000010E8  4879 0803 1579          pea       _TempString.L
000010EC  04E2      
000010EE  4EB9 0000 1580          jsr       _sprintf
000010F2  3C68      
000010F4  504F      1581          addq.w    #8,A7
000010F6  6026      1582          bra.s     DumpRegisters_16
                    1583   DumpRegisters_15:
                    1584   ; else
                    1585   ; sprintf(TempString, "%c", BytePointer[j]) ;
000010F8  2045      1586          move.l    D5,A0
000010FA  48C3      1587          ext.l     D3
000010FC  1230 3800 1588          move.b    0(A0,D3.L),D1
00001100  C2BC 0000 1589          and.l     #255,D1
00001104  00FF      
00001106  2F01      1590          move.l    D1,-(A7)
00001108  4879 0000 1591          pea       @m68kde~1_22.L
0000110C  47DE      
0000110E  4879 0803 1592          pea       _TempString.L
00001112  04E2      
00001114  4EB9 0000 1593          jsr       _sprintf
00001118  3C68      
0000111A  DEFC 000C 1594          add.w     #12,A7
                    1595   DumpRegisters_16:
                    1596   ; strcat(WatchPointString[x], TempString) ;
0000111E  4879 0803 1597          pea       _TempString.L
00001122  04E2      
00001124  220D      1598          move.l    A5,D1
00001126  48C2      1599          ext.l     D2
00001128  2F00      1600          move.l    D0,-(A7)
0000112A  2002      1601          move.l    D2,D0
0000112C  C1FC 0064 1602          muls      #100,D0
00001130  D280      1603          add.l     D0,D1
00001132  201F      1604          move.l    (A7)+,D0
00001134  2F01      1605          move.l    D1,-(A7)
00001136  4EB9 0000 1606          jsr       _strcat
0000113A  3C9C      
0000113C  504F      1607          addq.w    #8,A7
0000113E  5243      1608          addq.w    #1,D3
00001140  6000 FF7E 1609          bra       DumpRegisters_12
                    1610   DumpRegisters_14:
00001144  6020      1611          bra.s     DumpRegisters_5
                    1612   DumpRegisters_4:
                    1613   ; }
                    1614   ; }
                    1615   ; else
                    1616   ; strcpy(WatchPointString[x], "") ;
00001146  4879 0000 1617          pea       @m68kde~1_23.L
0000114A  47E2      
0000114C  220D      1618          move.l    A5,D1
0000114E  48C2      1619          ext.l     D2
00001150  2F00      1620          move.l    D0,-(A7)
00001152  2002      1621          move.l    D2,D0
00001154  C1FC 0064 1622          muls      #100,D0
00001158  D280      1623          add.l     D0,D1
0000115A  201F      1624          move.l    (A7)+,D0
0000115C  2F01      1625          move.l    D1,-(A7)
0000115E  4EB9 0000 1626          jsr       _strcpy
00001162  3A7E      
00001164  504F      1627          addq.w    #8,A7
                    1628   DumpRegisters_5:
00001166  5242      1629          addq.w    #1,D2
00001168  6000 FE36 1630          bra       DumpRegisters_1
                    1631   DumpRegisters_3:
                    1632   ; }
                    1633   ; printf("\r\n\r\n D0 = $%08X  A0 = $%08X",d0,a0) ;
0000116C  2F39 0803 1634          move.l    _a0.L,-(A7)
00001170  0104      
00001172  2F39 0803 1635          move.l    _d0.L,-(A7)
00001176  00E4      
00001178  4879 0000 1636          pea       @m68kde~1_24.L
0000117C  47E4      
0000117E  4E93      1637          jsr       (A3)
00001180  DEFC 000C 1638          add.w     #12,A7
                    1639   ; printf("\r\n D1 = $%08X  A1 = $%08X",d1,a1) ;
00001184  2F39 0803 1640          move.l    _a1.L,-(A7)
00001188  0108      
0000118A  2F39 0803 1641          move.l    _d1.L,-(A7)
0000118E  00E8      
00001190  4879 0000 1642          pea       @m68kde~1_25.L
00001194  4800      
00001196  4E93      1643          jsr       (A3)
00001198  DEFC 000C 1644          add.w     #12,A7
                    1645   ; printf("\r\n D2 = $%08X  A2 = $%08X",d2,a2) ;
0000119C  2F39 0803 1646          move.l    _a2.L,-(A7)
000011A0  010C      
000011A2  2F39 0803 1647          move.l    _d2.L,-(A7)
000011A6  00EC      
000011A8  4879 0000 1648          pea       @m68kde~1_26.L
000011AC  481A      
000011AE  4E93      1649          jsr       (A3)
000011B0  DEFC 000C 1650          add.w     #12,A7
                    1651   ; printf("\r\n D3 = $%08X  A3 = $%08X",d3,a3) ;
000011B4  2F39 0803 1652          move.l    _a3.L,-(A7)
000011B8  0110      
000011BA  2F39 0803 1653          move.l    _d3.L,-(A7)
000011BE  00F0      
000011C0  4879 0000 1654          pea       @m68kde~1_27.L
000011C4  4834      
000011C6  4E93      1655          jsr       (A3)
000011C8  DEFC 000C 1656          add.w     #12,A7
                    1657   ; printf("\r\n D4 = $%08X  A4 = $%08X",d4,a4) ;
000011CC  2F39 0803 1658          move.l    _a4.L,-(A7)
000011D0  0114      
000011D2  2F39 0803 1659          move.l    _d4.L,-(A7)
000011D6  00F4      
000011D8  4879 0000 1660          pea       @m68kde~1_28.L
000011DC  484E      
000011DE  4E93      1661          jsr       (A3)
000011E0  DEFC 000C 1662          add.w     #12,A7
                    1663   ; printf("\r\n D5 = $%08X  A5 = $%08X",d5,a5) ;
000011E4  2F39 0803 1664          move.l    _a5.L,-(A7)
000011E8  0118      
000011EA  2F39 0803 1665          move.l    _d5.L,-(A7)
000011EE  00F8      
000011F0  4879 0000 1666          pea       @m68kde~1_29.L
000011F4  4868      
000011F6  4E93      1667          jsr       (A3)
000011F8  DEFC 000C 1668          add.w     #12,A7
                    1669   ; printf("\r\n D6 = $%08X  A6 = $%08X",d6,a6) ;
000011FC  2F39 0803 1670          move.l    _a6.L,-(A7)
00001200  011C      
00001202  2F39 0803 1671          move.l    _d6.L,-(A7)
00001206  00FC      
00001208  4879 0000 1672          pea       @m68kde~1_30.L
0000120C  4882      
0000120E  4E93      1673          jsr       (A3)
00001210  DEFC 000C 1674          add.w     #12,A7
                    1675   ; printf("\r\n D7 = $%08X  A7 = $%08X",d7,((SR & (unsigned short int)(0x2000)) == ((unsigned short int)(0x2000))) ? SSP : USP) ;
00001214  3214      1676          move.w    (A4),D1
00001216  C27C 2000 1677          and.w     #8192,D1
0000121A  0C41 2000 1678          cmp.w     #8192,D1
0000121E  6608      1679          bne.s     DumpRegisters_18
00001220  2239 0803 1680          move.l    _SSP.L,D1
00001224  0124      
00001226  6006      1681          bra.s     DumpRegisters_19
                    1682   DumpRegisters_18:
00001228  2239 0803 1683          move.l    _USP.L,D1
0000122C  0128      
                    1684   DumpRegisters_19:
0000122E  2F01      1685          move.l    D1,-(A7)
00001230  2F39 0803 1686          move.l    _d7.L,-(A7)
00001234  0100      
00001236  4879 0000 1687          pea       @m68kde~1_31.L
0000123A  489C      
0000123C  4E93      1688          jsr       (A3)
0000123E  DEFC 000C 1689          add.w     #12,A7
                    1690   ; printf("\r\n\r\nUSP = $%08X  (A7) User SP", USP ) ;
00001242  2F39 0803 1691          move.l    _USP.L,-(A7)
00001246  0128      
00001248  4879 0000 1692          pea       @m68kde~1_32.L
0000124C  48B6      
0000124E  4E93      1693          jsr       (A3)
00001250  504F      1694          addq.w    #8,A7
                    1695   ; printf("\r\nSSP = $%08X  (A7) Supervisor SP", SSP) ;
00001252  2F39 0803 1696          move.l    _SSP.L,-(A7)
00001256  0124      
00001258  4879 0000 1697          pea       @m68kde~1_33.L
0000125C  48D4      
0000125E  4E93      1698          jsr       (A3)
00001260  504F      1699          addq.w    #8,A7
                    1700   ; printf("\r\n SR = $%04X   ",SR) ;
00001262  3214      1701          move.w    (A4),D1
00001264  C2BC 0000 1702          and.l     #65535,D1
00001268  FFFF      
0000126A  2F01      1703          move.l    D1,-(A7)
0000126C  4879 0000 1704          pea       @m68kde~1_34.L
00001270  48F6      
00001272  4E93      1705          jsr       (A3)
00001274  504F      1706          addq.w    #8,A7
                    1707   ; // display the status word in characters etc.
                    1708   ; printf("   [") ;
00001276  4879 0000 1709          pea       @m68kde~1_35.L
0000127A  4908      
0000127C  4E93      1710          jsr       (A3)
0000127E  584F      1711          addq.w    #4,A7
                    1712   ; if((SR & (unsigned short int)(0x8000)) == (unsigned short int)(0x8000)) putchar('T') ; else putchar('-') ;      // Trace bit(bit 15)
00001280  3014      1713          move.w    (A4),D0
00001282  C07C 8000 1714          and.w     #32768,D0
00001286  0C40 8000 1715          cmp.w     #32768,D0
0000128A  660A      1716          bne.s     DumpRegisters_20
0000128C  4878 0054 1717          pea       84
00001290  4E92      1718          jsr       (A2)
00001292  584F      1719          addq.w    #4,A7
00001294  6008      1720          bra.s     DumpRegisters_21
                    1721   DumpRegisters_20:
00001296  4878 002D 1722          pea       45
0000129A  4E92      1723          jsr       (A2)
0000129C  584F      1724          addq.w    #4,A7
                    1725   DumpRegisters_21:
                    1726   ; if((SR & (unsigned short int)(0x2000)) == (unsigned short int)(0x2000)) putchar('S') ; else putchar('U') ;      // supervisor bit  (bit 13)
0000129E  3014      1727          move.w    (A4),D0
000012A0  C07C 2000 1728          and.w     #8192,D0
000012A4  0C40 2000 1729          cmp.w     #8192,D0
000012A8  660A      1730          bne.s     DumpRegisters_22
000012AA  4878 0053 1731          pea       83
000012AE  4E92      1732          jsr       (A2)
000012B0  584F      1733          addq.w    #4,A7
000012B2  6008      1734          bra.s     DumpRegisters_23
                    1735   DumpRegisters_22:
000012B4  4878 0055 1736          pea       85
000012B8  4E92      1737          jsr       (A2)
000012BA  584F      1738          addq.w    #4,A7
                    1739   DumpRegisters_23:
                    1740   ; if((SR & (unsigned short int)(0x0400)) == (unsigned short int)(0x0400)) putchar('1') ; else putchar('0') ;      // IRQ2 Bit (bit 10)
000012BC  3014      1741          move.w    (A4),D0
000012BE  C07C 0400 1742          and.w     #1024,D0
000012C2  0C40 0400 1743          cmp.w     #1024,D0
000012C6  660A      1744          bne.s     DumpRegisters_24
000012C8  4878 0031 1745          pea       49
000012CC  4E92      1746          jsr       (A2)
000012CE  584F      1747          addq.w    #4,A7
000012D0  6008      1748          bra.s     DumpRegisters_25
                    1749   DumpRegisters_24:
000012D2  4878 0030 1750          pea       48
000012D6  4E92      1751          jsr       (A2)
000012D8  584F      1752          addq.w    #4,A7
                    1753   DumpRegisters_25:
                    1754   ; if((SR & (unsigned short int)(0x0200)) == (unsigned short int)(0x0200)) putchar('1') ; else putchar('0') ;      // IRQ1 Bit (bit 9)
000012DA  3014      1755          move.w    (A4),D0
000012DC  C07C 0200 1756          and.w     #512,D0
000012E0  0C40 0200 1757          cmp.w     #512,D0
000012E4  660A      1758          bne.s     DumpRegisters_26
000012E6  4878 0031 1759          pea       49
000012EA  4E92      1760          jsr       (A2)
000012EC  584F      1761          addq.w    #4,A7
000012EE  6008      1762          bra.s     DumpRegisters_27
                    1763   DumpRegisters_26:
000012F0  4878 0030 1764          pea       48
000012F4  4E92      1765          jsr       (A2)
000012F6  584F      1766          addq.w    #4,A7
                    1767   DumpRegisters_27:
                    1768   ; if((SR & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100)) putchar('1') ; else putchar('0') ;      // IRQ0 Bit (bit 8)
000012F8  3014      1769          move.w    (A4),D0
000012FA  C07C 0100 1770          and.w     #256,D0
000012FE  0C40 0100 1771          cmp.w     #256,D0
00001302  660A      1772          bne.s     DumpRegisters_28
00001304  4878 0031 1773          pea       49
00001308  4E92      1774          jsr       (A2)
0000130A  584F      1775          addq.w    #4,A7
0000130C  6008      1776          bra.s     DumpRegisters_29
                    1777   DumpRegisters_28:
0000130E  4878 0030 1778          pea       48
00001312  4E92      1779          jsr       (A2)
00001314  584F      1780          addq.w    #4,A7
                    1781   DumpRegisters_29:
                    1782   ; if((SR & (unsigned short int)(0x0010)) == (unsigned short int)(0x0010)) putchar('X') ; else putchar('-') ;      // X Bit (bit 4)
00001316  3014      1783          move.w    (A4),D0
00001318  C07C 0010 1784          and.w     #16,D0
0000131C  0C40 0010 1785          cmp.w     #16,D0
00001320  660A      1786          bne.s     DumpRegisters_30
00001322  4878 0058 1787          pea       88
00001326  4E92      1788          jsr       (A2)
00001328  584F      1789          addq.w    #4,A7
0000132A  6008      1790          bra.s     DumpRegisters_31
                    1791   DumpRegisters_30:
0000132C  4878 002D 1792          pea       45
00001330  4E92      1793          jsr       (A2)
00001332  584F      1794          addq.w    #4,A7
                    1795   DumpRegisters_31:
                    1796   ; if((SR & (unsigned short int)(0x0008)) == (unsigned short int)(0x0008)) putchar('N') ; else putchar('-') ;      // N Bit (bit 3)
00001334  3014      1797          move.w    (A4),D0
00001336  C07C 0008 1798          and.w     #8,D0
0000133A  0C40 0008 1799          cmp.w     #8,D0
0000133E  660A      1800          bne.s     DumpRegisters_32
00001340  4878 004E 1801          pea       78
00001344  4E92      1802          jsr       (A2)
00001346  584F      1803          addq.w    #4,A7
00001348  6008      1804          bra.s     DumpRegisters_33
                    1805   DumpRegisters_32:
0000134A  4878 002D 1806          pea       45
0000134E  4E92      1807          jsr       (A2)
00001350  584F      1808          addq.w    #4,A7
                    1809   DumpRegisters_33:
                    1810   ; if((SR & (unsigned short int)(0x0004)) == (unsigned short int)(0x0004)) putchar('Z') ; else putchar('-') ;      // Z Bit (bit 2)
00001352  3014      1811          move.w    (A4),D0
00001354  C07C 0004 1812          and.w     #4,D0
00001358  0C40 0004 1813          cmp.w     #4,D0
0000135C  660A      1814          bne.s     DumpRegisters_34
0000135E  4878 005A 1815          pea       90
00001362  4E92      1816          jsr       (A2)
00001364  584F      1817          addq.w    #4,A7
00001366  6008      1818          bra.s     DumpRegisters_35
                    1819   DumpRegisters_34:
00001368  4878 002D 1820          pea       45
0000136C  4E92      1821          jsr       (A2)
0000136E  584F      1822          addq.w    #4,A7
                    1823   DumpRegisters_35:
                    1824   ; if((SR & (unsigned short int)(0x0002)) == (unsigned short int)(0x0002)) putchar('V') ; else putchar('-') ;      // V Bit (bit 1)
00001370  3014      1825          move.w    (A4),D0
00001372  C07C 0002 1826          and.w     #2,D0
00001376  0C40 0002 1827          cmp.w     #2,D0
0000137A  660A      1828          bne.s     DumpRegisters_36
0000137C  4878 0056 1829          pea       86
00001380  4E92      1830          jsr       (A2)
00001382  584F      1831          addq.w    #4,A7
00001384  6008      1832          bra.s     DumpRegisters_37
                    1833   DumpRegisters_36:
00001386  4878 002D 1834          pea       45
0000138A  4E92      1835          jsr       (A2)
0000138C  584F      1836          addq.w    #4,A7
                    1837   DumpRegisters_37:
                    1838   ; if((SR & (unsigned short int)(0x0001)) == (unsigned short int)(0x0001)) putchar('C') ; else putchar('-') ;      // C Bit (bit 0)
0000138E  3014      1839          move.w    (A4),D0
00001390  C07C 0001 1840          and.w     #1,D0
00001394  0C40 0001 1841          cmp.w     #1,D0
00001398  660A      1842          bne.s     DumpRegisters_38
0000139A  4878 0043 1843          pea       67
0000139E  4E92      1844          jsr       (A2)
000013A0  584F      1845          addq.w    #4,A7
000013A2  6008      1846          bra.s     DumpRegisters_39
                    1847   DumpRegisters_38:
000013A4  4878 002D 1848          pea       45
000013A8  4E92      1849          jsr       (A2)
000013AA  584F      1850          addq.w    #4,A7
                    1851   DumpRegisters_39:
                    1852   ; putchar(']') ;
000013AC  4878 005D 1853          pea       93
000013B0  4E92      1854          jsr       (A2)
000013B2  584F      1855          addq.w    #4,A7
                    1856   ; printf("\r\n PC = $%08X  ", PC) ;
000013B4  2F39 0803 1857          move.l    _PC.L,-(A7)
000013B8  0120      
000013BA  4879 0000 1858          pea       @m68kde~1_36.L
000013BE  490E      
000013C0  4E93      1859          jsr       (A3)
000013C2  504F      1860          addq.w    #8,A7
                    1861   ; if(*(unsigned short int *)(PC) == 0x4e4e)
000013C4  2039 0803 1862          move.l    _PC.L,D0
000013C8  0120      
000013CA  2040      1863          move.l    D0,A0
000013CC  3010      1864          move.w    (A0),D0
000013CE  0C40 4E4E 1865          cmp.w     #20046,D0
000013D2  660A      1866          bne.s     DumpRegisters_40
                    1867   ; printf("[@ BREAKPOINT]") ;
000013D4  4879 0000 1868          pea       @m68kde~1_37.L
000013D8  491E      
000013DA  4E93      1869          jsr       (A3)
000013DC  584F      1870          addq.w    #4,A7
                    1871   DumpRegisters_40:
                    1872   ; printf("\r\n") ;
000013DE  4879 0000 1873          pea       @m68kde~1_6.L
000013E2  462E      
000013E4  4E93      1874          jsr       (A3)
000013E6  584F      1875          addq.w    #4,A7
                    1876   ; for(i=0; i < 8; i++)    {
000013E8  4244      1877          clr.w     D4
                    1878   DumpRegisters_42:
000013EA  0C44 0008 1879          cmp.w     #8,D4
000013EE  6C00 0040 1880          bge       DumpRegisters_44
                    1881   ; if(WatchPointSetOrCleared[i] == 1)
000013F2  48C4      1882          ext.l     D4
000013F4  2004      1883          move.l    D4,D0
000013F6  E588      1884          lsl.l     #2,D0
000013F8  41F9 0803 1885          lea       _WatchPointSetOrCleared.L,A0
000013FC  01A2      
000013FE  2030 0800 1886          move.l    0(A0,D0.L),D0
00001402  0C80 0000 1887          cmp.l     #1,D0
00001406  0001      
00001408  6622      1888          bne.s     DumpRegisters_45
                    1889   ; printf("\r\nWP%d = %s", i, WatchPointString[i]) ;
0000140A  220D      1890          move.l    A5,D1
0000140C  48C4      1891          ext.l     D4
0000140E  2F00      1892          move.l    D0,-(A7)
00001410  2004      1893          move.l    D4,D0
00001412  C1FC 0064 1894          muls      #100,D0
00001416  D280      1895          add.l     D0,D1
00001418  201F      1896          move.l    (A7)+,D0
0000141A  2F01      1897          move.l    D1,-(A7)
0000141C  48C4      1898          ext.l     D4
0000141E  2F04      1899          move.l    D4,-(A7)
00001420  4879 0000 1900          pea       @m68kde~1_38.L
00001424  492E      
00001426  4E93      1901          jsr       (A3)
00001428  DEFC 000C 1902          add.w     #12,A7
                    1903   DumpRegisters_45:
0000142C  5244      1904          addq.w    #1,D4
0000142E  60BA      1905          bra       DumpRegisters_42
                    1906   DumpRegisters_44:
00001430  4CDF 3CFC 1907          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00001434  4E75      1908          rts
                    1909   ; }
                    1910   ; }
                    1911   ; // Trace Exception Handler
                    1912   ; void DumpRegistersandPause(void)
                    1913   ; {
                    1914   _DumpRegistersandPause:
00001436  2F0A      1915          move.l    A2,-(A7)
00001438  45F9 0000 1916          lea       _printf.L,A2
0000143C  3CDE      
                    1917   ; printf("\r\n\r\n\r\n\r\n\r\n\r\nSingle Step  :[ON]") ;
0000143E  4879 0000 1918          pea       @m68kde~1_39.L
00001442  493A      
00001444  4E92      1919          jsr       (A2)
00001446  584F      1920          addq.w    #4,A7
                    1921   ; printf("\r\nBreak Points :[Disabled]") ;
00001448  4879 0000 1922          pea       @m68kde~1_40.L
0000144C  495A      
0000144E  4E92      1923          jsr       (A2)
00001450  584F      1924          addq.w    #4,A7
                    1925   ; DumpRegisters() ;
00001452  4EB8 0F82 1926          jsr       _DumpRegisters
                    1927   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
00001456  4879 0000 1928          pea       @m68kde~1_41.L
0000145A  4976      
0000145C  4E92      1929          jsr       (A2)
0000145E  584F      1930          addq.w    #4,A7
                    1931   ; printf("\r\nPress <ESC> to Resume Program") ;
00001460  4879 0000 1932          pea       @m68kde~1_42.L
00001464  49A2      
00001466  4E92      1933          jsr       (A2)
00001468  584F      1934          addq.w    #4,A7
                    1935   ; menu() ;
0000146A  4EB9 0000 1936          jsr       _menu
0000146E  1FD6      
00001470  245F      1937          move.l    (A7)+,A2
00001472  4E75      1938          rts
                    1939   ; }
                    1940   ; void ChangeRegisters(void)
                    1941   ; {
                    1942   _ChangeRegisters:
00001474  4E56 FFFC 1943          link      A6,#-4
00001478  48E7 303C 1944          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
0000147C  45F9 0000 1945          lea       _printf.L,A2
00001480  3CDE      
00001482  47EE FFFC 1946          lea       -4(A6),A3
00001486  49F8 0B62 1947          lea       _Get8HexDigits.L,A4
0000148A  4BF8 0A26 1948          lea       __getch.L,A5
                    1949   ; // get register name d0-d7, a0-a7, up, sp, sr, pc
                    1950   ; int reg_val ;
                    1951   ; char c, reg[3] ;
                    1952   ; reg[0] = tolower(_getch()) ;
0000148E  2F00      1953          move.l    D0,-(A7)
00001490  4E95      1954          jsr       (A5)
00001492  2200      1955          move.l    D0,D1
00001494  201F      1956          move.l    (A7)+,D0
00001496  2F01      1957          move.l    D1,-(A7)
00001498  4EB9 0000 1958          jsr       _tolower
0000149C  3C3C      
0000149E  584F      1959          addq.w    #4,A7
000014A0  1680      1960          move.b    D0,(A3)
                    1961   ; reg[1] = c = tolower(_getch()) ;
000014A2  2F00      1962          move.l    D0,-(A7)
000014A4  4E95      1963          jsr       (A5)
000014A6  2200      1964          move.l    D0,D1
000014A8  201F      1965          move.l    (A7)+,D0
000014AA  2F01      1966          move.l    D1,-(A7)
000014AC  4EB9 0000 1967          jsr       _tolower
000014B0  3C3C      
000014B2  584F      1968          addq.w    #4,A7
000014B4  1400      1969          move.b    D0,D2
000014B6  1740 0001 1970          move.b    D0,1(A3)
                    1971   ; if(reg[0] == (char)('d'))  {    // change data register
000014BA  1013      1972          move.b    (A3),D0
000014BC  0C00 0064 1973          cmp.b     #100,D0
000014C0  6600 00AE 1974          bne       ChangeRegisters_1
                    1975   ; if((reg[1] > (char)('7')) || (reg[1] < (char)('0'))) {
000014C4  102B 0001 1976          move.b    1(A3),D0
000014C8  0C00 0037 1977          cmp.b     #55,D0
000014CC  6E0A      1978          bgt.s     ChangeRegisters_5
000014CE  102B 0001 1979          move.b    1(A3),D0
000014D2  0C00 0030 1980          cmp.b     #48,D0
000014D6  6C0E      1981          bge.s     ChangeRegisters_3
                    1982   ChangeRegisters_5:
                    1983   ; printf("\r\nIllegal Data Register : Use D0-D7.....\r\n") ;
000014D8  4879 0000 1984          pea       @m68kde~1_43.L
000014DC  49C2      
000014DE  4E92      1985          jsr       (A2)
000014E0  584F      1986          addq.w    #4,A7
                    1987   ; return ;
000014E2  6000 0244 1988          bra       ChangeRegisters_6
                    1989   ChangeRegisters_3:
                    1990   ; }
                    1991   ; else {
                    1992   ; printf("\r\nD%c = ", c) ;
000014E6  4882      1993          ext.w     D2
000014E8  48C2      1994          ext.l     D2
000014EA  2F02      1995          move.l    D2,-(A7)
000014EC  4879 0000 1996          pea       @m68kde~1_44.L
000014F0  49EE      
000014F2  4E92      1997          jsr       (A2)
000014F4  504F      1998          addq.w    #8,A7
                    1999   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000014F6  42A7      2000          clr.l     -(A7)
000014F8  4E94      2001          jsr       (A4)
000014FA  584F      2002          addq.w    #4,A7
000014FC  2600      2003          move.l    D0,D3
                    2004   ; }
                    2005   ; // bit cludgy but d0-d7 not stored as an array for good reason
                    2006   ; if(c == (char)('0'))
000014FE  0C02 0030 2007          cmp.b     #48,D2
00001502  660A      2008          bne.s     ChangeRegisters_7
                    2009   ; d0 = reg_val ;
00001504  23C3 0803 2010          move.l    D3,_d0.L
00001508  00E4      
0000150A  6000 0060 2011          bra       ChangeRegisters_20
                    2012   ChangeRegisters_7:
                    2013   ; else if(c == (char)('1'))
0000150E  0C02 0031 2014          cmp.b     #49,D2
00001512  660A      2015          bne.s     ChangeRegisters_9
                    2016   ; d1 = reg_val ;
00001514  23C3 0803 2017          move.l    D3,_d1.L
00001518  00E8      
0000151A  6000 0050 2018          bra       ChangeRegisters_20
                    2019   ChangeRegisters_9:
                    2020   ; else if(c == (char)('2'))
0000151E  0C02 0032 2021          cmp.b     #50,D2
00001522  660A      2022          bne.s     ChangeRegisters_11
                    2023   ; d2 = reg_val ;
00001524  23C3 0803 2024          move.l    D3,_d2.L
00001528  00EC      
0000152A  6000 0040 2025          bra       ChangeRegisters_20
                    2026   ChangeRegisters_11:
                    2027   ; else if(c == (char)('3'))
0000152E  0C02 0033 2028          cmp.b     #51,D2
00001532  6608      2029          bne.s     ChangeRegisters_13
                    2030   ; d3 = reg_val ;
00001534  23C3 0803 2031          move.l    D3,_d3.L
00001538  00F0      
0000153A  6030      2032          bra.s     ChangeRegisters_20
                    2033   ChangeRegisters_13:
                    2034   ; else if(c == (char)('4'))
0000153C  0C02 0034 2035          cmp.b     #52,D2
00001540  6608      2036          bne.s     ChangeRegisters_15
                    2037   ; d4 = reg_val ;
00001542  23C3 0803 2038          move.l    D3,_d4.L
00001546  00F4      
00001548  6022      2039          bra.s     ChangeRegisters_20
                    2040   ChangeRegisters_15:
                    2041   ; else if(c == (char)('5'))
0000154A  0C02 0035 2042          cmp.b     #53,D2
0000154E  6608      2043          bne.s     ChangeRegisters_17
                    2044   ; d5 = reg_val ;
00001550  23C3 0803 2045          move.l    D3,_d5.L
00001554  00F8      
00001556  6014      2046          bra.s     ChangeRegisters_20
                    2047   ChangeRegisters_17:
                    2048   ; else if(c == (char)('6'))
00001558  0C02 0036 2049          cmp.b     #54,D2
0000155C  6608      2050          bne.s     ChangeRegisters_19
                    2051   ; d6 = reg_val ;
0000155E  23C3 0803 2052          move.l    D3,_d6.L
00001562  00FC      
00001564  6006      2053          bra.s     ChangeRegisters_20
                    2054   ChangeRegisters_19:
                    2055   ; else
                    2056   ; d7 = reg_val ;
00001566  23C3 0803 2057          move.l    D3,_d7.L
0000156A  0100      
                    2058   ChangeRegisters_20:
0000156C  6000 01B6 2059          bra       ChangeRegisters_51
                    2060   ChangeRegisters_1:
                    2061   ; }
                    2062   ; else if(reg[0] == (char)('a'))  {    // change address register, a7 is the user stack pointer, sp is the system stack pointer
00001570  1013      2063          move.b    (A3),D0
00001572  0C00 0061 2064          cmp.b     #97,D0
00001576  6600 00A6 2065          bne       ChangeRegisters_21
                    2066   ; if((c > (char)('7')) || (c < (char)('0'))) {
0000157A  0C02 0037 2067          cmp.b     #55,D2
0000157E  6E06      2068          bgt.s     ChangeRegisters_25
00001580  0C02 0030 2069          cmp.b     #48,D2
00001584  6C0E      2070          bge.s     ChangeRegisters_23
                    2071   ChangeRegisters_25:
                    2072   ; printf("\r\nIllegal Address Register : Use A0-A7.....\r\n") ;
00001586  4879 0000 2073          pea       @m68kde~1_45.L
0000158A  49F8      
0000158C  4E92      2074          jsr       (A2)
0000158E  584F      2075          addq.w    #4,A7
                    2076   ; return ;
00001590  6000 0196 2077          bra       ChangeRegisters_6
                    2078   ChangeRegisters_23:
                    2079   ; }
                    2080   ; else {
                    2081   ; printf("\r\nA%c = ", c) ;
00001594  4882      2082          ext.w     D2
00001596  48C2      2083          ext.l     D2
00001598  2F02      2084          move.l    D2,-(A7)
0000159A  4879 0000 2085          pea       @m68kde~1_46.L
0000159E  4A26      
000015A0  4E92      2086          jsr       (A2)
000015A2  504F      2087          addq.w    #8,A7
                    2088   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000015A4  42A7      2089          clr.l     -(A7)
000015A6  4E94      2090          jsr       (A4)
000015A8  584F      2091          addq.w    #4,A7
000015AA  2600      2092          move.l    D0,D3
                    2093   ; }
                    2094   ; // bit cludgy but a0-a7 not stored as an array for good reason
                    2095   ; if(c == (char)('0'))
000015AC  0C02 0030 2096          cmp.b     #48,D2
000015B0  660A      2097          bne.s     ChangeRegisters_26
                    2098   ; a0 = reg_val ;
000015B2  23C3 0803 2099          move.l    D3,_a0.L
000015B6  0104      
000015B8  6000 0060 2100          bra       ChangeRegisters_39
                    2101   ChangeRegisters_26:
                    2102   ; else if(c == (char)('1'))
000015BC  0C02 0031 2103          cmp.b     #49,D2
000015C0  660A      2104          bne.s     ChangeRegisters_28
                    2105   ; a1 = reg_val ;
000015C2  23C3 0803 2106          move.l    D3,_a1.L
000015C6  0108      
000015C8  6000 0050 2107          bra       ChangeRegisters_39
                    2108   ChangeRegisters_28:
                    2109   ; else if(c == (char)('2'))
000015CC  0C02 0032 2110          cmp.b     #50,D2
000015D0  660A      2111          bne.s     ChangeRegisters_30
                    2112   ; a2 = reg_val ;
000015D2  23C3 0803 2113          move.l    D3,_a2.L
000015D6  010C      
000015D8  6000 0040 2114          bra       ChangeRegisters_39
                    2115   ChangeRegisters_30:
                    2116   ; else if(c == (char)('3'))
000015DC  0C02 0033 2117          cmp.b     #51,D2
000015E0  6608      2118          bne.s     ChangeRegisters_32
                    2119   ; a3 = reg_val ;
000015E2  23C3 0803 2120          move.l    D3,_a3.L
000015E6  0110      
000015E8  6030      2121          bra.s     ChangeRegisters_39
                    2122   ChangeRegisters_32:
                    2123   ; else if(c == (char)('4'))
000015EA  0C02 0034 2124          cmp.b     #52,D2
000015EE  6608      2125          bne.s     ChangeRegisters_34
                    2126   ; a4 = reg_val ;
000015F0  23C3 0803 2127          move.l    D3,_a4.L
000015F4  0114      
000015F6  6022      2128          bra.s     ChangeRegisters_39
                    2129   ChangeRegisters_34:
                    2130   ; else if(c == (char)('5'))
000015F8  0C02 0035 2131          cmp.b     #53,D2
000015FC  6608      2132          bne.s     ChangeRegisters_36
                    2133   ; a5 = reg_val ;
000015FE  23C3 0803 2134          move.l    D3,_a5.L
00001602  0118      
00001604  6014      2135          bra.s     ChangeRegisters_39
                    2136   ChangeRegisters_36:
                    2137   ; else if(c == (char)('6'))
00001606  0C02 0036 2138          cmp.b     #54,D2
0000160A  6608      2139          bne.s     ChangeRegisters_38
                    2140   ; a6 = reg_val ;
0000160C  23C3 0803 2141          move.l    D3,_a6.L
00001610  011C      
00001612  6006      2142          bra.s     ChangeRegisters_39
                    2143   ChangeRegisters_38:
                    2144   ; else
                    2145   ; USP = reg_val ;
00001614  23C3 0803 2146          move.l    D3,_USP.L
00001618  0128      
                    2147   ChangeRegisters_39:
0000161A  6000 0108 2148          bra       ChangeRegisters_51
                    2149   ChangeRegisters_21:
                    2150   ; }
                    2151   ; else if((reg[0] == (char)('u')) && (c == (char)('s')))  {
0000161E  1013      2152          move.b    (A3),D0
00001620  0C00 0075 2153          cmp.b     #117,D0
00001624  6600 004E 2154          bne       ChangeRegisters_40
00001628  0C02 0073 2155          cmp.b     #115,D2
0000162C  6600 0046 2156          bne       ChangeRegisters_40
                    2157   ; if(tolower(_getch()) == 'p')  {    // change user stack pointer
00001630  2F00      2158          move.l    D0,-(A7)
00001632  4E95      2159          jsr       (A5)
00001634  2200      2160          move.l    D0,D1
00001636  201F      2161          move.l    (A7)+,D0
00001638  2F01      2162          move.l    D1,-(A7)
0000163A  4EB9 0000 2163          jsr       _tolower
0000163E  3C3C      
00001640  584F      2164          addq.w    #4,A7
00001642  0C80 0000 2165          cmp.l     #112,D0
00001646  0070      
00001648  6618      2166          bne.s     ChangeRegisters_42
                    2167   ; printf("\r\nUser SP = ") ;
0000164A  4879 0000 2168          pea       @m68kde~1_47.L
0000164E  4A30      
00001650  4E92      2169          jsr       (A2)
00001652  584F      2170          addq.w    #4,A7
                    2171   ; USP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001654  42A7      2172          clr.l     -(A7)
00001656  4E94      2173          jsr       (A4)
00001658  584F      2174          addq.w    #4,A7
0000165A  23C0 0803 2175          move.l    D0,_USP.L
0000165E  0128      
00001660  600E      2176          bra.s     ChangeRegisters_43
                    2177   ChangeRegisters_42:
                    2178   ; }
                    2179   ; else {
                    2180   ; printf("\r\nIllegal Register....") ;
00001662  4879 0000 2181          pea       @m68kde~1_48.L
00001666  4A3E      
00001668  4E92      2182          jsr       (A2)
0000166A  584F      2183          addq.w    #4,A7
                    2184   ; return ;
0000166C  6000 00BA 2185          bra       ChangeRegisters_6
                    2186   ChangeRegisters_43:
00001670  6000 00B2 2187          bra       ChangeRegisters_51
                    2188   ChangeRegisters_40:
                    2189   ; }
                    2190   ; }
                    2191   ; else if((reg[0] == (char)('s')) && (c == (char)('s')))  {
00001674  1013      2192          move.b    (A3),D0
00001676  0C00 0073 2193          cmp.b     #115,D0
0000167A  6600 004E 2194          bne       ChangeRegisters_44
0000167E  0C02 0073 2195          cmp.b     #115,D2
00001682  6600 0046 2196          bne       ChangeRegisters_44
                    2197   ; if(tolower(_getch()) == 'p')  {    // change system stack pointer
00001686  2F00      2198          move.l    D0,-(A7)
00001688  4E95      2199          jsr       (A5)
0000168A  2200      2200          move.l    D0,D1
0000168C  201F      2201          move.l    (A7)+,D0
0000168E  2F01      2202          move.l    D1,-(A7)
00001690  4EB9 0000 2203          jsr       _tolower
00001694  3C3C      
00001696  584F      2204          addq.w    #4,A7
00001698  0C80 0000 2205          cmp.l     #112,D0
0000169C  0070      
0000169E  6618      2206          bne.s     ChangeRegisters_46
                    2207   ; printf("\r\nSystem SP = ") ;
000016A0  4879 0000 2208          pea       @m68kde~1_49.L
000016A4  4A56      
000016A6  4E92      2209          jsr       (A2)
000016A8  584F      2210          addq.w    #4,A7
                    2211   ; SSP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000016AA  42A7      2212          clr.l     -(A7)
000016AC  4E94      2213          jsr       (A4)
000016AE  584F      2214          addq.w    #4,A7
000016B0  23C0 0803 2215          move.l    D0,_SSP.L
000016B4  0124      
000016B6  600E      2216          bra.s     ChangeRegisters_47
                    2217   ChangeRegisters_46:
                    2218   ; }
                    2219   ; else {
                    2220   ; printf("\r\nIllegal Register....") ;
000016B8  4879 0000 2221          pea       @m68kde~1_48.L
000016BC  4A3E      
000016BE  4E92      2222          jsr       (A2)
000016C0  584F      2223          addq.w    #4,A7
                    2224   ; return ;
000016C2  6000 0064 2225          bra       ChangeRegisters_6
                    2226   ChangeRegisters_47:
000016C6  6000 005C 2227          bra       ChangeRegisters_51
                    2228   ChangeRegisters_44:
                    2229   ; }
                    2230   ; }
                    2231   ; else if((reg[0] == (char)('p')) && (c == (char)('c')))  {    // change program counter
000016CA  1013      2232          move.b    (A3),D0
000016CC  0C00 0070 2233          cmp.b     #112,D0
000016D0  6620      2234          bne.s     ChangeRegisters_48
000016D2  0C02 0063 2235          cmp.b     #99,D2
000016D6  661A      2236          bne.s     ChangeRegisters_48
                    2237   ; printf("\r\nPC = ") ;
000016D8  4879 0000 2238          pea       @m68kde~1_50.L
000016DC  4A66      
000016DE  4E92      2239          jsr       (A2)
000016E0  584F      2240          addq.w    #4,A7
                    2241   ; PC = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000016E2  42A7      2242          clr.l     -(A7)
000016E4  4E94      2243          jsr       (A4)
000016E6  584F      2244          addq.w    #4,A7
000016E8  23C0 0803 2245          move.l    D0,_PC.L
000016EC  0120      
000016EE  6000 0034 2246          bra       ChangeRegisters_51
                    2247   ChangeRegisters_48:
                    2248   ; }
                    2249   ; else if((reg[0] == (char)('s')) && (c == (char)('r')))  {    // change status register
000016F2  1013      2250          move.b    (A3),D0
000016F4  0C00 0073 2251          cmp.b     #115,D0
000016F8  6620      2252          bne.s     ChangeRegisters_50
000016FA  0C02 0072 2253          cmp.b     #114,D2
000016FE  661A      2254          bne.s     ChangeRegisters_50
                    2255   ; printf("\r\nSR = ") ;
00001700  4879 0000 2256          pea       @m68kde~1_51.L
00001704  4A6E      
00001706  4E92      2257          jsr       (A2)
00001708  584F      2258          addq.w    #4,A7
                    2259   ; SR = Get4HexDigits(0) ;    // read 16 bit value from user keyboard
0000170A  42A7      2260          clr.l     -(A7)
0000170C  4EB8 0B16 2261          jsr       _Get4HexDigits
00001710  584F      2262          addq.w    #4,A7
00001712  33C0 0803 2263          move.w    D0,_SR.L
00001716  012C      
00001718  600A      2264          bra.s     ChangeRegisters_51
                    2265   ChangeRegisters_50:
                    2266   ; }
                    2267   ; else
                    2268   ; printf("\r\nIllegal Register: Use A0-A7, D0-D7, SSP, USP, PC or SR\r\n") ;
0000171A  4879 0000 2269          pea       @m68kde~1_52.L
0000171E  4A76      
00001720  4E92      2270          jsr       (A2)
00001722  584F      2271          addq.w    #4,A7
                    2272   ChangeRegisters_51:
                    2273   ; DumpRegisters() ;
00001724  4EB8 0F82 2274          jsr       _DumpRegisters
                    2275   ChangeRegisters_6:
00001728  4CDF 3C0C 2276          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
0000172C  4E5E      2277          unlk      A6
0000172E  4E75      2278          rts
                    2279   ; }
                    2280   ; void BreakPointDisplay(void)
                    2281   ; {
                    2282   _BreakPointDisplay:
00001730  48E7 3030 2283          movem.l   D2/D3/A2/A3,-(A7)
00001734  45F9 0000 2284          lea       _printf.L,A2
00001738  3CDE      
0000173A  47F9 0803 2285          lea       _BreakPointAddress.L,A3
0000173E  012E      
                    2286   ; int i, BreakPointsSet = 0 ;
00001740  4283      2287          clr.l     D3
                    2288   ; // any break points  set
                    2289   ; for(i = 0; i < 8; i++)  {
00001742  4282      2290          clr.l     D2
                    2291   BreakPointDisplay_1:
00001744  0C82 0000 2292          cmp.l     #8,D2
00001748  0008      
0000174A  6C1C      2293          bge.s     BreakPointDisplay_3
                    2294   ; if(BreakPointSetOrCleared[i] == 1)
0000174C  2002      2295          move.l    D2,D0
0000174E  E588      2296          lsl.l     #2,D0
00001750  41F9 0803 2297          lea       _BreakPointSetOrCleared.L,A0
00001754  015E      
00001756  2030 0800 2298          move.l    0(A0,D0.L),D0
0000175A  0C80 0000 2299          cmp.l     #1,D0
0000175E  0001      
00001760  6602      2300          bne.s     BreakPointDisplay_4
                    2301   ; BreakPointsSet = 1;
00001762  7601      2302          moveq     #1,D3
                    2303   BreakPointDisplay_4:
00001764  5282      2304          addq.l    #1,D2
00001766  60DC      2305          bra       BreakPointDisplay_1
                    2306   BreakPointDisplay_3:
                    2307   ; }
                    2308   ; if(BreakPointsSet == 1) {
00001768  0C83 0000 2309          cmp.l     #1,D3
0000176C  0001      
0000176E  6616      2310          bne.s     BreakPointDisplay_6
                    2311   ; printf("\r\n\r\nNum     Address      Instruction") ;
00001770  4879 0000 2312          pea       @m68kde~1_53.L
00001774  4AB2      
00001776  4E92      2313          jsr       (A2)
00001778  584F      2314          addq.w    #4,A7
                    2315   ; printf("\r\n---     ---------    -----------") ;
0000177A  4879 0000 2316          pea       @m68kde~1_54.L
0000177E  4AD8      
00001780  4E92      2317          jsr       (A2)
00001782  584F      2318          addq.w    #4,A7
00001784  600A      2319          bra.s     BreakPointDisplay_7
                    2320   BreakPointDisplay_6:
                    2321   ; }
                    2322   ; else
                    2323   ; printf("\r\nNo BreakPoints Set") ;
00001786  4879 0000 2324          pea       @m68kde~1_55.L
0000178A  4AFC      
0000178C  4E92      2325          jsr       (A2)
0000178E  584F      2326          addq.w    #4,A7
                    2327   BreakPointDisplay_7:
                    2328   ; for(i = 0; i < 8; i++)  {
00001790  4282      2329          clr.l     D2
                    2330   BreakPointDisplay_8:
00001792  0C82 0000 2331          cmp.l     #8,D2
00001796  0008      
00001798  6C00 005A 2332          bge       BreakPointDisplay_10
                    2333   ; // put opcode back, then put break point back
                    2334   ; if(BreakPointSetOrCleared[i] == 1)  {
0000179C  2002      2335          move.l    D2,D0
0000179E  E588      2336          lsl.l     #2,D0
000017A0  41F9 0803 2337          lea       _BreakPointSetOrCleared.L,A0
000017A4  015E      
000017A6  2030 0800 2338          move.l    0(A0,D0.L),D0
000017AA  0C80 0000 2339          cmp.l     #1,D0
000017AE  0001      
000017B0  6600 003E 2340          bne       BreakPointDisplay_11
                    2341   ; *(unsigned short int *)(BreakPointAddress[i]) = BreakPointInstruction[i];
000017B4  2002      2342          move.l    D2,D0
000017B6  E388      2343          lsl.l     #1,D0
000017B8  41F9 0803 2344          lea       _BreakPointInstruction.L,A0
000017BC  014E      
000017BE  2202      2345          move.l    D2,D1
000017C0  E589      2346          lsl.l     #2,D1
000017C2  2233 1800 2347          move.l    0(A3,D1.L),D1
000017C6  2241      2348          move.l    D1,A1
000017C8  32B0 0800 2349          move.w    0(A0,D0.L),(A1)
                    2350   ; *(unsigned short int *)(BreakPointAddress[i]) = (unsigned short int)(0x4e4e) ;
000017CC  2002      2351          move.l    D2,D0
000017CE  E588      2352          lsl.l     #2,D0
000017D0  2033 0800 2353          move.l    0(A3,D0.L),D0
000017D4  2040      2354          move.l    D0,A0
000017D6  30BC 4E4E 2355          move.w    #20046,(A0)
                    2356   ; printf("\r\n%3d     $%08x",i, BreakPointAddress[i]) ;
000017DA  2202      2357          move.l    D2,D1
000017DC  E589      2358          lsl.l     #2,D1
000017DE  2F33 1800 2359          move.l    0(A3,D1.L),-(A7)
000017E2  2F02      2360          move.l    D2,-(A7)
000017E4  4879 0000 2361          pea       @m68kde~1_56.L
000017E8  4B12      
000017EA  4E92      2362          jsr       (A2)
000017EC  DEFC 000C 2363          add.w     #12,A7
                    2364   BreakPointDisplay_11:
000017F0  5282      2365          addq.l    #1,D2
000017F2  609E      2366          bra       BreakPointDisplay_8
                    2367   BreakPointDisplay_10:
                    2368   ; }
                    2369   ; }
                    2370   ; printf("\r\n") ;
000017F4  4879 0000 2371          pea       @m68kde~1_6.L
000017F8  462E      
000017FA  4E92      2372          jsr       (A2)
000017FC  584F      2373          addq.w    #4,A7
000017FE  4CDF 0C0C 2374          movem.l   (A7)+,D2/D3/A2/A3
00001802  4E75      2375          rts
                    2376   ; }
                    2377   ; void WatchPointDisplay(void)
                    2378   ; {
                    2379   _WatchPointDisplay:
00001804  48E7 3020 2380          movem.l   D2/D3/A2,-(A7)
00001808  45F9 0000 2381          lea       _printf.L,A2
0000180C  3CDE      
                    2382   ; int i ;
                    2383   ; int WatchPointsSet = 0 ;
0000180E  4283      2384          clr.l     D3
                    2385   ; // any watchpoints set
                    2386   ; for(i = 0; i < 8; i++)  {
00001810  4282      2387          clr.l     D2
                    2388   WatchPointDisplay_1:
00001812  0C82 0000 2389          cmp.l     #8,D2
00001816  0008      
00001818  6C1C      2390          bge.s     WatchPointDisplay_3
                    2391   ; if(WatchPointSetOrCleared[i] == 1)
0000181A  2002      2392          move.l    D2,D0
0000181C  E588      2393          lsl.l     #2,D0
0000181E  41F9 0803 2394          lea       _WatchPointSetOrCleared.L,A0
00001822  01A2      
00001824  2030 0800 2395          move.l    0(A0,D0.L),D0
00001828  0C80 0000 2396          cmp.l     #1,D0
0000182C  0001      
0000182E  6602      2397          bne.s     WatchPointDisplay_4
                    2398   ; WatchPointsSet = 1;
00001830  7601      2399          moveq     #1,D3
                    2400   WatchPointDisplay_4:
00001832  5282      2401          addq.l    #1,D2
00001834  60DC      2402          bra       WatchPointDisplay_1
                    2403   WatchPointDisplay_3:
                    2404   ; }
                    2405   ; if(WatchPointsSet == 1) {
00001836  0C83 0000 2406          cmp.l     #1,D3
0000183A  0001      
0000183C  6616      2407          bne.s     WatchPointDisplay_6
                    2408   ; printf("\r\nNum     Address") ;
0000183E  4879 0000 2409          pea       @m68kde~1_57.L
00001842  4B22      
00001844  4E92      2410          jsr       (A2)
00001846  584F      2411          addq.w    #4,A7
                    2412   ; printf("\r\n---     ---------") ;
00001848  4879 0000 2413          pea       @m68kde~1_58.L
0000184C  4B34      
0000184E  4E92      2414          jsr       (A2)
00001850  584F      2415          addq.w    #4,A7
00001852  600A      2416          bra.s     WatchPointDisplay_7
                    2417   WatchPointDisplay_6:
                    2418   ; }
                    2419   ; else
                    2420   ; printf("\r\nNo WatchPoints Set") ;
00001854  4879 0000 2421          pea       @m68kde~1_59.L
00001858  4B48      
0000185A  4E92      2422          jsr       (A2)
0000185C  584F      2423          addq.w    #4,A7
                    2424   WatchPointDisplay_7:
                    2425   ; for(i = 0; i < 8; i++)  {
0000185E  4282      2426          clr.l     D2
                    2427   WatchPointDisplay_8:
00001860  0C82 0000 2428          cmp.l     #8,D2
00001864  0008      
00001866  6C00 0038 2429          bge       WatchPointDisplay_10
                    2430   ; if(WatchPointSetOrCleared[i] == 1)
0000186A  2002      2431          move.l    D2,D0
0000186C  E588      2432          lsl.l     #2,D0
0000186E  41F9 0803 2433          lea       _WatchPointSetOrCleared.L,A0
00001872  01A2      
00001874  2030 0800 2434          move.l    0(A0,D0.L),D0
00001878  0C80 0000 2435          cmp.l     #1,D0
0000187C  0001      
0000187E  661C      2436          bne.s     WatchPointDisplay_11
                    2437   ; printf("\r\n%3d     $%08x",i, WatchPointAddress[i]) ;
00001880  2202      2438          move.l    D2,D1
00001882  E589      2439          lsl.l     #2,D1
00001884  41F9 0803 2440          lea       _WatchPointAddress.L,A0
00001888  0182      
0000188A  2F30 1800 2441          move.l    0(A0,D1.L),-(A7)
0000188E  2F02      2442          move.l    D2,-(A7)
00001890  4879 0000 2443          pea       @m68kde~1_56.L
00001894  4B12      
00001896  4E92      2444          jsr       (A2)
00001898  DEFC 000C 2445          add.w     #12,A7
                    2446   WatchPointDisplay_11:
0000189C  5282      2447          addq.l    #1,D2
0000189E  60C0      2448          bra       WatchPointDisplay_8
                    2449   WatchPointDisplay_10:
                    2450   ; }
                    2451   ; printf("\r\n") ;
000018A0  4879 0000 2452          pea       @m68kde~1_6.L
000018A4  462E      
000018A6  4E92      2453          jsr       (A2)
000018A8  584F      2454          addq.w    #4,A7
000018AA  4CDF 040C 2455          movem.l   (A7)+,D2/D3/A2
000018AE  4E75      2456          rts
                    2457   ; }
                    2458   ; void BreakPointClear(void)
                    2459   ; {
                    2460   _BreakPointClear:
000018B0  4E56 FFFC 2461          link      A6,#-4
000018B4  48E7 2020 2462          movem.l   D2/A2,-(A7)
000018B8  45F9 0000 2463          lea       _printf.L,A2
000018BC  3CDE      
                    2464   ; unsigned int i ;
                    2465   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2466   ; BreakPointDisplay() ;
000018BE  4EB8 1730 2467          jsr       _BreakPointDisplay
                    2468   ; printf("\r\nEnter Break Point Number: ") ;
000018C2  4879 0000 2469          pea       @m68kde~1_60.L
000018C6  4B5E      
000018C8  4E92      2470          jsr       (A2)
000018CA  584F      2471          addq.w    #4,A7
                    2472   ; i = xtod(_getch()) ;           // get break pointer number
000018CC  2F00      2473          move.l    D0,-(A7)
000018CE  4EB8 0A26 2474          jsr       __getch
000018D2  2200      2475          move.l    D0,D1
000018D4  201F      2476          move.l    (A7)+,D0
000018D6  2F01      2477          move.l    D1,-(A7)
000018D8  4EB8 0A90 2478          jsr       _xtod
000018DC  584F      2479          addq.w    #4,A7
000018DE  C0BC 0000 2480          and.l     #255,D0
000018E2  00FF      
000018E4  2400      2481          move.l    D0,D2
                    2482   ; if((i < 0) || (i > 7))   {
000018E6  0C82 0000 2483          cmp.l     #0,D2
000018EA  0000      
000018EC  6508      2484          blo.s     BreakPointClear_3
000018EE  0C82 0000 2485          cmp.l     #7,D2
000018F2  0007      
000018F4  630E      2486          bls.s     BreakPointClear_1
                    2487   BreakPointClear_3:
                    2488   ; printf("\r\nIllegal Range : Use 0 - 7") ;
000018F6  4879 0000 2489          pea       @m68kde~1_61.L
000018FA  4B7C      
000018FC  4E92      2490          jsr       (A2)
000018FE  584F      2491          addq.w    #4,A7
                    2492   ; return ;
00001900  6000 0080 2493          bra       BreakPointClear_4
                    2494   BreakPointClear_1:
                    2495   ; }
                    2496   ; if(BreakPointSetOrCleared[i] == 1)  {       // if break point set
00001904  2002      2497          move.l    D2,D0
00001906  E588      2498          lsl.l     #2,D0
00001908  41F9 0803 2499          lea       _BreakPointSetOrCleared.L,A0
0000190C  015E      
0000190E  2030 0800 2500          move.l    0(A0,D0.L),D0
00001912  0C80 0000 2501          cmp.l     #1,D0
00001916  0001      
00001918  6600 005A 2502          bne       BreakPointClear_5
                    2503   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program we are about to change
0000191C  2002      2504          move.l    D2,D0
0000191E  E588      2505          lsl.l     #2,D0
00001920  41F9 0803 2506          lea       _BreakPointAddress.L,A0
00001924  012E      
00001926  2D70 0800 2507          move.l    0(A0,D0.L),-4(A6)
0000192A  FFFC      
                    2508   ; BreakPointAddress[i] = 0 ;
0000192C  2002      2509          move.l    D2,D0
0000192E  E588      2510          lsl.l     #2,D0
00001930  41F9 0803 2511          lea       _BreakPointAddress.L,A0
00001934  012E      
00001936  42B0 0800 2512          clr.l     0(A0,D0.L)
                    2513   ; BreakPointSetOrCleared[i] = 0 ;
0000193A  2002      2514          move.l    D2,D0
0000193C  E588      2515          lsl.l     #2,D0
0000193E  41F9 0803 2516          lea       _BreakPointSetOrCleared.L,A0
00001942  015E      
00001944  42B0 0800 2517          clr.l     0(A0,D0.L)
                    2518   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
00001948  2002      2519          move.l    D2,D0
0000194A  E388      2520          lsl.l     #1,D0
0000194C  41F9 0803 2521          lea       _BreakPointInstruction.L,A0
00001950  014E      
00001952  226E FFFC 2522          move.l    -4(A6),A1
00001956  32B0 0800 2523          move.w    0(A0,D0.L),(A1)
                    2524   ; BreakPointInstruction[i] = 0 ;
0000195A  2002      2525          move.l    D2,D0
0000195C  E388      2526          lsl.l     #1,D0
0000195E  41F9 0803 2527          lea       _BreakPointInstruction.L,A0
00001962  014E      
00001964  4270 0800 2528          clr.w     0(A0,D0.L)
                    2529   ; printf("\r\nBreak Point Cleared.....\r\n") ;
00001968  4879 0000 2530          pea       @m68kde~1_62.L
0000196C  4B98      
0000196E  4E92      2531          jsr       (A2)
00001970  584F      2532          addq.w    #4,A7
00001972  600A      2533          bra.s     BreakPointClear_6
                    2534   BreakPointClear_5:
                    2535   ; }
                    2536   ; else
                    2537   ; printf("\r\nBreak Point wasn't Set.....") ;
00001974  4879 0000 2538          pea       @m68kde~1_63.L
00001978  4BB6      
0000197A  4E92      2539          jsr       (A2)
0000197C  584F      2540          addq.w    #4,A7
                    2541   BreakPointClear_6:
                    2542   ; BreakPointDisplay() ;
0000197E  4EB8 1730 2543          jsr       _BreakPointDisplay
                    2544   ; return ;
                    2545   BreakPointClear_4:
00001982  4CDF 0404 2546          movem.l   (A7)+,D2/A2
00001986  4E5E      2547          unlk      A6
00001988  4E75      2548          rts
                    2549   ; }
                    2550   ; void WatchPointClear(void)
                    2551   ; {
                    2552   _WatchPointClear:
0000198A  48E7 2020 2553          movem.l   D2/A2,-(A7)
0000198E  45F9 0000 2554          lea       _printf.L,A2
00001992  3CDE      
                    2555   ; unsigned int i ;
                    2556   ; WatchPointDisplay() ;
00001994  4EB8 1804 2557          jsr       _WatchPointDisplay
                    2558   ; printf("\r\nEnter Watch Point Number: ") ;
00001998  4879 0000 2559          pea       @m68kde~1_64.L
0000199C  4BD4      
0000199E  4E92      2560          jsr       (A2)
000019A0  584F      2561          addq.w    #4,A7
                    2562   ; i = xtod(_getch()) ;           // get watch pointer number
000019A2  2F00      2563          move.l    D0,-(A7)
000019A4  4EB8 0A26 2564          jsr       __getch
000019A8  2200      2565          move.l    D0,D1
000019AA  201F      2566          move.l    (A7)+,D0
000019AC  2F01      2567          move.l    D1,-(A7)
000019AE  4EB8 0A90 2568          jsr       _xtod
000019B2  584F      2569          addq.w    #4,A7
000019B4  C0BC 0000 2570          and.l     #255,D0
000019B8  00FF      
000019BA  2400      2571          move.l    D0,D2
                    2572   ; if((i < 0) || (i > 7))   {
000019BC  0C82 0000 2573          cmp.l     #0,D2
000019C0  0000      
000019C2  6508      2574          blo.s     WatchPointClear_3
000019C4  0C82 0000 2575          cmp.l     #7,D2
000019C8  0007      
000019CA  630E      2576          bls.s     WatchPointClear_1
                    2577   WatchPointClear_3:
                    2578   ; printf("\r\nIllegal Range : Use 0 - 7") ;
000019CC  4879 0000 2579          pea       @m68kde~1_61.L
000019D0  4B7C      
000019D2  4E92      2580          jsr       (A2)
000019D4  584F      2581          addq.w    #4,A7
                    2582   ; return ;
000019D6  6000 004E 2583          bra       WatchPointClear_4
                    2584   WatchPointClear_1:
                    2585   ; }
                    2586   ; if(WatchPointSetOrCleared[i] == 1)  {       // if watch point set
000019DA  2002      2587          move.l    D2,D0
000019DC  E588      2588          lsl.l     #2,D0
000019DE  41F9 0803 2589          lea       _WatchPointSetOrCleared.L,A0
000019E2  01A2      
000019E4  2030 0800 2590          move.l    0(A0,D0.L),D0
000019E8  0C80 0000 2591          cmp.l     #1,D0
000019EC  0001      
000019EE  6628      2592          bne.s     WatchPointClear_5
                    2593   ; WatchPointAddress[i] = 0 ;
000019F0  2002      2594          move.l    D2,D0
000019F2  E588      2595          lsl.l     #2,D0
000019F4  41F9 0803 2596          lea       _WatchPointAddress.L,A0
000019F8  0182      
000019FA  42B0 0800 2597          clr.l     0(A0,D0.L)
                    2598   ; WatchPointSetOrCleared[i] = 0 ;
000019FE  2002      2599          move.l    D2,D0
00001A00  E588      2600          lsl.l     #2,D0
00001A02  41F9 0803 2601          lea       _WatchPointSetOrCleared.L,A0
00001A06  01A2      
00001A08  42B0 0800 2602          clr.l     0(A0,D0.L)
                    2603   ; printf("\r\nWatch Point Cleared.....\r\n") ;
00001A0C  4879 0000 2604          pea       @m68kde~1_65.L
00001A10  4BF2      
00001A12  4E92      2605          jsr       (A2)
00001A14  584F      2606          addq.w    #4,A7
00001A16  600A      2607          bra.s     WatchPointClear_6
                    2608   WatchPointClear_5:
                    2609   ; }
                    2610   ; else
                    2611   ; printf("\r\nWatch Point Was not Set.....") ;
00001A18  4879 0000 2612          pea       @m68kde~1_66.L
00001A1C  4C10      
00001A1E  4E92      2613          jsr       (A2)
00001A20  584F      2614          addq.w    #4,A7
                    2615   WatchPointClear_6:
                    2616   ; WatchPointDisplay() ;
00001A22  4EB8 1804 2617          jsr       _WatchPointDisplay
                    2618   ; return ;
                    2619   WatchPointClear_4:
00001A26  4CDF 0404 2620          movem.l   (A7)+,D2/A2
00001A2A  4E75      2621          rts
                    2622   ; }
                    2623   ; void DisableBreakPoints(void)
                    2624   ; {
                    2625   _DisableBreakPoints:
00001A2C  4E56 FFFC 2626          link      A6,#-4
00001A30  2F02      2627          move.l    D2,-(A7)
                    2628   ; int i ;
                    2629   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2630   ; for(i = 0; i < 8; i++)  {
00001A32  4282      2631          clr.l     D2
                    2632   DisableBreakPoints_1:
00001A34  0C82 0000 2633          cmp.l     #8,D2
00001A38  0008      
00001A3A  6C00 003E 2634          bge       DisableBreakPoints_3
                    2635   ; if(BreakPointSetOrCleared[i] == 1)    {                                                    // if break point set
00001A3E  2002      2636          move.l    D2,D0
00001A40  E588      2637          lsl.l     #2,D0
00001A42  41F9 0803 2638          lea       _BreakPointSetOrCleared.L,A0
00001A46  015E      
00001A48  2030 0800 2639          move.l    0(A0,D0.L),D0
00001A4C  0C80 0000 2640          cmp.l     #1,D0
00001A50  0001      
00001A52  6622      2641          bne.s     DisableBreakPoints_4
                    2642   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001A54  2002      2643          move.l    D2,D0
00001A56  E588      2644          lsl.l     #2,D0
00001A58  41F9 0803 2645          lea       _BreakPointAddress.L,A0
00001A5C  012E      
00001A5E  2D70 0800 2646          move.l    0(A0,D0.L),-4(A6)
00001A62  FFFC      
                    2647   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program overwritting the $4e4e
00001A64  2002      2648          move.l    D2,D0
00001A66  E388      2649          lsl.l     #1,D0
00001A68  41F9 0803 2650          lea       _BreakPointInstruction.L,A0
00001A6C  014E      
00001A6E  226E FFFC 2651          move.l    -4(A6),A1
00001A72  32B0 0800 2652          move.w    0(A0,D0.L),(A1)
                    2653   DisableBreakPoints_4:
00001A76  5282      2654          addq.l    #1,D2
00001A78  60BA      2655          bra       DisableBreakPoints_1
                    2656   DisableBreakPoints_3:
00001A7A  241F      2657          move.l    (A7)+,D2
00001A7C  4E5E      2658          unlk      A6
00001A7E  4E75      2659          rts
                    2660   ; }
                    2661   ; }
                    2662   ; }
                    2663   ; void EnableBreakPoints(void)
                    2664   ; {
                    2665   _EnableBreakPoints:
00001A80  4E56 FFFC 2666          link      A6,#-4
00001A84  2F02      2667          move.l    D2,-(A7)
                    2668   ; int i ;
                    2669   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2670   ; for(i = 0; i < 8; i++)  {
00001A86  4282      2671          clr.l     D2
                    2672   EnableBreakPoints_1:
00001A88  0C82 0000 2673          cmp.l     #8,D2
00001A8C  0008      
00001A8E  6C32      2674          bge.s     EnableBreakPoints_3
                    2675   ; if(BreakPointSetOrCleared[i] == 1)    {                                                     // if break point set
00001A90  2002      2676          move.l    D2,D0
00001A92  E588      2677          lsl.l     #2,D0
00001A94  41F9 0803 2678          lea       _BreakPointSetOrCleared.L,A0
00001A98  015E      
00001A9A  2030 0800 2679          move.l    0(A0,D0.L),D0
00001A9E  0C80 0000 2680          cmp.l     #1,D0
00001AA2  0001      
00001AA4  6618      2681          bne.s     EnableBreakPoints_4
                    2682   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001AA6  2002      2683          move.l    D2,D0
00001AA8  E588      2684          lsl.l     #2,D0
00001AAA  41F9 0803 2685          lea       _BreakPointAddress.L,A0
00001AAE  012E      
00001AB0  2D70 0800 2686          move.l    0(A0,D0.L),-4(A6)
00001AB4  FFFC      
                    2687   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e);                              // put the breakpoint back in user program
00001AB6  206E FFFC 2688          move.l    -4(A6),A0
00001ABA  30BC 4E4E 2689          move.w    #20046,(A0)
                    2690   EnableBreakPoints_4:
00001ABE  5282      2691          addq.l    #1,D2
00001AC0  60C6      2692          bra       EnableBreakPoints_1
                    2693   EnableBreakPoints_3:
00001AC2  241F      2694          move.l    (A7)+,D2
00001AC4  4E5E      2695          unlk      A6
00001AC6  4E75      2696          rts
                    2697   ; }
                    2698   ; }
                    2699   ; }
                    2700   ; void KillAllBreakPoints(void)
                    2701   ; {
                    2702   _KillAllBreakPoints:
00001AC8  4E56 FFFC 2703          link      A6,#-4
00001ACC  2F02      2704          move.l    D2,-(A7)
                    2705   ; int i ;
                    2706   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2707   ; for(i = 0; i < 8; i++)  {
00001ACE  4282      2708          clr.l     D2
                    2709   KillAllBreakPoints_1:
00001AD0  0C82 0000 2710          cmp.l     #8,D2
00001AD4  0008      
00001AD6  6C00 0052 2711          bge       KillAllBreakPoints_3
                    2712   ; // clear BP
                    2713   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001ADA  2002      2714          move.l    D2,D0
00001ADC  E588      2715          lsl.l     #2,D0
00001ADE  41F9 0803 2716          lea       _BreakPointAddress.L,A0
00001AE2  012E      
00001AE4  2D70 0800 2717          move.l    0(A0,D0.L),-4(A6)
00001AE8  FFFC      
                    2718   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program
00001AEA  2002      2719          move.l    D2,D0
00001AEC  E388      2720          lsl.l     #1,D0
00001AEE  41F9 0803 2721          lea       _BreakPointInstruction.L,A0
00001AF2  014E      
00001AF4  226E FFFC 2722          move.l    -4(A6),A1
00001AF8  32B0 0800 2723          move.w    0(A0,D0.L),(A1)
                    2724   ; BreakPointAddress[i] = 0 ;                                                             // set BP address to NULL
00001AFC  2002      2725          move.l    D2,D0
00001AFE  E588      2726          lsl.l     #2,D0
00001B00  41F9 0803 2727          lea       _BreakPointAddress.L,A0
00001B04  012E      
00001B06  42B0 0800 2728          clr.l     0(A0,D0.L)
                    2729   ; BreakPointInstruction[i] = 0 ;
00001B0A  2002      2730          move.l    D2,D0
00001B0C  E388      2731          lsl.l     #1,D0
00001B0E  41F9 0803 2732          lea       _BreakPointInstruction.L,A0
00001B12  014E      
00001B14  4270 0800 2733          clr.w     0(A0,D0.L)
                    2734   ; BreakPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00001B18  2002      2735          move.l    D2,D0
00001B1A  E588      2736          lsl.l     #2,D0
00001B1C  41F9 0803 2737          lea       _BreakPointSetOrCleared.L,A0
00001B20  015E      
00001B22  42B0 0800 2738          clr.l     0(A0,D0.L)
00001B26  5282      2739          addq.l    #1,D2
00001B28  60A6      2740          bra       KillAllBreakPoints_1
                    2741   KillAllBreakPoints_3:
00001B2A  241F      2742          move.l    (A7)+,D2
00001B2C  4E5E      2743          unlk      A6
00001B2E  4E75      2744          rts
                    2745   ; }
                    2746   ; //BreakPointDisplay() ;       // display the break points
                    2747   ; }
                    2748   ; void KillAllWatchPoints(void)
                    2749   ; {
                    2750   _KillAllWatchPoints:
00001B30  2F02      2751          move.l    D2,-(A7)
                    2752   ; int i ;
                    2753   ; for(i = 0; i < 8; i++)  {
00001B32  4282      2754          clr.l     D2
                    2755   KillAllWatchPoints_1:
00001B34  0C82 0000 2756          cmp.l     #8,D2
00001B38  0008      
00001B3A  6C20      2757          bge.s     KillAllWatchPoints_3
                    2758   ; WatchPointAddress[i] = 0 ;                                                             // set BP address to NULL
00001B3C  2002      2759          move.l    D2,D0
00001B3E  E588      2760          lsl.l     #2,D0
00001B40  41F9 0803 2761          lea       _WatchPointAddress.L,A0
00001B44  0182      
00001B46  42B0 0800 2762          clr.l     0(A0,D0.L)
                    2763   ; WatchPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00001B4A  2002      2764          move.l    D2,D0
00001B4C  E588      2765          lsl.l     #2,D0
00001B4E  41F9 0803 2766          lea       _WatchPointSetOrCleared.L,A0
00001B52  01A2      
00001B54  42B0 0800 2767          clr.l     0(A0,D0.L)
00001B58  5282      2768          addq.l    #1,D2
00001B5A  60D8      2769          bra       KillAllWatchPoints_1
                    2770   KillAllWatchPoints_3:
00001B5C  241F      2771          move.l    (A7)+,D2
00001B5E  4E75      2772          rts
                    2773   ; }
                    2774   ; //WatchPointDisplay() ;       // display the break points
                    2775   ; }
                    2776   ; void SetBreakPoint(void)
                    2777   ; {
                    2778   _SetBreakPoint:
00001B60  4E56 FFFC 2779          link      A6,#-4
00001B64  48E7 3830 2780          movem.l   D2/D3/D4/A2/A3,-(A7)
00001B68  45F9 0000 2781          lea       _printf.L,A2
00001B6C  3CDE      
00001B6E  47F9 0803 2782          lea       _BreakPointSetOrCleared.L,A3
00001B72  015E      
                    2783   ; int i ;
                    2784   ; int BPNumber;
                    2785   ; int BPAddress;
                    2786   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2787   ; // see if any free break points
                    2788   ; for(i = 0; i < 8; i ++) {
00001B74  4282      2789          clr.l     D2
                    2790   SetBreakPoint_1:
00001B76  0C82 0000 2791          cmp.l     #8,D2
00001B7A  0008      
00001B7C  6C10      2792          bge.s     SetBreakPoint_3
                    2793   ; if( BreakPointSetOrCleared[i] == 0)
00001B7E  2002      2794          move.l    D2,D0
00001B80  E588      2795          lsl.l     #2,D0
00001B82  2033 0800 2796          move.l    0(A3,D0.L),D0
00001B86  6602      2797          bne.s     SetBreakPoint_4
                    2798   ; break ;         // if spare BP found allow user to set it
00001B88  6004      2799          bra.s     SetBreakPoint_3
                    2800   SetBreakPoint_4:
00001B8A  5282      2801          addq.l    #1,D2
00001B8C  60E8      2802          bra       SetBreakPoint_1
                    2803   SetBreakPoint_3:
                    2804   ; }
                    2805   ; if(i == 8) {
00001B8E  0C82 0000 2806          cmp.l     #8,D2
00001B92  0008      
00001B94  660E      2807          bne.s     SetBreakPoint_6
                    2808   ; printf("\r\nNo FREE Break Points.....") ;
00001B96  4879 0000 2809          pea       @m68kde~1_67.L
00001B9A  4C30      
00001B9C  4E92      2810          jsr       (A2)
00001B9E  584F      2811          addq.w    #4,A7
                    2812   ; return ;
00001BA0  6000 00D6 2813          bra       SetBreakPoint_15
                    2814   SetBreakPoint_6:
                    2815   ; }
                    2816   ; printf("\r\nBreak Point Address: ") ;
00001BA4  4879 0000 2817          pea       @m68kde~1_68.L
00001BA8  4C4C      
00001BAA  4E92      2818          jsr       (A2)
00001BAC  584F      2819          addq.w    #4,A7
                    2820   ; BPAddress = Get8HexDigits(0) ;
00001BAE  42A7      2821          clr.l     -(A7)
00001BB0  4EB8 0B62 2822          jsr       _Get8HexDigits
00001BB4  584F      2823          addq.w    #4,A7
00001BB6  2600      2824          move.l    D0,D3
                    2825   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BPAddress) ;     // point to the instruction in the user program we are about to change
00001BB8  2803      2826          move.l    D3,D4
                    2827   ; if((BPAddress & 0x00000001) == 0x00000001)  {   // cannot set BP at an odd address
00001BBA  2003      2828          move.l    D3,D0
00001BBC  C0BC 0000 2829          and.l     #1,D0
00001BC0  0001      
00001BC2  0C80 0000 2830          cmp.l     #1,D0
00001BC6  0001      
00001BC8  660E      2831          bne.s     SetBreakPoint_9
                    2832   ; printf("\r\nError : Break Points CANNOT be set at ODD addresses") ;
00001BCA  4879 0000 2833          pea       @m68kde~1_69.L
00001BCE  4C64      
00001BD0  4E92      2834          jsr       (A2)
00001BD2  584F      2835          addq.w    #4,A7
                    2836   ; return ;
00001BD4  6000 00A2 2837          bra       SetBreakPoint_15
                    2838   SetBreakPoint_9:
                    2839   ; }
                    2840   ; if(BPAddress < 0x00008000)  {   // cannot set BP in ROM
00001BD8  0C83 0000 2841          cmp.l     #32768,D3
00001BDC  8000      
00001BDE  640E      2842          bhs.s     SetBreakPoint_11
                    2843   ; printf("\r\nError : Break Points CANNOT be set for ROM in Range : [$0-$00007FFF]") ;
00001BE0  4879 0000 2844          pea       @m68kde~1_70.L
00001BE4  4C9A      
00001BE6  4E92      2845          jsr       (A2)
00001BE8  584F      2846          addq.w    #4,A7
                    2847   ; return ;
00001BEA  6000 008C 2848          bra       SetBreakPoint_15
                    2849   SetBreakPoint_11:
                    2850   ; }
                    2851   ; // search for first free bp or existing same BP
                    2852   ; for(i = 0; i < 8; i++)  {
00001BEE  4282      2853          clr.l     D2
                    2854   SetBreakPoint_13:
00001BF0  0C82 0000 2855          cmp.l     #8,D2
00001BF4  0008      
00001BF6  6C00 0080 2856          bge       SetBreakPoint_15
                    2857   ; if(BreakPointAddress[i] == BPAddress)   {
00001BFA  2002      2858          move.l    D2,D0
00001BFC  E588      2859          lsl.l     #2,D0
00001BFE  41F9 0803 2860          lea       _BreakPointAddress.L,A0
00001C02  012E      
00001C04  B6B0 0800 2861          cmp.l     0(A0,D0.L),D3
00001C08  6610      2862          bne.s     SetBreakPoint_16
                    2863   ; printf("\r\nError: Break Point Already Exists at Address : %08x\r\n", BPAddress) ;
00001C0A  2F03      2864          move.l    D3,-(A7)
00001C0C  4879 0000 2865          pea       @m68kde~1_71.L
00001C10  4CE2      
00001C12  4E92      2866          jsr       (A2)
00001C14  504F      2867          addq.w    #8,A7
                    2868   ; return ;
00001C16  6000 0060 2869          bra       SetBreakPoint_15
                    2870   SetBreakPoint_16:
                    2871   ; }
                    2872   ; if(BreakPointSetOrCleared[i] == 0) {
00001C1A  2002      2873          move.l    D2,D0
00001C1C  E588      2874          lsl.l     #2,D0
00001C1E  2033 0800 2875          move.l    0(A3,D0.L),D0
00001C22  6600 004E 2876          bne       SetBreakPoint_18
                    2877   ; // set BP here
                    2878   ; BreakPointSetOrCleared[i] = 1 ;                                 // mark this breakpoint as set
00001C26  2002      2879          move.l    D2,D0
00001C28  E588      2880          lsl.l     #2,D0
00001C2A  27BC 0000 2881          move.l    #1,0(A3,D0.L)
00001C2E  0001 0800 
                    2882   ; BreakPointInstruction[i] = *ProgramBreakPointAddress ;          // copy the user program instruction here so we can put it back afterwards
00001C32  2044      2883          move.l    D4,A0
00001C34  2002      2884          move.l    D2,D0
00001C36  E388      2885          lsl.l     #1,D0
00001C38  43F9 0803 2886          lea       _BreakPointInstruction.L,A1
00001C3C  014E      
00001C3E  3390 0800 2887          move.w    (A0),0(A1,D0.L)
                    2888   ; printf("\r\nBreak Point Set at Address: [$%08x]", ProgramBreakPointAddress) ;
00001C42  2F04      2889          move.l    D4,-(A7)
00001C44  4879 0000 2890          pea       @m68kde~1_72.L
00001C48  4D1A      
00001C4A  4E92      2891          jsr       (A2)
00001C4C  504F      2892          addq.w    #8,A7
                    2893   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e)    ;   // put a Trap14 instruction at the user specified address
00001C4E  2044      2894          move.l    D4,A0
00001C50  30BC 4E4E 2895          move.w    #20046,(A0)
                    2896   ; BreakPointAddress[i] = BPAddress ;                              // record the address of this break point in the debugger
00001C54  2002      2897          move.l    D2,D0
00001C56  E588      2898          lsl.l     #2,D0
00001C58  41F9 0803 2899          lea       _BreakPointAddress.L,A0
00001C5C  012E      
00001C5E  2183 0800 2900          move.l    D3,0(A0,D0.L)
                    2901   ; printf("\r\n") ;
00001C62  4879 0000 2902          pea       @m68kde~1_6.L
00001C66  462E      
00001C68  4E92      2903          jsr       (A2)
00001C6A  584F      2904          addq.w    #4,A7
                    2905   ; BreakPointDisplay() ;       // display the break points
00001C6C  4EB8 1730 2906          jsr       _BreakPointDisplay
                    2907   ; return ;
00001C70  6006      2908          bra.s     SetBreakPoint_15
                    2909   SetBreakPoint_18:
00001C72  5282      2910          addq.l    #1,D2
00001C74  6000 FF7A 2911          bra       SetBreakPoint_13
                    2912   SetBreakPoint_15:
00001C78  4CDF 0C1C 2913          movem.l   (A7)+,D2/D3/D4/A2/A3
00001C7C  4E5E      2914          unlk      A6
00001C7E  4E75      2915          rts
                    2916   ; }
                    2917   ; }
                    2918   ; }
                    2919   ; void SetWatchPoint(void)
                    2920   ; {
                    2921   _SetWatchPoint:
00001C80  4E56 FFF8 2922          link      A6,#-8
00001C84  48E7 3030 2923          movem.l   D2/D3/A2/A3,-(A7)
00001C88  45F9 0000 2924          lea       _printf.L,A2
00001C8C  3CDE      
00001C8E  47F9 0803 2925          lea       _WatchPointSetOrCleared.L,A3
00001C92  01A2      
                    2926   ; int i ;
                    2927   ; int WPNumber;
                    2928   ; int WPAddress;
                    2929   ; volatile unsigned short int *ProgramWatchPointAddress ;
                    2930   ; // see if any free break points
                    2931   ; for(i = 0; i < 8; i ++) {
00001C94  4282      2932          clr.l     D2
                    2933   SetWatchPoint_1:
00001C96  0C82 0000 2934          cmp.l     #8,D2
00001C9A  0008      
00001C9C  6C10      2935          bge.s     SetWatchPoint_3
                    2936   ; if( WatchPointSetOrCleared[i] == 0)
00001C9E  2002      2937          move.l    D2,D0
00001CA0  E588      2938          lsl.l     #2,D0
00001CA2  2033 0800 2939          move.l    0(A3,D0.L),D0
00001CA6  6602      2940          bne.s     SetWatchPoint_4
                    2941   ; break ;         // if spare WP found allow user to set it
00001CA8  6004      2942          bra.s     SetWatchPoint_3
                    2943   SetWatchPoint_4:
00001CAA  5282      2944          addq.l    #1,D2
00001CAC  60E8      2945          bra       SetWatchPoint_1
                    2946   SetWatchPoint_3:
                    2947   ; }
                    2948   ; if(i == 8) {
00001CAE  0C82 0000 2949          cmp.l     #8,D2
00001CB2  0008      
00001CB4  660E      2950          bne.s     SetWatchPoint_6
                    2951   ; printf("\r\nNo FREE Watch Points.....") ;
00001CB6  4879 0000 2952          pea       @m68kde~1_73.L
00001CBA  4D40      
00001CBC  4E92      2953          jsr       (A2)
00001CBE  584F      2954          addq.w    #4,A7
                    2955   ; return ;
00001CC0  6000 008C 2956          bra       SetWatchPoint_11
                    2957   SetWatchPoint_6:
                    2958   ; }
                    2959   ; printf("\r\nWatch Point Address: ") ;
00001CC4  4879 0000 2960          pea       @m68kde~1_74.L
00001CC8  4D5C      
00001CCA  4E92      2961          jsr       (A2)
00001CCC  584F      2962          addq.w    #4,A7
                    2963   ; WPAddress = Get8HexDigits(0) ;
00001CCE  42A7      2964          clr.l     -(A7)
00001CD0  4EB8 0B62 2965          jsr       _Get8HexDigits
00001CD4  584F      2966          addq.w    #4,A7
00001CD6  2600      2967          move.l    D0,D3
                    2968   ; // search for first free wp or existing same wp
                    2969   ; for(i = 0; i < 8; i++)  {
00001CD8  4282      2970          clr.l     D2
                    2971   SetWatchPoint_9:
00001CDA  0C82 0000 2972          cmp.l     #8,D2
00001CDE  0008      
00001CE0  6C00 006C 2973          bge       SetWatchPoint_11
                    2974   ; if(WatchPointAddress[i] == WPAddress && WPAddress != 0)   {     //so we can set a wp at 0
00001CE4  2002      2975          move.l    D2,D0
00001CE6  E588      2976          lsl.l     #2,D0
00001CE8  41F9 0803 2977          lea       _WatchPointAddress.L,A0
00001CEC  0182      
00001CEE  B6B0 0800 2978          cmp.l     0(A0,D0.L),D3
00001CF2  6614      2979          bne.s     SetWatchPoint_12
00001CF4  4A83      2980          tst.l     D3
00001CF6  6710      2981          beq.s     SetWatchPoint_12
                    2982   ; printf("\r\nError: Watch Point Already Set at Address : %08x\r\n", WPAddress) ;
00001CF8  2F03      2983          move.l    D3,-(A7)
00001CFA  4879 0000 2984          pea       @m68kde~1_75.L
00001CFE  4D74      
00001D00  4E92      2985          jsr       (A2)
00001D02  504F      2986          addq.w    #8,A7
                    2987   ; return ;
00001D04  6000 0048 2988          bra       SetWatchPoint_11
                    2989   SetWatchPoint_12:
                    2990   ; }
                    2991   ; if(WatchPointSetOrCleared[i] == 0) {
00001D08  2002      2992          move.l    D2,D0
00001D0A  E588      2993          lsl.l     #2,D0
00001D0C  2033 0800 2994          move.l    0(A3,D0.L),D0
00001D10  6600 0038 2995          bne       SetWatchPoint_14
                    2996   ; WatchPointSetOrCleared[i] = 1 ;                                 // mark this watchpoint as set
00001D14  2002      2997          move.l    D2,D0
00001D16  E588      2998          lsl.l     #2,D0
00001D18  27BC 0000 2999          move.l    #1,0(A3,D0.L)
00001D1C  0001 0800 
                    3000   ; printf("\r\nWatch Point Set at Address: [$%08x]", WPAddress) ;
00001D20  2F03      3001          move.l    D3,-(A7)
00001D22  4879 0000 3002          pea       @m68kde~1_76.L
00001D26  4DAA      
00001D28  4E92      3003          jsr       (A2)
00001D2A  504F      3004          addq.w    #8,A7
                    3005   ; WatchPointAddress[i] = WPAddress ;                              // record the address of this watch point in the debugger
00001D2C  2002      3006          move.l    D2,D0
00001D2E  E588      3007          lsl.l     #2,D0
00001D30  41F9 0803 3008          lea       _WatchPointAddress.L,A0
00001D34  0182      
00001D36  2183 0800 3009          move.l    D3,0(A0,D0.L)
                    3010   ; printf("\r\n") ;
00001D3A  4879 0000 3011          pea       @m68kde~1_6.L
00001D3E  462E      
00001D40  4E92      3012          jsr       (A2)
00001D42  584F      3013          addq.w    #4,A7
                    3014   ; WatchPointDisplay() ;       // display the break points
00001D44  4EB8 1804 3015          jsr       _WatchPointDisplay
                    3016   ; return ;
00001D48  6004      3017          bra.s     SetWatchPoint_11
                    3018   SetWatchPoint_14:
00001D4A  5282      3019          addq.l    #1,D2
00001D4C  608C      3020          bra       SetWatchPoint_9
                    3021   SetWatchPoint_11:
00001D4E  4CDF 0C0C 3022          movem.l   (A7)+,D2/D3/A2/A3
00001D52  4E5E      3023          unlk      A6
00001D54  4E75      3024          rts
                    3025   ; }
                    3026   ; }
                    3027   ; }
                    3028   ; void HandleBreakPoint(void)
                    3029   ; {
                    3030   _HandleBreakPoint:
00001D56  4E56 FFFC 3031          link      A6,#-4
00001D5A  48E7 0038 3032          movem.l   A2/A3/A4,-(A7)
00001D5E  45F9 0803 3033          lea       _i.L,A2
00001D62  00C4      
00001D64  47F9 0000 3034          lea       _printf.L,A3
00001D68  3CDE      
00001D6A  49F9 0803 3035          lea       _PC.L,A4
00001D6E  0120      
                    3036   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3037   ; // now we have to put the break point back to run the instruction
                    3038   ; // PC will contain the address of the TRAP instruction but advanced by two bytes so lets play with that
                    3039   ; PC = PC - 2 ;  // ready for user to resume after reaching breakpoint
00001D70  5594      3040          subq.l    #2,(A4)
                    3041   ; printf("\r\n\r\n\r\n\r\n@BREAKPOINT") ;
00001D72  4879 0000 3042          pea       @m68kde~1_77.L
00001D76  4DD0      
00001D78  4E93      3043          jsr       (A3)
00001D7A  584F      3044          addq.w    #4,A7
                    3045   ; printf("\r\nSingle Step : [ON]") ;
00001D7C  4879 0000 3046          pea       @m68kde~1_78.L
00001D80  4DE4      
00001D82  4E93      3047          jsr       (A3)
00001D84  584F      3048          addq.w    #4,A7
                    3049   ; printf("\r\nBreakPoints : [Enabled]") ;
00001D86  4879 0000 3050          pea       @m68kde~1_79.L
00001D8A  4DFA      
00001D8C  4E93      3051          jsr       (A3)
00001D8E  584F      3052          addq.w    #4,A7
                    3053   ; // now clear the break point (put original instruction back)
                    3054   ; ProgramBreakPointAddress = PC ;
00001D90  2D54 FFFC 3055          move.l    (A4),-4(A6)
                    3056   ; for(i = 0; i < 8; i ++) {
00001D94  4292      3057          clr.l     (A2)
                    3058   HandleBreakPoint_1:
00001D96  2012      3059          move.l    (A2),D0
00001D98  0C80 0000 3060          cmp.l     #8,D0
00001D9C  0008      
00001D9E  6400 0056 3061          bhs       HandleBreakPoint_3
                    3062   ; if(BreakPointAddress[i] == PC) {        // if we have found the breakpoint
00001DA2  2012      3063          move.l    (A2),D0
00001DA4  E588      3064          lsl.l     #2,D0
00001DA6  41F9 0803 3065          lea       _BreakPointAddress.L,A0
00001DAA  012E      
00001DAC  2230 0800 3066          move.l    0(A0,D0.L),D1
00001DB0  B294      3067          cmp.l     (A4),D1
00001DB2  6600 003E 3068          bne       HandleBreakPoint_4
                    3069   ; BreakPointAddress[i] = 0 ;
00001DB6  2012      3070          move.l    (A2),D0
00001DB8  E588      3071          lsl.l     #2,D0
00001DBA  41F9 0803 3072          lea       _BreakPointAddress.L,A0
00001DBE  012E      
00001DC0  42B0 0800 3073          clr.l     0(A0,D0.L)
                    3074   ; BreakPointSetOrCleared[i] = 0 ;
00001DC4  2012      3075          move.l    (A2),D0
00001DC6  E588      3076          lsl.l     #2,D0
00001DC8  41F9 0803 3077          lea       _BreakPointSetOrCleared.L,A0
00001DCC  015E      
00001DCE  42B0 0800 3078          clr.l     0(A0,D0.L)
                    3079   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
00001DD2  2012      3080          move.l    (A2),D0
00001DD4  E388      3081          lsl.l     #1,D0
00001DD6  41F9 0803 3082          lea       _BreakPointInstruction.L,A0
00001DDA  014E      
00001DDC  226E FFFC 3083          move.l    -4(A6),A1
00001DE0  32B0 0800 3084          move.w    0(A0,D0.L),(A1)
                    3085   ; BreakPointInstruction[i] = 0 ;
00001DE4  2012      3086          move.l    (A2),D0
00001DE6  E388      3087          lsl.l     #1,D0
00001DE8  41F9 0803 3088          lea       _BreakPointInstruction.L,A0
00001DEC  014E      
00001DEE  4270 0800 3089          clr.w     0(A0,D0.L)
                    3090   HandleBreakPoint_4:
00001DF2  5292      3091          addq.l    #1,(A2)
00001DF4  60A0      3092          bra       HandleBreakPoint_1
                    3093   HandleBreakPoint_3:
                    3094   ; }
                    3095   ; }
                    3096   ; DumpRegisters() ;
00001DF6  4EB8 0F82 3097          jsr       _DumpRegisters
                    3098   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
00001DFA  4879 0000 3099          pea       @m68kde~1_41.L
00001DFE  4976      
00001E00  4E93      3100          jsr       (A3)
00001E02  584F      3101          addq.w    #4,A7
                    3102   ; printf("\r\nPress <ESC> to Resume User Program\r\n") ;
00001E04  4879 0000 3103          pea       @m68kde~1_80.L
00001E08  4E14      
00001E0A  4E93      3104          jsr       (A3)
00001E0C  584F      3105          addq.w    #4,A7
                    3106   ; menu() ;
00001E0E  4EB9 0000 3107          jsr       _menu
00001E12  1FD6      
00001E14  4CDF 1C00 3108          movem.l   (A7)+,A2/A3/A4
00001E18  4E5E      3109          unlk      A6
00001E1A  4E75      3110          rts
                    3111   ; }
                    3112   ; void UnknownCommand()
                    3113   ; {
                    3114   _UnknownCommand:
                    3115   ; printf("\r\nUnknown Command.....\r\n") ;
00001E1C  4879 0000 3116          pea       @m68kde~1_81.L
00001E20  4E3C      
00001E22  4EB9 0000 3117          jsr       _printf
00001E26  3CDE      
00001E28  584F      3118          addq.w    #4,A7
                    3119   ; Help() ;
00001E2A  4EB9 0000 3120          jsr       _Help
00001E2E  1F40      
00001E30  4E75      3121          rts
                    3122   ; }
                    3123   ; // system when the users program executes a TRAP #15 instruction to halt program and return to debug monitor
                    3124   ; void CallDebugMonitor(void)
                    3125   ; {
                    3126   _CallDebugMonitor:
                    3127   ; printf("\r\nProgram Ended (TRAP #15)....") ;
00001E32  4879 0000 3128          pea       @m68kde~1_82.L
00001E36  4E56      
00001E38  4EB9 0000 3129          jsr       _printf
00001E3C  3CDE      
00001E3E  584F      3130          addq.w    #4,A7
                    3131   ; menu();
00001E40  4EB9 0000 3132          jsr       _menu
00001E44  1FD6      
00001E46  4E75      3133          rts
                    3134   ; }
                    3135   ; void Breakpoint(void)
                    3136   ; {
                    3137   _Breakpoint:
00001E48  2F02      3138          move.l    D2,-(A7)
                    3139   ; char c;
                    3140   ; c = toupper(_getch());
00001E4A  2F00      3141          move.l    D0,-(A7)
00001E4C  4EB8 0A26 3142          jsr       __getch
00001E50  2200      3143          move.l    D0,D1
00001E52  201F      3144          move.l    (A7)+,D0
00001E54  2F01      3145          move.l    D1,-(A7)
00001E56  4EB9 0000 3146          jsr       _toupper
00001E5A  3CB2      
00001E5C  584F      3147          addq.w    #4,A7
00001E5E  1400      3148          move.b    D0,D2
                    3149   ; if( c == (char)('D'))                                      // BreakPoint Display
00001E60  0C02 0044 3150          cmp.b     #68,D2
00001E64  6608      3151          bne.s     Breakpoint_1
                    3152   ; BreakPointDisplay() ;
00001E66  4EB8 1730 3153          jsr       _BreakPointDisplay
00001E6A  6000 0054 3154          bra       Breakpoint_10
                    3155   Breakpoint_1:
                    3156   ; else if(c == (char)('K')) {                                 // breakpoint Kill
00001E6E  0C02 004B 3157          cmp.b     #75,D2
00001E72  6630      3158          bne.s     Breakpoint_3
                    3159   ; printf("\r\nKill All Break Points...(y/n)?") ;
00001E74  4879 0000 3160          pea       @m68kde~1_83.L
00001E78  4E76      
00001E7A  4EB9 0000 3161          jsr       _printf
00001E7E  3CDE      
00001E80  584F      3162          addq.w    #4,A7
                    3163   ; c = toupper(_getch());
00001E82  2F00      3164          move.l    D0,-(A7)
00001E84  4EB8 0A26 3165          jsr       __getch
00001E88  2200      3166          move.l    D0,D1
00001E8A  201F      3167          move.l    (A7)+,D0
00001E8C  2F01      3168          move.l    D1,-(A7)
00001E8E  4EB9 0000 3169          jsr       _toupper
00001E92  3CB2      
00001E94  584F      3170          addq.w    #4,A7
00001E96  1400      3171          move.b    D0,D2
                    3172   ; if(c == (char)('Y'))
00001E98  0C02 0059 3173          cmp.b     #89,D2
00001E9C  6604      3174          bne.s     Breakpoint_5
                    3175   ; KillAllBreakPoints() ;
00001E9E  4EB8 1AC8 3176          jsr       _KillAllBreakPoints
                    3177   Breakpoint_5:
00001EA2  601C      3178          bra.s     Breakpoint_10
                    3179   Breakpoint_3:
                    3180   ; }
                    3181   ; else if(c == (char)('S')) {
00001EA4  0C02 0053 3182          cmp.b     #83,D2
00001EA8  6606      3183          bne.s     Breakpoint_7
                    3184   ; SetBreakPoint() ;
00001EAA  4EB8 1B60 3185          jsr       _SetBreakPoint
00001EAE  6010      3186          bra.s     Breakpoint_10
                    3187   Breakpoint_7:
                    3188   ; }
                    3189   ; else if(c == (char)('C')) {
00001EB0  0C02 0043 3190          cmp.b     #67,D2
00001EB4  6606      3191          bne.s     Breakpoint_9
                    3192   ; BreakPointClear() ;
00001EB6  4EB8 18B0 3193          jsr       _BreakPointClear
00001EBA  6004      3194          bra.s     Breakpoint_10
                    3195   Breakpoint_9:
                    3196   ; }
                    3197   ; else
                    3198   ; UnknownCommand() ;
00001EBC  4EB8 1E1C 3199          jsr       _UnknownCommand
                    3200   Breakpoint_10:
00001EC0  241F      3201          move.l    (A7)+,D2
00001EC2  4E75      3202          rts
                    3203   ; }
                    3204   ; void Watchpoint(void)
                    3205   ; {
                    3206   _Watchpoint:
00001EC4  2F02      3207          move.l    D2,-(A7)
                    3208   ; char c;
                    3209   ; c = toupper(_getch());
00001EC6  2F00      3210          move.l    D0,-(A7)
00001EC8  4EB8 0A26 3211          jsr       __getch
00001ECC  2200      3212          move.l    D0,D1
00001ECE  201F      3213          move.l    (A7)+,D0
00001ED0  2F01      3214          move.l    D1,-(A7)
00001ED2  4EB9 0000 3215          jsr       _toupper
00001ED6  3CB2      
00001ED8  584F      3216          addq.w    #4,A7
00001EDA  1400      3217          move.b    D0,D2
                    3218   ; if( c == (char)('D'))                                      // WatchPoint Display
00001EDC  0C02 0044 3219          cmp.b     #68,D2
00001EE0  6608      3220          bne.s     Watchpoint_1
                    3221   ; WatchPointDisplay() ;
00001EE2  4EB8 1804 3222          jsr       _WatchPointDisplay
00001EE6  6000 0054 3223          bra       Watchpoint_10
                    3224   Watchpoint_1:
                    3225   ; else if(c == (char)('K')) {                                 // wtahcpoint Kill
00001EEA  0C02 004B 3226          cmp.b     #75,D2
00001EEE  6630      3227          bne.s     Watchpoint_3
                    3228   ; printf("\r\nKill All Watch Points...(y/n)?") ;
00001EF0  4879 0000 3229          pea       @m68kde~1_84.L
00001EF4  4E98      
00001EF6  4EB9 0000 3230          jsr       _printf
00001EFA  3CDE      
00001EFC  584F      3231          addq.w    #4,A7
                    3232   ; c = toupper(_getch());
00001EFE  2F00      3233          move.l    D0,-(A7)
00001F00  4EB8 0A26 3234          jsr       __getch
00001F04  2200      3235          move.l    D0,D1
00001F06  201F      3236          move.l    (A7)+,D0
00001F08  2F01      3237          move.l    D1,-(A7)
00001F0A  4EB9 0000 3238          jsr       _toupper
00001F0E  3CB2      
00001F10  584F      3239          addq.w    #4,A7
00001F12  1400      3240          move.b    D0,D2
                    3241   ; if(c == (char)('Y'))
00001F14  0C02 0059 3242          cmp.b     #89,D2
00001F18  6604      3243          bne.s     Watchpoint_5
                    3244   ; KillAllWatchPoints() ;
00001F1A  4EB8 1B30 3245          jsr       _KillAllWatchPoints
                    3246   Watchpoint_5:
00001F1E  601C      3247          bra.s     Watchpoint_10
                    3248   Watchpoint_3:
                    3249   ; }
                    3250   ; else if(c == (char)('S')) {
00001F20  0C02 0053 3251          cmp.b     #83,D2
00001F24  6606      3252          bne.s     Watchpoint_7
                    3253   ; SetWatchPoint() ;
00001F26  4EB8 1C80 3254          jsr       _SetWatchPoint
00001F2A  6010      3255          bra.s     Watchpoint_10
                    3256   Watchpoint_7:
                    3257   ; }
                    3258   ; else if(c == (char)('C')) {
00001F2C  0C02 0043 3259          cmp.b     #67,D2
00001F30  6606      3260          bne.s     Watchpoint_9
                    3261   ; WatchPointClear() ;
00001F32  4EB8 198A 3262          jsr       _WatchPointClear
00001F36  6004      3263          bra.s     Watchpoint_10
                    3264   Watchpoint_9:
                    3265   ; }
                    3266   ; else
                    3267   ; UnknownCommand() ;
00001F38  4EB8 1E1C 3268          jsr       _UnknownCommand
                    3269   Watchpoint_10:
00001F3C  241F      3270          move.l    (A7)+,D2
00001F3E  4E75      3271          rts
                    3272   ; }
                    3273   ; void Help(void)
                    3274   ; {
                    3275   _Help:
00001F40  48E7 2020 3276          movem.l   D2/A2,-(A7)
00001F44  45F9 0000 3277          lea       _printf.L,A2
00001F48  3CDE      
                    3278   ; char *banner = "\r\n----------------------------------------------------------------" ;
00001F4A  41F9 0000 3279          lea       @m68kde~1_85.L,A0
00001F4E  4EBA      
00001F50  2408      3280          move.l    A0,D2
                    3281   ; printf(banner) ;
00001F52  2F02      3282          move.l    D2,-(A7)
00001F54  4E92      3283          jsr       (A2)
00001F56  584F      3284          addq.w    #4,A7
                    3285   ; printf("\r\n  Final Project") ;
00001F58  4879 0000 3286          pea       @m68kde~1_86.L
00001F5C  4EFE      
00001F5E  4E92      3287          jsr       (A2)
00001F60  584F      3288          addq.w    #4,A7
                    3289   ; printf(banner) ;
00001F62  2F02      3290          move.l    D2,-(A7)
00001F64  4E92      3291          jsr       (A2)
00001F66  584F      3292          addq.w    #4,A7
                    3293   ; printf("\r\n  H    - Say Hello World") ;
00001F68  4879 0000 3294          pea       @m68kde~1_87.L
00001F6C  4F10      
00001F6E  4E92      3295          jsr       (A2)
00001F70  584F      3296          addq.w    #4,A7
                    3297   ; printf(banner) ;
00001F72  2F02      3298          move.l    D2,-(A7)
00001F74  4E92      3299          jsr       (A2)
00001F76  584F      3300          addq.w    #4,A7
                    3301   ; printf("\r\n  T    - Run Tetris Game") ;
00001F78  4879 0000 3302          pea       @m68kde~1_88.L
00001F7C  4F2C      
00001F7E  4E92      3303          jsr       (A2)
00001F80  584F      3304          addq.w    #4,A7
                    3305   ; printf(banner) ;
00001F82  2F02      3306          move.l    D2,-(A7)
00001F84  4E92      3307          jsr       (A2)
00001F86  584F      3308          addq.w    #4,A7
00001F88  4CDF 0404 3309          movem.l   (A7)+,D2/A2
00001F8C  4E75      3310          rts
                    3311   ; }
                    3312   ; void writeVGA_debug(int addr, char data, char z) {
                    3313   _writeVGA_debug:
00001F8E  4E56 0000 3314          link      A6,#0
00001F92  2F02      3315          move.l    D2,-(A7)
                    3316   ; char *VGA = (char *)(VGA_ADDRESS + addr * 2);
00001F94  203C FFFF 3317          move.l    #-65536,D0
00001F98  0000      
00001F9A  2F2E 0008 3318          move.l    8(A6),-(A7)
00001F9E  4878 0002 3319          pea       2
00001FA2  4EB9 0000 3320          jsr       LMUL
00001FA6  3B7E      
00001FA8  2217      3321          move.l    (A7),D1
00001FAA  504F      3322          addq.w    #8,A7
00001FAC  D081      3323          add.l     D1,D0
00001FAE  2400      3324          move.l    D0,D2
                    3325   ; *(char *)(0xFF030000) = (0xF2 & 0xF8) | z;
00001FB0  303C 00F0 3326          move.w    #240,D0
00001FB4  122E 0013 3327          move.b    19(A6),D1
00001FB8  4881      3328          ext.w     D1
00001FBA  8041      3329          or.w      D1,D0
00001FBC  13C0 FF03 3330          move.b    D0,-16580608
00001FC0  0000      
                    3331   ; *(VGA) = data;
00001FC2  2042      3332          move.l    D2,A0
00001FC4  10AE 000F 3333          move.b    15(A6),(A0)
                    3334   ; *(VGA + 1) = data;
00001FC8  2042      3335          move.l    D2,A0
00001FCA  116E 000F 3336          move.b    15(A6),1(A0)
00001FCE  0001      
00001FD0  241F      3337          move.l    (A7)+,D2
00001FD2  4E5E      3338          unlk      A6
00001FD4  4E75      3339          rts
                    3340   ; }
                    3341   ; void menu(void)
                    3342   ; {
                    3343   _menu:
00001FD6  4E56 FFEC 3344          link      A6,#-20
00001FDA  48E7 2020 3345          movem.l   D2/A2,-(A7)
00001FDE  45F9 0000 3346          lea       _printf.L,A2
00001FE2  3CDE      
                    3347   ; char c, data, z;
                    3348   ; int c1 ;
                    3349   ; int addr, i, j;
                    3350   ; while(1)    {
                    3351   menu_1:
                    3352   ; FlushKeyboard() ;               // dump unread characters from keyboard
00001FE4  4EB8 0A64 3353          jsr       _FlushKeyboard
                    3354   ; printf("\r\n#") ;
00001FE8  4879 0000 3355          pea       @m68kde~1_89.L
00001FEC  4F48      
00001FEE  4E92      3356          jsr       (A2)
00001FF0  584F      3357          addq.w    #4,A7
                    3358   ; c = toupper(_getch());
00001FF2  2F00      3359          move.l    D0,-(A7)
00001FF4  4EB8 0A26 3360          jsr       __getch
00001FF8  2200      3361          move.l    D0,D1
00001FFA  201F      3362          move.l    (A7)+,D0
00001FFC  2F01      3363          move.l    D1,-(A7)
00001FFE  4EB9 0000 3364          jsr       _toupper
00002002  3CB2      
00002004  584F      3365          addq.w    #4,A7
00002006  1400      3366          move.b    D0,D2
                    3367   ; if ( c == (char)('T'))  {
00002008  0C02 0054 3368          cmp.b     #84,D2
0000200C  6612      3369          bne.s     menu_4
                    3370   ; printf("\nRunning Tetris Game\n");
0000200E  4879 0000 3371          pea       @m68kde~1_90.L
00002012  4F4C      
00002014  4E92      3372          jsr       (A2)
00002016  584F      3373          addq.w    #4,A7
                    3374   ; tetris_main();
00002018  4EB9 0000 3375          jsr       _tetris_main
0000201C  37A0      
                    3376   ; continue;
0000201E  601E      3377          bra.s     menu_2
                    3378   menu_4:
                    3379   ; }
                    3380   ; if ( c == (char)('H'))  {
00002020  0C02 0048 3381          cmp.b     #72,D2
00002024  6614      3382          bne.s     menu_6
                    3383   ; printf("\nSaying Hello World\n");
00002026  4879 0000 3384          pea       @m68kde~1_91.L
0000202A  4F62      
0000202C  4E92      3385          jsr       (A2)
0000202E  584F      3386          addq.w    #4,A7
                    3387   ; say_hello();
00002030  4EB8 098A 3388          jsr       _say_hello
                    3389   ; say_world();
00002034  4EB8 09B0 3390          jsr       _say_world
                    3391   ; continue;
00002038  6004      3392          bra.s     menu_2
                    3393   menu_6:
                    3394   ; }
                    3395   ; // if ( c == (char)('V'))  {
                    3396   ; //     printf("\nMemory Change in VGA\n");
                    3397   ; //     // while (1) {
                    3398   ; //     //     printf("\nAddress: 0x0000 to 0x0FFF");
                    3399   ; //     //     addr = Get4HexDigits(0);
                    3400   ; //     //     printf("\nData: ");
                    3401   ; //     //     data = Get2HexDigits(0);
                    3402   ; //     //     writeVGA(addr, data);
                    3403   ; //     // }
                    3404   ; //     j = 0;
                    3405   ; //     z = 0;
                    3406   ; //     // 一排80个
                    3407   ; //     // 一共40排
                    3408   ; //     for (i = 0; i <= 0xFFFF; i++) {
                    3409   ; //         data = (j + 'A');
                    3410   ; //         writeVGA_debug(i, data, z);
                    3411   ; //         ++j; ++z;
                    3412   ; //         if (z == 8) z = 1;
                    3413   ; //         if (j == 26) j = 0;
                    3414   ; //         printf("\nAddress: 0x%04X, Data: %c", i, j + 'A');
                    3415   ; //         Wait1ms();
                    3416   ; //     }
                    3417   ; //     continue;
                    3418   ; // }
                    3419   ; // if ( c == (char)('M'))  {
                    3420   ; //     while (1){
                    3421   ; //         *(char *)(VGA_ADDRESS) = 0x41;
                    3422   ; //         printf("\nAddress: %ld", VGA_ADDRESS);
                    3423   ; //     }
                    3424   ; //     continue;
                    3425   ; // }
                    3426   ; // if ( c == (char)('S'))  {
                    3427   ; //     printf("\nSasha\n");
                    3428   ; //     say_Sasha();
                    3429   ; //     cursor_x = cx;
                    3430   ; //     cursor_y = cy;
                    3431   ; //     while (1) {
                    3432   ; //         FlushKeyboard() ;               // dump unread characters from keyboard
                    3433   ; //         printf("\r\n#") ;
                    3434   ; //         c = toupper(_getch());
                    3435   ; //         if (c == (char)('W')) {
                    3436   ; //             cy -= 1;
                    3437   ; //             printf("\nMove Up, cy = %d\n", cy);
                    3438   ; //             cursor_y = cy;
                    3439   ; //             continue;
                    3440   ; //         }
                    3441   ; //         if (c == (char)('S')) {
                    3442   ; //             cy += 1;
                    3443   ; //             printf("\nMove Down, cy = %d\n", cy);
                    3444   ; //             cursor_y = cy;
                    3445   ; //             continue;
                    3446   ; //         }
                    3447   ; //         if (c == (char)('A')) {
                    3448   ; //             cx -= 1;
                    3449   ; //             printf("\nMove Left, cx = %d\n", cx);
                    3450   ; //             cursor_x = cx;
                    3451   ; //             continue;
                    3452   ; //         }
                    3453   ; //         if (c == (char)('D')) {
                    3454   ; //             cx += 1;
                    3455   ; //             printf("\nMove Right, cx = %d\n", cx);
                    3456   ; //             cursor_x = cx;
                    3457   ; //             continue;
                    3458   ; //         }
                    3459   ; //     }
                    3460   ; //     continue;
                    3461   ; // }
                    3462   ; UnknownCommand() ;
0000203A  4EB8 1E1C 3463          jsr       _UnknownCommand
                    3464   menu_2:
0000203E  60A4      3465          bra       menu_1
                    3466   ; }
                    3467   ; }
                    3468   ; void PrintErrorMessageandAbort(char *string) {
                    3469   _PrintErrorMessageandAbort:
00002040  4E56 0000 3470          link      A6,#0
                    3471   ; printf("\r\n\r\nProgram ABORT !!!!!!\r\n") ;
00002044  4879 0000 3472          pea       @m68kde~1_92.L
00002048  4F78      
0000204A  4EB9 0000 3473          jsr       _printf
0000204E  3CDE      
00002050  584F      3474          addq.w    #4,A7
                    3475   ; printf("%s\r\n", string) ;
00002052  2F2E 0008 3476          move.l    8(A6),-(A7)
00002056  4879 0000 3477          pea       @m68kde~1_93.L
0000205A  4F94      
0000205C  4EB9 0000 3478          jsr       _printf
00002060  3CDE      
00002062  504F      3479          addq.w    #8,A7
                    3480   ; menu() ;
00002064  4EB8 1FD6 3481          jsr       _menu
00002068  4E5E      3482          unlk      A6
0000206A  4E75      3483          rts
                    3484   ; }
                    3485   ; void IRQMessage(int level) {
                    3486   _IRQMessage:
0000206C  4E56 0000 3487          link      A6,#0
                    3488   ; printf("\r\n\r\nProgram ABORT !!!!!");
00002070  4879 0000 3489          pea       @m68kde~1_94.L
00002074  4F9A      
00002076  4EB9 0000 3490          jsr       _printf
0000207A  3CDE      
0000207C  584F      3491          addq.w    #4,A7
                    3492   ; printf("\r\nUnhandled Interrupt: IRQ%d !!!!!", level) ;
0000207E  2F2E 0008 3493          move.l    8(A6),-(A7)
00002082  4879 0000 3494          pea       @m68kde~1_95.L
00002086  4FB2      
00002088  4EB9 0000 3495          jsr       _printf
0000208C  3CDE      
0000208E  504F      3496          addq.w    #8,A7
                    3497   ; menu() ;
00002090  4EB8 1FD6 3498          jsr       _menu
00002094  4E5E      3499          unlk      A6
00002096  4E75      3500          rts
                    3501   ; }
                    3502   ; void UnhandledIRQ1(void) {
                    3503   _UnhandledIRQ1:
                    3504   ; IRQMessage(1);
00002098  4878 0001 3505          pea       1
0000209C  4EB8 206C 3506          jsr       _IRQMessage
000020A0  584F      3507          addq.w    #4,A7
000020A2  4E75      3508          rts
                    3509   ; }
                    3510   ; void UnhandledIRQ2(void) {
                    3511   _UnhandledIRQ2:
                    3512   ; IRQMessage(2);
000020A4  4878 0002 3513          pea       2
000020A8  4EB8 206C 3514          jsr       _IRQMessage
000020AC  584F      3515          addq.w    #4,A7
000020AE  4E75      3516          rts
                    3517   ; }
                    3518   ; void UnhandledIRQ3(void){
                    3519   _UnhandledIRQ3:
                    3520   ; IRQMessage(3);
000020B0  4878 0003 3521          pea       3
000020B4  4EB8 206C 3522          jsr       _IRQMessage
000020B8  584F      3523          addq.w    #4,A7
000020BA  4E75      3524          rts
                    3525   ; }
                    3526   ; void UnhandledIRQ4(void) {
                    3527   _UnhandledIRQ4:
                    3528   ; IRQMessage(4);
000020BC  4878 0004 3529          pea       4
000020C0  4EB8 206C 3530          jsr       _IRQMessage
000020C4  584F      3531          addq.w    #4,A7
000020C6  4E75      3532          rts
                    3533   ; }
                    3534   ; void UnhandledIRQ5(void) {
                    3535   _UnhandledIRQ5:
                    3536   ; IRQMessage(5);
000020C8  4878 0005 3537          pea       5
000020CC  4EB8 206C 3538          jsr       _IRQMessage
000020D0  584F      3539          addq.w    #4,A7
000020D2  4E75      3540          rts
                    3541   ; }
                    3542   ; void UnhandledIRQ6(void) {
                    3543   _UnhandledIRQ6:
                    3544   ; PrintErrorMessageandAbort("ADDRESS ERROR: 16 or 32 Bit Transfer to/from an ODD Address....") ;
000020D4  4879 0000 3545          pea       @m68kde~1_96.L
000020D8  4FD6      
000020DA  4EB8 2040 3546          jsr       _PrintErrorMessageandAbort
000020DE  584F      3547          addq.w    #4,A7
                    3548   ; menu() ;
000020E0  4EB8 1FD6 3549          jsr       _menu
000020E4  4E75      3550          rts
                    3551   ; }
                    3552   ; void UnhandledIRQ7(void) {
                    3553   _UnhandledIRQ7:
                    3554   ; IRQMessage(7);
000020E6  4878 0007 3555          pea       7
000020EA  4EB8 206C 3556          jsr       _IRQMessage
000020EE  584F      3557          addq.w    #4,A7
000020F0  4E75      3558          rts
                    3559   ; }
                    3560   ; void UnhandledTrap(void) {
                    3561   _UnhandledTrap:
                    3562   ; PrintErrorMessageandAbort("Unhandled Trap !!!!!") ;
000020F2  4879 0000 3563          pea       @m68kde~1_97.L
000020F6  5016      
000020F8  4EB8 2040 3564          jsr       _PrintErrorMessageandAbort
000020FC  584F      3565          addq.w    #4,A7
000020FE  4E75      3566          rts
                    3567   ; }
                    3568   ; void BusError() {
                    3569   _BusError:
                    3570   ; PrintErrorMessageandAbort("BUS Error!") ;
00002100  4879 0000 3571          pea       @m68kde~1_98.L
00002104  502C      
00002106  4EB8 2040 3572          jsr       _PrintErrorMessageandAbort
0000210A  584F      3573          addq.w    #4,A7
0000210C  4E75      3574          rts
                    3575   ; }
                    3576   ; void AddressError() {
                    3577   _AddressError:
                    3578   ; PrintErrorMessageandAbort("ADDRESS Error!") ;
0000210E  4879 0000 3579          pea       @m68kde~1_99.L
00002112  5038      
00002114  4EB8 2040 3580          jsr       _PrintErrorMessageandAbort
00002118  584F      3581          addq.w    #4,A7
0000211A  4E75      3582          rts
                    3583   ; }
                    3584   ; void IllegalInstruction() {
                    3585   _IllegalInstruction:
                    3586   ; PrintErrorMessageandAbort("ILLEGAL INSTRUCTION") ;
0000211C  4879 0000 3587          pea       @m68kde~1_100.L
00002120  5048      
00002122  4EB8 2040 3588          jsr       _PrintErrorMessageandAbort
00002126  584F      3589          addq.w    #4,A7
00002128  4E75      3590          rts
                    3591   ; }
                    3592   ; void Dividebyzero() {
                    3593   _Dividebyzero:
                    3594   ; PrintErrorMessageandAbort("DIVIDE BY ZERO") ;
0000212A  4879 0000 3595          pea       @m68kde~1_101.L
0000212E  505C      
00002130  4EB8 2040 3596          jsr       _PrintErrorMessageandAbort
00002134  584F      3597          addq.w    #4,A7
00002136  4E75      3598          rts
                    3599   ; }
                    3600   ; void Check() {
                    3601   _Check:
                    3602   ; PrintErrorMessageandAbort("'CHK' INSTRUCTION") ;
00002138  4879 0000 3603          pea       @m68kde~1_102.L
0000213C  506C      
0000213E  4EB8 2040 3604          jsr       _PrintErrorMessageandAbort
00002142  584F      3605          addq.w    #4,A7
00002144  4E75      3606          rts
                    3607   ; }
                    3608   ; void Trapv() {
                    3609   _Trapv:
                    3610   ; PrintErrorMessageandAbort("TRAPV INSTRUCTION") ;
00002146  4879 0000 3611          pea       @m68kde~1_103.L
0000214A  507E      
0000214C  4EB8 2040 3612          jsr       _PrintErrorMessageandAbort
00002150  584F      3613          addq.w    #4,A7
00002152  4E75      3614          rts
                    3615   ; }
                    3616   ; void PrivError() {
                    3617   _PrivError:
                    3618   ; PrintErrorMessageandAbort("PRIVILEGE VIOLATION") ;
00002154  4879 0000 3619          pea       @m68kde~1_104.L
00002158  5090      
0000215A  4EB8 2040 3620          jsr       _PrintErrorMessageandAbort
0000215E  584F      3621          addq.w    #4,A7
00002160  4E75      3622          rts
                    3623   ; }
                    3624   ; void UnitIRQ() {
                    3625   _UnitIRQ:
                    3626   ; PrintErrorMessageandAbort("UNINITIALISED IRQ") ;
00002162  4879 0000 3627          pea       @m68kde~1_105.L
00002166  50A4      
00002168  4EB8 2040 3628          jsr       _PrintErrorMessageandAbort
0000216C  584F      3629          addq.w    #4,A7
0000216E  4E75      3630          rts
                    3631   ; }
                    3632   ; void Spurious() {
                    3633   _Spurious:
                    3634   ; PrintErrorMessageandAbort("SPURIOUS IRQ") ;
00002170  4879 0000 3635          pea       @m68kde~1_106.L
00002174  50B6      
00002176  4EB8 2040 3636          jsr       _PrintErrorMessageandAbort
0000217A  584F      3637          addq.w    #4,A7
0000217C  4E75      3638          rts
                    3639   ; }
                    3640   ; void main(void)
                    3641   ; {
                    3642   _main:
0000217E  4E56 FFF0 3643          link      A6,#-16
00002182  48E7 2020 3644          movem.l   D2/A2,-(A7)
00002186  45F8 093A 3645          lea       _InstallExceptionHandler.L,A2
                    3646   ; char c ;
                    3647   ; int i, j ;
                    3648   ; char *BugMessage = "CPEN 412 2023W2\r\nTom Wang, 76340348";
0000218A  41F9 0000 3649          lea       @m68kde~1_107.L,A0
0000218E  50C4      
00002190  2D48 FFF8 3650          move.l    A0,-8(A6)
                    3651   ; char *CopyrightMessage = "Copyright (C) PJ Davies 2016";
00002194  41F9 0000 3652          lea       @m68kde~1_108.L,A0
00002198  50E8      
0000219A  2D48 FFFC 3653          move.l    A0,-4(A6)
                    3654   ; KillAllBreakPoints() ;
0000219E  4EB8 1AC8 3655          jsr       _KillAllBreakPoints
                    3656   ; i = x = y = z = PortA_Count = 0;
000021A2  42B9 0803 3657          clr.l     _PortA_Count.L
000021A6  00D4      
000021A8  42B9 0803 3658          clr.l     _z.L
000021AC  00D0      
000021AE  42B9 0803 3659          clr.l     _y.L
000021B2  00CC      
000021B4  42B9 0803 3660          clr.l     _x.L
000021B8  00C8      
000021BA  4282      3661          clr.l     D2
                    3662   ; Trace = GoFlag = 0;                       // used in tracing/single stepping
000021BC  42B9 0803 3663          clr.l     _GoFlag.L
000021C0  00DC      
000021C2  42B9 0803 3664          clr.l     _Trace.L
000021C6  00D8      
                    3665   ; Echo = 1 ;
000021C8  23FC 0000 3666          move.l    #1,_Echo.L
000021CC  0001 0803 
000021D0  00E0      
                    3667   ; // Initialise Breakpoint variables
                    3668   ; for(i = 0; i < 8; i++)  {
000021D2  4282      3669          clr.l     D2
                    3670   main_1:
000021D4  0C82 0000 3671          cmp.l     #8,D2
000021D8  0008      
000021DA  6C00 004C 3672          bge       main_3
                    3673   ; BreakPointAddress[i] = 0;               //array of 8 breakpoint addresses
000021DE  2002      3674          move.l    D2,D0
000021E0  E588      3675          lsl.l     #2,D0
000021E2  41F9 0803 3676          lea       _BreakPointAddress.L,A0
000021E6  012E      
000021E8  42B0 0800 3677          clr.l     0(A0,D0.L)
                    3678   ; WatchPointAddress[i] = 0 ;
000021EC  2002      3679          move.l    D2,D0
000021EE  E588      3680          lsl.l     #2,D0
000021F0  41F9 0803 3681          lea       _WatchPointAddress.L,A0
000021F4  0182      
000021F6  42B0 0800 3682          clr.l     0(A0,D0.L)
                    3683   ; BreakPointInstruction[i] = 0;           // to hold the instruction at the break point
000021FA  2002      3684          move.l    D2,D0
000021FC  E388      3685          lsl.l     #1,D0
000021FE  41F9 0803 3686          lea       _BreakPointInstruction.L,A0
00002202  014E      
00002204  4270 0800 3687          clr.w     0(A0,D0.L)
                    3688   ; BreakPointSetOrCleared[i] = 0;          // indicates if break point set
00002208  2002      3689          move.l    D2,D0
0000220A  E588      3690          lsl.l     #2,D0
0000220C  41F9 0803 3691          lea       _BreakPointSetOrCleared.L,A0
00002210  015E      
00002212  42B0 0800 3692          clr.l     0(A0,D0.L)
                    3693   ; WatchPointSetOrCleared[i] = 0;
00002216  2002      3694          move.l    D2,D0
00002218  E588      3695          lsl.l     #2,D0
0000221A  41F9 0803 3696          lea       _WatchPointSetOrCleared.L,A0
0000221E  01A2      
00002220  42B0 0800 3697          clr.l     0(A0,D0.L)
00002224  5282      3698          addq.l    #1,D2
00002226  60AC      3699          bra       main_1
                    3700   main_3:
                    3701   ; }
                    3702   ; Init_RS232() ;     // initialise the RS232 port
00002228  4EB8 09D0 3703          jsr       _Init_RS232
                    3704   ; for( i = 32; i < 48; i++)
0000222C  7420      3705          moveq     #32,D2
                    3706   main_4:
0000222E  0C82 0000 3707          cmp.l     #48,D2
00002232  0030      
00002234  6C0E      3708          bge.s     main_6
                    3709   ; InstallExceptionHandler(UnhandledTrap, i) ;		        // install Trap exception handler on vector 32-47
00002236  2F02      3710          move.l    D2,-(A7)
00002238  4878 20F2 3711          pea       _UnhandledTrap.L
0000223C  4E92      3712          jsr       (A2)
0000223E  504F      3713          addq.w    #8,A7
00002240  5282      3714          addq.l    #1,D2
00002242  60EA      3715          bra       main_4
                    3716   main_6:
                    3717   ; InstallExceptionHandler(menu, 47) ;		                   // TRAP #15 call debug and end program
00002244  4878 002F 3718          pea       47
00002248  4878 1FD6 3719          pea       _menu.L
0000224C  4E92      3720          jsr       (A2)
0000224E  504F      3721          addq.w    #8,A7
                    3722   ; InstallExceptionHandler(UnhandledIRQ1, 25) ;		      // install handler for interrupts
00002250  4878 0019 3723          pea       25
00002254  4878 2098 3724          pea       _UnhandledIRQ1.L
00002258  4E92      3725          jsr       (A2)
0000225A  504F      3726          addq.w    #8,A7
                    3727   ; InstallExceptionHandler(UnhandledIRQ2, 26) ;		      // install handler for interrupts
0000225C  4878 001A 3728          pea       26
00002260  4878 20A4 3729          pea       _UnhandledIRQ2.L
00002264  4E92      3730          jsr       (A2)
00002266  504F      3731          addq.w    #8,A7
                    3732   ; InstallExceptionHandler(UnhandledIRQ3, 27) ;		      // install handler for interrupts
00002268  4878 001B 3733          pea       27
0000226C  4878 20B0 3734          pea       _UnhandledIRQ3.L
00002270  4E92      3735          jsr       (A2)
00002272  504F      3736          addq.w    #8,A7
                    3737   ; InstallExceptionHandler(UnhandledIRQ4, 28) ;		      // install handler for interrupts
00002274  4878 001C 3738          pea       28
00002278  4878 20BC 3739          pea       _UnhandledIRQ4.L
0000227C  4E92      3740          jsr       (A2)
0000227E  504F      3741          addq.w    #8,A7
                    3742   ; InstallExceptionHandler(UnhandledIRQ5, 29) ;		      // install handler for interrupts
00002280  4878 001D 3743          pea       29
00002284  4878 20C8 3744          pea       _UnhandledIRQ5.L
00002288  4E92      3745          jsr       (A2)
0000228A  504F      3746          addq.w    #8,A7
                    3747   ; InstallExceptionHandler(UnhandledIRQ6, 30) ;		      // install handler for interrupts
0000228C  4878 001E 3748          pea       30
00002290  4878 20D4 3749          pea       _UnhandledIRQ6.L
00002294  4E92      3750          jsr       (A2)
00002296  504F      3751          addq.w    #8,A7
                    3752   ; InstallExceptionHandler(UnhandledIRQ7, 31) ;		      // install handler for interrupts
00002298  4878 001F 3753          pea       31
0000229C  4878 20E6 3754          pea       _UnhandledIRQ7.L
000022A0  4E92      3755          jsr       (A2)
000022A2  504F      3756          addq.w    #8,A7
                    3757   ; InstallExceptionHandler(HandleBreakPoint, 46) ;		           // install Trap 14 Break Point exception handler on vector 46
000022A4  4878 002E 3758          pea       46
000022A8  4878 1D56 3759          pea       _HandleBreakPoint.L
000022AC  4E92      3760          jsr       (A2)
000022AE  504F      3761          addq.w    #8,A7
                    3762   ; InstallExceptionHandler(DumpRegistersandPause, 29) ;		   // install TRACE handler for IRQ5 on vector 29
000022B0  4878 001D 3763          pea       29
000022B4  4878 1436 3764          pea       _DumpRegistersandPause.L
000022B8  4E92      3765          jsr       (A2)
000022BA  504F      3766          addq.w    #8,A7
                    3767   ; InstallExceptionHandler(BusError,2) ;                          // install Bus error handler
000022BC  4878 0002 3768          pea       2
000022C0  4878 2100 3769          pea       _BusError.L
000022C4  4E92      3770          jsr       (A2)
000022C6  504F      3771          addq.w    #8,A7
                    3772   ; InstallExceptionHandler(AddressError,3) ;                      // install address error handler (doesn't work on soft core 68k implementation)
000022C8  4878 0003 3773          pea       3
000022CC  4878 210E 3774          pea       _AddressError.L
000022D0  4E92      3775          jsr       (A2)
000022D2  504F      3776          addq.w    #8,A7
                    3777   ; InstallExceptionHandler(IllegalInstruction,4) ;                // install illegal instruction exception handler
000022D4  4878 0004 3778          pea       4
000022D8  4878 211C 3779          pea       _IllegalInstruction.L
000022DC  4E92      3780          jsr       (A2)
000022DE  504F      3781          addq.w    #8,A7
                    3782   ; InstallExceptionHandler(Dividebyzero,5) ;                      // install /0 exception handler
000022E0  4878 0005 3783          pea       5
000022E4  4878 212A 3784          pea       _Dividebyzero.L
000022E8  4E92      3785          jsr       (A2)
000022EA  504F      3786          addq.w    #8,A7
                    3787   ; InstallExceptionHandler(Check,6) ;                             // install check instruction exception handler
000022EC  4878 0006 3788          pea       6
000022F0  4878 2138 3789          pea       _Check.L
000022F4  4E92      3790          jsr       (A2)
000022F6  504F      3791          addq.w    #8,A7
                    3792   ; InstallExceptionHandler(Trapv,7) ;                             // install trapv instruction exception handler
000022F8  4878 0007 3793          pea       7
000022FC  4878 2146 3794          pea       _Trapv.L
00002300  4E92      3795          jsr       (A2)
00002302  504F      3796          addq.w    #8,A7
                    3797   ; InstallExceptionHandler(PrivError,8) ;                         // install Priv Violation exception handler
00002304  4878 0008 3798          pea       8
00002308  4878 2154 3799          pea       _PrivError.L
0000230C  4E92      3800          jsr       (A2)
0000230E  504F      3801          addq.w    #8,A7
                    3802   ; InstallExceptionHandler(UnitIRQ,15) ;                          // install uninitialised IRQ exception handler
00002310  4878 000F 3803          pea       15
00002314  4878 2162 3804          pea       _UnitIRQ.L
00002318  4E92      3805          jsr       (A2)
0000231A  504F      3806          addq.w    #8,A7
                    3807   ; InstallExceptionHandler(Check,24) ;                            // install spurious IRQ exception handler
0000231C  4878 0018 3808          pea       24
00002320  4878 2138 3809          pea       _Check.L
00002324  4E92      3810          jsr       (A2)
00002326  504F      3811          addq.w    #8,A7
                    3812   ; FlushKeyboard() ;                        // dump unread characters from keyboard
00002328  4EB8 0A64 3813          jsr       _FlushKeyboard
                    3814   ; TraceException = 0 ;                     // clear trace exception port to remove any software generated single step/trace
0000232C  4239 0040 3815          clr.b     4194314
00002330  000A      
                    3816   ; printf("\r\n%s", BugMessage) ;
00002332  2F2E FFF8 3817          move.l    -8(A6),-(A7)
00002336  4879 0000 3818          pea       @m68kde~1_109.L
0000233A  5106      
0000233C  4EB9 0000 3819          jsr       _printf
00002340  3CDE      
00002342  504F      3820          addq.w    #8,A7
                    3821   ; printf("\r\n%s", CopyrightMessage) ;
00002344  2F2E FFFC 3822          move.l    -4(A6),-(A7)
00002348  4879 0000 3823          pea       @m68kde~1_109.L
0000234C  5106      
0000234E  4EB9 0000 3824          jsr       _printf
00002352  3CDE      
00002354  504F      3825          addq.w    #8,A7
                    3826   ; // update_cursor(40, 20);
                    3827   ; // octlAddress = 0xF2;
                    3828   ; // octlAddress1 = 0xF2;
                    3829   ; // // changeChar(20 * 80 + 39, ' ');
                    3830   ; menu();
00002356  4EB8 1FD6 3831          jsr       _menu
0000235A  4CDF 0404 3832          movem.l   (A7)+,D2/A2
0000235E  4E5E      3833          unlk      A6
00002360  4E75      3834          rts
                    3835   ; }
                    3836   ; C:\USERS\10054\ONEDRIVE\CPEN 412 FINAL PROJECT\FINAL_PROJECT_2023_SEM2_STUDENT_TEMPLATE\FINAL_PROJECT_2023_SEM2_STUDENT_TEMPLATE\PROGRAMS\DEBUGMONITORCODE\SAY_PHONEME.C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                    3837   ; #include "say_phoneme.h"
                    3838   ; void talkphonemeAA (){ say_phoneme(phoneme_AA  ) ; };
                    3839   _talkphonemeAA:
00002362  4878 0018 3840          pea       24
00002366  4EB8 095A 3841          jsr       _say_phoneme
0000236A  584F      3842          addq.w    #4,A7
0000236C  4E75      3843          rts
                    3844   ; void talkphonemeAE (){ say_phoneme(phoneme_AE  ) ; };
                    3845   _talkphonemeAE:
0000236E  4878 001A 3846          pea       26
00002372  4EB8 095A 3847          jsr       _say_phoneme
00002376  584F      3848          addq.w    #4,A7
00002378  4E75      3849          rts
                    3850   ; void talkphonemeAO (){ say_phoneme(phoneme_AO  ) ; };
                    3851   _talkphonemeAO:
0000237A  4878 0017 3852          pea       23
0000237E  4EB8 095A 3853          jsr       _say_phoneme
00002382  584F      3854          addq.w    #4,A7
00002384  4E75      3855          rts
                    3856   ; void talkphonemeAR (){ say_phoneme(phoneme_AR  ) ; };
                    3857   _talkphonemeAR:
00002386  4878 003B 3858          pea       59
0000238A  4EB8 095A 3859          jsr       _say_phoneme
0000238E  584F      3860          addq.w    #4,A7
00002390  4E75      3861          rts
                    3862   ; void talkphonemeAW (){ say_phoneme(phoneme_AW  ) ; };
                    3863   _talkphonemeAW:
00002392  4878 0020 3864          pea       32
00002396  4EB8 095A 3865          jsr       _say_phoneme
0000239A  584F      3866          addq.w    #4,A7
0000239C  4E75      3867          rts
                    3868   ; void talkphonemeAX (){ say_phoneme(phoneme_AX  ) ; };
                    3869   _talkphonemeAX:
0000239E  4878 000F 3870          pea       15
000023A2  4EB8 095A 3871          jsr       _say_phoneme
000023A6  584F      3872          addq.w    #4,A7
000023A8  4E75      3873          rts
                    3874   ; void talkphonemeAY (){ say_phoneme(phoneme_AY  ) ; };
                    3875   _talkphonemeAY:
000023AA  4878 0006 3876          pea       6
000023AE  4EB8 095A 3877          jsr       _say_phoneme
000023B2  584F      3878          addq.w    #4,A7
000023B4  4E75      3879          rts
                    3880   ; void talkphonemeBB1(){ say_phoneme(phoneme_BB1 ) ; };
                    3881   _talkphonemeBB1:
000023B6  4878 001C 3882          pea       28
000023BA  4EB8 095A 3883          jsr       _say_phoneme
000023BE  584F      3884          addq.w    #4,A7
000023C0  4E75      3885          rts
                    3886   ; void talkphonemeBB2(){ say_phoneme(phoneme_BB2 ) ; };
                    3887   _talkphonemeBB2:
000023C2  4878 003F 3888          pea       63
000023C6  4EB8 095A 3889          jsr       _say_phoneme
000023CA  584F      3890          addq.w    #4,A7
000023CC  4E75      3891          rts
                    3892   ; void talkphonemeCH (){ say_phoneme(phoneme_CH  ) ; };
                    3893   _talkphonemeCH:
000023CE  4878 0032 3894          pea       50
000023D2  4EB8 095A 3895          jsr       _say_phoneme
000023D6  584F      3896          addq.w    #4,A7
000023D8  4E75      3897          rts
                    3898   ; void talkphonemeDD1(){ say_phoneme(phoneme_DD1 ) ; };
                    3899   _talkphonemeDD1:
000023DA  4878 0015 3900          pea       21
000023DE  4EB8 095A 3901          jsr       _say_phoneme
000023E2  584F      3902          addq.w    #4,A7
000023E4  4E75      3903          rts
                    3904   ; void talkphonemeDD2(){ say_phoneme(phoneme_DD2 ) ; };
                    3905   _talkphonemeDD2:
000023E6  4878 0021 3906          pea       33
000023EA  4EB8 095A 3907          jsr       _say_phoneme
000023EE  584F      3908          addq.w    #4,A7
000023F0  4E75      3909          rts
                    3910   ; void talkphonemeDH1(){ say_phoneme(phoneme_DH1 ) ; };
                    3911   _talkphonemeDH1:
000023F2  4878 0012 3912          pea       18
000023F6  4EB8 095A 3913          jsr       _say_phoneme
000023FA  584F      3914          addq.w    #4,A7
000023FC  4E75      3915          rts
                    3916   ; void talkphonemeDH2(){ say_phoneme(phoneme_DH2 ) ; };
                    3917   _talkphonemeDH2:
000023FE  4878 0036 3918          pea       54
00002402  4EB8 095A 3919          jsr       _say_phoneme
00002406  584F      3920          addq.w    #4,A7
00002408  4E75      3921          rts
                    3922   ; void talkphonemeEH (){ say_phoneme(phoneme_EH  ) ; };
                    3923   _talkphonemeEH:
0000240A  4878 0007 3924          pea       7
0000240E  4EB8 095A 3925          jsr       _say_phoneme
00002412  584F      3926          addq.w    #4,A7
00002414  4E75      3927          rts
                    3928   ; void talkphonemeEL (){ say_phoneme(phoneme_EL  ) ; };
                    3929   _talkphonemeEL:
00002416  4878 003E 3930          pea       62
0000241A  4EB8 095A 3931          jsr       _say_phoneme
0000241E  584F      3932          addq.w    #4,A7
00002420  4E75      3933          rts
                    3934   ; void talkphonemeER1(){ say_phoneme(phoneme_ER1 ) ; };
                    3935   _talkphonemeER1:
00002422  4878 0033 3936          pea       51
00002426  4EB8 095A 3937          jsr       _say_phoneme
0000242A  584F      3938          addq.w    #4,A7
0000242C  4E75      3939          rts
                    3940   ; void talkphonemeER2(){ say_phoneme(phoneme_ER2 ) ; };
                    3941   _talkphonemeER2:
0000242E  4878 0034 3942          pea       52
00002432  4EB8 095A 3943          jsr       _say_phoneme
00002436  584F      3944          addq.w    #4,A7
00002438  4E75      3945          rts
                    3946   ; void talkphonemeEY (){ say_phoneme(phoneme_EY  ) ; };
                    3947   _talkphonemeEY:
0000243A  4878 0014 3948          pea       20
0000243E  4EB8 095A 3949          jsr       _say_phoneme
00002442  584F      3950          addq.w    #4,A7
00002444  4E75      3951          rts
                    3952   ; void talkphonemeFF (){ say_phoneme(phoneme_FF  ) ; };
                    3953   _talkphonemeFF:
00002446  4878 0028 3954          pea       40
0000244A  4EB8 095A 3955          jsr       _say_phoneme
0000244E  584F      3956          addq.w    #4,A7
00002450  4E75      3957          rts
                    3958   ; void talkphonemeGG1(){ say_phoneme(phoneme_GG1 ) ; };
                    3959   _talkphonemeGG1:
00002452  4878 0024 3960          pea       36
00002456  4EB8 095A 3961          jsr       _say_phoneme
0000245A  584F      3962          addq.w    #4,A7
0000245C  4E75      3963          rts
                    3964   ; void talkphonemeGG2(){ say_phoneme(phoneme_GG2 ) ; };
                    3965   _talkphonemeGG2:
0000245E  4878 003D 3966          pea       61
00002462  4EB8 095A 3967          jsr       _say_phoneme
00002466  584F      3968          addq.w    #4,A7
00002468  4E75      3969          rts
                    3970   ; void talkphonemeGG3(){ say_phoneme(phoneme_GG3 ) ; };
                    3971   _talkphonemeGG3:
0000246A  4878 0022 3972          pea       34
0000246E  4EB8 095A 3973          jsr       _say_phoneme
00002472  584F      3974          addq.w    #4,A7
00002474  4E75      3975          rts
                    3976   ; void talkphonemeHH1(){ say_phoneme(phoneme_HH1 ) ; };
                    3977   _talkphonemeHH1:
00002476  4878 001B 3978          pea       27
0000247A  4EB8 095A 3979          jsr       _say_phoneme
0000247E  584F      3980          addq.w    #4,A7
00002480  4E75      3981          rts
                    3982   ; void talkphonemeHH2(){ say_phoneme(phoneme_HH2 ) ; };
                    3983   _talkphonemeHH2:
00002482  4878 0039 3984          pea       57
00002486  4EB8 095A 3985          jsr       _say_phoneme
0000248A  584F      3986          addq.w    #4,A7
0000248C  4E75      3987          rts
                    3988   ; void talkphonemeIH (){ say_phoneme(phoneme_IH  ) ; };
                    3989   _talkphonemeIH:
0000248E  4878 000C 3990          pea       12
00002492  4EB8 095A 3991          jsr       _say_phoneme
00002496  584F      3992          addq.w    #4,A7
00002498  4E75      3993          rts
                    3994   ; void talkphonemeIY (){ say_phoneme(phoneme_IY  ) ; };
                    3995   _talkphonemeIY:
0000249A  4878 0013 3996          pea       19
0000249E  4EB8 095A 3997          jsr       _say_phoneme
000024A2  584F      3998          addq.w    #4,A7
000024A4  4E75      3999          rts
                    4000   ; void talkphonemeJH (){ say_phoneme(phoneme_JH  ) ; };
                    4001   _talkphonemeJH:
000024A6  4878 000A 4002          pea       10
000024AA  4EB8 095A 4003          jsr       _say_phoneme
000024AE  584F      4004          addq.w    #4,A7
000024B0  4E75      4005          rts
                    4006   ; void talkphonemeKK1(){ say_phoneme(phoneme_KK1 ) ; };
                    4007   _talkphonemeKK1:
000024B2  4878 002A 4008          pea       42
000024B6  4EB8 095A 4009          jsr       _say_phoneme
000024BA  584F      4010          addq.w    #4,A7
000024BC  4E75      4011          rts
                    4012   ; void talkphonemeKK2(){ say_phoneme(phoneme_KK2 ) ; };
                    4013   _talkphonemeKK2:
000024BE  4878 0029 4014          pea       41
000024C2  4EB8 095A 4015          jsr       _say_phoneme
000024C6  584F      4016          addq.w    #4,A7
000024C8  4E75      4017          rts
                    4018   ; void talkphonemeKK3(){ say_phoneme(phoneme_KK3 ) ; };
                    4019   _talkphonemeKK3:
000024CA  4878 0008 4020          pea       8
000024CE  4EB8 095A 4021          jsr       _say_phoneme
000024D2  584F      4022          addq.w    #4,A7
000024D4  4E75      4023          rts
                    4024   ; void talkphonemeLL (){ say_phoneme(phoneme_LL  ) ; };
                    4025   _talkphonemeLL:
000024D6  4878 002D 4026          pea       45
000024DA  4EB8 095A 4027          jsr       _say_phoneme
000024DE  584F      4028          addq.w    #4,A7
000024E0  4E75      4029          rts
                    4030   ; void talkphonemeMM (){ say_phoneme(phoneme_MM  ) ; };
                    4031   _talkphonemeMM:
000024E2  4878 0010 4032          pea       16
000024E6  4EB8 095A 4033          jsr       _say_phoneme
000024EA  584F      4034          addq.w    #4,A7
000024EC  4E75      4035          rts
                    4036   ; void talkphonemeNG (){ say_phoneme(phoneme_NG  ) ; };
                    4037   _talkphonemeNG:
000024EE  4878 002C 4038          pea       44
000024F2  4EB8 095A 4039          jsr       _say_phoneme
000024F6  584F      4040          addq.w    #4,A7
000024F8  4E75      4041          rts
                    4042   ; void talkphonemeNN1(){ say_phoneme(phoneme_NN1 ) ; };
                    4043   _talkphonemeNN1:
000024FA  4878 000B 4044          pea       11
000024FE  4EB8 095A 4045          jsr       _say_phoneme
00002502  584F      4046          addq.w    #4,A7
00002504  4E75      4047          rts
                    4048   ; void talkphonemeNN2(){ say_phoneme(phoneme_NN2 ) ; };
                    4049   _talkphonemeNN2:
00002506  4878 0038 4050          pea       56
0000250A  4EB8 095A 4051          jsr       _say_phoneme
0000250E  584F      4052          addq.w    #4,A7
00002510  4E75      4053          rts
                    4054   ; void talkphonemeOR (){ say_phoneme(phoneme_OR  ) ; };
                    4055   _talkphonemeOR:
00002512  4878 003A 4056          pea       58
00002516  4EB8 095A 4057          jsr       _say_phoneme
0000251A  584F      4058          addq.w    #4,A7
0000251C  4E75      4059          rts
                    4060   ; void talkphonemeOW (){ say_phoneme(phoneme_OW  ) ; };
                    4061   _talkphonemeOW:
0000251E  4878 0035 4062          pea       53
00002522  4EB8 095A 4063          jsr       _say_phoneme
00002526  584F      4064          addq.w    #4,A7
00002528  4E75      4065          rts
                    4066   ; void talkphonemeOY (){ say_phoneme(phoneme_OY  ) ; };
                    4067   _talkphonemeOY:
0000252A  4878 0005 4068          pea       5
0000252E  4EB8 095A 4069          jsr       _say_phoneme
00002532  584F      4070          addq.w    #4,A7
00002534  4E75      4071          rts
                    4072   ; void talkphonemePP (){ say_phoneme(phoneme_PP  ) ; };
                    4073   _talkphonemePP:
00002536  4878 0009 4074          pea       9
0000253A  4EB8 095A 4075          jsr       _say_phoneme
0000253E  584F      4076          addq.w    #4,A7
00002540  4E75      4077          rts
                    4078   ; void talkphonemeRR1(){ say_phoneme(phoneme_RR1 ) ; };
                    4079   _talkphonemeRR1:
00002542  4878 000E 4080          pea       14
00002546  4EB8 095A 4081          jsr       _say_phoneme
0000254A  584F      4082          addq.w    #4,A7
0000254C  4E75      4083          rts
                    4084   ; void talkphonemeRR2(){ say_phoneme(phoneme_RR2 ) ; };
                    4085   _talkphonemeRR2:
0000254E  4878 0027 4086          pea       39
00002552  4EB8 095A 4087          jsr       _say_phoneme
00002556  584F      4088          addq.w    #4,A7
00002558  4E75      4089          rts
                    4090   ; void talkphonemeSH (){ say_phoneme(phoneme_SH  ) ; };
                    4091   _talkphonemeSH:
0000255A  4878 0025 4092          pea       37
0000255E  4EB8 095A 4093          jsr       _say_phoneme
00002562  584F      4094          addq.w    #4,A7
00002564  4E75      4095          rts
                    4096   ; void talkphonemeSS (){ say_phoneme(phoneme_SS  ) ; };
                    4097   _talkphonemeSS:
00002566  4878 0037 4098          pea       55
0000256A  4EB8 095A 4099          jsr       _say_phoneme
0000256E  584F      4100          addq.w    #4,A7
00002570  4E75      4101          rts
                    4102   ; void talkphonemeTH (){ say_phoneme(phoneme_TH  ) ; };
                    4103   _talkphonemeTH:
00002572  4878 001D 4104          pea       29
00002576  4EB8 095A 4105          jsr       _say_phoneme
0000257A  584F      4106          addq.w    #4,A7
0000257C  4E75      4107          rts
                    4108   ; void talkphonemeTT1(){ say_phoneme(phoneme_TT1 ) ; };
                    4109   _talkphonemeTT1:
0000257E  4878 0011 4110          pea       17
00002582  4EB8 095A 4111          jsr       _say_phoneme
00002586  584F      4112          addq.w    #4,A7
00002588  4E75      4113          rts
                    4114   ; void talkphonemeTT2(){ say_phoneme(phoneme_TT2 ) ; };
                    4115   _talkphonemeTT2:
0000258A  4878 000D 4116          pea       13
0000258E  4EB8 095A 4117          jsr       _say_phoneme
00002592  584F      4118          addq.w    #4,A7
00002594  4E75      4119          rts
                    4120   ; void talkphonemeUH (){ say_phoneme(phoneme_UH  ) ; };
                    4121   _talkphonemeUH:
00002596  4878 001E 4122          pea       30
0000259A  4EB8 095A 4123          jsr       _say_phoneme
0000259E  584F      4124          addq.w    #4,A7
000025A0  4E75      4125          rts
                    4126   ; void talkphonemeUW1(){ say_phoneme(phoneme_UW1 ) ; };
                    4127   _talkphonemeUW1:
000025A2  4878 0016 4128          pea       22
000025A6  4EB8 095A 4129          jsr       _say_phoneme
000025AA  584F      4130          addq.w    #4,A7
000025AC  4E75      4131          rts
                    4132   ; void talkphonemeUW2(){ say_phoneme(phoneme_UW2 ) ; };
                    4133   _talkphonemeUW2:
000025AE  4878 001F 4134          pea       31
000025B2  4EB8 095A 4135          jsr       _say_phoneme
000025B6  584F      4136          addq.w    #4,A7
000025B8  4E75      4137          rts
                    4138   ; void talkphonemeVV (){ say_phoneme(phoneme_VV  ) ; };
                    4139   _talkphonemeVV:
000025BA  4878 0023 4140          pea       35
000025BE  4EB8 095A 4141          jsr       _say_phoneme
000025C2  584F      4142          addq.w    #4,A7
000025C4  4E75      4143          rts
                    4144   ; void talkphonemeWH (){ say_phoneme(phoneme_WH  ) ; };
                    4145   _talkphonemeWH:
000025C6  4878 0030 4146          pea       48
000025CA  4EB8 095A 4147          jsr       _say_phoneme
000025CE  584F      4148          addq.w    #4,A7
000025D0  4E75      4149          rts
                    4150   ; void talkphonemeWW (){ say_phoneme(phoneme_WW  ) ; };
                    4151   _talkphonemeWW:
000025D2  4878 002E 4152          pea       46
000025D6  4EB8 095A 4153          jsr       _say_phoneme
000025DA  584F      4154          addq.w    #4,A7
000025DC  4E75      4155          rts
                    4156   ; void talkphonemeXR (){ say_phoneme(phoneme_XR  ) ; };
                    4157   _talkphonemeXR:
000025DE  4878 002F 4158          pea       47
000025E2  4EB8 095A 4159          jsr       _say_phoneme
000025E6  584F      4160          addq.w    #4,A7
000025E8  4E75      4161          rts
                    4162   ; void talkphonemeYR (){ say_phoneme(phoneme_YR  ) ; };
                    4163   _talkphonemeYR:
000025EA  4878 003C 4164          pea       60
000025EE  4EB8 095A 4165          jsr       _say_phoneme
000025F2  584F      4166          addq.w    #4,A7
000025F4  4E75      4167          rts
                    4168   ; void talkphonemeYY1(){ say_phoneme(phoneme_YY1 ) ; };
                    4169   _talkphonemeYY1:
000025F6  4878 0031 4170          pea       49
000025FA  4EB8 095A 4171          jsr       _say_phoneme
000025FE  584F      4172          addq.w    #4,A7
00002600  4E75      4173          rts
                    4174   ; void talkphonemeYY2(){ say_phoneme(phoneme_YY2 ) ; };
                    4175   _talkphonemeYY2:
00002602  4878 0019 4176          pea       25
00002606  4EB8 095A 4177          jsr       _say_phoneme
0000260A  584F      4178          addq.w    #4,A7
0000260C  4E75      4179          rts
                    4180   ; void talkphonemeZH (){ say_phoneme(phoneme_ZH  ) ; };
                    4181   _talkphonemeZH:
0000260E  4878 0026 4182          pea       38
00002612  4EB8 095A 4183          jsr       _say_phoneme
00002616  584F      4184          addq.w    #4,A7
00002618  4E75      4185          rts
                    4186   ; void talkphonemeZZ (){ say_phoneme(phoneme_ZZ  ) ; };
                    4187   _talkphonemeZZ:
0000261A  4878 002B 4188          pea       43
0000261E  4EB8 095A 4189          jsr       _say_phoneme
00002622  584F      4190          addq.w    #4,A7
00002624  4E75      4191          rts
                    4192   ; void talkphonemePA1(){ say_phoneme(phoneme_PA1 ) ; };
                    4193   _talkphonemePA1:
00002626  42A7      4194          clr.l     -(A7)
00002628  4EB8 095A 4195          jsr       _say_phoneme
0000262C  584F      4196          addq.w    #4,A7
0000262E  4E75      4197          rts
                    4198   ; void talkphonemePA2(){ say_phoneme(phoneme_PA2 ) ; };
                    4199   _talkphonemePA2:
00002630  4878 0001 4200          pea       1
00002634  4EB8 095A 4201          jsr       _say_phoneme
00002638  584F      4202          addq.w    #4,A7
0000263A  4E75      4203          rts
                    4204   ; void talkphonemePA3(){ say_phoneme(phoneme_PA3 ) ; };
                    4205   _talkphonemePA3:
0000263C  4878 0002 4206          pea       2
00002640  4EB8 095A 4207          jsr       _say_phoneme
00002644  584F      4208          addq.w    #4,A7
00002646  4E75      4209          rts
                    4210   ; void talkphonemePA4(){ say_phoneme(phoneme_PA4 ) ; };
                    4211   _talkphonemePA4:
00002648  4878 0003 4212          pea       3
0000264C  4EB8 095A 4213          jsr       _say_phoneme
00002650  584F      4214          addq.w    #4,A7
00002652  4E75      4215          rts
                    4216   ; void talkphonemePA5(){ say_phoneme(phoneme_PA5 ) ; };
                    4217   _talkphonemePA5:
00002654  4878 0004 4218          pea       4
00002658  4EB8 095A 4219          jsr       _say_phoneme
0000265C  584F      4220          addq.w    #4,A7
0000265E  4E75      4221          rts
                    4222   ; void talkword0() {
                    4223   _talkword0:
                    4224   ; talkphonemeZZ  ()   ;
00002660  4EB8 261A 4225          jsr       _talkphonemeZZ
                    4226   ; talkphonemeEH  ()   ;
00002664  4EB8 240A 4227          jsr       _talkphonemeEH
                    4228   ; talkphonemeRR2 ()   ;
00002668  4EB8 254E 4229          jsr       _talkphonemeRR2
                    4230   ; talkphonemeOW  ()   ;
0000266C  4EB8 251E 4231          jsr       _talkphonemeOW
00002670  4E75      4232          rts
                    4233   ; }
                    4234   ; void talkword1() {
                    4235   _talkword1:
                    4236   ; talkphonemeWW    ()  ;
00002672  4EB8 25D2 4237          jsr       _talkphonemeWW
                    4238   ; talkphonemeAO    ()  ;
00002676  4EB8 237A 4239          jsr       _talkphonemeAO
                    4240   ; talkphonemeNN1   ()  ;
0000267A  4EB8 24FA 4241          jsr       _talkphonemeNN1
0000267E  4E75      4242          rts
                    4243   ; }
                    4244   ; void talkword2() {
                    4245   _talkword2:
                    4246   ; talkphonemeTT2();
00002680  4EB8 258A 4247          jsr       _talkphonemeTT2
                    4248   ; talkphonemeUW2();
00002684  4EB8 25AE 4249          jsr       _talkphonemeUW2
00002688  4E75      4250          rts
                    4251   ; }
                    4252   ; void talkword3() {
                    4253   _talkword3:
                    4254   ; talkphonemeTH ();
0000268A  4EB8 2572 4255          jsr       _talkphonemeTH
                    4256   ; talkphonemeRR2();
0000268E  4EB8 254E 4257          jsr       _talkphonemeRR2
                    4258   ; talkphonemeIY ();
00002692  4EB8 249A 4259          jsr       _talkphonemeIY
00002696  4E75      4260          rts
                    4261   ; }
                    4262   ; void talkword4() {
                    4263   _talkword4:
                    4264   ; talkphonemeFF  ();
00002698  4EB8 2446 4265          jsr       _talkphonemeFF
                    4266   ; talkphonemeOR  ();
0000269C  4EB8 2512 4267          jsr       _talkphonemeOR
000026A0  4E75      4268          rts
                    4269   ; }
                    4270   ; void talkword5() {
                    4271   _talkword5:
                    4272   ; talkphonemeFF();
000026A2  4EB8 2446 4273          jsr       _talkphonemeFF
                    4274   ; talkphonemeAY();
000026A6  4EB8 23AA 4275          jsr       _talkphonemeAY
                    4276   ; talkphonemeVV();
000026AA  4EB8 25BA 4277          jsr       _talkphonemeVV
000026AE  4E75      4278          rts
                    4279   ; }
                    4280   ; void talkword6() {
                    4281   _talkword6:
000026B0  2F0A      4282          move.l    A2,-(A7)
000026B2  45F8 2566 4283          lea       _talkphonemeSS.L,A2
                    4284   ; talkphonemeSS  ();
000026B6  4E92      4285          jsr       (A2)
                    4286   ; talkphonemeIH  ();
000026B8  4EB8 248E 4287          jsr       _talkphonemeIH
                    4288   ; talkphonemeKK2 ();
000026BC  4EB8 24BE 4289          jsr       _talkphonemeKK2
                    4290   ; talkphonemeSS  ();
000026C0  4E92      4291          jsr       (A2)
                    4292   ; talkphonemeSS  ();
000026C2  4E92      4293          jsr       (A2)
000026C4  245F      4294          move.l    (A7)+,A2
000026C6  4E75      4295          rts
                    4296   ; }
                    4297   ; void talkword7() {
                    4298   _talkword7:
                    4299   ; talkphonemeSS    ();
000026C8  4EB8 2566 4300          jsr       _talkphonemeSS
                    4301   ; talkphonemeEH    ();
000026CC  4EB8 240A 4302          jsr       _talkphonemeEH
                    4303   ; talkphonemeVV    ();
000026D0  4EB8 25BA 4304          jsr       _talkphonemeVV
                    4305   ; talkphonemeAX    ();
000026D4  4EB8 239E 4306          jsr       _talkphonemeAX
                    4307   ; talkphonemeNN1   ();
000026D8  4EB8 24FA 4308          jsr       _talkphonemeNN1
000026DC  4E75      4309          rts
                    4310   ; }
                    4311   ; void talkword8() {
                    4312   _talkword8:
                    4313   ; talkphonemeEY  ();
000026DE  4EB8 243A 4314          jsr       _talkphonemeEY
                    4315   ; talkphonemeTT1 ();
000026E2  4EB8 257E 4316          jsr       _talkphonemeTT1
000026E6  4E75      4317          rts
                    4318   ; }
                    4319   ; void talkword9() {
                    4320   _talkword9:
                    4321   ; talkphonemeNN2();
000026E8  4EB8 2506 4322          jsr       _talkphonemeNN2
                    4323   ; talkphonemeAY ();
000026EC  4EB8 23AA 4324          jsr       _talkphonemeAY
                    4325   ; talkphonemeNN1();
000026F0  4EB8 24FA 4326          jsr       _talkphonemeNN1
000026F4  4E75      4327          rts
                    4328   ; }
                    4329   ; void talkword10() {
                    4330   _talkword10:
                    4331   ; talkphonemeTT2 ();
000026F6  4EB8 258A 4332          jsr       _talkphonemeTT2
                    4333   ; talkphonemeEH  ();
000026FA  4EB8 240A 4334          jsr       _talkphonemeEH
                    4335   ; talkphonemeNN1 ();
000026FE  4EB8 24FA 4336          jsr       _talkphonemeNN1
00002702  4E75      4337          rts
                    4338   ; }
                    4339   ; void talkword11() {
                    4340   _talkword11:
                    4341   ; talkphonemeIH ();
00002704  4EB8 248E 4342          jsr       _talkphonemeIH
                    4343   ; talkphonemeLL ();
00002708  4EB8 24D6 4344          jsr       _talkphonemeLL
                    4345   ; talkphonemeEH ();
0000270C  4EB8 240A 4346          jsr       _talkphonemeEH
                    4347   ; talkphonemeVV ();
00002710  4EB8 25BA 4348          jsr       _talkphonemeVV
                    4349   ; talkphonemeEH ();
00002714  4EB8 240A 4350          jsr       _talkphonemeEH
                    4351   ; talkphonemeNN1();
00002718  4EB8 24FA 4352          jsr       _talkphonemeNN1
0000271C  4E75      4353          rts
                    4354   ; }
                    4355   ; void talkword12() {
                    4356   _talkword12:
                    4357   ; talkphonemeTT2 ();
0000271E  4EB8 258A 4358          jsr       _talkphonemeTT2
                    4359   ; talkphonemeWW  ();
00002722  4EB8 25D2 4360          jsr       _talkphonemeWW
                    4361   ; talkphonemeEH  ();
00002726  4EB8 240A 4362          jsr       _talkphonemeEH
                    4363   ; talkphonemeEL  ();
0000272A  4EB8 2416 4364          jsr       _talkphonemeEL
                    4365   ; talkphonemeVV  ();
0000272E  4EB8 25BA 4366          jsr       _talkphonemeVV
00002732  4E75      4367          rts
                    4368   ; }
                    4369   ; void talkword13() {
                    4370   _talkword13:
                    4371   ; talkphonemeTH  ();
00002734  4EB8 2572 4372          jsr       _talkphonemeTH
                    4373   ; talkphonemeER2 ();
00002738  4EB8 242E 4374          jsr       _talkphonemeER2
0000273C  4E75      4375          rts
                    4376   ; }
                    4377   ; void talkwordteen() {
                    4378   _talkwordteen:
                    4379   ; talkphonemeTT2   ();
0000273E  4EB8 258A 4380          jsr       _talkphonemeTT2
                    4381   ; talkphonemeIY    ();
00002742  4EB8 249A 4382          jsr       _talkphonemeIY
                    4383   ; talkphonemeNN1   ();
00002746  4EB8 24FA 4384          jsr       _talkphonemeNN1
0000274A  4E75      4385          rts
                    4386   ; }
                    4387   ; void talkword14() {
                    4388   _talkword14:
                    4389   ; talkword4();
0000274C  4EB8 2698 4390          jsr       _talkword4
                    4391   ; talkwordteen();
00002750  4EB8 273E 4392          jsr       _talkwordteen
00002754  4E75      4393          rts
                    4394   ; }
                    4395   ; void talkword15() {
                    4396   _talkword15:
                    4397   ; talkphonemeFF ();
00002756  4EB8 2446 4398          jsr       _talkphonemeFF
                    4399   ; talkphonemeIH ();
0000275A  4EB8 248E 4400          jsr       _talkphonemeIH
                    4401   ; talkphonemeFF ();
0000275E  4EB8 2446 4402          jsr       _talkphonemeFF
                    4403   ; talkwordteen  ();
00002762  4EB8 273E 4404          jsr       _talkwordteen
00002766  4E75      4405          rts
                    4406   ; }
                    4407   ; void talkword16() {
                    4408   _talkword16:
                    4409   ; talkword6    ();
00002768  4EB8 26B0 4410          jsr       _talkword6
                    4411   ; talkwordteen ();
0000276C  4EB8 273E 4412          jsr       _talkwordteen
00002770  4E75      4413          rts
                    4414   ; }
                    4415   ; void talkword17() {
                    4416   _talkword17:
                    4417   ; talkword7      ();
00002772  4EB8 26C8 4418          jsr       _talkword7
                    4419   ; talkwordteen   ();
00002776  4EB8 273E 4420          jsr       _talkwordteen
0000277A  4E75      4421          rts
                    4422   ; }
                    4423   ; void talkword18() {
                    4424   _talkword18:
                    4425   ; talkword8    ();
0000277C  4EB8 26DE 4426          jsr       _talkword8
                    4427   ; talkwordteen ();
00002780  4EB8 273E 4428          jsr       _talkwordteen
00002784  4E75      4429          rts
                    4430   ; }
                    4431   ; void talkword19() {
                    4432   _talkword19:
                    4433   ; talkword9     ();
00002786  4EB8 26E8 4434          jsr       _talkword9
                    4435   ; talkwordteen  ();
0000278A  4EB8 273E 4436          jsr       _talkwordteen
0000278E  4E75      4437          rts
                    4438   ; }
                    4439   ; void talkword20() {
                    4440   _talkword20:
                    4441   ; talkphonemeTT2 ();
00002790  4EB8 258A 4442          jsr       _talkphonemeTT2
                    4443   ; talkphonemeWW  ();
00002794  4EB8 25D2 4444          jsr       _talkphonemeWW
                    4445   ; talkphonemeEH  ();
00002798  4EB8 240A 4446          jsr       _talkphonemeEH
                    4447   ; talkphonemeNN1 ();
0000279C  4EB8 24FA 4448          jsr       _talkphonemeNN1
000027A0  4E75      4449          rts
                    4450   ; }
                    4451   ; void talkwordty() {
                    4452   _talkwordty:
                    4453   ; talkphonemeTT2 ();
000027A2  4EB8 258A 4454          jsr       _talkphonemeTT2
                    4455   ; talkphonemeIY  ();
000027A6  4EB8 249A 4456          jsr       _talkphonemeIY
000027AA  4E75      4457          rts
                    4458   ; }
                    4459   ; void talkword30() {
                    4460   _talkword30:
                    4461   ; talkphonemeTH  ();
000027AC  4EB8 2572 4462          jsr       _talkphonemeTH
                    4463   ; talkphonemeER1 ();
000027B0  4EB8 2422 4464          jsr       _talkphonemeER1
                    4465   ; talkwordty     ();
000027B4  4EB8 27A2 4466          jsr       _talkwordty
000027B8  4E75      4467          rts
                    4468   ; }
                    4469   ; void talkword40() {
                    4470   _talkword40:
                    4471   ; talkword4  ();
000027BA  4EB8 2698 4472          jsr       _talkword4
                    4473   ; talkwordty ();
000027BE  4EB8 27A2 4474          jsr       _talkwordty
000027C2  4E75      4475          rts
                    4476   ; }
                    4477   ; void talkword50() {
                    4478   _talkword50:
                    4479   ; talkphonemeFF ();
000027C4  4EB8 2446 4480          jsr       _talkphonemeFF
                    4481   ; talkphonemeIH ();
000027C8  4EB8 248E 4482          jsr       _talkphonemeIH
                    4483   ; talkphonemeFF ();
000027CC  4EB8 2446 4484          jsr       _talkphonemeFF
                    4485   ; talkwordty    ();
000027D0  4EB8 27A2 4486          jsr       _talkwordty
000027D4  4E75      4487          rts
                    4488   ; }
                    4489   ; void talkword60() {
                    4490   _talkword60:
                    4491   ; talkword6  ();
000027D6  4EB8 26B0 4492          jsr       _talkword6
                    4493   ; talkwordty ();
000027DA  4EB8 27A2 4494          jsr       _talkwordty
000027DE  4E75      4495          rts
                    4496   ; }
                    4497   ; void talkword70() {
                    4498   _talkword70:
                    4499   ; talkword7  ();
000027E0  4EB8 26C8 4500          jsr       _talkword7
                    4501   ; talkwordty ();
000027E4  4EB8 27A2 4502          jsr       _talkwordty
000027E8  4E75      4503          rts
                    4504   ; }
                    4505   ; void talkword80() {
                    4506   _talkword80:
                    4507   ; talkword8   ();
000027EA  4EB8 26DE 4508          jsr       _talkword8
                    4509   ; talkwordty  ();
000027EE  4EB8 27A2 4510          jsr       _talkwordty
000027F2  4E75      4511          rts
                    4512   ; }
                    4513   ; void talkword90() {
                    4514   _talkword90:
                    4515   ; talkword9   ();
000027F4  4EB8 26E8 4516          jsr       _talkword9
                    4517   ; talkwordty  ();
000027F8  4EB8 27A2 4518          jsr       _talkwordty
000027FC  4E75      4519          rts
                    4520   ; }
                    4521   ; void talkwordhundred() {
                    4522   _talkwordhundred:
                    4523   ; talkphonemeHH2  ();
000027FE  4EB8 2482 4524          jsr       _talkphonemeHH2
                    4525   ; talkphonemeAX   ();
00002802  4EB8 239E 4526          jsr       _talkphonemeAX
                    4527   ; talkphonemeNN1  ();
00002806  4EB8 24FA 4528          jsr       _talkphonemeNN1
                    4529   ; talkphonemeDD2  ();
0000280A  4EB8 23E6 4530          jsr       _talkphonemeDD2
                    4531   ; talkphonemeRR2  ();
0000280E  4EB8 254E 4532          jsr       _talkphonemeRR2
                    4533   ; talkphonemeDD1  ();
00002812  4EB8 23DA 4534          jsr       _talkphonemeDD1
00002816  4E75      4535          rts
                    4536   ; }
                    4537   ; void talkworddepth() {
                    4538   _talkworddepth:
                    4539   ; talkphonemeDD2   ();
00002818  4EB8 23E6 4540          jsr       _talkphonemeDD2
                    4541   ; talkphonemeEH    ();
0000281C  4EB8 240A 4542          jsr       _talkphonemeEH
                    4543   ; talkphonemeEH    ();
00002820  4EB8 240A 4544          jsr       _talkphonemeEH
                    4545   ; talkphonemePP    ();
00002824  4EB8 2536 4546          jsr       _talkphonemePP
                    4547   ; talkphonemeTH    ();
00002828  4EB8 2572 4548          jsr       _talkphonemeTH
                    4549   ; endword          ();
0000282C  4EB9 0000 4550          jsr       _endword
00002830  2A08      
00002832  4E75      4551          rts
                    4552   ; }
                    4553   ; void talkwordpoint() {
                    4554   _talkwordpoint:
                    4555   ; talkphonemePP   ();
00002834  4EB8 2536 4556          jsr       _talkphonemePP
                    4557   ; talkphonemeOY   ();
00002838  4EB8 252A 4558          jsr       _talkphonemeOY
                    4559   ; talkphonemeTT1  ();
0000283C  4EB8 257E 4560          jsr       _talkphonemeTT1
                    4561   ; endword         ();
00002840  4EB9 0000 4562          jsr       _endword
00002844  2A08      
00002846  4E75      4563          rts
                    4564   ; }
                    4565   ; void talkwordanchor() {
                    4566   _talkwordanchor:
                    4567   ; talkphonemeEY   ();
00002848  4EB8 243A 4568          jsr       _talkphonemeEY
                    4569   ; talkphonemeKK3  ();
0000284C  4EB8 24CA 4570          jsr       _talkphonemeKK3
                    4571   ; talkphonemeAE   ();
00002850  4EB8 236E 4572          jsr       _talkphonemeAE
                    4573   ; endword         ();
00002854  4EB9 0000 4574          jsr       _endword
00002858  2A08      
0000285A  4E75      4575          rts
                    4576   ; }
                    4577   ; void talkwordalarm() {
                    4578   _talkwordalarm:
                    4579   ; talkphonemeAE  ();
0000285C  4EB8 236E 4580          jsr       _talkphonemeAE
                    4581   ; talkphonemeLL  ();
00002860  4EB8 24D6 4582          jsr       _talkphonemeLL
                    4583   ; talkphonemeAR  ();
00002864  4EB8 2386 4584          jsr       _talkphonemeAR
                    4585   ; talkphonemeMM  ();
00002868  4EB8 24E2 4586          jsr       _talkphonemeMM
                    4587   ; endword        ();
0000286C  4EB9 0000 4588          jsr       _endword
00002870  2A08      
00002872  4E75      4589          rts
                    4590   ; }
                    4591   ; void talkwordon() {
                    4592   _talkwordon:
                    4593   ; talkphonemeAO ();
00002874  4EB8 237A 4594          jsr       _talkphonemeAO
                    4595   ; talkphonemeNG ();
00002878  4EB8 24EE 4596          jsr       _talkphonemeNG
                    4597   ; endword       ();
0000287C  4EB9 0000 4598          jsr       _endword
00002880  2A08      
00002882  4E75      4599          rts
                    4600   ; }
                    4601   ; void talkwordoff() {
                    4602   _talkwordoff:
                    4603   ; talkphonemeAO  ();
00002884  4EB8 237A 4604          jsr       _talkphonemeAO
                    4605   ; talkphonemeFF  ();
00002888  4EB8 2446 4606          jsr       _talkphonemeFF
                    4607   ; talkphonemeFF  ();
0000288C  4EB8 2446 4608          jsr       _talkphonemeFF
                    4609   ; endword        ();
00002890  4EB9 0000 4610          jsr       _endword
00002894  2A08      
00002896  4E75      4611          rts
                    4612   ; }
                    4613   ; void talkwordshallow() {
                    4614   _talkwordshallow:
                    4615   ; talkphonemeSH ();
00002898  4EB8 255A 4616          jsr       _talkphonemeSH
                    4617   ; talkphonemeAE ();
0000289C  4EB8 236E 4618          jsr       _talkphonemeAE
                    4619   ; talkphonemeLL ();
000028A0  4EB8 24D6 4620          jsr       _talkphonemeLL
                    4621   ; talkphonemeOW ();
000028A4  4EB8 251E 4622          jsr       _talkphonemeOW
                    4623   ; endword       ();
000028A8  4EB9 0000 4624          jsr       _endword
000028AC  2A08      
000028AE  4E75      4625          rts
                    4626   ; }
                    4627   ; void talkwordand() {
                    4628   _talkwordand:
                    4629   ; talkphonemeIH    ();
000028B0  4EB8 248E 4630          jsr       _talkphonemeIH
                    4631   ; talkphonemeIH    ();
000028B4  4EB8 248E 4632          jsr       _talkphonemeIH
                    4633   ; talkphonemeNN1   ();
000028B8  4EB8 24FA 4634          jsr       _talkphonemeNN1
                    4635   ; talkphonemeDD2   ();
000028BC  4EB8 23E6 4636          jsr       _talkphonemeDD2
                    4637   ; endword          ();
000028C0  4EB9 0000 4638          jsr       _endword
000028C4  2A08      
000028C6  4E75      4639          rts
                    4640   ; }
                    4641   ; void talkwordwatch() {
                    4642   _talkwordwatch:
                    4643   ; talkphonemeWW  ();
000028C8  4EB8 25D2 4644          jsr       _talkphonemeWW
                    4645   ; talkphonemeAO  ();
000028CC  4EB8 237A 4646          jsr       _talkphonemeAO
                    4647   ; talkphonemeTT1 ();
000028D0  4EB8 257E 4648          jsr       _talkphonemeTT1
                    4649   ; talkphonemeCH  ();
000028D4  4EB8 23CE 4650          jsr       _talkphonemeCH
                    4651   ; endword        ();
000028D8  4EB9 0000 4652          jsr       _endword
000028DC  2A08      
000028DE  4E75      4653          rts
                    4654   ; }
                    4655   ; void talkwordlimit() {
                    4656   _talkwordlimit:
                    4657   ; talkphonemeLL   ();
000028E0  4EB8 24D6 4658          jsr       _talkphonemeLL
                    4659   ; talkphonemeIH   ();
000028E4  4EB8 248E 4660          jsr       _talkphonemeIH
                    4661   ; talkphonemeMM   ();
000028E8  4EB8 24E2 4662          jsr       _talkphonemeMM
                    4663   ; talkphonemeIH   ();
000028EC  4EB8 248E 4664          jsr       _talkphonemeIH
                    4665   ; talkphonemeTT1  ();
000028F0  4EB8 257E 4666          jsr       _talkphonemeTT1
                    4667   ; endword         ();
000028F4  4EB9 0000 4668          jsr       _endword
000028F8  2A08      
000028FA  4E75      4669          rts
                    4670   ; }
                    4671   ; void talkwordset()  {
                    4672   _talkwordset:
                    4673   ; talkphonemeSS    ();
000028FC  4EB8 2566 4674          jsr       _talkphonemeSS
                    4675   ; talkphonemeSS    ();
00002900  4EB8 2566 4676          jsr       _talkphonemeSS
                    4677   ; talkphonemeEH    ();
00002904  4EB8 240A 4678          jsr       _talkphonemeEH
                    4679   ; talkphonemeTT2   ();
00002908  4EB8 258A 4680          jsr       _talkphonemeTT2
                    4681   ; endword          ();
0000290C  4EB9 0000 4682          jsr       _endword
00002910  2A08      
00002912  4E75      4683          rts
                    4684   ; }
                    4685   ; void talkwordheading() {
                    4686   _talkwordheading:
                    4687   ; talkphonemeHH1   ();
00002914  4EB8 2476 4688          jsr       _talkphonemeHH1
                    4689   ; talkphonemeEH    ();
00002918  4EB8 240A 4690          jsr       _talkphonemeEH
                    4691   ; talkphonemeDD2   ();
0000291C  4EB8 23E6 4692          jsr       _talkphonemeDD2
                    4693   ; talkphonemeIH    ();
00002920  4EB8 248E 4694          jsr       _talkphonemeIH
                    4695   ; talkphonemeNG    ();
00002924  4EB8 24EE 4696          jsr       _talkphonemeNG
                    4697   ; endword          ();
00002928  4EB9 0000 4698          jsr       _endword
0000292C  2A08      
0000292E  4E75      4699          rts
                    4700   ; }
                    4701   ; void talkwordgps() {
                    4702   _talkwordgps:
                    4703   ; talkphonemeJH  ();
00002930  4EB8 24A6 4704          jsr       _talkphonemeJH
                    4705   ; talkphonemeIY  ();
00002934  4EB8 249A 4706          jsr       _talkphonemeIY
                    4707   ; talkphonemePP  ();
00002938  4EB8 2536 4708          jsr       _talkphonemePP
                    4709   ; talkphonemeIY  ();
0000293C  4EB8 249A 4710          jsr       _talkphonemeIY
                    4711   ; talkphonemeEH  ();
00002940  4EB8 240A 4712          jsr       _talkphonemeEH
                    4713   ; talkphonemeSS  ();
00002944  4EB8 2566 4714          jsr       _talkphonemeSS
                    4715   ; talkphonemeSS  ();
00002948  4EB8 2566 4716          jsr       _talkphonemeSS
                    4717   ; endword        ();
0000294C  4EB9 0000 4718          jsr       _endword
00002950  2A08      
00002952  4E75      4719          rts
                    4720   ; }
                    4721   ; void talkwordno() {
                    4722   _talkwordno:
                    4723   ; talkphonemeNN2  ();
00002954  4EB8 2506 4724          jsr       _talkphonemeNN2
                    4725   ; talkphonemeOW   ();
00002958  4EB8 251E 4726          jsr       _talkphonemeOW
                    4727   ; endword         ();
0000295C  4EB9 0000 4728          jsr       _endword
00002960  2A08      
00002962  4E75      4729          rts
                    4730   ; }
                    4731   ; void talkworddata() {
                    4732   _talkworddata:
                    4733   ; talkphonemeDD2   ();
00002964  4EB8 23E6 4734          jsr       _talkphonemeDD2
                    4735   ; talkphonemeEY    ();
00002968  4EB8 243A 4736          jsr       _talkphonemeEY
                    4737   ; talkphonemeTT2   ();
0000296C  4EB8 258A 4738          jsr       _talkphonemeTT2
                    4739   ; talkphonemeAX    ();
00002970  4EB8 239E 4740          jsr       _talkphonemeAX
                    4741   ; endword          ();
00002974  4EB9 0000 4742          jsr       _endword
00002978  2A08      
0000297A  4E75      4743          rts
                    4744   ; }
                    4745   ; void talkwordnorth() {
                    4746   _talkwordnorth:
                    4747   ; talkphonemeNN2 ();
0000297C  4EB8 2506 4748          jsr       _talkphonemeNN2
                    4749   ; talkphonemeOR  ();
00002980  4EB8 2512 4750          jsr       _talkphonemeOR
                    4751   ; talkphonemeHH1 ();
00002984  4EB8 2476 4752          jsr       _talkphonemeHH1
                    4753   ; endword        ();
00002988  4EB9 0000 4754          jsr       _endword
0000298C  2A08      
0000298E  4E75      4755          rts
                    4756   ; }
                    4757   ; void talkwordsouth() {
                    4758   _talkwordsouth:
                    4759   ; talkphonemeSS();
00002990  4EB8 2566 4760          jsr       _talkphonemeSS
                    4761   ; talkphonemeSS();
00002994  4EB8 2566 4762          jsr       _talkphonemeSS
                    4763   ; talkphonemeAW();
00002998  4EB8 2392 4764          jsr       _talkphonemeAW
                    4765   ; talkphonemeTH();
0000299C  4EB8 2572 4766          jsr       _talkphonemeTH
                    4767   ; talkphonemeTH();
000029A0  4EB8 2572 4768          jsr       _talkphonemeTH
000029A4  4E75      4769          rts
                    4770   ; }
                    4771   ; void talkwordeast() {
                    4772   _talkwordeast:
                    4773   ; talkphonemeIY   ();
000029A6  4EB8 249A 4774          jsr       _talkphonemeIY
                    4775   ; talkphonemeSS   ();
000029AA  4EB8 2566 4776          jsr       _talkphonemeSS
                    4777   ; talkphonemeSS   ();
000029AE  4EB8 2566 4778          jsr       _talkphonemeSS
                    4779   ; talkphonemeTT2  ();
000029B2  4EB8 258A 4780          jsr       _talkphonemeTT2
                    4781   ; endword         ();
000029B6  4EB9 0000 4782          jsr       _endword
000029BA  2A08      
000029BC  4E75      4783          rts
                    4784   ; }
                    4785   ; void talkwordwest() {
                    4786   _talkwordwest:
                    4787   ; talkphonemeWW     ();
000029BE  4EB8 25D2 4788          jsr       _talkphonemeWW
                    4789   ; talkphonemeEH     ();
000029C2  4EB8 240A 4790          jsr       _talkphonemeEH
                    4791   ; talkphonemeSS     ();
000029C6  4EB8 2566 4792          jsr       _talkphonemeSS
                    4793   ; talkphonemeSS     ();
000029CA  4EB8 2566 4794          jsr       _talkphonemeSS
                    4795   ; talkphonemeTT2    ();
000029CE  4EB8 258A 4796          jsr       _talkphonemeTT2
                    4797   ; endword           ();
000029D2  4EB9 0000 4798          jsr       _endword
000029D6  2A08      
000029D8  4E75      4799          rts
                    4800   ; }
                    4801   ; void talkwordposition() {
                    4802   _talkwordposition:
                    4803   ; talkphonemePP   ();
000029DA  4EB8 2536 4804          jsr       _talkphonemePP
                    4805   ; talkphonemeIH   ();
000029DE  4EB8 248E 4806          jsr       _talkphonemeIH
                    4807   ; talkphonemeZZ   ();
000029E2  4EB8 261A 4808          jsr       _talkphonemeZZ
                    4809   ; talkphonemeIH   ();
000029E6  4EB8 248E 4810          jsr       _talkphonemeIH
                    4811   ; talkphonemeSH   ();
000029EA  4EB8 255A 4812          jsr       _talkphonemeSH
                    4813   ; talkphonemeNN1  ();
000029EE  4EB8 24FA 4814          jsr       _talkphonemeNN1
                    4815   ; endword         ();
000029F2  4EB9 0000 4816          jsr       _endword
000029F6  2A08      
000029F8  4E75      4817          rts
                    4818   ; }
                    4819   ; void talkphonemePA6() {
                    4820   _talkphonemePA6:
                    4821   ; talkphonemePA5();
000029FA  4EB8 2654 4822          jsr       _talkphonemePA5
                    4823   ; talkphonemePA5();
000029FE  4EB8 2654 4824          jsr       _talkphonemePA5
                    4825   ; talkphonemePA4();
00002A02  4EB8 2648 4826          jsr       _talkphonemePA4
00002A06  4E75      4827          rts
                    4828   ; }
                    4829   ; void endword() {
                    4830   _endword:
                    4831   ; talkphonemePA5();
00002A08  4EB8 2654 4832          jsr       _talkphonemePA5
                    4833   ; talkphonemePA4();
00002A0C  4EB8 2648 4834          jsr       _talkphonemePA4
00002A10  4E75      4835          rts
                    4836   ; }
                    4837   ; C:\USERS\10054\ONEDRIVE\CPEN 412 FINAL PROJECT\FINAL_PROJECT_2023_SEM2_STUDENT_TEMPLATE\FINAL_PROJECT_2023_SEM2_STUDENT_TEMPLATE\PROGRAMS\DEBUGMONITORCODE\TETRIS.C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                    4838   ; #include <stdio.h>
                    4839   ; #include <stdlib.h>
                    4840   ; #include <limits.h>
                    4841   ; #include "tetris.h"
                    4842   ; #include "say_phoneme.h"
                    4843   ; #define Timer1Data *(volatile unsigned char *)(0x00400030)
                    4844   ; #define Timer1Control *(volatile unsigned char *)(0x00400032)
                    4845   ; #define Timer1Status *(volatile unsigned char *)(0x00400032)
                    4846   ; #define octlAddress1 *(char *)(0xFF030001)
                    4847   ; #define octlAddress *(char *)(0xFF030000)
                    4848   ; char Table[TETRIS_ROWS][TETRIS_COLS];
                    4849   ; char TableColor[TETRIS_ROWS + 1][TETRIS_COLS];
                    4850   ; char currentColor;
                    4851   ; int tetris_score;
                    4852   ; char GameOn;
                    4853   ; int tetris_timer;
                    4854   ; char octl;
                    4855   ; typedef struct
                    4856   ; {
                    4857   ; char array[MAX_SHAPE_SIZE][MAX_SHAPE_SIZE];
                    4858   ; int width, row, col;
                    4859   ; } Shape;
                    4860   ; Shape current;
                    4861   ; Shape ShapesArray[NUM_SHAPES];
                    4862   ; struct
                    4863   ; {
                    4864   ; int speed;
                    4865   ; int speed_increase;
                    4866   ; } Tetris_Speed;
                    4867   ; int printw_x; // hint: could be a useful variable
                    4868   ; int printw_y; // hint: could be a useful variable
                    4869   ; char cx, cy;
                    4870   ; int timer_count;
                    4871   ; /* Compute x mod y using binary long division. */
                    4872   ; int mod_bld(int x, int y)
                    4873   ; {
                    4874   _mod_bld:
00002A12  4E56 0000 4875          link      A6,#0
00002A16  48E7 3000 4876          movem.l   D2/D3,-(A7)
                    4877   ; int modulus = x, divisor = y;
00002A1A  262E 0008 4878          move.l    8(A6),D3
00002A1E  242E 000C 4879          move.l    12(A6),D2
                    4880   ; while (divisor <= modulus && divisor <= 16384)
                    4881   mod_bld_1:
00002A22  B483      4882          cmp.l     D3,D2
00002A24  6E0C      4883          bgt.s     mod_bld_3
00002A26  0C82 0000 4884          cmp.l     #16384,D2
00002A2A  4000      
00002A2C  6E04      4885          bgt.s     mod_bld_3
                    4886   ; divisor <<= 1;
00002A2E  E382      4887          asl.l     #1,D2
00002A30  60F0      4888          bra       mod_bld_1
                    4889   mod_bld_3:
                    4890   ; while (modulus >= y)
                    4891   mod_bld_4:
00002A32  B6AE 000C 4892          cmp.l     12(A6),D3
00002A36  6D0C      4893          blt.s     mod_bld_6
                    4894   ; {
                    4895   ; while (divisor > modulus)
                    4896   mod_bld_7:
00002A38  B483      4897          cmp.l     D3,D2
00002A3A  6F04      4898          ble.s     mod_bld_9
                    4899   ; divisor >>= 1;
00002A3C  E282      4900          asr.l     #1,D2
00002A3E  60F8      4901          bra       mod_bld_7
                    4902   mod_bld_9:
                    4903   ; modulus -= divisor;
00002A40  9682      4904          sub.l     D2,D3
00002A42  60EE      4905          bra       mod_bld_4
                    4906   mod_bld_6:
                    4907   ; }
                    4908   ; return modulus;
00002A44  2003      4909          move.l    D3,D0
00002A46  4CDF 000C 4910          movem.l   (A7)+,D2/D3
00002A4A  4E5E      4911          unlk      A6
00002A4C  4E75      4912          rts
                    4913   ; }
                    4914   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    4915   ; //
                    4916   ; //
                    4917   ; //                        functions to implement
                    4918   ; //
                    4919   ; //
                    4920   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    4921   ; void Timer_ISR()
                    4922   ; {
                    4923   _Timer_ISR:
                    4924   ; ++timer_count;
00002A4E  52B9 0803 4925          addq.l    #1,_timer_count.L
00002A52  08B0      
                    4926   ; // printf("Timer ISR, %d\n", timer_count);
                    4927   ; Timer1Control = 3;
00002A54  13FC 0003 4928          move.b    #3,4194354
00002A58  0040 0032 
00002A5C  4E75      4929          rts
                    4930   ; }
                    4931   ; // #define StartOfExceptionVectorTable 0x08030000
                    4932   ; // void InstallExceptionHandler(void (*function_ptr)(), int level)
                    4933   ; // {
                    4934   ; //     volatile long int *RamVectorAddress = (volatile long int *)(StartOfExceptionVectorTable); // pointer to the Ram based interrupt vector table created in Cstart in debug monitor
                    4935   ; //     RamVectorAddress[level] = (long int *)(function_ptr); // install the address of our function into the exception table
                    4936   ; // }
                    4937   ; void Wait1ms_here(void)
                    4938   ; {
                    4939   _Wait1ms_here:
00002A5E  2F02      4940          move.l    D2,-(A7)
                    4941   ; int what;
                    4942   ; for (what = 0; what < 1000; what++)
00002A60  4282      4943          clr.l     D2
                    4944   Wait1ms_here_1:
00002A62  0C82 0000 4945          cmp.l     #1000,D2
00002A66  03E8      
00002A68  6C04      4946          bge.s     Wait1ms_here_3
00002A6A  5282      4947          addq.l    #1,D2
00002A6C  60F4      4948          bra       Wait1ms_here_1
                    4949   Wait1ms_here_3:
00002A6E  241F      4950          move.l    (A7)+,D2
00002A70  4E75      4951          rts
                    4952   ; ;
                    4953   ; }
                    4954   ; void Wait100ms_here(void)
                    4955   ; {
                    4956   _Wait100ms_here:
00002A72  2F02      4957          move.l    D2,-(A7)
                    4958   ; int what;
                    4959   ; for (what = 0; what < 100; what++)
00002A74  4282      4960          clr.l     D2
                    4961   Wait100ms_here_1:
00002A76  0C82 0000 4962          cmp.l     #100,D2
00002A7A  0064      
00002A7C  6C08      4963          bge.s     Wait100ms_here_3
                    4964   ; Wait1ms_here();
00002A7E  4EB8 2A5E 4965          jsr       _Wait1ms_here
00002A82  5282      4966          addq.l    #1,D2
00002A84  60F0      4967          bra       Wait100ms_here_1
                    4968   Wait100ms_here_3:
00002A86  241F      4969          move.l    (A7)+,D2
00002A88  4E75      4970          rts
                    4971   ; }
                    4972   ; void Wait250ms_here(void)
                    4973   ; {
                    4974   _Wait250ms_here:
00002A8A  2F02      4975          move.l    D2,-(A7)
                    4976   ; int what;
                    4977   ; for (what = 0; what < 250; what++)
00002A8C  4282      4978          clr.l     D2
                    4979   Wait250ms_here_1:
00002A8E  0C82 0000 4980          cmp.l     #250,D2
00002A92  00FA      
00002A94  6C08      4981          bge.s     Wait250ms_here_3
                    4982   ; Wait1ms_here();
00002A96  4EB8 2A5E 4983          jsr       _Wait1ms_here
00002A9A  5282      4984          addq.l    #1,D2
00002A9C  60F0      4985          bra       Wait250ms_here_1
                    4986   Wait250ms_here_3:
00002A9E  241F      4987          move.l    (A7)+,D2
00002AA0  4E75      4988          rts
                    4989   ; }
                    4990   ; void Wait300ms_here(void)
                    4991   ; {
                    4992   _Wait300ms_here:
00002AA2  2F02      4993          move.l    D2,-(A7)
                    4994   ; int what;
                    4995   ; for (what = 0; what < 300; what++)
00002AA4  4282      4996          clr.l     D2
                    4997   Wait300ms_here_1:
00002AA6  0C82 0000 4998          cmp.l     #300,D2
00002AAA  012C      
00002AAC  6C08      4999          bge.s     Wait300ms_here_3
                    5000   ; Wait1ms_here();
00002AAE  4EB8 2A5E 5001          jsr       _Wait1ms_here
00002AB2  5282      5002          addq.l    #1,D2
00002AB4  60F0      5003          bra       Wait300ms_here_1
                    5004   Wait300ms_here_3:
00002AB6  241F      5005          move.l    (A7)+,D2
00002AB8  4E75      5006          rts
                    5007   ; }
                    5008   ; void changeChar(int addr, char c)
                    5009   ; {
                    5010   _changeChar:
00002ABA  4E56 0000 5011          link      A6,#0
                    5012   ; *(char *)(VGA_ADDRESS + addr * 2 + 1) = c;
00002ABE  203C FFFF 5013          move.l    #-65536,D0
00002AC2  0000      
00002AC4  2F2E 0008 5014          move.l    8(A6),-(A7)
00002AC8  4878 0002 5015          pea       2
00002ACC  4EB9 0000 5016          jsr       LMUL
00002AD0  3B7E      
00002AD2  2217      5017          move.l    (A7),D1
00002AD4  504F      5018          addq.w    #8,A7
00002AD6  5281      5019          addq.l    #1,D1
00002AD8  D081      5020          add.l     D1,D0
00002ADA  2040      5021          move.l    D0,A0
00002ADC  10AE 000F 5022          move.b    15(A6),(A0)
                    5023   ; *(char *)(VGA_ADDRESS + addr * 2) = c;
00002AE0  203C FFFF 5024          move.l    #-65536,D0
00002AE4  0000      
00002AE6  2F2E 0008 5025          move.l    8(A6),-(A7)
00002AEA  4878 0002 5026          pea       2
00002AEE  4EB9 0000 5027          jsr       LMUL
00002AF2  3B7E      
00002AF4  2217      5028          move.l    (A7),D1
00002AF6  504F      5029          addq.w    #8,A7
00002AF8  D081      5030          add.l     D1,D0
00002AFA  2040      5031          move.l    D0,A0
00002AFC  10AE 000F 5032          move.b    15(A6),(A0)
00002B00  4E5E      5033          unlk      A6
00002B02  4E75      5034          rts
                    5035   ; }
                    5036   ; void changeColor(int addr, char color)
                    5037   ; {
                    5038   _changeColor:
00002B04  4E56 0000 5039          link      A6,#0
00002B08  2F02      5040          move.l    D2,-(A7)
                    5041   ; char change = octl & 0xF8;
00002B0A  1039 0803 5042          move.b    _octl.L,D0
00002B0E  07BA      
00002B10  4880      5043          ext.w     D0
00002B12  C07C 00F8 5044          and.w     #248,D0
00002B16  1400      5045          move.b    D0,D2
                    5046   ; change |= color;
00002B18  102E 000F 5047          move.b    15(A6),D0
00002B1C  8400      5048          or.b      D0,D2
                    5049   ; octlAddress = change;
00002B1E  13C2 FF03 5050          move.b    D2,-16580608
00002B22  0000      
                    5051   ; octlAddress1 = change;
00002B24  13C2 FF03 5052          move.b    D2,-16580607
00002B28  0001      
00002B2A  241F      5053          move.l    (A7)+,D2
00002B2C  4E5E      5054          unlk      A6
00002B2E  4E75      5055          rts
                    5056   ; }
                    5057   ; void writeVGAColor(int addr, char c, char color)
                    5058   ; {
                    5059   _writeVGAColor:
00002B30  4E56 0000 5060          link      A6,#0
                    5061   ; changeColor(addr, color);
00002B34  122E 0013 5062          move.b    19(A6),D1
00002B38  4881      5063          ext.w     D1
00002B3A  48C1      5064          ext.l     D1
00002B3C  2F01      5065          move.l    D1,-(A7)
00002B3E  2F2E 0008 5066          move.l    8(A6),-(A7)
00002B42  4EB8 2B04 5067          jsr       _changeColor
00002B46  504F      5068          addq.w    #8,A7
                    5069   ; changeChar(addr, c);
00002B48  122E 000F 5070          move.b    15(A6),D1
00002B4C  4881      5071          ext.w     D1
00002B4E  48C1      5072          ext.l     D1
00002B50  2F01      5073          move.l    D1,-(A7)
00002B52  2F2E 0008 5074          move.l    8(A6),-(A7)
00002B56  4EB8 2ABA 5075          jsr       _changeChar
00002B5A  504F      5076          addq.w    #8,A7
00002B5C  4E5E      5077          unlk      A6
00002B5E  4E75      5078          rts
                    5079   ; }
                    5080   ; void writeVGA(int addr, char c)
                    5081   ; {
                    5082   _writeVGA:
00002B60  4E56 0000 5083          link      A6,#0
                    5084   ; changeColor(addr, octl);
00002B64  1239 0803 5085          move.b    _octl.L,D1
00002B68  07BA      
00002B6A  4881      5086          ext.w     D1
00002B6C  48C1      5087          ext.l     D1
00002B6E  2F01      5088          move.l    D1,-(A7)
00002B70  2F2E 0008 5089          move.l    8(A6),-(A7)
00002B74  4EB8 2B04 5090          jsr       _changeColor
00002B78  504F      5091          addq.w    #8,A7
                    5092   ; changeChar(addr, c);
00002B7A  122E 000F 5093          move.b    15(A6),D1
00002B7E  4881      5094          ext.w     D1
00002B80  48C1      5095          ext.l     D1
00002B82  2F01      5096          move.l    D1,-(A7)
00002B84  2F2E 0008 5097          move.l    8(A6),-(A7)
00002B88  4EB8 2ABA 5098          jsr       _changeChar
00002B8C  504F      5099          addq.w    #8,A7
00002B8E  4E5E      5100          unlk      A6
00002B90  4E75      5101          rts
                    5102   ; }
                    5103   ; void updateVGAColor(int x, int y, char c, char color)
                    5104   ; {
                    5105   _updateVGAColor:
00002B92  4E56 0000 5106          link      A6,#0
                    5107   ; writeVGAColor(y * screen_width + x, c, color);
00002B96  122E 0017 5108          move.b    23(A6),D1
00002B9A  4881      5109          ext.w     D1
00002B9C  48C1      5110          ext.l     D1
00002B9E  2F01      5111          move.l    D1,-(A7)
00002BA0  122E 0013 5112          move.b    19(A6),D1
00002BA4  4881      5113          ext.w     D1
00002BA6  48C1      5114          ext.l     D1
00002BA8  2F01      5115          move.l    D1,-(A7)
00002BAA  2F2E 000C 5116          move.l    12(A6),-(A7)
00002BAE  4878 0050 5117          pea       80
00002BB2  4EB9 0000 5118          jsr       LMUL
00002BB6  3B7E      
00002BB8  2217      5119          move.l    (A7),D1
00002BBA  504F      5120          addq.w    #8,A7
00002BBC  D2AE 0008 5121          add.l     8(A6),D1
00002BC0  2F01      5122          move.l    D1,-(A7)
00002BC2  4EB8 2B30 5123          jsr       _writeVGAColor
00002BC6  DEFC 000C 5124          add.w     #12,A7
00002BCA  4E5E      5125          unlk      A6
00002BCC  4E75      5126          rts
                    5127   ; }
                    5128   ; void updateVGA(int x, int y, char c)
                    5129   ; {
                    5130   _updateVGA:
00002BCE  4E56 0000 5131          link      A6,#0
                    5132   ; writeVGA(y * screen_width + x, c);
00002BD2  122E 0013 5133          move.b    19(A6),D1
00002BD6  4881      5134          ext.w     D1
00002BD8  48C1      5135          ext.l     D1
00002BDA  2F01      5136          move.l    D1,-(A7)
00002BDC  2F2E 000C 5137          move.l    12(A6),-(A7)
00002BE0  4878 0050 5138          pea       80
00002BE4  4EB9 0000 5139          jsr       LMUL
00002BE8  3B7E      
00002BEA  2217      5140          move.l    (A7),D1
00002BEC  504F      5141          addq.w    #8,A7
00002BEE  D2AE 0008 5142          add.l     8(A6),D1
00002BF2  2F01      5143          move.l    D1,-(A7)
00002BF4  4EB8 2B60 5144          jsr       _writeVGA
00002BF8  504F      5145          addq.w    #8,A7
00002BFA  4E5E      5146          unlk      A6
00002BFC  4E75      5147          rts
                    5148   ; }
                    5149   ; void update_cursor(int x, int y)
                    5150   ; {
                    5151   _update_cursor:
00002BFE  4E56 0000 5152          link      A6,#0
                    5153   ; cx = x;
00002C02  202E 0008 5154          move.l    8(A6),D0
00002C06  13C0 0803 5155          move.b    D0,_cx.L
00002C0A  08AC      
                    5156   ; cy = y;
00002C0C  202E 000C 5157          move.l    12(A6),D0
00002C10  13C0 0803 5158          move.b    D0,_cy.L
00002C14  08AE      
                    5159   ; cursor_x = cx;
00002C16  13F9 0803 5160          move.b    _cx.L,-16711680
00002C1A  08AC FF01 
00002C1E  0000      
                    5161   ; cursor_x1 = cx;
00002C20  13F9 0803 5162          move.b    _cx.L,-16711679
00002C24  08AC FF01 
00002C28  0001      
                    5163   ; cursor_y = cy;
00002C2A  13F9 0803 5164          move.b    _cy.L,-16711678
00002C2E  08AE FF01 
00002C32  0002      
                    5165   ; cursor_y1 = cy;
00002C34  13F9 0803 5166          move.b    _cy.L,-16711677
00002C38  08AE FF01 
00002C3C  0003      
00002C3E  4E5E      5167          unlk      A6
00002C40  4E75      5168          rts
                    5169   ; }
                    5170   ; void go_to_top_corner()
                    5171   ; {
                    5172   _go_to_top_corner:
                    5173   ; update_cursor(0, 0);
00002C42  42A7      5174          clr.l     -(A7)
00002C44  42A7      5175          clr.l     -(A7)
00002C46  4EB8 2BFE 5176          jsr       _update_cursor
00002C4A  504F      5177          addq.w    #8,A7
00002C4C  4E75      5178          rts
                    5179   ; };
                    5180   ; void clear_screen()
                    5181   ; {
                    5182   _clear_screen:
00002C4E  2F02      5183          move.l    D2,-(A7)
                    5184   ; int i;
                    5185   ; for (i = 0; i <= 3200; i++)
00002C50  4282      5186          clr.l     D2
                    5187   clear_screen_1:
00002C52  0C82 0000 5188          cmp.l     #3200,D2
00002C56  0C80      
00002C58  6E10      5189          bgt.s     clear_screen_3
                    5190   ; {
                    5191   ; changeChar(i, ' ');
00002C5A  4878 0020 5192          pea       32
00002C5E  2F02      5193          move.l    D2,-(A7)
00002C60  4EB8 2ABA 5194          jsr       _changeChar
00002C64  504F      5195          addq.w    #8,A7
00002C66  5282      5196          addq.l    #1,D2
00002C68  60E8      5197          bra       clear_screen_1
                    5198   clear_screen_3:
00002C6A  241F      5199          move.l    (A7)+,D2
00002C6C  4E75      5200          rts
                    5201   ; }
                    5202   ; };
                    5203   ; void say_game_over()
                    5204   ; {
                    5205   _say_game_over:
                    5206   ; talkphonemeGG1();
00002C6E  4EB8 2452 5207          jsr       _talkphonemeGG1
                    5208   ; talkphonemeEY();
00002C72  4EB8 243A 5209          jsr       _talkphonemeEY
                    5210   ; talkphonemeMM();
00002C76  4EB8 24E2 5211          jsr       _talkphonemeMM
                    5212   ; endword();
00002C7A  4EB8 2A08 5213          jsr       _endword
                    5214   ; talkphonemeOW();
00002C7E  4EB8 251E 5215          jsr       _talkphonemeOW
                    5216   ; talkphonemeVV();
00002C82  4EB8 25BA 5217          jsr       _talkphonemeVV
                    5218   ; talkphonemeER2();
00002C86  4EB8 242E 5219          jsr       _talkphonemeER2
                    5220   ; endword();
00002C8A  4EB8 2A08 5221          jsr       _endword
00002C8E  4E75      5222          rts
                    5223   ; }
                    5224   ; void say_awesome()
                    5225   ; {
                    5226   _say_awesome:
                    5227   ; talkphonemeAA();
00002C90  4EB8 2362 5228          jsr       _talkphonemeAA
                    5229   ; talkphonemeSS();
00002C94  4EB8 2566 5230          jsr       _talkphonemeSS
                    5231   ; talkphonemeAO();
00002C98  4EB8 237A 5232          jsr       _talkphonemeAO
                    5233   ; talkphonemeMM();
00002C9C  4EB8 24E2 5234          jsr       _talkphonemeMM
                    5235   ; endword();
00002CA0  4EB8 2A08 5236          jsr       _endword
00002CA4  4E75      5237          rts
                    5238   ; }
                    5239   ; void say_cool()
                    5240   ; {
                    5241   _say_cool:
                    5242   ; talkphonemeKK3();
00002CA6  4EB8 24CA 5243          jsr       _talkphonemeKK3
                    5244   ; talkphonemeUH();
00002CAA  4EB8 2596 5245          jsr       _talkphonemeUH
                    5246   ; talkphonemeUH();
00002CAE  4EB8 2596 5247          jsr       _talkphonemeUH
                    5248   ; talkphonemeEL();
00002CB2  4EB8 2416 5249          jsr       _talkphonemeEL
                    5250   ; endword();
00002CB6  4EB8 2A08 5251          jsr       _endword
00002CBA  4E75      5252          rts
                    5253   ; }
                    5254   ; void say_yeah()
                    5255   ; {
                    5256   _say_yeah:
                    5257   ; talkphonemeYY2();
00002CBC  4EB8 2602 5258          jsr       _talkphonemeYY2
                    5259   ; talkphonemeEH();
00002CC0  4EB8 240A 5260          jsr       _talkphonemeEH
                    5261   ; talkphonemeEH();
00002CC4  4EB8 240A 5262          jsr       _talkphonemeEH
                    5263   ; endword();
00002CC8  4EB8 2A08 5264          jsr       _endword
00002CCC  4E75      5265          rts
                    5266   ; }
                    5267   ; void putcharxyColor(int x, int y, char ch, char color, char *error_message)
                    5268   ; {
                    5269   _putcharxyColor:
00002CCE  4E56 0000 5270          link      A6,#0
00002CD2  48E7 3000 5271          movem.l   D2/D3,-(A7)
00002CD6  242E 000C 5272          move.l    12(A6),D2
00002CDA  262E 0008 5273          move.l    8(A6),D3
                    5274   ; if (x < 0 || x >= screen_width || y < 0 || y >= screen_height)
00002CDE  0C83 0000 5275          cmp.l     #0,D3
00002CE2  0000      
00002CE4  6D18      5276          blt.s     putcharxyColor_3
00002CE6  0C83 0000 5277          cmp.l     #80,D3
00002CEA  0050      
00002CEC  6C10      5278          bge.s     putcharxyColor_3
00002CEE  0C82 0000 5279          cmp.l     #0,D2
00002CF2  0000      
00002CF4  6D08      5280          blt.s     putcharxyColor_3
00002CF6  0C82 0000 5281          cmp.l     #40,D2
00002CFA  0028      
00002CFC  6D14      5282          blt.s     putcharxyColor_1
                    5283   putcharxyColor_3:
                    5284   ; {
                    5285   ; printf("%s\n", error_message);
00002CFE  2F2E 0018 5286          move.l    24(A6),-(A7)
00002D02  4879 0000 5287          pea       @tetris_1.L
00002D06  510C      
00002D08  4EB9 0000 5288          jsr       _printf
00002D0C  3CDE      
00002D0E  504F      5289          addq.w    #8,A7
00002D10  6020      5290          bra.s     putcharxyColor_2
                    5291   putcharxyColor_1:
                    5292   ; // printf("x: %d, y: %d\n", x, y);
                    5293   ; }
                    5294   ; else
                    5295   ; {
                    5296   ; updateVGAColor(x, y, ch, color);
00002D12  122E 0017 5297          move.b    23(A6),D1
00002D16  4881      5298          ext.w     D1
00002D18  48C1      5299          ext.l     D1
00002D1A  2F01      5300          move.l    D1,-(A7)
00002D1C  122E 0013 5301          move.b    19(A6),D1
00002D20  4881      5302          ext.w     D1
00002D22  48C1      5303          ext.l     D1
00002D24  2F01      5304          move.l    D1,-(A7)
00002D26  2F02      5305          move.l    D2,-(A7)
00002D28  2F03      5306          move.l    D3,-(A7)
00002D2A  4EB8 2B92 5307          jsr       _updateVGAColor
00002D2E  DEFC 0010 5308          add.w     #16,A7
                    5309   putcharxyColor_2:
00002D32  4CDF 000C 5310          movem.l   (A7)+,D2/D3
00002D36  4E5E      5311          unlk      A6
00002D38  4E75      5312          rts
                    5313   ; }
                    5314   ; }
                    5315   ; // default color
                    5316   ; void putcharxy(int x, int y, char ch, char *error_message)
                    5317   ; {
                    5318   _putcharxy:
00002D3A  4E56 0000 5319          link      A6,#0
00002D3E  48E7 3000 5320          movem.l   D2/D3,-(A7)
00002D42  242E 000C 5321          move.l    12(A6),D2
00002D46  262E 0008 5322          move.l    8(A6),D3
                    5323   ; if (x < 0 || x >= screen_width || y < 0 || y >= screen_height)
00002D4A  0C83 0000 5324          cmp.l     #0,D3
00002D4E  0000      
00002D50  6D18      5325          blt.s     putcharxy_3
00002D52  0C83 0000 5326          cmp.l     #80,D3
00002D56  0050      
00002D58  6C10      5327          bge.s     putcharxy_3
00002D5A  0C82 0000 5328          cmp.l     #0,D2
00002D5E  0000      
00002D60  6D08      5329          blt.s     putcharxy_3
00002D62  0C82 0000 5330          cmp.l     #40,D2
00002D66  0028      
00002D68  6D14      5331          blt.s     putcharxy_1
                    5332   putcharxy_3:
                    5333   ; {
                    5334   ; printf("%s\n", error_message);
00002D6A  2F2E 0014 5335          move.l    20(A6),-(A7)
00002D6E  4879 0000 5336          pea       @tetris_1.L
00002D72  510C      
00002D74  4EB9 0000 5337          jsr       _printf
00002D78  3CDE      
00002D7A  504F      5338          addq.w    #8,A7
00002D7C  6016      5339          bra.s     putcharxy_2
                    5340   putcharxy_1:
                    5341   ; // printf("x: %d, y: %d\n", x, y);
                    5342   ; }
                    5343   ; else
                    5344   ; {
                    5345   ; updateVGA(x, y, ch);
00002D7E  122E 0013 5346          move.b    19(A6),D1
00002D82  4881      5347          ext.w     D1
00002D84  48C1      5348          ext.l     D1
00002D86  2F01      5349          move.l    D1,-(A7)
00002D88  2F02      5350          move.l    D2,-(A7)
00002D8A  2F03      5351          move.l    D3,-(A7)
00002D8C  4EB8 2BCE 5352          jsr       _updateVGA
00002D90  DEFC 000C 5353          add.w     #12,A7
                    5354   putcharxy_2:
00002D94  4CDF 000C 5355          movem.l   (A7)+,D2/D3
00002D98  4E5E      5356          unlk      A6
00002D9A  4E75      5357          rts
                    5358   ; }
                    5359   ; }
                    5360   ; void gotoxy(int x, int y)
                    5361   ; {
                    5362   _gotoxy:
00002D9C  4E56 0000 5363          link      A6,#0
                    5364   ; update_cursor(x, y);
00002DA0  2F2E 000C 5365          move.l    12(A6),-(A7)
00002DA4  2F2E 0008 5366          move.l    8(A6),-(A7)
00002DA8  4EB8 2BFE 5367          jsr       _update_cursor
00002DAC  504F      5368          addq.w    #8,A7
00002DAE  4E5E      5369          unlk      A6
00002DB0  4E75      5370          rts
                    5371   ; };
                    5372   ; void set_vga_control_reg(char x)
                    5373   ; {
                    5374   _set_vga_control_reg:
00002DB2  4E56 0000 5375          link      A6,#0
                    5376   ; // Set the value of the control register in the VGA core
                    5377   ; // write this function
                    5378   ; octl = (x & 0xF8) | (octl & 0x7);
00002DB6  102E 000B 5379          move.b    11(A6),D0
00002DBA  4880      5380          ext.w     D0
00002DBC  C07C 00F8 5381          and.w     #248,D0
00002DC0  1239 0803 5382          move.b    _octl.L,D1
00002DC4  07BA      
00002DC6  C23C 0007 5383          and.b     #7,D1
00002DCA  4881      5384          ext.w     D1
00002DCC  8041      5385          or.w      D1,D0
00002DCE  13C0 0803 5386          move.b    D0,_octl.L
00002DD2  07BA      
00002DD4  4E5E      5387          unlk      A6
00002DD6  4E75      5388          rts
                    5389   ; }
                    5390   ; char get_vga_control_reg()
                    5391   ; {
                    5392   _get_vga_control_reg:
                    5393   ; // Get the value of the control register in the VGA core
                    5394   ; // write this function
                    5395   ; return octl;
00002DD8  1039 0803 5396          move.b    _octl.L,D0
00002DDC  07BA      
00002DDE  4E75      5397          rts
                    5398   ; }
                    5399   ; void set_color(int color)
                    5400   ; {
                    5401   _set_color:
00002DE0  4E56 0000 5402          link      A6,#0
                    5403   ; octl &= 0xF8;		   // 8'b1111_1000
00002DE4  0239 00F8 5404          and.b     #248,_octl.L
00002DE8  0803 07BA 
                    5405   ; octl |= (color & 0x7); // 8'b0000_0111
00002DEC  202E 0008 5406          move.l    8(A6),D0
00002DF0  C0BC 0000 5407          and.l     #7,D0
00002DF4  0007      
00002DF6  8139 0803 5408          or.b      D0,_octl.L
00002DFA  07BA      
00002DFC  4E5E      5409          unlk      A6
00002DFE  4E75      5410          rts
                    5411   ; }
                    5412   ; int clock()
                    5413   ; {
                    5414   _clock:
                    5415   ; // Returns time in milliseconds since the timer was initialized
                    5416   ; // write this function
                    5417   ; return timer_count * 100;
00002E00  2F39 0803 5418          move.l    _timer_count.L,-(A7)
00002E04  08B0      
00002E06  4878 0064 5419          pea       100
00002E0A  4EB9 0000 5420          jsr       LMUL
00002E0E  3B7E      
00002E10  2017      5421          move.l    (A7),D0
00002E12  504F      5422          addq.w    #8,A7
00002E14  4E75      5423          rts
                    5424   ; }
                    5425   ; void printwColor(const char *str, char color, char *error_message)
                    5426   ; {
                    5427   _printwColor:
00002E16  4E56 0000 5428          link      A6,#0
00002E1A  48E7 3020 5429          movem.l   D2/D3/A2,-(A7)
00002E1E  45F9 0803 5430          lea       _printw_x.L,A2
00002E22  08A4      
00002E24  262E 0008 5431          move.l    8(A6),D3
                    5432   ; int index = 0;
00002E28  4282      5433          clr.l     D2
                    5434   ; while (str[index] != '\0')
                    5435   printwColor_1:
00002E2A  2043      5436          move.l    D3,A0
00002E2C  1030 2800 5437          move.b    0(A0,D2.L),D0
00002E30  6700 0048 5438          beq       printwColor_3
                    5439   ; {
                    5440   ; if (str[index] == '\n')
00002E34  2043      5441          move.l    D3,A0
00002E36  1030 2800 5442          move.b    0(A0,D2.L),D0
00002E3A  0C00 000A 5443          cmp.b     #10,D0
00002E3E  660A      5444          bne.s     printwColor_4
                    5445   ; {
                    5446   ; printw_x = 0;
00002E40  4292      5447          clr.l     (A2)
                    5448   ; printw_y++;
00002E42  52B9 0803 5449          addq.l    #1,_printw_y.L
00002E46  08A8      
00002E48  602C      5450          bra.s     printwColor_5
                    5451   printwColor_4:
                    5452   ; // printf("newline\n");
                    5453   ; }
                    5454   ; else
                    5455   ; {
                    5456   ; putcharxyColor(printw_x, printw_y, str[index], color, error_message);
00002E4A  2F2E 0010 5457          move.l    16(A6),-(A7)
00002E4E  122E 000F 5458          move.b    15(A6),D1
00002E52  4881      5459          ext.w     D1
00002E54  48C1      5460          ext.l     D1
00002E56  2F01      5461          move.l    D1,-(A7)
00002E58  2043      5462          move.l    D3,A0
00002E5A  1230 2800 5463          move.b    0(A0,D2.L),D1
00002E5E  4881      5464          ext.w     D1
00002E60  48C1      5465          ext.l     D1
00002E62  2F01      5466          move.l    D1,-(A7)
00002E64  2F39 0803 5467          move.l    _printw_y.L,-(A7)
00002E68  08A8      
00002E6A  2F12      5468          move.l    (A2),-(A7)
00002E6C  4EB8 2CCE 5469          jsr       _putcharxyColor
00002E70  DEFC 0014 5470          add.w     #20,A7
                    5471   ; printw_x++;
00002E74  5292      5472          addq.l    #1,(A2)
                    5473   printwColor_5:
                    5474   ; }
                    5475   ; index++;
00002E76  5282      5476          addq.l    #1,D2
00002E78  60B0      5477          bra       printwColor_1
                    5478   printwColor_3:
00002E7A  4CDF 040C 5479          movem.l   (A7)+,D2/D3/A2
00002E7E  4E5E      5480          unlk      A6
00002E80  4E75      5481          rts
                    5482   ; }
                    5483   ; }
                    5484   ; // default color
                    5485   ; void printw(const char *str, char *error_message)
                    5486   ; {
                    5487   _printw:
00002E82  4E56 0000 5488          link      A6,#0
00002E86  48E7 3020 5489          movem.l   D2/D3/A2,-(A7)
00002E8A  45F9 0803 5490          lea       _printw_x.L,A2
00002E8E  08A4      
00002E90  262E 0008 5491          move.l    8(A6),D3
                    5492   ; int index = 0;
00002E94  4282      5493          clr.l     D2
                    5494   ; while (str[index] != '\0')
                    5495   printw_1:
00002E96  2043      5496          move.l    D3,A0
00002E98  1030 2800 5497          move.b    0(A0,D2.L),D0
00002E9C  6700 003E 5498          beq       printw_3
                    5499   ; {
                    5500   ; if (str[index] == '\n')
00002EA0  2043      5501          move.l    D3,A0
00002EA2  1030 2800 5502          move.b    0(A0,D2.L),D0
00002EA6  0C00 000A 5503          cmp.b     #10,D0
00002EAA  660A      5504          bne.s     printw_4
                    5505   ; {
                    5506   ; printw_x = 0;
00002EAC  4292      5507          clr.l     (A2)
                    5508   ; printw_y++;
00002EAE  52B9 0803 5509          addq.l    #1,_printw_y.L
00002EB2  08A8      
00002EB4  6022      5510          bra.s     printw_5
                    5511   printw_4:
                    5512   ; // printf("newline\n");
                    5513   ; }
                    5514   ; else
                    5515   ; {
                    5516   ; putcharxy(printw_x, printw_y, str[index], error_message);
00002EB6  2F2E 000C 5517          move.l    12(A6),-(A7)
00002EBA  2043      5518          move.l    D3,A0
00002EBC  1230 2800 5519          move.b    0(A0,D2.L),D1
00002EC0  4881      5520          ext.w     D1
00002EC2  48C1      5521          ext.l     D1
00002EC4  2F01      5522          move.l    D1,-(A7)
00002EC6  2F39 0803 5523          move.l    _printw_y.L,-(A7)
00002ECA  08A8      
00002ECC  2F12      5524          move.l    (A2),-(A7)
00002ECE  4EB8 2D3A 5525          jsr       _putcharxy
00002ED2  DEFC 0010 5526          add.w     #16,A7
                    5527   ; printw_x++;
00002ED6  5292      5528          addq.l    #1,(A2)
                    5529   printw_5:
                    5530   ; }
                    5531   ; index++;
00002ED8  5282      5532          addq.l    #1,D2
00002EDA  60BA      5533          bra       printw_1
                    5534   printw_3:
00002EDC  4CDF 040C 5535          movem.l   (A7)+,D2/D3/A2
00002EE0  4E5E      5536          unlk      A6
00002EE2  4E75      5537          rts
                    5538   ; }
                    5539   ; }
                    5540   ; void display_game_over(char *str, int x, int y)
                    5541   ; {
                    5542   _display_game_over:
00002EE4  4E56 0000 5543          link      A6,#0
00002EE8  48E7 3C00 5544          movem.l   D2/D3/D4/D5,-(A7)
00002EEC  242E 000C 5545          move.l    12(A6),D2
00002EF0  262E 0010 5546          move.l    16(A6),D3
00002EF4  2A2E 0008 5547          move.l    8(A6),D5
                    5548   ; int num;
                    5549   ; num = 0;
00002EF8  4284      5550          clr.l     D4
                    5551   ; while (str[num] != '\0')
                    5552   display_game_over_1:
00002EFA  2045      5553          move.l    D5,A0
00002EFC  1030 4800 5554          move.b    0(A0,D4.L),D0
00002F00  6700 0056 5555          beq       display_game_over_3
                    5556   ; {
                    5557   ; Wait100ms_here();
00002F04  4EB8 2A72 5558          jsr       _Wait100ms_here
                    5559   ; update_cursor(x + 1, y);
00002F08  2F03      5560          move.l    D3,-(A7)
00002F0A  2202      5561          move.l    D2,D1
00002F0C  5281      5562          addq.l    #1,D1
00002F0E  2F01      5563          move.l    D1,-(A7)
00002F10  4EB8 2BFE 5564          jsr       _update_cursor
00002F14  504F      5565          addq.w    #8,A7
                    5566   ; putcharxy(x + 1, y, ' ', "game over");
00002F16  4879 0000 5567          pea       @tetris_2.L
00002F1A  5110      
00002F1C  4878 0020 5568          pea       32
00002F20  2F03      5569          move.l    D3,-(A7)
00002F22  2202      5570          move.l    D2,D1
00002F24  5281      5571          addq.l    #1,D1
00002F26  2F01      5572          move.l    D1,-(A7)
00002F28  4EB8 2D3A 5573          jsr       _putcharxy
00002F2C  DEFC 0010 5574          add.w     #16,A7
                    5575   ; // printf("cx: %d, cy: %d\n", cx, cy);
                    5576   ; Wait1ms_here();
00002F30  4EB8 2A5E 5577          jsr       _Wait1ms_here
                    5578   ; putcharxy(x, y, str[num], "game over");
00002F34  4879 0000 5579          pea       @tetris_2.L
00002F38  5110      
00002F3A  2045      5580          move.l    D5,A0
00002F3C  1230 4800 5581          move.b    0(A0,D4.L),D1
00002F40  4881      5582          ext.w     D1
00002F42  48C1      5583          ext.l     D1
00002F44  2F01      5584          move.l    D1,-(A7)
00002F46  2F03      5585          move.l    D3,-(A7)
00002F48  2F02      5586          move.l    D2,-(A7)
00002F4A  4EB8 2D3A 5587          jsr       _putcharxy
00002F4E  DEFC 0010 5588          add.w     #16,A7
                    5589   ; x++;
00002F52  5282      5590          addq.l    #1,D2
                    5591   ; num++;
00002F54  5284      5592          addq.l    #1,D4
00002F56  60A2      5593          bra       display_game_over_1
                    5594   display_game_over_3:
                    5595   ; }
                    5596   ; if (str[0] == 'S')
00002F58  2045      5597          move.l    D5,A0
00002F5A  1010      5598          move.b    (A0),D0
00002F5C  0C00 0053 5599          cmp.b     #83,D0
00002F60  660E      5600          bne.s     display_game_over_4
                    5601   ; update_cursor(x - 1, y);
00002F62  2F03      5602          move.l    D3,-(A7)
00002F64  2202      5603          move.l    D2,D1
00002F66  5381      5604          subq.l    #1,D1
00002F68  2F01      5605          move.l    D1,-(A7)
00002F6A  4EB8 2BFE 5606          jsr       _update_cursor
00002F6E  504F      5607          addq.w    #8,A7
                    5608   display_game_over_4:
00002F70  4CDF 003C 5609          movem.l   (A7)+,D2/D3/D4/D5
00002F74  4E5E      5610          unlk      A6
00002F76  4E75      5611          rts
                    5612   ; }
                    5613   ; void gameOver()
                    5614   ; {
                    5615   _gameOver:
00002F78  4E56 FF7C 5616          link      A6,#-132
00002F7C  48E7 3038 5617          movem.l   D2/D3/A2/A3/A4,-(A7)
00002F80  45F9 0803 5618          lea       _printw_y.L,A2
00002F84  08A8      
00002F86  47F9 0803 5619          lea       _printw_x.L,A3
00002F8A  08A4      
00002F8C  49EE FF80 5620          lea       -128(A6),A4
                    5621   ; // 36, 20: Game over!
                    5622   ; int test = 5000;
00002F90  2D7C 0000 5623          move.l    #5000,-132(A6)
00002F94  1388 FF7C 
                    5624   ; char *game_over = " Game over! ";
00002F98  41F9 0000 5625          lea       @tetris_3.L,A0
00002F9C  511A      
00002F9E  2608      5626          move.l    A0,D3
                    5627   ; char score_str[128];
                    5628   ; char num;
                    5629   ; say_game_over();
00002FA0  4EB8 2C6E 5630          jsr       _say_game_over
                    5631   ; clear_screen();
00002FA4  4EB8 2C4E 5632          jsr       _clear_screen
                    5633   ; num = 1;
00002FA8  7401      5634          moveq     #1,D2
                    5635   ; sprintf(score_str, " Score: %d ", tetris_score);
00002FAA  2F39 0803 5636          move.l    _tetris_score.L,-(A7)
00002FAE  07B0      
00002FB0  4879 0000 5637          pea       @tetris_4.L
00002FB4  5128      
00002FB6  2F0C      5638          move.l    A4,-(A7)
00002FB8  4EB9 0000 5639          jsr       _sprintf
00002FBC  3C68      
00002FBE  DEFC 000C 5640          add.w     #12,A7
                    5641   ; // 36, 22: Score: %d
                    5642   ; set_vga_control_reg(0xE0);
00002FC2  4878 00E0 5643          pea       224
00002FC6  4EB8 2DB2 5644          jsr       _set_vga_control_reg
00002FCA  584F      5645          addq.w    #4,A7
                    5646   ; printw_x = 34;
00002FCC  26BC 0000 5647          move.l    #34,(A3)
00002FD0  0022      
                    5648   ; printw_y = 20;
00002FD2  24BC 0000 5649          move.l    #20,(A2)
00002FD6  0014      
                    5650   ; display_game_over(game_over, printw_x, printw_y);
00002FD8  2F12      5651          move.l    (A2),-(A7)
00002FDA  2F13      5652          move.l    (A3),-(A7)
00002FDC  2F03      5653          move.l    D3,-(A7)
00002FDE  4EB8 2EE4 5654          jsr       _display_game_over
00002FE2  DEFC 000C 5655          add.w     #12,A7
                    5656   ; printw_x = 34;
00002FE6  26BC 0000 5657          move.l    #34,(A3)
00002FEA  0022      
                    5658   ; printw_y = 22;
00002FEC  24BC 0000 5659          move.l    #22,(A2)
00002FF0  0016      
                    5660   ; display_game_over(score_str, printw_x, printw_y);
00002FF2  2F12      5661          move.l    (A2),-(A7)
00002FF4  2F13      5662          move.l    (A3),-(A7)
00002FF6  2F0C      5663          move.l    A4,-(A7)
00002FF8  4EB8 2EE4 5664          jsr       _display_game_over
00002FFC  DEFC 000C 5665          add.w     #12,A7
                    5666   ; FlushKeyboard() ; 
00003000  4EB8 0A64 5667          jsr       _FlushKeyboard
                    5668   ; printf("\n\nGame over! \nYour score was: %d\n", tetris_score);
00003004  2F39 0803 5669          move.l    _tetris_score.L,-(A7)
00003008  07B0      
0000300A  4879 0000 5670          pea       @tetris_5.L
0000300E  5134      
00003010  4EB9 0000 5671          jsr       _printf
00003014  3CDE      
00003016  504F      5672          addq.w    #8,A7
                    5673   ; printf("\nPress any key to continue\n");
00003018  4879 0000 5674          pea       @tetris_6.L
0000301C  5156      
0000301E  4EB9 0000 5675          jsr       _printf
00003022  3CDE      
00003024  584F      5676          addq.w    #4,A7
                    5677   ; while (1)
                    5678   gameOver_1:
                    5679   ; {
                    5680   ; printw_x = 34;
00003026  26BC 0000 5681          move.l    #34,(A3)
0000302A  0022      
                    5682   ; printw_y = 20;
0000302C  24BC 0000 5683          move.l    #20,(A2)
00003030  0014      
                    5684   ; set_color(num);
00003032  4882      5685          ext.w     D2
00003034  48C2      5686          ext.l     D2
00003036  2F02      5687          move.l    D2,-(A7)
00003038  4EB8 2DE0 5688          jsr       _set_color
0000303C  584F      5689          addq.w    #4,A7
                    5690   ; printw(game_over, "game over");
0000303E  4879 0000 5691          pea       @tetris_2.L
00003042  5110      
00003044  2F03      5692          move.l    D3,-(A7)
00003046  4EB8 2E82 5693          jsr       _printw
0000304A  504F      5694          addq.w    #8,A7
                    5695   ; printw_x = 34;
0000304C  26BC 0000 5696          move.l    #34,(A3)
00003050  0022      
                    5697   ; printw_y = 22;
00003052  24BC 0000 5698          move.l    #22,(A2)
00003056  0016      
                    5699   ; printw(score_str, "score");
00003058  4879 0000 5700          pea       @tetris_7.L
0000305C  5172      
0000305E  2F0C      5701          move.l    A4,-(A7)
00003060  4EB8 2E82 5702          jsr       _printw
00003064  504F      5703          addq.w    #8,A7
                    5704   ; if (kbhit())
00003066  4EB8 09E2 5705          jsr       _kbhit
0000306A  4A80      5706          tst.l     D0
0000306C  6702      5707          beq.s     gameOver_4
                    5708   ; {
                    5709   ; break;
0000306E  6010      5710          bra.s     gameOver_3
                    5711   gameOver_4:
                    5712   ; }
                    5713   ; Wait300ms_here();
00003070  4EB8 2AA2 5714          jsr       _Wait300ms_here
                    5715   ; ++num;
00003074  5202      5716          addq.b    #1,D2
                    5717   ; if (num > 7)
00003076  0C02 0007 5718          cmp.b     #7,D2
0000307A  6F02      5719          ble.s     gameOver_6
                    5720   ; {
                    5721   ; num = 1;
0000307C  7401      5722          moveq     #1,D2
                    5723   gameOver_6:
0000307E  60A6      5724          bra       gameOver_1
                    5725   gameOver_3:
                    5726   ; }
                    5727   ; }
                    5728   ; set_vga_control_reg(0xA2);
00003080  4878 00A2 5729          pea       162
00003084  4EB8 2DB2 5730          jsr       _set_vga_control_reg
00003088  584F      5731          addq.w    #4,A7
0000308A  4CDF 1C0C 5732          movem.l   (A7)+,D2/D3/A2/A3/A4
0000308E  4E5E      5733          unlk      A6
00003090  4E75      5734          rts
                    5735   ; }
                    5736   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    5737   ; //
                    5738   ; //
                    5739   ; //                      end  functions to implement
                    5740   ; //
                    5741   ; //
                    5742   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    5743   ; void delay_ms(int num_ms)
                    5744   ; {
                    5745   _delay_ms:
00003092  4E56 0000 5746          link      A6,#0
00003096  48E7 3000 5747          movem.l   D2/D3,-(A7)
                    5748   ; int start_time;
                    5749   ; int current_time;
                    5750   ; start_time = clock();
0000309A  4EB8 2E00 5751          jsr       _clock
0000309E  2400      5752          move.l    D0,D2
                    5753   ; do
                    5754   ; {
                    5755   delay_ms_1:
                    5756   ; current_time = clock();
000030A0  4EB8 2E00 5757          jsr       _clock
000030A4  2600      5758          move.l    D0,D3
                    5759   ; if (current_time < start_time)
000030A6  B682      5760          cmp.l     D2,D3
000030A8  6C0E      5761          bge.s     delay_ms_3
                    5762   ; { // handle wraparound
                    5763   ; num_ms = num_ms - (INT_MAX - start_time);
000030AA  203C 7FFF 5764          move.l    #2147483647,D0
000030AE  FFFF      
000030B0  9082      5765          sub.l     D2,D0
000030B2  91AE 0008 5766          sub.l     D0,8(A6)
                    5767   ; start_time = current_time;
000030B6  2403      5768          move.l    D3,D2
                    5769   delay_ms_3:
000030B8  2003      5770          move.l    D3,D0
000030BA  9082      5771          sub.l     D2,D0
000030BC  B0AE 0008 5772          cmp.l     8(A6),D0
000030C0  6DDE      5773          blt       delay_ms_1
000030C2  4CDF 000C 5774          movem.l   (A7)+,D2/D3
000030C6  4E5E      5775          unlk      A6
000030C8  4E75      5776          rts
                    5777   ; }
                    5778   ; } while ((current_time - start_time) < num_ms);
                    5779   ; }
                    5780   ; int tetris_rand()
                    5781   ; {
                    5782   _tetris_rand:
                    5783   ; return ((clock() >> 4) & 0xFFFF); // divide by 4 because clock increases by 10 every interrupt, ensure last digit is "random" too
000030CA  4EB8 2E00 5784          jsr       _clock
000030CE  E880      5785          asr.l     #4,D0
000030D0  C0BC 0000 5786          and.l     #65535,D0
000030D4  FFFF      
000030D6  4E75      5787          rts
                    5788   ; }
                    5789   ; void CopyShape(Shape *shape, Shape *new_shape)
                    5790   ; {
                    5791   _CopyShape:
000030D8  4E56 0000 5792          link      A6,#0
000030DC  48E7 3C00 5793          movem.l   D2/D3/D4/D5,-(A7)
000030E0  242E 000C 5794          move.l    12(A6),D2
000030E4  2A2E 0008 5795          move.l    8(A6),D5
                    5796   ; int i;
                    5797   ; int j;
                    5798   ; new_shape->width = shape->width;
000030E8  2045      5799          move.l    D5,A0
000030EA  2242      5800          move.l    D2,A1
000030EC  2368 0010 5801          move.l    16(A0),16(A1)
000030F0  0010      
                    5802   ; new_shape->row = shape->row;
000030F2  2045      5803          move.l    D5,A0
000030F4  2242      5804          move.l    D2,A1
000030F6  2368 0014 5805          move.l    20(A0),20(A1)
000030FA  0014      
                    5806   ; new_shape->col = shape->col;
000030FC  2045      5807          move.l    D5,A0
000030FE  2242      5808          move.l    D2,A1
00003100  2368 0018 5809          move.l    24(A0),24(A1)
00003104  0018      
                    5810   ; for (i = 0; i < new_shape->width; i++)
00003106  4284      5811          clr.l     D4
                    5812   CopyShape_1:
00003108  2042      5813          move.l    D2,A0
0000310A  B8A8 0010 5814          cmp.l     16(A0),D4
0000310E  6C00 002A 5815          bge       CopyShape_3
                    5816   ; {
                    5817   ; for (j = 0; j < new_shape->width; j++)
00003112  4283      5818          clr.l     D3
                    5819   CopyShape_4:
00003114  2042      5820          move.l    D2,A0
00003116  B6A8 0010 5821          cmp.l     16(A0),D3
0000311A  6C1A      5822          bge.s     CopyShape_6
                    5823   ; {
                    5824   ; new_shape->array[i][j] = shape->array[i][j];
0000311C  2045      5825          move.l    D5,A0
0000311E  2004      5826          move.l    D4,D0
00003120  E588      5827          lsl.l     #2,D0
00003122  D1C0      5828          add.l     D0,A0
00003124  2242      5829          move.l    D2,A1
00003126  2004      5830          move.l    D4,D0
00003128  E588      5831          lsl.l     #2,D0
0000312A  D3C0      5832          add.l     D0,A1
0000312C  13B0 3800 5833          move.b    0(A0,D3.L),0(A1,D3.L)
00003130  3800      
00003132  5283      5834          addq.l    #1,D3
00003134  60DE      5835          bra       CopyShape_4
                    5836   CopyShape_6:
00003136  5284      5837          addq.l    #1,D4
00003138  60CE      5838          bra       CopyShape_1
                    5839   CopyShape_3:
0000313A  4CDF 003C 5840          movem.l   (A7)+,D2/D3/D4/D5
0000313E  4E5E      5841          unlk      A6
00003140  4E75      5842          rts
                    5843   ; }
                    5844   ; }
                    5845   ; }
                    5846   ; int CheckPosition(Shape *shape)
                    5847   ; { // Check the position of the copied shape
                    5848   _CheckPosition:
00003142  4E56 0000 5849          link      A6,#0
00003146  48E7 3800 5850          movem.l   D2/D3/D4,-(A7)
0000314A  242E 0008 5851          move.l    8(A6),D2
                    5852   ; int i, j;
                    5853   ; for (i = 0; i < shape->width; i++)
0000314E  4284      5854          clr.l     D4
                    5855   CheckPosition_1:
00003150  2042      5856          move.l    D2,A0
00003152  B8A8 0010 5857          cmp.l     16(A0),D4
00003156  6C00 0096 5858          bge       CheckPosition_3
                    5859   ; {
                    5860   ; for (j = 0; j < shape->width; j++)
0000315A  4283      5861          clr.l     D3
                    5862   CheckPosition_4:
0000315C  2042      5863          move.l    D2,A0
0000315E  B6A8 0010 5864          cmp.l     16(A0),D3
00003162  6C00 0084 5865          bge       CheckPosition_6
                    5866   ; {
                    5867   ; if ((shape->col + j < 0 || shape->col + j >= TETRIS_COLS || shape->row + i >= TETRIS_ROWS))
00003166  2042      5868          move.l    D2,A0
00003168  2028 0018 5869          move.l    24(A0),D0
0000316C  D083      5870          add.l     D3,D0
0000316E  0C80 0000 5871          cmp.l     #0,D0
00003172  0000      
00003174  6D20      5872          blt.s     CheckPosition_9
00003176  2042      5873          move.l    D2,A0
00003178  2028 0018 5874          move.l    24(A0),D0
0000317C  D083      5875          add.l     D3,D0
0000317E  0C80 0000 5876          cmp.l     #15,D0
00003182  000F      
00003184  6C10      5877          bge.s     CheckPosition_9
00003186  2042      5878          move.l    D2,A0
00003188  2028 0014 5879          move.l    20(A0),D0
0000318C  D084      5880          add.l     D4,D0
0000318E  0C80 0000 5881          cmp.l     #20,D0
00003192  0014      
00003194  6D18      5882          blt.s     CheckPosition_7
                    5883   CheckPosition_9:
                    5884   ; {							// Out of borders
                    5885   ; if (shape->array[i][j]) // but is it just a phantom?
00003196  2042      5886          move.l    D2,A0
00003198  2004      5887          move.l    D4,D0
0000319A  E588      5888          lsl.l     #2,D0
0000319C  D1C0      5889          add.l     D0,A0
0000319E  4A30 3800 5890          tst.b     0(A0,D3.L)
000031A2  6706      5891          beq.s     CheckPosition_10
                    5892   ; return FALSE;
000031A4  4280      5893          clr.l     D0
000031A6  6000 0048 5894          bra       CheckPosition_12
                    5895   CheckPosition_10:
000031AA  6000 0036 5896          bra       CheckPosition_13
                    5897   CheckPosition_7:
                    5898   ; }
                    5899   ; else if (Table[shape->row + i][shape->col + j] && shape->array[i][j])
000031AE  2042      5900          move.l    D2,A0
000031B0  2028 0014 5901          move.l    20(A0),D0
000031B4  D084      5902          add.l     D4,D0
000031B6  C1FC 000F 5903          muls      #15,D0
000031BA  41F9 0803 5904          lea       _Table.L,A0
000031BE  0546      
000031C0  D1C0      5905          add.l     D0,A0
000031C2  2242      5906          move.l    D2,A1
000031C4  2029 0018 5907          move.l    24(A1),D0
000031C8  D083      5908          add.l     D3,D0
000031CA  4A30 0800 5909          tst.b     0(A0,D0.L)
000031CE  6712      5910          beq.s     CheckPosition_13
000031D0  2042      5911          move.l    D2,A0
000031D2  2004      5912          move.l    D4,D0
000031D4  E588      5913          lsl.l     #2,D0
000031D6  D1C0      5914          add.l     D0,A0
000031D8  4A30 3800 5915          tst.b     0(A0,D3.L)
000031DC  6704      5916          beq.s     CheckPosition_13
                    5917   ; return FALSE;
000031DE  4280      5918          clr.l     D0
000031E0  600E      5919          bra.s     CheckPosition_12
                    5920   CheckPosition_13:
000031E2  5283      5921          addq.l    #1,D3
000031E4  6000 FF76 5922          bra       CheckPosition_4
                    5923   CheckPosition_6:
000031E8  5284      5924          addq.l    #1,D4
000031EA  6000 FF64 5925          bra       CheckPosition_1
                    5926   CheckPosition_3:
                    5927   ; }
                    5928   ; }
                    5929   ; return TRUE;
000031EE  7001      5930          moveq     #1,D0
                    5931   CheckPosition_12:
000031F0  4CDF 001C 5932          movem.l   (A7)+,D2/D3/D4
000031F4  4E5E      5933          unlk      A6
000031F6  4E75      5934          rts
                    5935   ; }
                    5936   ; void SetNewRandomShape()
                    5937   ; { // updates [current] with new shape
                    5938   _SetNewRandomShape:
000031F8  2F0A      5939          move.l    A2,-(A7)
000031FA  45F9 0803 5940          lea       _current.L,A2
000031FE  07BC      
                    5941   ; currentColor = mod_bld(tetris_rand(), NUM_SHAPES);
00003200  4878 0007 5942          pea       7
00003204  2F00      5943          move.l    D0,-(A7)
00003206  4EB8 30CA 5944          jsr       _tetris_rand
0000320A  2200      5945          move.l    D0,D1
0000320C  201F      5946          move.l    (A7)+,D0
0000320E  2F01      5947          move.l    D1,-(A7)
00003210  4EB8 2A12 5948          jsr       _mod_bld
00003214  504F      5949          addq.w    #8,A7
00003216  13C0 0803 5950          move.b    D0,_currentColor.L
0000321A  07AE      
                    5951   ; CopyShape(&ShapesArray[currentColor], &current);
0000321C  2F0A      5952          move.l    A2,-(A7)
0000321E  41F9 0803 5953          lea       _ShapesArray.L,A0
00003222  07D8      
00003224  1239 0803 5954          move.b    _currentColor.L,D1
00003228  07AE      
0000322A  4881      5955          ext.w     D1
0000322C  48C1      5956          ext.l     D1
0000322E  C3FC 001C 5957          muls      #28,D1
00003232  D1C1      5958          add.l     D1,A0
00003234  2F08      5959          move.l    A0,-(A7)
00003236  4EB8 30D8 5960          jsr       _CopyShape
0000323A  504F      5961          addq.w    #8,A7
                    5962   ; ++currentColor;
0000323C  5239 0803 5963          addq.b    #1,_currentColor.L
00003240  07AE      
                    5964   ; current.col = mod_bld(tetris_rand(), (TETRIS_COLS - current.width + 1));
00003242  720F      5965          moveq     #15,D1
00003244  4881      5966          ext.w     D1
00003246  48C1      5967          ext.l     D1
00003248  92AA 0010 5968          sub.l     16(A2),D1
0000324C  5281      5969          addq.l    #1,D1
0000324E  2F01      5970          move.l    D1,-(A7)
00003250  2F00      5971          move.l    D0,-(A7)
00003252  4EB8 30CA 5972          jsr       _tetris_rand
00003256  2200      5973          move.l    D0,D1
00003258  201F      5974          move.l    (A7)+,D0
0000325A  2F01      5975          move.l    D1,-(A7)
0000325C  4EB8 2A12 5976          jsr       _mod_bld
00003260  504F      5977          addq.w    #8,A7
00003262  2540 0018 5978          move.l    D0,24(A2)
                    5979   ; current.row = 0;
00003266  42AA 0014 5980          clr.l     20(A2)
                    5981   ; if (!CheckPosition(&current))
0000326A  2F0A      5982          move.l    A2,-(A7)
0000326C  4EB8 3142 5983          jsr       _CheckPosition
00003270  584F      5984          addq.w    #4,A7
00003272  4A80      5985          tst.l     D0
00003274  6606      5986          bne.s     SetNewRandomShape_1
                    5987   ; {
                    5988   ; GameOn = FALSE;
00003276  4239 0803 5989          clr.b     _GameOn.L
0000327A  07B4      
                    5990   SetNewRandomShape_1:
0000327C  245F      5991          move.l    (A7)+,A2
0000327E  4E75      5992          rts
                    5993   ; // printf("Game on = false\n");
                    5994   ; }
                    5995   ; }
                    5996   ; void RotateShape(Shape *shape)
                    5997   ; { // rotates clockwise
                    5998   _RotateShape:
00003280  4E56 FFE4 5999          link      A6,#-28
00003284  48E7 3E00 6000          movem.l   D2/D3/D4/D5/D6,-(A7)
00003288  2C2E 0008 6001          move.l    8(A6),D6
                    6002   ; Shape temp;
                    6003   ; int i, j, k, width;
                    6004   ; CopyShape(shape, &temp);
0000328C  486E FFE4 6005          pea       -28(A6)
00003290  2F06      6006          move.l    D6,-(A7)
00003292  4EB8 30D8 6007          jsr       _CopyShape
00003296  504F      6008          addq.w    #8,A7
                    6009   ; width = shape->width;
00003298  2046      6010          move.l    D6,A0
0000329A  2828 0010 6011          move.l    16(A0),D4
                    6012   ; for (i = 0; i < width; i++)
0000329E  4282      6013          clr.l     D2
                    6014   RotateShape_1:
000032A0  B484      6015          cmp.l     D4,D2
000032A2  6C00 0030 6016          bge       RotateShape_3
                    6017   ; {
                    6018   ; for (j = 0, k = width - 1; j < width; j++, k--)
000032A6  4283      6019          clr.l     D3
000032A8  2004      6020          move.l    D4,D0
000032AA  5380      6021          subq.l    #1,D0
000032AC  2A00      6022          move.l    D0,D5
                    6023   RotateShape_4:
000032AE  B684      6024          cmp.l     D4,D3
000032B0  6C1E      6025          bge.s     RotateShape_6
                    6026   ; {
                    6027   ; shape->array[i][j] = temp.array[k][i];
000032B2  41EE FFE4 6028          lea       -28(A6),A0
000032B6  2005      6029          move.l    D5,D0
000032B8  E588      6030          lsl.l     #2,D0
000032BA  D1C0      6031          add.l     D0,A0
000032BC  2246      6032          move.l    D6,A1
000032BE  2002      6033          move.l    D2,D0
000032C0  E588      6034          lsl.l     #2,D0
000032C2  D3C0      6035          add.l     D0,A1
000032C4  13B0 2800 6036          move.b    0(A0,D2.L),0(A1,D3.L)
000032C8  3800      
000032CA  5283      6037          addq.l    #1,D3
000032CC  5385      6038          subq.l    #1,D5
000032CE  60DE      6039          bra       RotateShape_4
                    6040   RotateShape_6:
000032D0  5282      6041          addq.l    #1,D2
000032D2  60CC      6042          bra       RotateShape_1
                    6043   RotateShape_3:
000032D4  4CDF 007C 6044          movem.l   (A7)+,D2/D3/D4/D5/D6
000032D8  4E5E      6045          unlk      A6
000032DA  4E75      6046          rts
                    6047   ; }
                    6048   ; }
                    6049   ; }
                    6050   ; void WriteToTable()
                    6051   ; {
                    6052   _WriteToTable:
000032DC  48E7 3020 6053          movem.l   D2/D3/A2,-(A7)
000032E0  45F9 0803 6054          lea       _current.L,A2
000032E4  07BC      
                    6055   ; int i, j;
                    6056   ; for (i = 0; i < current.width; i++)
000032E6  4283      6057          clr.l     D3
                    6058   WriteToTable_1:
000032E8  B6AA 0010 6059          cmp.l     16(A2),D3
000032EC  6C00 0048 6060          bge       WriteToTable_3
                    6061   ; {
                    6062   ; for (j = 0; j < current.width; j++)
000032F0  4282      6063          clr.l     D2
                    6064   WriteToTable_4:
000032F2  B4AA 0010 6065          cmp.l     16(A2),D2
000032F6  6C00 003A 6066          bge       WriteToTable_6
                    6067   ; {
                    6068   ; if (current.array[i][j])
000032FA  2003      6069          move.l    D3,D0
000032FC  E588      6070          lsl.l     #2,D0
000032FE  41F2 0800 6071          lea       0(A2,D0.L),A0
00003302  4A30 2800 6072          tst.b     0(A0,D2.L)
00003306  6726      6073          beq.s     WriteToTable_7
                    6074   ; Table[current.row + i][current.col + j] = current.array[i][j];
00003308  2003      6075          move.l    D3,D0
0000330A  E588      6076          lsl.l     #2,D0
0000330C  41F2 0800 6077          lea       0(A2,D0.L),A0
00003310  202A 0014 6078          move.l    20(A2),D0
00003314  D083      6079          add.l     D3,D0
00003316  C1FC 000F 6080          muls      #15,D0
0000331A  43F9 0803 6081          lea       _Table.L,A1
0000331E  0546      
00003320  D3C0      6082          add.l     D0,A1
00003322  202A 0018 6083          move.l    24(A2),D0
00003326  D082      6084          add.l     D2,D0
00003328  13B0 2800 6085          move.b    0(A0,D2.L),0(A1,D0.L)
0000332C  0800      
                    6086   WriteToTable_7:
0000332E  5282      6087          addq.l    #1,D2
00003330  60C0      6088          bra       WriteToTable_4
                    6089   WriteToTable_6:
00003332  5283      6090          addq.l    #1,D3
00003334  60B2      6091          bra       WriteToTable_1
                    6092   WriteToTable_3:
00003336  4CDF 040C 6093          movem.l   (A7)+,D2/D3/A2
0000333A  4E75      6094          rts
                    6095   ; }
                    6096   ; }
                    6097   ; }
                    6098   ; void RemoveFullRowsAndUpdateScore()
                    6099   ; {
                    6100   _RemoveFullRowsAndUpdateScore:
0000333C  4E56 FFFC 6101          link      A6,#-4
00003340  48E7 3F30 6102          movem.l   D2/D3/D4/D5/D6/D7/A2/A3,-(A7)
00003344  45F9 0803 6103          lea       _Table.L,A2
00003348  0546      
0000334A  47F9 0803 6104          lea       _Tetris_Speed.L,A3
0000334E  089C      
                    6105   ; int i, j, sum, count = 0;
00003350  7E00      6106          moveq     #0,D7
                    6107   ; int l, k;
                    6108   ; int compliment_to_say;
                    6109   ; for (i = 0; i < TETRIS_ROWS; i++)
00003352  4284      6110          clr.l     D4
                    6111   RemoveFullRowsAndUpdateScore_1:
00003354  0C84 0000 6112          cmp.l     #20,D4
00003358  0014      
0000335A  6C00 00E2 6113          bge       RemoveFullRowsAndUpdateScore_3
                    6114   ; {
                    6115   ; sum = 0;
0000335E  4286      6116          clr.l     D6
                    6117   ; for (j = 0; j < TETRIS_COLS; j++)
00003360  4285      6118          clr.l     D5
                    6119   RemoveFullRowsAndUpdateScore_4:
00003362  0C85 0000 6120          cmp.l     #15,D5
00003366  000F      
00003368  6C18      6121          bge.s     RemoveFullRowsAndUpdateScore_6
                    6122   ; {
                    6123   ; sum += Table[i][j];
0000336A  2004      6124          move.l    D4,D0
0000336C  C1FC 000F 6125          muls      #15,D0
00003370  41F2 0800 6126          lea       0(A2,D0.L),A0
00003374  1030 5800 6127          move.b    0(A0,D5.L),D0
00003378  4880      6128          ext.w     D0
0000337A  48C0      6129          ext.l     D0
0000337C  DC80      6130          add.l     D0,D6
0000337E  5285      6131          addq.l    #1,D5
00003380  60E0      6132          bra       RemoveFullRowsAndUpdateScore_4
                    6133   RemoveFullRowsAndUpdateScore_6:
                    6134   ; }
                    6135   ; if (sum == TETRIS_COLS)
00003382  0C86 0000 6136          cmp.l     #15,D6
00003386  000F      
00003388  6600 00AE 6137          bne       RemoveFullRowsAndUpdateScore_7
                    6138   ; {
                    6139   ; count++;
0000338C  5287      6140          addq.l    #1,D7
                    6141   ; for (k = i; k >= 1; k--)
0000338E  2604      6142          move.l    D4,D3
                    6143   RemoveFullRowsAndUpdateScore_9:
00003390  0C83 0000 6144          cmp.l     #1,D3
00003394  0001      
00003396  6D2E      6145          blt.s     RemoveFullRowsAndUpdateScore_11
                    6146   ; for (l = 0; l < TETRIS_COLS; l++)
00003398  4282      6147          clr.l     D2
                    6148   RemoveFullRowsAndUpdateScore_12:
0000339A  0C82 0000 6149          cmp.l     #15,D2
0000339E  000F      
000033A0  6C20      6150          bge.s     RemoveFullRowsAndUpdateScore_14
                    6151   ; Table[k][l] = Table[k - 1][l];
000033A2  2003      6152          move.l    D3,D0
000033A4  5380      6153          subq.l    #1,D0
000033A6  C1FC 000F 6154          muls      #15,D0
000033AA  41F2 0800 6155          lea       0(A2,D0.L),A0
000033AE  2003      6156          move.l    D3,D0
000033B0  C1FC 000F 6157          muls      #15,D0
000033B4  43F2 0800 6158          lea       0(A2,D0.L),A1
000033B8  13B0 2800 6159          move.b    0(A0,D2.L),0(A1,D2.L)
000033BC  2800      
000033BE  5282      6160          addq.l    #1,D2
000033C0  60D8      6161          bra       RemoveFullRowsAndUpdateScore_12
                    6162   RemoveFullRowsAndUpdateScore_14:
000033C2  5383      6163          subq.l    #1,D3
000033C4  60CA      6164          bra       RemoveFullRowsAndUpdateScore_9
                    6165   RemoveFullRowsAndUpdateScore_11:
                    6166   ; for (l = 0; l < TETRIS_COLS; l++)
000033C6  4282      6167          clr.l     D2
                    6168   RemoveFullRowsAndUpdateScore_15:
000033C8  0C82 0000 6169          cmp.l     #15,D2
000033CC  000F      
000033CE  6C12      6170          bge.s     RemoveFullRowsAndUpdateScore_17
                    6171   ; Table[k][l] = 0;
000033D0  2003      6172          move.l    D3,D0
000033D2  C1FC 000F 6173          muls      #15,D0
000033D6  41F2 0800 6174          lea       0(A2,D0.L),A0
000033DA  4230 2800 6175          clr.b     0(A0,D2.L)
000033DE  5282      6176          addq.l    #1,D2
000033E0  60E6      6177          bra       RemoveFullRowsAndUpdateScore_15
                    6178   RemoveFullRowsAndUpdateScore_17:
                    6179   ; compliment_to_say = mod_bld(tetris_rand(), NUM_LINE_SUCCESS_MESSAGES);
000033E2  4878 0003 6180          pea       3
000033E6  2F00      6181          move.l    D0,-(A7)
000033E8  4EB8 30CA 6182          jsr       _tetris_rand
000033EC  2200      6183          move.l    D0,D1
000033EE  201F      6184          move.l    (A7)+,D0
000033F0  2F01      6185          move.l    D1,-(A7)
000033F2  4EB8 2A12 6186          jsr       _mod_bld
000033F6  504F      6187          addq.w    #8,A7
000033F8  2D40 FFFC 6188          move.l    D0,-4(A6)
                    6189   ; switch (compliment_to_say)
000033FC  202E FFFC 6190          move.l    -4(A6),D0
00003400  0C80 0000 6191          cmp.l     #1,D0
00003404  0001      
00003406  6718      6192          beq.s     RemoveFullRowsAndUpdateScore_21
00003408  6E06      6193          bgt.s     RemoveFullRowsAndUpdateScore_24
0000340A  4A80      6194          tst.l     D0
0000340C  670C      6195          beq.s     RemoveFullRowsAndUpdateScore_20
0000340E  601C      6196          bra.s     RemoveFullRowsAndUpdateScore_18
                    6197   RemoveFullRowsAndUpdateScore_24:
00003410  0C80 0000 6198          cmp.l     #2,D0
00003414  0002      
00003416  670E      6199          beq.s     RemoveFullRowsAndUpdateScore_22
00003418  6012      6200          bra.s     RemoveFullRowsAndUpdateScore_18
                    6201   RemoveFullRowsAndUpdateScore_20:
                    6202   ; {
                    6203   ; case 0:
                    6204   ; say_awesome();
0000341A  4EB8 2C90 6205          jsr       _say_awesome
                    6206   ; break;
0000341E  6010      6207          bra.s     RemoveFullRowsAndUpdateScore_19
                    6208   RemoveFullRowsAndUpdateScore_21:
                    6209   ; case 1:
                    6210   ; say_cool();
00003420  4EB8 2CA6 6211          jsr       _say_cool
                    6212   ; break;
00003424  600A      6213          bra.s     RemoveFullRowsAndUpdateScore_19
                    6214   RemoveFullRowsAndUpdateScore_22:
                    6215   ; case 2:
                    6216   ; say_yeah();
00003426  4EB8 2CBC 6217          jsr       _say_yeah
                    6218   ; break;
0000342A  6004      6219          bra.s     RemoveFullRowsAndUpdateScore_19
                    6220   RemoveFullRowsAndUpdateScore_18:
                    6221   ; default:
                    6222   ; say_yeah();
0000342C  4EB8 2CBC 6223          jsr       _say_yeah
                    6224   ; break;
                    6225   RemoveFullRowsAndUpdateScore_19:
                    6226   ; }
                    6227   ; Tetris_Speed.speed = Tetris_Speed.speed + Tetris_Speed.speed_increase;
00003430  2013      6228          move.l    (A3),D0
00003432  D0AB 0004 6229          add.l     4(A3),D0
00003436  2680      6230          move.l    D0,(A3)
                    6231   RemoveFullRowsAndUpdateScore_7:
00003438  5284      6232          addq.l    #1,D4
0000343A  6000 FF18 6233          bra       RemoveFullRowsAndUpdateScore_1
                    6234   RemoveFullRowsAndUpdateScore_3:
                    6235   ; }
                    6236   ; }
                    6237   ; tetris_score += 100 * count;
0000343E  2F07      6238          move.l    D7,-(A7)
00003440  4878 0064 6239          pea       100
00003444  4EB9 0000 6240          jsr       LMUL
00003448  3B7E      
0000344A  2017      6241          move.l    (A7),D0
0000344C  504F      6242          addq.w    #8,A7
0000344E  D1B9 0803 6243          add.l     D0,_tetris_score.L
00003452  07B0      
00003454  4CDF 0CFC 6244          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3
00003458  4E5E      6245          unlk      A6
0000345A  4E75      6246          rts
                    6247   ; }
                    6248   ; void PrintTable()
                    6249   ; {
                    6250   _PrintTable:
0000345C  4E56 FE54 6251          link      A6,#-428
00003460  48E7 3038 6252          movem.l   D2/D3/A2/A3/A4,-(A7)
00003464  45F9 0803 6253          lea       _current.L,A2
00003468  07BC      
0000346A  47F8 2E82 6254          lea       _printw.L,A3
0000346E  49EE FED4 6255          lea       -300(A6),A4
                    6256   ; int i, j;
                    6257   ; char score_str[128];
                    6258   ; char Buffer[TETRIS_ROWS][TETRIS_COLS];
                    6259   ; printw_x = 0;
00003472  42B9 0803 6260          clr.l     _printw_x.L
00003476  08A4      
                    6261   ; printw_y = 0;
00003478  42B9 0803 6262          clr.l     _printw_y.L
0000347C  08A8      
                    6263   ; for (i = 0; i < TETRIS_ROWS; i++)
0000347E  4282      6264          clr.l     D2
                    6265   PrintTable_1:
00003480  0C82 0000 6266          cmp.l     #20,D2
00003484  0014      
00003486  6C20      6267          bge.s     PrintTable_3
                    6268   ; {
                    6269   ; for (j = 0; j < TETRIS_COLS; j++)
00003488  4283      6270          clr.l     D3
                    6271   PrintTable_4:
0000348A  0C83 0000 6272          cmp.l     #15,D3
0000348E  000F      
00003490  6C12      6273          bge.s     PrintTable_6
                    6274   ; {
                    6275   ; Buffer[i][j] = 0;
00003492  2002      6276          move.l    D2,D0
00003494  C1FC 000F 6277          muls      #15,D0
00003498  41F4 0800 6278          lea       0(A4,D0.L),A0
0000349C  4230 3800 6279          clr.b     0(A0,D3.L)
000034A0  5283      6280          addq.l    #1,D3
000034A2  60E6      6281          bra       PrintTable_4
                    6282   PrintTable_6:
000034A4  5282      6283          addq.l    #1,D2
000034A6  60D8      6284          bra       PrintTable_1
                    6285   PrintTable_3:
                    6286   ; }
                    6287   ; }
                    6288   ; for (i = 0; i < current.width; i++)
000034A8  4282      6289          clr.l     D2
                    6290   PrintTable_7:
000034AA  B4AA 0010 6291          cmp.l     16(A2),D2
000034AE  6C00 0066 6292          bge       PrintTable_9
                    6293   ; {
                    6294   ; for (j = 0; j < current.width; j++)
000034B2  4283      6295          clr.l     D3
                    6296   PrintTable_10:
000034B4  B6AA 0010 6297          cmp.l     16(A2),D3
000034B8  6C00 0058 6298          bge       PrintTable_12
                    6299   ; {
                    6300   ; if (current.array[i][j])
000034BC  2002      6301          move.l    D2,D0
000034BE  E588      6302          lsl.l     #2,D0
000034C0  41F2 0800 6303          lea       0(A2,D0.L),A0
000034C4  4A30 3800 6304          tst.b     0(A0,D3.L)
000034C8  6700 0044 6305          beq       PrintTable_13
                    6306   ; {
                    6307   ; Buffer[current.row + i][current.col + j] = current.array[i][j];
000034CC  2002      6308          move.l    D2,D0
000034CE  E588      6309          lsl.l     #2,D0
000034D0  41F2 0800 6310          lea       0(A2,D0.L),A0
000034D4  202A 0014 6311          move.l    20(A2),D0
000034D8  D082      6312          add.l     D2,D0
000034DA  C1FC 000F 6313          muls      #15,D0
000034DE  43F4 0800 6314          lea       0(A4,D0.L),A1
000034E2  202A 0018 6315          move.l    24(A2),D0
000034E6  D083      6316          add.l     D3,D0
000034E8  13B0 3800 6317          move.b    0(A0,D3.L),0(A1,D0.L)
000034EC  0800      
                    6318   ; TableColor[current.row + i][current.col + j] = currentColor;
000034EE  202A 0014 6319          move.l    20(A2),D0
000034F2  D082      6320          add.l     D2,D0
000034F4  C1FC 000F 6321          muls      #15,D0
000034F8  41F9 0803 6322          lea       _TableColor.L,A0
000034FC  0672      
000034FE  D1C0      6323          add.l     D0,A0
00003500  202A 0018 6324          move.l    24(A2),D0
00003504  D083      6325          add.l     D3,D0
00003506  11B9 0803 6326          move.b    _currentColor.L,0(A0,D0.L)
0000350A  07AE 0800 
                    6327   PrintTable_13:
0000350E  5283      6328          addq.l    #1,D3
00003510  60A2      6329          bra       PrintTable_10
                    6330   PrintTable_12:
00003512  5282      6331          addq.l    #1,D2
00003514  6094      6332          bra       PrintTable_7
                    6333   PrintTable_9:
                    6334   ; }
                    6335   ; }
                    6336   ; }
                    6337   ; go_to_top_corner();
00003516  4EB8 2C42 6338          jsr       _go_to_top_corner
                    6339   ; printw("\n\n\n", "initial_newline");
0000351A  4879 0000 6340          pea       @tetris_9.L
0000351E  517C      
00003520  4879 0000 6341          pea       @tetris_8.L
00003524  5178      
00003526  4E93      6342          jsr       (A3)
00003528  504F      6343          addq.w    #8,A7
                    6344   ; for (i = 0; i < TETRIS_COLS - 9; i++)
0000352A  4282      6345          clr.l     D2
                    6346   PrintTable_15:
0000352C  0C82 0000 6347          cmp.l     #6,D2
00003530  0006      
00003532  6C14      6348          bge.s     PrintTable_17
                    6349   ; {
                    6350   ; printw(" ", "space");
00003534  4879 0000 6351          pea       @tetris_11.L
00003538  518E      
0000353A  4879 0000 6352          pea       @tetris_10.L
0000353E  518C      
00003540  4E93      6353          jsr       (A3)
00003542  504F      6354          addq.w    #8,A7
00003544  5282      6355          addq.l    #1,D2
00003546  60E4      6356          bra       PrintTable_15
                    6357   PrintTable_17:
                    6358   ; }
                    6359   ; printw("CPEN412 Tetris\n", "title");
00003548  4879 0000 6360          pea       @tetris_13.L
0000354C  51A4      
0000354E  4879 0000 6361          pea       @tetris_12.L
00003552  5194      
00003554  4E93      6362          jsr       (A3)
00003556  504F      6363          addq.w    #8,A7
                    6364   ; for (i = 0; i < TETRIS_ROWS; i++)
00003558  4282      6365          clr.l     D2
                    6366   PrintTable_18:
0000355A  0C82 0000 6367          cmp.l     #20,D2
0000355E  0014      
00003560  6C00 0088 6368          bge       PrintTable_20
                    6369   ; {
                    6370   ; for (j = 0; j < TETRIS_COLS; j++)
00003564  4283      6371          clr.l     D3
                    6372   PrintTable_21:
00003566  0C83 0000 6373          cmp.l     #15,D3
0000356A  000F      
0000356C  6C00 0066 6374          bge       PrintTable_23
                    6375   ; {
                    6376   ; if (Table[i][j] + Buffer[i][j])
00003570  2002      6377          move.l    D2,D0
00003572  C1FC 000F 6378          muls      #15,D0
00003576  41F9 0803 6379          lea       _Table.L,A0
0000357A  0546      
0000357C  D1C0      6380          add.l     D0,A0
0000357E  1030 3800 6381          move.b    0(A0,D3.L),D0
00003582  2202      6382          move.l    D2,D1
00003584  C3FC 000F 6383          muls      #15,D1
00003588  41F4 1800 6384          lea       0(A4,D1.L),A0
0000358C  D030 3800 6385          add.b     0(A0,D3.L),D0
00003590  672E      6386          beq.s     PrintTable_24
                    6387   ; {
                    6388   ; printwColor("#", TableColor[i][j], "table#");
00003592  4879 0000 6389          pea       @tetris_15.L
00003596  51AC      
00003598  2202      6390          move.l    D2,D1
0000359A  C3FC 000F 6391          muls      #15,D1
0000359E  41F9 0803 6392          lea       _TableColor.L,A0
000035A2  0672      
000035A4  D1C1      6393          add.l     D1,A0
000035A6  1230 3800 6394          move.b    0(A0,D3.L),D1
000035AA  4881      6395          ext.w     D1
000035AC  48C1      6396          ext.l     D1
000035AE  2F01      6397          move.l    D1,-(A7)
000035B0  4879 0000 6398          pea       @tetris_14.L
000035B4  51AA      
000035B6  4EB8 2E16 6399          jsr       _printwColor
000035BA  DEFC 000C 6400          add.w     #12,A7
000035BE  6010      6401          bra.s     PrintTable_25
                    6402   PrintTable_24:
                    6403   ; }
                    6404   ; else
                    6405   ; {
                    6406   ; printw(".", "table.");
000035C0  4879 0000 6407          pea       @tetris_17.L
000035C4  51B6      
000035C6  4879 0000 6408          pea       @tetris_16.L
000035CA  51B4      
000035CC  4E93      6409          jsr       (A3)
000035CE  504F      6410          addq.w    #8,A7
                    6411   PrintTable_25:
000035D0  5283      6412          addq.l    #1,D3
000035D2  6092      6413          bra       PrintTable_21
                    6414   PrintTable_23:
                    6415   ; }
                    6416   ; // printw(" ","space2");
                    6417   ; }
                    6418   ; printw("\n", "newline1");
000035D4  4879 0000 6419          pea       @tetris_19.L
000035D8  51C0      
000035DA  4879 0000 6420          pea       @tetris_18.L
000035DE  51BE      
000035E0  4E93      6421          jsr       (A3)
000035E2  504F      6422          addq.w    #8,A7
000035E4  5282      6423          addq.l    #1,D2
000035E6  6000 FF72 6424          bra       PrintTable_18
                    6425   PrintTable_20:
                    6426   ; }
                    6427   ; sprintf(score_str, "\nScore: %d\n", tetris_score);
000035EA  2F39 0803 6428          move.l    _tetris_score.L,-(A7)
000035EE  07B0      
000035F0  4879 0000 6429          pea       @tetris_20.L
000035F4  51CA      
000035F6  486E FE54 6430          pea       -428(A6)
000035FA  4EB9 0000 6431          jsr       _sprintf
000035FE  3C68      
00003600  DEFC 000C 6432          add.w     #12,A7
                    6433   ; printw(score_str, "scoreprint");
00003604  4879 0000 6434          pea       @tetris_21.L
00003608  51D6      
0000360A  486E FE54 6435          pea       -428(A6)
0000360E  4E93      6436          jsr       (A3)
00003610  504F      6437          addq.w    #8,A7
00003612  4CDF 1C0C 6438          movem.l   (A7)+,D2/D3/A2/A3/A4
00003616  4E5E      6439          unlk      A6
00003618  4E75      6440          rts
                    6441   ; }
                    6442   ; void ManipulateCurrent(int action)
                    6443   ; {
                    6444   _ManipulateCurrent:
0000361A  4E56 FFE4 6445          link      A6,#-28
0000361E  48E7 0038 6446          movem.l   A2/A3/A4,-(A7)
00003622  45EE FFE4 6447          lea       -28(A6),A2
00003626  47F9 0803 6448          lea       _current.L,A3
0000362A  07BC      
0000362C  49F8 3142 6449          lea       _CheckPosition.L,A4
                    6450   ; Shape temp;
                    6451   ; CopyShape(&current, &temp);
00003630  2F0A      6452          move.l    A2,-(A7)
00003632  2F0B      6453          move.l    A3,-(A7)
00003634  4EB8 30D8 6454          jsr       _CopyShape
00003638  504F      6455          addq.w    #8,A7
                    6456   ; switch (action)
0000363A  202E 0008 6457          move.l    8(A6),D0
0000363E  0C80 0000 6458          cmp.l     #115,D0
00003642  0073      
00003644  672C      6459          beq.s     ManipulateCurrent_3
00003646  6E1C      6460          bgt.s     ManipulateCurrent_7
00003648  0C80 0000 6461          cmp.l     #100,D0
0000364C  0064      
0000364E  6700 0056 6462          beq       ManipulateCurrent_4
00003652  6E00 00B6 6463          bgt       ManipulateCurrent_2
00003656  0C80 0000 6464          cmp.l     #97,D0
0000365A  0061      
0000365C  6700 006E 6465          beq       ManipulateCurrent_5
00003660  6000 00A8 6466          bra       ManipulateCurrent_2
                    6467   ManipulateCurrent_7:
00003664  0C80 0000 6468          cmp.l     #119,D0
00003668  0077      
0000366A  6700 0084 6469          beq       ManipulateCurrent_6
0000366E  6000 009A 6470          bra       ManipulateCurrent_2
                    6471   ManipulateCurrent_3:
                    6472   ; {
                    6473   ; case 's':
                    6474   ; temp.row++; // move down
00003672  200A      6475          move.l    A2,D0
00003674  0680 0000 6476          add.l     #20,D0
00003678  0014      
0000367A  2040      6477          move.l    D0,A0
0000367C  5290      6478          addq.l    #1,(A0)
                    6479   ; if (CheckPosition(&temp))
0000367E  2F0A      6480          move.l    A2,-(A7)
00003680  4E94      6481          jsr       (A4)
00003682  584F      6482          addq.w    #4,A7
00003684  4A80      6483          tst.l     D0
00003686  670E      6484          beq.s     ManipulateCurrent_8
                    6485   ; {
                    6486   ; current.row++;
00003688  200B      6487          move.l    A3,D0
0000368A  0680 0000 6488          add.l     #20,D0
0000368E  0014      
00003690  2040      6489          move.l    D0,A0
00003692  5290      6490          addq.l    #1,(A0)
00003694  600C      6491          bra.s     ManipulateCurrent_9
                    6492   ManipulateCurrent_8:
                    6493   ; }
                    6494   ; else
                    6495   ; {
                    6496   ; WriteToTable();
00003696  4EB8 32DC 6497          jsr       _WriteToTable
                    6498   ; RemoveFullRowsAndUpdateScore();
0000369A  4EB8 333C 6499          jsr       _RemoveFullRowsAndUpdateScore
                    6500   ; SetNewRandomShape();
0000369E  4EB8 31F8 6501          jsr       _SetNewRandomShape
                    6502   ManipulateCurrent_9:
                    6503   ; }
                    6504   ; break;
000036A2  6000 0066 6505          bra       ManipulateCurrent_2
                    6506   ManipulateCurrent_4:
                    6507   ; case 'd':
                    6508   ; temp.col++; // move right
000036A6  200A      6509          move.l    A2,D0
000036A8  0680 0000 6510          add.l     #24,D0
000036AC  0018      
000036AE  2040      6511          move.l    D0,A0
000036B0  5290      6512          addq.l    #1,(A0)
                    6513   ; if (CheckPosition(&temp))
000036B2  2F0A      6514          move.l    A2,-(A7)
000036B4  4E94      6515          jsr       (A4)
000036B6  584F      6516          addq.w    #4,A7
000036B8  4A80      6517          tst.l     D0
000036BA  670C      6518          beq.s     ManipulateCurrent_10
                    6519   ; current.col++;
000036BC  200B      6520          move.l    A3,D0
000036BE  0680 0000 6521          add.l     #24,D0
000036C2  0018      
000036C4  2040      6522          move.l    D0,A0
000036C6  5290      6523          addq.l    #1,(A0)
                    6524   ManipulateCurrent_10:
                    6525   ; break;
000036C8  6000 0040 6526          bra       ManipulateCurrent_2
                    6527   ManipulateCurrent_5:
                    6528   ; case 'a':
                    6529   ; temp.col--; // move left
000036CC  200A      6530          move.l    A2,D0
000036CE  0680 0000 6531          add.l     #24,D0
000036D2  0018      
000036D4  2040      6532          move.l    D0,A0
000036D6  5390      6533          subq.l    #1,(A0)
                    6534   ; if (CheckPosition(&temp))
000036D8  2F0A      6535          move.l    A2,-(A7)
000036DA  4E94      6536          jsr       (A4)
000036DC  584F      6537          addq.w    #4,A7
000036DE  4A80      6538          tst.l     D0
000036E0  670C      6539          beq.s     ManipulateCurrent_12
                    6540   ; current.col--;
000036E2  200B      6541          move.l    A3,D0
000036E4  0680 0000 6542          add.l     #24,D0
000036E8  0018      
000036EA  2040      6543          move.l    D0,A0
000036EC  5390      6544          subq.l    #1,(A0)
                    6545   ManipulateCurrent_12:
                    6546   ; break;
000036EE  601A      6547          bra.s     ManipulateCurrent_2
                    6548   ManipulateCurrent_6:
                    6549   ; case 'w':
                    6550   ; RotateShape(&temp); // rotate clockwise
000036F0  2F0A      6551          move.l    A2,-(A7)
000036F2  4EB8 3280 6552          jsr       _RotateShape
000036F6  584F      6553          addq.w    #4,A7
                    6554   ; if (CheckPosition(&temp))
000036F8  2F0A      6555          move.l    A2,-(A7)
000036FA  4E94      6556          jsr       (A4)
000036FC  584F      6557          addq.w    #4,A7
000036FE  4A80      6558          tst.l     D0
00003700  6708      6559          beq.s     ManipulateCurrent_14
                    6560   ; RotateShape(&current);
00003702  2F0B      6561          move.l    A3,-(A7)
00003704  4EB8 3280 6562          jsr       _RotateShape
00003708  584F      6563          addq.w    #4,A7
                    6564   ManipulateCurrent_14:
                    6565   ; break;
                    6566   ManipulateCurrent_2:
                    6567   ; }
                    6568   ; PrintTable();
0000370A  4EB8 345C 6569          jsr       _PrintTable
0000370E  4CDF 1C00 6570          movem.l   (A7)+,A2/A3/A4
00003712  4E5E      6571          unlk      A6
00003714  4E75      6572          rts
                    6573   ; }
                    6574   ; void initTetris_Speed()
                    6575   ; {
                    6576   _initTetris_Speed:
                    6577   ; Tetris_Speed.speed = INITIAL_TETRIS_SPEED;
00003716  23FC 0000 6578          move.l    #2,_Tetris_Speed.L
0000371A  0002 0803 
0000371E  089C      
                    6579   ; Tetris_Speed.speed_increase = TETRIS_SPEED_INCREASE;
00003720  23FC 0000 6580          move.l    #1,_Tetris_Speed+4.L
00003724  0001 0803 
00003728  08A0      
0000372A  4E75      6581          rts
                    6582   ; }
                    6583   ; void tetris_mainloop()
                    6584   ; {
                    6585   _tetris_mainloop:
0000372C  4E56 FFFC 6586          link      A6,#-4
00003730  2F02      6587          move.l    D2,-(A7)
                    6588   ; int current_time;
                    6589   ; int got_game_over;
                    6590   ; while (1)
                    6591   tetris_mainloop_1:
                    6592   ; {
                    6593   ; current_time = clock();
00003732  4EB8 2E00 6594          jsr       _clock
00003736  2400      6595          move.l    D0,D2
                    6596   ; if (kbhit())
00003738  4EB8 09E2 6597          jsr       _kbhit
0000373C  4A80      6598          tst.l     D0
0000373E  6720      6599          beq.s     tetris_mainloop_6
                    6600   ; {
                    6601   ; ManipulateCurrent(getch());
00003740  2F00      6602          move.l    D0,-(A7)
00003742  4EB9 0000 6603          jsr       _getch
00003746  3D10      
00003748  2200      6604          move.l    D0,D1
0000374A  201F      6605          move.l    (A7)+,D0
0000374C  2F01      6606          move.l    D1,-(A7)
0000374E  4EB8 361A 6607          jsr       _ManipulateCurrent
00003752  584F      6608          addq.w    #4,A7
                    6609   ; if (!GameOn)
00003754  4A39 0803 6610          tst.b     _GameOn.L
00003758  07B4      
0000375A  6604      6611          bne.s     tetris_mainloop_6
                    6612   ; {
                    6613   ; break;
0000375C  6000 003C 6614          bra       tetris_mainloop_3
                    6615   tetris_mainloop_6:
                    6616   ; }
                    6617   ; }
                    6618   ; if (current_time >= ((MILLISECONDS_PER_SEC / Tetris_Speed.speed) + tetris_timer))
00003760  4878 03E8 6619          pea       1000
00003764  2F39 0803 6620          move.l    _Tetris_Speed.L,-(A7)
00003768  089C      
0000376A  4EB9 0000 6621          jsr       LDIV
0000376E  3AA0      
00003770  2017      6622          move.l    (A7),D0
00003772  504F      6623          addq.w    #8,A7
00003774  D0B9 0803 6624          add.l     _tetris_timer.L,D0
00003778  07B6      
0000377A  B480      6625          cmp.l     D0,D2
0000377C  6D1A      6626          blt.s     tetris_mainloop_8
                    6627   ; {
                    6628   ; ManipulateCurrent('s');
0000377E  4878 0073 6629          pea       115
00003782  4EB8 361A 6630          jsr       _ManipulateCurrent
00003786  584F      6631          addq.w    #4,A7
                    6632   ; if (!GameOn)
00003788  4A39 0803 6633          tst.b     _GameOn.L
0000378C  07B4      
0000378E  6602      6634          bne.s     tetris_mainloop_10
                    6635   ; {
                    6636   ; break;
00003790  6008      6637          bra.s     tetris_mainloop_3
                    6638   tetris_mainloop_10:
                    6639   ; }
                    6640   ; tetris_timer = current_time;
00003792  23C2 0803 6641          move.l    D2,_tetris_timer.L
00003796  07B6      
                    6642   tetris_mainloop_8:
00003798  6098      6643          bra       tetris_mainloop_1
                    6644   tetris_mainloop_3:
0000379A  241F      6645          move.l    (A7)+,D2
0000379C  4E5E      6646          unlk      A6
0000379E  4E75      6647          rts
                    6648   ; }
                    6649   ; }
                    6650   ; }
                    6651   ; // void test(){
                    6652   ; // 	printf("Testing\n");
                    6653   ; // 	while (1){
                    6654   ; // 		octlAddress = 0xF3;
                    6655   ; // 		octlAddress1 = 0xE2;
                    6656   ; // 	}
                    6657   ; // }
                    6658   ; // void testSound(){
                    6659   ; //     say_awesome();
                    6660   ; // 	Wait250ms_here();
                    6661   ; // 	say_cool();
                    6662   ; // 	Wait250ms_here();
                    6663   ; // 	say_yeah();
                    6664   ; // 	Wait250ms_here();
                    6665   ; // 	say_game_over();
                    6666   ; // 	Wait250ms_here();
                    6667   ; // }
                    6668   ; int tetris_main()
                    6669   ; {
                    6670   _tetris_main:
000037A0  4E56 FF7C 6671          link      A6,#-132
000037A4  48E7 3038 6672          movem.l   D2/D3/A2/A3/A4,-(A7)
000037A8  45F9 0803 6673          lea       _ShapesArray.L,A2
000037AC  07D8      
000037AE  47F9 0000 6674          lea       _printf.L,A3
000037B2  3CDE      
000037B4  49F9 0803 6675          lea       _Table.L,A4
000037B8  0546      
                    6676   ; int i, j;
                    6677   ; int test1;
                    6678   ; char score_str[128];
                    6679   ; // while(1){
                    6680   ; // 	testSound();
                    6681   ; // }
                    6682   ; // test();
                    6683   ; timer_count = 0;
000037BA  42B9 0803 6684          clr.l     _timer_count.L
000037BE  08B0      
                    6685   ; printw_x = 0;
000037C0  42B9 0803 6686          clr.l     _printw_x.L
000037C4  08A4      
                    6687   ; printw_y = 0;
000037C6  42B9 0803 6688          clr.l     _printw_y.L
000037CA  08A8      
                    6689   ; GameOn = TRUE;
000037CC  13FC 0001 6690          move.b    #1,_GameOn.L
000037D0  0803 07B4 
                    6691   ; InstallExceptionHandler(Timer_ISR, 30);
000037D4  4878 001E 6692          pea       30
000037D8  4878 2A4E 6693          pea       _Timer_ISR.L
000037DC  4EB8 093A 6694          jsr       _InstallExceptionHandler
000037E0  504F      6695          addq.w    #8,A7
                    6696   ; Timer1Data = 0x25; // 100 ms
000037E2  13FC 0025 6697          move.b    #37,4194352
000037E6  0040 0030 
                    6698   ; Timer1Control = 3; // enable timer, periodic mode
000037EA  13FC 0003 6699          move.b    #3,4194354
000037EE  0040 0032 
                    6700   ; // InstallExceptionHandler(Timer_ISR, 29);
                    6701   ; // InstallExceptionHandler(Timer_ISR, 28);
                    6702   ; // InstallExceptionHandler(Timer_ISR, 27);
                    6703   ; // InstallExceptionHandler(Timer_ISR, 26);
                    6704   ; // InstallExceptionHandler(Timer_ISR, 25);
                    6705   ; octl = OCTL_TETRIS_DEFAULT;
000037F2  13FC 00A2 6706          move.b    #162,_octl.L
000037F6  0803 07BA 
                    6707   ; octlAddress = octl;
000037FA  13F9 0803 6708          move.b    _octl.L,-16580608
000037FE  07BA FF03 
00003802  0000      
                    6709   ; for (j = 0; j < TETRIS_COLS; j++)
00003804  4282      6710          clr.l     D2
                    6711   tetris_main_1:
00003806  0C82 0000 6712          cmp.l     #15,D2
0000380A  000F      
0000380C  6C00 003E 6713          bge       tetris_main_3
                    6714   ; {
                    6715   ; Table[0][j] = 2; // default color
00003810  19BC 0002 6716          move.b    #2,0(A4,D2.L)
00003814  2800      
                    6717   ; for (i = 0; i < TETRIS_ROWS; i++)
00003816  4283      6718          clr.l     D3
                    6719   tetris_main_4:
00003818  0C83 0000 6720          cmp.l     #20,D3
0000381C  0014      
0000381E  6C28      6721          bge.s     tetris_main_6
                    6722   ; {
                    6723   ; Table[i][j] = 0;
00003820  2003      6724          move.l    D3,D0
00003822  C1FC 000F 6725          muls      #15,D0
00003826  41F4 0800 6726          lea       0(A4,D0.L),A0
0000382A  4230 2800 6727          clr.b     0(A0,D2.L)
                    6728   ; TableColor[i + 1][j] = 2; // default color
0000382E  2003      6729          move.l    D3,D0
00003830  5280      6730          addq.l    #1,D0
00003832  C1FC 000F 6731          muls      #15,D0
00003836  41F9 0803 6732          lea       _TableColor.L,A0
0000383A  0672      
0000383C  D1C0      6733          add.l     D0,A0
0000383E  11BC 0002 6734          move.b    #2,0(A0,D2.L)
00003842  2800      
00003844  5283      6735          addq.l    #1,D3
00003846  60D0      6736          bra       tetris_main_4
                    6737   tetris_main_6:
00003848  5282      6738          addq.l    #1,D2
0000384A  60BA      6739          bra       tetris_main_1
                    6740   tetris_main_3:
                    6741   ; }
                    6742   ; }
                    6743   ; // S shape
                    6744   ; ShapesArray[0].array[0][0] = 0;
0000384C  4212      6745          clr.b     (A2)
                    6746   ; ShapesArray[0].array[0][1] = 1;
0000384E  157C 0001 6747          move.b    #1,1(A2)
00003852  0001      
                    6748   ; ShapesArray[0].array[0][2] = 1;
00003854  157C 0001 6749          move.b    #1,2(A2)
00003858  0002      
                    6750   ; ShapesArray[0].array[1][0] = 1;
0000385A  157C 0001 6751          move.b    #1,4(A2)
0000385E  0004      
                    6752   ; ShapesArray[0].array[1][1] = 1;
00003860  157C 0001 6753          move.b    #1,4+1(A2)
00003864  0005      
                    6754   ; ShapesArray[0].array[1][2] = 0;
00003866  422A 0006 6755          clr.b     4+2(A2)
                    6756   ; ShapesArray[0].array[2][0] = 0;
0000386A  422A 0008 6757          clr.b     8(A2)
                    6758   ; ShapesArray[0].array[2][1] = 0;
0000386E  422A 0009 6759          clr.b     8+1(A2)
                    6760   ; ShapesArray[0].array[2][2] = 0;
00003872  422A 000A 6761          clr.b     8+2(A2)
                    6762   ; ShapesArray[0].width = 3;
00003876  257C 0000 6763          move.l    #3,16(A2)
0000387A  0003 0010 
                    6764   ; // Z shape
                    6765   ; ShapesArray[1].array[0][0] = 1;
0000387E  157C 0001 6766          move.b    #1,28(A2)
00003882  001C      
                    6767   ; ShapesArray[1].array[0][1] = 1;
00003884  157C 0001 6768          move.b    #1,28+1(A2)
00003888  001D      
                    6769   ; ShapesArray[1].array[0][2] = 0;
0000388A  422A 001E 6770          clr.b     28+2(A2)
                    6771   ; ShapesArray[1].array[1][0] = 0;
0000388E  422A 0020 6772          clr.b     28+4(A2)
                    6773   ; ShapesArray[1].array[1][1] = 1;
00003892  157C 0001 6774          move.b    #1,28+4+1(A2)
00003896  0021      
                    6775   ; ShapesArray[1].array[1][2] = 1;
00003898  157C 0001 6776          move.b    #1,28+4+2(A2)
0000389C  0022      
                    6777   ; ShapesArray[1].array[2][0] = 0;
0000389E  422A 0024 6778          clr.b     28+8(A2)
                    6779   ; ShapesArray[1].array[2][1] = 0;
000038A2  422A 0025 6780          clr.b     28+8+1(A2)
                    6781   ; ShapesArray[1].array[2][2] = 0;
000038A6  422A 0026 6782          clr.b     28+8+2(A2)
                    6783   ; ShapesArray[1].width = 3;
000038AA  257C 0000 6784          move.l    #3,44(A2)
000038AE  0003 002C 
                    6785   ; // T shape
                    6786   ; ShapesArray[2].array[0][0] = 0;
000038B2  422A 0038 6787          clr.b     56(A2)
                    6788   ; ShapesArray[2].array[0][1] = 1;
000038B6  157C 0001 6789          move.b    #1,56+1(A2)
000038BA  0039      
                    6790   ; ShapesArray[2].array[0][2] = 0;
000038BC  422A 003A 6791          clr.b     56+2(A2)
                    6792   ; ShapesArray[2].array[1][0] = 1;
000038C0  157C 0001 6793          move.b    #1,56+4(A2)
000038C4  003C      
                    6794   ; ShapesArray[2].array[1][1] = 1;
000038C6  157C 0001 6795          move.b    #1,56+4+1(A2)
000038CA  003D      
                    6796   ; ShapesArray[2].array[1][2] = 1;
000038CC  157C 0001 6797          move.b    #1,56+4+2(A2)
000038D0  003E      
                    6798   ; ShapesArray[2].array[2][0] = 0;
000038D2  422A 0040 6799          clr.b     56+8(A2)
                    6800   ; ShapesArray[2].array[2][1] = 0;
000038D6  422A 0041 6801          clr.b     56+8+1(A2)
                    6802   ; ShapesArray[2].array[2][2] = 0;
000038DA  422A 0042 6803          clr.b     56+8+2(A2)
                    6804   ; ShapesArray[2].width = 3;
000038DE  257C 0000 6805          move.l    #3,72(A2)
000038E2  0003 0048 
                    6806   ; // L shape
                    6807   ; ShapesArray[3].array[0][0] = 0;
000038E6  422A 0054 6808          clr.b     84(A2)
                    6809   ; ShapesArray[3].array[0][1] = 0;
000038EA  422A 0055 6810          clr.b     84+1(A2)
                    6811   ; ShapesArray[3].array[0][2] = 1;
000038EE  157C 0001 6812          move.b    #1,84+2(A2)
000038F2  0056      
                    6813   ; ShapesArray[3].array[1][0] = 1;
000038F4  157C 0001 6814          move.b    #1,84+4(A2)
000038F8  0058      
                    6815   ; ShapesArray[3].array[1][1] = 1;
000038FA  157C 0001 6816          move.b    #1,84+4+1(A2)
000038FE  0059      
                    6817   ; ShapesArray[3].array[1][2] = 1;
00003900  157C 0001 6818          move.b    #1,84+4+2(A2)
00003904  005A      
                    6819   ; ShapesArray[3].array[2][0] = 0;
00003906  422A 005C 6820          clr.b     84+8(A2)
                    6821   ; ShapesArray[3].array[2][1] = 0;
0000390A  422A 005D 6822          clr.b     84+8+1(A2)
                    6823   ; ShapesArray[3].array[2][2] = 0;
0000390E  422A 005E 6824          clr.b     84+8+2(A2)
                    6825   ; ShapesArray[3].width = 3;
00003912  257C 0000 6826          move.l    #3,100(A2)
00003916  0003 0064 
                    6827   ; // flipped L shape
                    6828   ; ShapesArray[4].array[0][0] = 1;
0000391A  157C 0001 6829          move.b    #1,112(A2)
0000391E  0070      
                    6830   ; ShapesArray[4].array[0][1] = 0;
00003920  422A 0071 6831          clr.b     112+1(A2)
                    6832   ; ShapesArray[4].array[0][2] = 0;
00003924  422A 0072 6833          clr.b     112+2(A2)
                    6834   ; ShapesArray[4].array[1][0] = 1;
00003928  157C 0001 6835          move.b    #1,112+4(A2)
0000392C  0074      
                    6836   ; ShapesArray[4].array[1][1] = 1;
0000392E  157C 0001 6837          move.b    #1,112+4+1(A2)
00003932  0075      
                    6838   ; ShapesArray[4].array[1][2] = 1;
00003934  157C 0001 6839          move.b    #1,112+4+2(A2)
00003938  0076      
                    6840   ; ShapesArray[4].array[2][0] = 0;
0000393A  422A 0078 6841          clr.b     112+8(A2)
                    6842   ; ShapesArray[4].array[2][1] = 0;
0000393E  422A 0079 6843          clr.b     112+8+1(A2)
                    6844   ; ShapesArray[4].array[2][2] = 0;
00003942  422A 007A 6845          clr.b     112+8+2(A2)
                    6846   ; ShapesArray[4].width = 3;
00003946  257C 0000 6847          move.l    #3,128(A2)
0000394A  0003 0080 
                    6848   ; // square shape
                    6849   ; ShapesArray[5].array[0][0] = 1;
0000394E  157C 0001 6850          move.b    #1,140(A2)
00003952  008C      
                    6851   ; ShapesArray[5].array[0][1] = 1;
00003954  157C 0001 6852          move.b    #1,140+1(A2)
00003958  008D      
                    6853   ; ShapesArray[5].array[1][0] = 1;
0000395A  157C 0001 6854          move.b    #1,140+4(A2)
0000395E  0090      
                    6855   ; ShapesArray[5].array[1][1] = 1;
00003960  157C 0001 6856          move.b    #1,140+4+1(A2)
00003964  0091      
                    6857   ; ShapesArray[5].width = 2;
00003966  257C 0000 6858          move.l    #2,156(A2)
0000396A  0002 009C 
                    6859   ; // long bar shape
                    6860   ; ShapesArray[6].array[0][0] = 0;
0000396E  422A 00A8 6861          clr.b     168(A2)
                    6862   ; ShapesArray[6].array[0][1] = 0;
00003972  422A 00A9 6863          clr.b     168+1(A2)
                    6864   ; ShapesArray[6].array[0][2] = 0;
00003976  422A 00AA 6865          clr.b     168+2(A2)
                    6866   ; ShapesArray[6].array[0][3] = 0;
0000397A  422A 00AB 6867          clr.b     168+3(A2)
                    6868   ; ShapesArray[6].array[1][0] = 1;
0000397E  157C 0001 6869          move.b    #1,168+4(A2)
00003982  00AC      
                    6870   ; ShapesArray[6].array[1][1] = 1;
00003984  157C 0001 6871          move.b    #1,168+4+1(A2)
00003988  00AD      
                    6872   ; ShapesArray[6].array[1][2] = 1;
0000398A  157C 0001 6873          move.b    #1,168+4+2(A2)
0000398E  00AE      
                    6874   ; ShapesArray[6].array[1][3] = 1;
00003990  157C 0001 6875          move.b    #1,168+4+3(A2)
00003994  00AF      
                    6876   ; ShapesArray[6].array[2][0] = 0;
00003996  422A 00B0 6877          clr.b     168+8(A2)
                    6878   ; ShapesArray[6].array[2][1] = 0;
0000399A  422A 00B1 6879          clr.b     168+8+1(A2)
                    6880   ; ShapesArray[6].array[2][2] = 0;
0000399E  422A 00B2 6881          clr.b     168+8+2(A2)
                    6882   ; ShapesArray[6].array[2][3] = 0;
000039A2  422A 00B3 6883          clr.b     168+8+3(A2)
                    6884   ; ShapesArray[6].array[3][0] = 0;
000039A6  422A 00B4 6885          clr.b     168+12(A2)
                    6886   ; ShapesArray[6].array[3][1] = 0;
000039AA  422A 00B5 6887          clr.b     168+12+1(A2)
                    6888   ; ShapesArray[6].array[3][2] = 0;
000039AE  422A 00B6 6889          clr.b     168+12+2(A2)
                    6890   ; ShapesArray[6].array[3][3] = 0;
000039B2  422A 00B7 6891          clr.b     168+12+3(A2)
                    6892   ; ShapesArray[6].width = 4;
000039B6  257C 0000 6893          move.l    #4,184(A2)
000039BA  0004 00B8 
                    6894   ; set_color(OCTL_TETRIS_DEFAULT);
000039BE  4878 00A2 6895          pea       162
000039C2  4EB8 2DE0 6896          jsr       _set_color
000039C6  584F      6897          addq.w    #4,A7
                    6898   ; set_vga_control_reg(OCTL_TETRIS_DEFAULT);
000039C8  4878 00A2 6899          pea       162
000039CC  4EB8 2DB2 6900          jsr       _set_vga_control_reg
000039D0  584F      6901          addq.w    #4,A7
                    6902   ; tetris_score = 0;
000039D2  42B9 0803 6903          clr.l     _tetris_score.L
000039D6  07B0      
                    6904   ; initTetris_Speed();
000039D8  4EB8 3716 6905          jsr       _initTetris_Speed
                    6906   ; clear_screen();
000039DC  4EB8 2C4E 6907          jsr       _clear_screen
                    6908   ; tetris_timer = clock();
000039E0  4EB8 2E00 6909          jsr       _clock
000039E4  23C0 0803 6910          move.l    D0,_tetris_timer.L
000039E8  07B6      
                    6911   ; SetNewRandomShape();
000039EA  4EB8 31F8 6912          jsr       _SetNewRandomShape
                    6913   ; PrintTable();
000039EE  4EB8 345C 6914          jsr       _PrintTable
                    6915   ; tetris_mainloop();
000039F2  4EB8 372C 6916          jsr       _tetris_mainloop
                    6917   ; gameOver();
000039F6  4EB8 2F78 6918          jsr       _gameOver
                    6919   ; for (i = 0; i < TETRIS_ROWS; i++)
000039FA  4283      6920          clr.l     D3
                    6921   tetris_main_7:
000039FC  0C83 0000 6922          cmp.l     #20,D3
00003A00  0014      
00003A02  6C00 0044 6923          bge       tetris_main_9
                    6924   ; {
                    6925   ; for (j = 0; j < TETRIS_COLS; j++)
00003A06  4282      6926          clr.l     D2
                    6927   tetris_main_10:
00003A08  0C82 0000 6928          cmp.l     #15,D2
00003A0C  000F      
00003A0E  6C2A      6929          bge.s     tetris_main_12
                    6930   ; {
                    6931   ; if (Table[i][j])
00003A10  2003      6932          move.l    D3,D0
00003A12  C1FC 000F 6933          muls      #15,D0
00003A16  41F4 0800 6934          lea       0(A4,D0.L),A0
00003A1A  4A30 2800 6935          tst.b     0(A0,D2.L)
00003A1E  670C      6936          beq.s     tetris_main_13
                    6937   ; {
                    6938   ; printf("#");
00003A20  4879 0000 6939          pea       @tetris_14.L
00003A24  51AA      
00003A26  4E93      6940          jsr       (A3)
00003A28  584F      6941          addq.w    #4,A7
00003A2A  600A      6942          bra.s     tetris_main_14
                    6943   tetris_main_13:
                    6944   ; }
                    6945   ; else
                    6946   ; {
                    6947   ; printf(".");
00003A2C  4879 0000 6948          pea       @tetris_16.L
00003A30  51B4      
00003A32  4E93      6949          jsr       (A3)
00003A34  584F      6950          addq.w    #4,A7
                    6951   tetris_main_14:
00003A36  5282      6952          addq.l    #1,D2
00003A38  60CE      6953          bra       tetris_main_10
                    6954   tetris_main_12:
                    6955   ; }
                    6956   ; }
                    6957   ; printf("\n");
00003A3A  4879 0000 6958          pea       @tetris_18.L
00003A3E  51BE      
00003A40  4E93      6959          jsr       (A3)
00003A42  584F      6960          addq.w    #4,A7
00003A44  5283      6961          addq.l    #1,D3
00003A46  60B4      6962          bra       tetris_main_7
                    6963   tetris_main_9:
                    6964   ; }
                    6965   ; printf("\nGame over!\n");
00003A48  4879 0000 6966          pea       @tetris_22.L
00003A4C  51E2      
00003A4E  4E93      6967          jsr       (A3)
00003A50  584F      6968          addq.w    #4,A7
                    6969   ; sprintf(score_str, "\nScore: %d\n", tetris_score);
00003A52  2F39 0803 6970          move.l    _tetris_score.L,-(A7)
00003A56  07B0      
00003A58  4879 0000 6971          pea       @tetris_20.L
00003A5C  51CA      
00003A5E  486E FF80 6972          pea       -128(A6)
00003A62  4EB9 0000 6973          jsr       _sprintf
00003A66  3C68      
00003A68  DEFC 000C 6974          add.w     #12,A7
                    6975   ; printf(score_str);
00003A6C  486E FF80 6976          pea       -128(A6)
00003A70  4E93      6977          jsr       (A3)
00003A72  584F      6978          addq.w    #4,A7
                    6979   ; return 0;
00003A74  4280      6980          clr.l     D0
00003A76  4CDF 1C0C 6981          movem.l   (A7)+,D2/D3/A2/A3/A4
00003A7A  4E5E      6982          unlk      A6
00003A7C  4E75      6983          rts
                    6984   ; }
                    6985   _strcpy:
00003A7E  206F 0004 6986          move.l    (4,A7),A0
00003A82  226F 0008 6987          move.l    (8,A7),A1
00003A86  2008      6988          move.l    A0,D0
                    6989   strcpy_1:
00003A88  10D9      6990          move.b    (A1)+,(A0)+
00003A8A  66FC      6991          bne       strcpy_1
00003A8C  4E75      6992          rts
                    6993   ULDIV:
00003A8E  4E56 0000 6994          link    A6,#0
00003A92  48E7 C000 6995          movem.l D0/D1,-(A7)
00003A96  222E 0008 6996          move.l  8(A6),D1
00003A9A  202E 000C 6997          move.l  12(A6),D0
00003A9E  6036      6998          bra.s   ldiv_3
                    6999   LDIV:
00003AA0  4E56 0000 7000          link    A6,#0
00003AA4  48E7 C000 7001          movem.l D0/D1,-(A7)
00003AA8  222E 0008 7002          move.l  8(A6),D1
00003AAC  202E 000C 7003          move.l  12(A6),D0
00003AB0  4A80      7004          tst.l   D0
00003AB2  6A0E      7005          bpl.s   ldiv_1
00003AB4  4480      7006          neg.l   D0
00003AB6  4A81      7007          tst.l   D1
00003AB8  6A14      7008          bpl.s   ldiv_2
00003ABA  4481      7009          neg.l   D1
00003ABC  612A      7010          bsr.s   dodiv
00003ABE  4481      7011          neg.l   D1
00003AC0  6016      7012          bra.s   ldiv_4
                    7013   ldiv_1:
00003AC2  4A81      7014          tst.l   D1
00003AC4  6A10      7015          bpl.s   ldiv_3
00003AC6  4481      7016          neg.l   D1
00003AC8  611E      7017          bsr.s   dodiv
00003ACA  4480      7018          neg.l   D0
00003ACC  600A      7019          bra.s   ldiv_4
                    7020   ldiv_2:
00003ACE  6118      7021          bsr.s   dodiv
00003AD0  4480      7022          neg.l   D0
00003AD2  4481      7023          neg.l   D1
00003AD4  6002      7024          bra.s   ldiv_4
                    7025   ldiv_3:
00003AD6  6110      7026          bsr.s   dodiv
                    7027   ldiv_4:
00003AD8  2D40 0008 7028          move.l  D0,8(A6)
00003ADC  2D41 000C 7029          move.l  D1,12(A6)
00003AE0  4CDF 0003 7030          movem.l (A7)+,D0/D1
00003AE4  4E5E      7031          unlk    A6
00003AE6  4E75      7032          rts
                    7033   dodiv:
00003AE8  0C81 0000 7034          cmpi.l  #$FFFF,D1
00003AEC  FFFF      
00003AEE  6236      7035          bhi.s   dodiv_2
00003AF0  0C80 0000 7036          cmpi.l  #$FFFF,D0
00003AF4  FFFF      
00003AF6  6210      7037          bhi.s   dodiv_1
00003AF8  80C1      7038          divu    D1,D0
00003AFA  2200      7039          move.l  D0,D1
00003AFC  4241      7040          clr.w   D1
00003AFE  4841      7041          swap    D1
00003B00  0280 0000 7042          andi.l  #$FFFF,D0
00003B04  FFFF      
00003B06  4E75      7043          rts
                    7044   dodiv_1:
00003B08  48A7 A000 7045          movem.w D0/D2,-(A7)
00003B0C  4240      7046          clr.w   D0
00003B0E  4840      7047          swap    D0
00003B10  80C1      7048          divu    D1,D0
00003B12  3400      7049          move.w  D0,D2
00003B14  301F      7050          move.w  (A7)+,D0
00003B16  80C1      7051          divu    D1,D0
00003B18  4840      7052          swap    D0
00003B1A  4281      7053          clr.l   D1
00003B1C  3200      7054          move.w  D0,D1
00003B1E  3002      7055          move.w  D2,D0
00003B20  4840      7056          swap    D0
00003B22  341F      7057          move.w  (A7)+,D2
00003B24  4E75      7058          rts
                    7059   dodiv_2:
00003B26  48E7 3800 7060          movem.l D2/D3/D4,-(A7)
00003B2A  2401      7061          move.l  D1,D2
00003B2C  4242      7062          clr.w   D2
00003B2E  4842      7063          swap    D2
00003B30  5282      7064          addq.l  #1,D2
00003B32  2600      7065          move.l  D0,D3
00003B34  2801      7066          move.l  D1,D4
00003B36  2202      7067          move.l  D2,D1
00003B38  61CE      7068          bsr.s   dodiv_1
00003B3A  2204      7069          move.l  D4,D1
00003B3C  82C2      7070          divu    D2,D1
00003B3E  80C1      7071          divu    D1,D0
00003B40  0280 0000 7072          andi.l  #$FFFF,D0
00003B44  FFFF      
                    7073   dodiv_3:
00003B46  2204      7074          move.l  D4,D1
00003B48  2404      7075          move.l  D4,D2
00003B4A  4842      7076          swap    D2
00003B4C  C2C0      7077          mulu    D0,D1
00003B4E  C4C0      7078          mulu    D0,D2
00003B50  4842      7079          swap    D2
00003B52  D282      7080          add.l   D2,D1
00003B54  9283      7081          sub.l   D3,D1
00003B56  620A      7082          bhi.s   dodiv_4
00003B58  4481      7083          neg.l   D1
00003B5A  B881      7084          cmp.l   D1,D4
00003B5C  6208      7085          bhi.s   dodiv_5
00003B5E  5280      7086          addq.l  #1,D0
00003B60  60E4      7087          bra.s   dodiv_3
                    7088   dodiv_4:
00003B62  5380      7089          subq.l  #1,D0
00003B64  60E0      7090          bra.s   dodiv_3
                    7091   dodiv_5:
00003B66  4CDF 001C 7092          movem.l (A7)+,D2/D3/D4
00003B6A  4E75      7093          rts
                    7094   ULMUL:
00003B6C  4E56 0000 7095          link    A6,#0
00003B70  48E7 C000 7096          movem.l D0/D1,-(A7)
00003B74  222E 0008 7097          move.l  8(A6),D1
00003B78  202E 000C 7098          move.l  12(A6),D0
00003B7C  602C      7099          bra.s   lmul_3
                    7100   LMUL:
00003B7E  4E56 0000 7101          link    A6,#0
00003B82  48E7 C000 7102          movem.l D0/D1,-(A7)
00003B86  222E 0008 7103          move.l  8(A6),D1
00003B8A  202E 000C 7104          move.l  12(A6),D0
00003B8E  4A80      7105          tst.l   D0
00003B90  6A0A      7106          bpl.s   lmul_1
00003B92  4480      7107          neg.l   D0
00003B94  4A81      7108          tst.l   D1
00003B96  6A0A      7109          bpl.s   lmul_2
00003B98  4481      7110          neg.l   D1
00003B9A  600E      7111          bra.s   lmul_3
                    7112   lmul_1:
00003B9C  4A81      7113          tst.l   D1
00003B9E  6A0A      7114          bpl.s   lmul_3
00003BA0  4481      7115          neg.l   D1
                    7116   lmul_2:
00003BA2  6114      7117          bsr.s   domul
00003BA4  4481      7118          neg.l   D1
00003BA6  4080      7119          negx.l  D0
00003BA8  6002      7120          bra.s   lmul_4
                    7121   lmul_3:
00003BAA  610C      7122          bsr.s   domul
                    7123   lmul_4:
00003BAC  2D41 0008 7124          move.l  D1,8(A6)
00003BB0  4CDF 0003 7125          movem.l (A7)+,D0/D1
00003BB4  4E5E      7126          unlk    A6
00003BB6  4E75      7127          rts
                    7128   domul:
00003BB8  0C81 0000 7129          cmpi.l  #$FFFF,D1
00003BBC  FFFF      
00003BBE  620C      7130          bhi.s   domul_1
00003BC0  0C80 0000 7131          cmpi.l  #$FFFF,D0
00003BC4  FFFF      
00003BC6  620E      7132          bhi.s   domul_2
00003BC8  C2C0      7133          mulu    D0,D1
00003BCA  4E75      7134          rts
                    7135   domul_1:
00003BCC  0C80 0000 7136          cmpi.l  #$FFFF,D0
00003BD0  FFFF      
00003BD2  6218      7137          bhi.s   domul_4
00003BD4  6002      7138          bra.s   domul_3
                    7139   domul_2
00003BD6  C141      7140          exg     D0,D1
                    7141   domul_3:
00003BD8  2F02      7142          move.l  D2,-(A7)
00003BDA  2401      7143          move.l  D1,D2
00003BDC  4842      7144          swap    D2
00003BDE  C2C0      7145          mulu    D0,D1
00003BE0  C4C0      7146          mulu    D0,D2
00003BE2  4842      7147          swap    D2
00003BE4  4242      7148          clr.w   D2
00003BE6  D282      7149          add.l   D2,D1
00003BE8  241F      7150          move.l  (A7)+,D2
00003BEA  4E75      7151          rts
                    7152   domul_4:
00003BEC  48E7 3000 7153          movem.l D2/D3,-(A7)
00003BF0  2401      7154          move.l  D1,D2
00003BF2  2601      7155          move.l  D1,D3
00003BF4  C2C0      7156          mulu    D0,D1
00003BF6  4842      7157          swap    D2
00003BF8  C4C0      7158          mulu    D0,D2
00003BFA  4840      7159          swap    D0
00003BFC  C6C0      7160          mulu    D0,D3
00003BFE  D483      7161          add.l   D3,D2
00003C00  4842      7162          swap    D2
00003C02  4242      7163          clr.w   D2
00003C04  D282      7164          add.l   D2,D1
00003C06  4CDF 000C 7165          movem.l (A7)+,D2/D3
00003C0A  4E75      7166          rts
                    7167   _putch:
00003C0C  4E56 0000 7168          link      A6,#0
00003C10  48E7 2000 7169          movem.l   D2,-(A7)
00003C14  242E 0008 7170          move.l    8(A6),D2
00003C18  0C82 0000 7171          cmp.l     #10,D2
00003C1C  000A      
00003C1E  660A      7172          bne.s     putch_1
00003C20  4878 000D 7173          pea       13
00003C24  6100 CDD4 7174          bsr       __putch
00003C28  584F      7175          addq.w    #4,A7
                    7176   putch_1:
00003C2A  2F02      7177          move.l    D2,-(A7)
00003C2C  6100 CDCC 7178          bsr       __putch
00003C30  584F      7179          addq.w    #4,A7
00003C32  2002      7180          move.l    D2,D0
00003C34  4CDF 0004 7181          movem.l   (A7)+,D2
00003C38  4E5E      7182          unlk      A6
00003C3A  4E75      7183          rts
                    7184   _tolower:
00003C3C  4E56 0000 7185          link      A6,#0
00003C40  48E7 2000 7186          movem.l   D2,-(A7)
00003C44  242E 0008 7187          move.l    8(A6),D2
00003C48  0C82 0000 7188          cmp.l     #65,D2
00003C4C  0041      
00003C4E  6D0E      7189          blt.s     tolower_1
00003C50  0C82 0000 7190          cmp.l     #90,D2
00003C54  005A      
00003C56  6E06      7191          bgt.s     tolower_1
00003C58  84BC 0000 7192          or.l      #32,D2
00003C5C  0020      
                    7193   tolower_1:
00003C5E  2002      7194          move.l    D2,D0
00003C60  4CDF 0004 7195          movem.l   (A7)+,D2
00003C64  4E5E      7196          unlk      A6
00003C66  4E75      7197          rts
                    7198   _sprintf:
00003C68  4E56 FFFC 7199          link      A6,#-4
00003C6C  48E7 2000 7200          movem.l   D2,-(A7)
00003C70  41EE 000C 7201          lea       12(A6),A0
00003C74  5848      7202          addq.w    #4,A0
00003C76  2408      7203          move.l    A0,D2
00003C78  2F02      7204          move.l    D2,-(A7)
00003C7A  2F2E 000C 7205          move.l    12(A6),-(A7)
00003C7E  2F2E 0008 7206          move.l    8(A6),-(A7)
00003C82  6100 017A 7207          bsr       _vsprintf
00003C86  DEFC 000C 7208          add.w     #12,A7
00003C8A  2D40 FFFC 7209          move.l    D0,-4(A6)
00003C8E  4282      7210          clr.l     D2
00003C90  202E FFFC 7211          move.l    -4(A6),D0
00003C94  4CDF 0004 7212          movem.l   (A7)+,D2
00003C98  4E5E      7213          unlk      A6
00003C9A  4E75      7214          rts
                    7215   _strcat:
00003C9C  206F 0004 7216          move.l    (4,A7),A0	
00003CA0  226F 0008 7217          move.l    (8,A7),A1	
00003CA4  2008      7218          move.l    A0,D0		
                    7219   strcat_0:
00003CA6  4A18      7220          tst.b     (A0)+
00003CA8  66FC      7221          bne       strcat_0
00003CAA  5348      7222          subq      #1,A0
                    7223   strcat_1:
00003CAC  10D9      7224          move.b    (A1)+,(A0)+
00003CAE  66FC      7225          bne       strcat_1
00003CB0  4E75      7226          rts
                    7227   _toupper:
00003CB2  4E56 0000 7228          link      A6,#0
00003CB6  48E7 2000 7229          movem.l   D2,-(A7)
00003CBA  242E 0008 7230          move.l    8(A6),D2
00003CBE  0C82 0000 7231          cmp.l     #97,D2
00003CC2  0061      
00003CC4  6D0E      7232          blt.s     toupper_1
00003CC6  0C82 0000 7233          cmp.l     #122,D2
00003CCA  007A      
00003CCC  6E06      7234          bgt.s     toupper_1
00003CCE  C4BC 0000 7235          and.l     #95,D2
00003CD2  005F      
                    7236   toupper_1:
00003CD4  2002      7237          move.l    D2,D0
00003CD6  4CDF 0004 7238          movem.l   (A7)+,D2
00003CDA  4E5E      7239          unlk      A6
00003CDC  4E75      7240          rts
                    7241   _printf:
00003CDE  4E56 FFFC 7242          link      A6,#-4
00003CE2  48E7 2000 7243          movem.l   D2,-(A7)
00003CE6  41EE 0008 7244          lea       8(A6),A0
00003CEA  5848      7245          addq.w    #4,A0
00003CEC  2408      7246          move.l    A0,D2
00003CEE  2F02      7247          move.l    D2,-(A7)
00003CF0  2F2E 0008 7248          move.l    8(A6),-(A7)
00003CF4  42A7      7249          clr.l     -(A7)
00003CF6  6100 0106 7250          bsr       _vsprintf
00003CFA  DEFC 000C 7251          add.w     #12,A7
00003CFE  2D40 FFFC 7252          move.l    D0,-4(A6)
00003D02  4282      7253          clr.l     D2
00003D04  202E FFFC 7254          move.l    -4(A6),D0
00003D08  4CDF 0004 7255          movem.l   (A7)+,D2
00003D0C  4E5E      7256          unlk      A6
00003D0E  4E75      7257          rts
                    7258   _getch:
00003D10  48E7 2000 7259          movem.l   D2,-(A7)
00003D14  2439 0803 7260          move.l    __ungetbuf,D2
00003D18  00C0      
00003D1A  2039 0803 7261          move.l    __ungetbuf,D0
00003D1E  00C0      
00003D20  0C80 FFFF 7262          cmp.l     #-1,D0
00003D24  FFFF      
00003D26  670C      7263          beq.s     getch_1
00003D28  23FC FFFF 7264          move.l    #-1,__ungetbuf
00003D2C  FFFF 0803 
00003D30  00C0      
00003D32  6010      7265          bra.s     getch_3
                    7266   getch_1:
00003D34  6100 CCF0 7267          bsr       __getch
00003D38  2400      7268          move.l    D0,D2
00003D3A  0C80 0000 7269          cmp.l     #13,D0
00003D3E  000D      
00003D40  6602      7270          bne.s     getch_3
00003D42  740A      7271          moveq     #10,D2
                    7272   getch_3:
00003D44  2002      7273          move.l    D2,D0
00003D46  4CDF 0004 7274          movem.l   (A7)+,D2
00003D4A  4E75      7275          rts
                    7276   @vsprintf_copy:
00003D4C  4E56 0000 7277          link      A6,#0
00003D50  206E 0008 7278          move.l    8(A6),A0
00003D54  4A90      7279          tst.l     (A0)
00003D56  6710      7280          beq.s     @vsprintf_copy_1
00003D58  202E 000C 7281          move.l    12(A6),D0
00003D5C  206E 0008 7282          move.l    8(A6),A0
00003D60  2250      7283          move.l    (A0),A1
00003D62  5290      7284          addq.l    #1,(A0)
00003D64  1280      7285          move.b    D0,(A1)
00003D66  600A      7286          bra.s     @vsprintf_copy_2
                    7287   @vsprintf_copy_1:
00003D68  2F2E 000C 7288          move.l    12(A6),-(A7)
00003D6C  6100 FE9E 7289          bsr       _putch
00003D70  584F      7290          addq.w    #4,A7
                    7291   @vsprintf_copy_2:
00003D72  4E5E      7292          unlk      A6
00003D74  4E75      7293          rts
                    7294   @vsprintf_getval:
00003D76  4E56 0000 7295          link      A6,#0
00003D7A  48E7 3000 7296          movem.l   D2/D3,-(A7)
00003D7E  242E 0008 7297          move.l    8(A6),D2
00003D82  4283      7298          clr.l     D3
00003D84  2042      7299          move.l    D2,A0
00003D86  2050      7300          move.l    (A0),A0
00003D88  1010      7301          move.b    (A0),D0
00003D8A  4880      7302          ext.w     D0
00003D8C  48C0      7303          ext.l     D0
00003D8E  0C80 0000 7304          cmp.l     #42,D0
00003D92  002A      
00003D94  6612      7305          bne.s     @vsprintf_getval_1
00003D96  206E 000C 7306          move.l    12(A6),A0
00003D9A  2250      7307          move.l    (A0),A1
00003D9C  5890      7308          addq.l    #4,(A0)
00003D9E  2611      7309          move.l    (A1),D3
00003DA0  2042      7310          move.l    D2,A0
00003DA2  5290      7311          addq.l    #1,(A0)
00003DA4  6000 004E 7312          bra       @vsprintf_getval_5
                    7313   @vsprintf_getval_1:
00003DA8  2042      7314          move.l    D2,A0
00003DAA  2050      7315          move.l    (A0),A0
00003DAC  1010      7316          move.b    (A0),D0
00003DAE  4880      7317          ext.w     D0
00003DB0  48C0      7318          ext.l     D0
00003DB2  0C80 0000 7319          cmp.l     #48,D0
00003DB6  0030      
00003DB8  6D00 003A 7320          blt       @vsprintf_getval_5
00003DBC  2042      7321          move.l    D2,A0
00003DBE  2050      7322          move.l    (A0),A0
00003DC0  1010      7323          move.b    (A0),D0
00003DC2  4880      7324          ext.w     D0
00003DC4  48C0      7325          ext.l     D0
00003DC6  0C80 0000 7326          cmp.l     #57,D0
00003DCA  0039      
00003DCC  6E26      7327          bgt.s     @vsprintf_getval_5
00003DCE  2F03      7328          move.l    D3,-(A7)
00003DD0  4878 000A 7329          pea       10
00003DD4  6100 FDA8 7330          bsr       LMUL
00003DD8  2017      7331          move.l    (A7),D0
00003DDA  504F      7332          addq.w    #8,A7
00003DDC  2042      7333          move.l    D2,A0
00003DDE  2250      7334          move.l    (A0),A1
00003DE0  5290      7335          addq.l    #1,(A0)
00003DE2  1211      7336          move.b    (A1),D1
00003DE4  4881      7337          ext.w     D1
00003DE6  48C1      7338          ext.l     D1
00003DE8  D081      7339          add.l     D1,D0
00003DEA  0480 0000 7340          sub.l     #48,D0
00003DEE  0030      
00003DF0  2600      7341          move.l    D0,D3
00003DF2  60B4      7342          bra       @vsprintf_getval_1
                    7343   @vsprintf_getval_5:
00003DF4  2003      7344          move.l    D3,D0
00003DF6  4CDF 000C 7345          movem.l   (A7)+,D2/D3
00003DFA  4E5E      7346          unlk      A6
00003DFC  4E75      7347          rts
                    7348   _vsprintf:
00003DFE  4E56 FFCC 7349          link      A6,#-52
00003E02  48E7 3F3C 7350          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00003E06  45EE 0008 7351          lea       8(A6),A2
00003E0A  47F8 3D4C 7352          lea       @vsprintf_copy,A3
00003E0E  49F9 0000 7353          lea       _ultoa,A4
00003E12  4556      
00003E14  4286      7354          clr.l     D6
                    7355   vsprintf_1:
00003E16  206E 000C 7356          move.l    12(A6),A0
00003E1A  4A10      7357          tst.b     (A0)
00003E1C  6700 0624 7358          beq       vsprintf_3
00003E20  206E 000C 7359          move.l    12(A6),A0
00003E24  1010      7360          move.b    (A0),D0
00003E26  4880      7361          ext.w     D0
00003E28  48C0      7362          ext.l     D0
00003E2A  0C80 0000 7363          cmp.l     #37,D0
00003E2E  0025      
00003E30  671C      7364          beq.s     vsprintf_4
00003E32  206E 000C 7365          move.l    12(A6),A0
00003E36  52AE 000C 7366          addq.l    #1,12(A6)
00003E3A  1210      7367          move.b    (A0),D1
00003E3C  4881      7368          ext.w     D1
00003E3E  48C1      7369          ext.l     D1
00003E40  2F01      7370          move.l    D1,-(A7)
00003E42  2F0A      7371          move.l    A2,-(A7)
00003E44  4E93      7372          jsr       (A3)
00003E46  504F      7373          addq.w    #8,A7
00003E48  5286      7374          addq.l    #1,D6
00003E4A  6000 05F2 7375          bra       vsprintf_2
                    7376   vsprintf_4:
00003E4E  52AE 000C 7377          addq.l    #1,12(A6)
00003E52  422E FFD3 7378          clr.b     -45(A6)
00003E56  422E FFD2 7379          clr.b     -46(A6)
00003E5A  422E FFD0 7380          clr.b     -48(A6)
00003E5E  422E FFCF 7381          clr.b     -49(A6)
00003E62  422E FFCE 7382          clr.b     -50(A6)
00003E66  422E FFCD 7383          clr.b     -51(A6)
00003E6A  42AE FFFC 7384          clr.l     -4(A6)
00003E6E  7AFF      7385          moveq     #-1,D5
00003E70  41EE FFDC 7386          lea       -36(A6),A0
00003E74  2608      7387          move.l    A0,D3
00003E76  2408      7388          move.l    A0,D2
                    7389   vsprintf_6:
00003E78  206E 000C 7390          move.l    12(A6),A0
00003E7C  1010      7391          move.b    (A0),D0
00003E7E  4880      7392          ext.w     D0
00003E80  48C0      7393          ext.l     D0
00003E82  0C80 0000 7394          cmp.l     #43,D0
00003E86  002B      
00003E88  6730      7395          beq.s     vsprintf_12
00003E8A  6E18      7396          bgt.s     vsprintf_15
00003E8C  0C80 0000 7397          cmp.l     #35,D0
00003E90  0023      
00003E92  6700 003E 7398          beq       vsprintf_14
00003E96  6E00 0046 7399          bgt       vsprintf_9
00003E9A  0C80 0000 7400          cmp.l     #32,D0
00003E9E  0020      
00003EA0  6724      7401          beq.s     vsprintf_13
00003EA2  603A      7402          bra.s     vsprintf_9
                    7403   vsprintf_15:
00003EA4  0C80 0000 7404          cmp.l     #45,D0
00003EA8  002D      
00003EAA  6702      7405          beq.s     vsprintf_11
00003EAC  6030      7406          bra.s     vsprintf_9
                    7407   vsprintf_11:
00003EAE  1D7C 0001 7408          move.b    #1,-51(A6)
00003EB2  FFCD      
00003EB4  52AE 000C 7409          addq.l    #1,12(A6)
00003EB8  6026      7410          bra.s     vsprintf_7
                    7411   vsprintf_12:
00003EBA  1D7C 0001 7412          move.b    #1,-50(A6)
00003EBE  FFCE      
00003EC0  52AE 000C 7413          addq.l    #1,12(A6)
00003EC4  601A      7414          bra.s     vsprintf_7
                    7415   vsprintf_13:
00003EC6  1D7C 0001 7416          move.b    #1,-49(A6)
00003ECA  FFCF      
00003ECC  52AE 000C 7417          addq.l    #1,12(A6)
00003ED0  600E      7418          bra.s     vsprintf_7
                    7419   vsprintf_14:
00003ED2  1D7C 0001 7420          move.b    #1,-48(A6)
00003ED6  FFD0      
00003ED8  52AE 000C 7421          addq.l    #1,12(A6)
00003EDC  6002      7422          bra.s     vsprintf_7
                    7423   vsprintf_9:
00003EDE  6002      7424          bra.s     vsprintf_8
                    7425   vsprintf_7:
00003EE0  6096      7426          bra       vsprintf_6
                    7427   vsprintf_8:
00003EE2  206E 000C 7428          move.l    12(A6),A0
00003EE6  1010      7429          move.b    (A0),D0
00003EE8  4880      7430          ext.w     D0
00003EEA  48C0      7431          ext.l     D0
00003EEC  0C80 0000 7432          cmp.l     #48,D0
00003EF0  0030      
00003EF2  660A      7433          bne.s     vsprintf_16
00003EF4  52AE 000C 7434          addq.l    #1,12(A6)
00003EF8  1D7C 0001 7435          move.b    #1,-46(A6)
00003EFC  FFD2      
                    7436   vsprintf_16:
00003EFE  486E 0010 7437          pea       16(A6)
00003F02  486E 000C 7438          pea       12(A6)
00003F06  6100 FE6E 7439          bsr       @vsprintf_getval
00003F0A  504F      7440          addq.w    #8,A7
00003F0C  2A40      7441          move.l    D0,A5
00003F0E  206E 000C 7442          move.l    12(A6),A0
00003F12  1010      7443          move.b    (A0),D0
00003F14  4880      7444          ext.w     D0
00003F16  48C0      7445          ext.l     D0
00003F18  0C80 0000 7446          cmp.l     #46,D0
00003F1C  002E      
00003F1E  6614      7447          bne.s     vsprintf_18
00003F20  52AE 000C 7448          addq.l    #1,12(A6)
00003F24  486E 0010 7449          pea       16(A6)
00003F28  486E 000C 7450          pea       12(A6)
00003F2C  6100 FE48 7451          bsr       @vsprintf_getval
00003F30  504F      7452          addq.w    #8,A7
00003F32  2A00      7453          move.l    D0,D5
                    7454   vsprintf_18:
00003F34  206E 000C 7455          move.l    12(A6),A0
00003F38  1010      7456          move.b    (A0),D0
00003F3A  4880      7457          ext.w     D0
00003F3C  48C0      7458          ext.l     D0
00003F3E  0C80 0000 7459          cmp.l     #108,D0
00003F42  006C      
00003F44  660A      7460          bne.s     vsprintf_20
00003F46  52AE 000C 7461          addq.l    #1,12(A6)
00003F4A  1D7C 0001 7462          move.b    #1,-45(A6)
00003F4E  FFD3      
                    7463   vsprintf_20:
00003F50  206E 000C 7464          move.l    12(A6),A0
00003F54  1010      7465          move.b    (A0),D0
00003F56  4880      7466          ext.w     D0
00003F58  48C0      7467          ext.l     D0
00003F5A  0C80 0000 7468          cmp.l     #111,D0
00003F5E  006F      
00003F60  6700 00D4 7469          beq       vsprintf_27
00003F64  6E34      7470          bgt.s     vsprintf_33
00003F66  0C80 0000 7471          cmp.l     #100,D0
00003F6A  0064      
00003F6C  6700 0054 7472          beq       vsprintf_24
00003F70  6E1C      7473          bgt.s     vsprintf_34
00003F72  0C80 0000 7474          cmp.l     #99,D0
00003F76  0063      
00003F78  6700 012C 7475          beq       vsprintf_30
00003F7C  6E00 016A 7476          bgt       vsprintf_22
00003F80  0C80 0000 7477          cmp.l     #88,D0
00003F84  0058      
00003F86  6700 00E6 7478          beq       vsprintf_28
00003F8A  6000 015C 7479          bra       vsprintf_22
                    7480   vsprintf_34:
00003F8E  0C80 0000 7481          cmp.l     #105,D0
00003F92  0069      
00003F94  672C      7482          beq.s     vsprintf_24
00003F96  6000 0150 7483          bra       vsprintf_22
                    7484   vsprintf_33:
00003F9A  0C80 0000 7485          cmp.l     #117,D0
00003F9E  0075      
00003FA0  6700 005C 7486          beq       vsprintf_26
00003FA4  6E0E      7487          bgt.s     vsprintf_35
00003FA6  0C80 0000 7488          cmp.l     #115,D0
00003FAA  0073      
00003FAC  6700 011C 7489          beq       vsprintf_31
00003FB0  6000 0136 7490          bra       vsprintf_22
                    7491   vsprintf_35:
00003FB4  0C80 0000 7492          cmp.l     #120,D0
00003FB8  0078      
00003FBA  6700 00B2 7493          beq       vsprintf_28
00003FBE  6000 0128 7494          bra       vsprintf_22
                    7495   vsprintf_24:
00003FC2  4A2E FFD3 7496          tst.b     -45(A6)
00003FC6  671A      7497          beq.s     vsprintf_36
00003FC8  4878 000A 7498          pea       10
00003FCC  2F03      7499          move.l    D3,-(A7)
00003FCE  206E 0010 7500          move.l    16(A6),A0
00003FD2  58AE 0010 7501          addq.l    #4,16(A6)
00003FD6  2F10      7502          move.l    (A0),-(A7)
00003FD8  6100 04F8 7503          bsr       _ltoa
00003FDC  DEFC 000C 7504          add.w     #12,A7
00003FE0  6018      7505          bra.s     vsprintf_37
                    7506   vsprintf_36:
00003FE2  4878 000A 7507          pea       10
00003FE6  2F03      7508          move.l    D3,-(A7)
00003FE8  206E 0010 7509          move.l    16(A6),A0
00003FEC  58AE 0010 7510          addq.l    #4,16(A6)
00003FF0  2F10      7511          move.l    (A0),-(A7)
00003FF2  6100 04DE 7512          bsr       _ltoa
00003FF6  DEFC 000C 7513          add.w     #12,A7
                    7514   vsprintf_37:
00003FFA  6000 00FA 7515          bra       vsprintf_23
                    7516   vsprintf_26:
00003FFE  4A2E FFD3 7517          tst.b     -45(A6)
00004002  6718      7518          beq.s     vsprintf_38
00004004  4878 000A 7519          pea       10
00004008  2F03      7520          move.l    D3,-(A7)
0000400A  206E 0010 7521          move.l    16(A6),A0
0000400E  58AE 0010 7522          addq.l    #4,16(A6)
00004012  2F10      7523          move.l    (A0),-(A7)
00004014  4E94      7524          jsr       (A4)
00004016  DEFC 000C 7525          add.w     #12,A7
0000401A  6016      7526          bra.s     vsprintf_39
                    7527   vsprintf_38:
0000401C  4878 000A 7528          pea       10
00004020  2F03      7529          move.l    D3,-(A7)
00004022  206E 0010 7530          move.l    16(A6),A0
00004026  58AE 0010 7531          addq.l    #4,16(A6)
0000402A  2F10      7532          move.l    (A0),-(A7)
0000402C  4E94      7533          jsr       (A4)
0000402E  DEFC 000C 7534          add.w     #12,A7
                    7535   vsprintf_39:
00004032  6000 00C2 7536          bra       vsprintf_23
                    7537   vsprintf_27:
00004036  4A2E FFD3 7538          tst.b     -45(A6)
0000403A  6718      7539          beq.s     vsprintf_40
0000403C  4878 0008 7540          pea       8
00004040  2F03      7541          move.l    D3,-(A7)
00004042  206E 0010 7542          move.l    16(A6),A0
00004046  58AE 0010 7543          addq.l    #4,16(A6)
0000404A  2F10      7544          move.l    (A0),-(A7)
0000404C  4E94      7545          jsr       (A4)
0000404E  DEFC 000C 7546          add.w     #12,A7
00004052  6016      7547          bra.s     vsprintf_41
                    7548   vsprintf_40:
00004054  4878 0008 7549          pea       8
00004058  2F03      7550          move.l    D3,-(A7)
0000405A  206E 0010 7551          move.l    16(A6),A0
0000405E  58AE 0010 7552          addq.l    #4,16(A6)
00004062  2F10      7553          move.l    (A0),-(A7)
00004064  4E94      7554          jsr       (A4)
00004066  DEFC 000C 7555          add.w     #12,A7
                    7556   vsprintf_41:
0000406A  6000 008A 7557          bra       vsprintf_23
                    7558   vsprintf_28:
0000406E  4A2E FFD3 7559          tst.b     -45(A6)
00004072  6718      7560          beq.s     vsprintf_42
00004074  4878 0010 7561          pea       16
00004078  2F03      7562          move.l    D3,-(A7)
0000407A  206E 0010 7563          move.l    16(A6),A0
0000407E  58AE 0010 7564          addq.l    #4,16(A6)
00004082  2F10      7565          move.l    (A0),-(A7)
00004084  4E94      7566          jsr       (A4)
00004086  DEFC 000C 7567          add.w     #12,A7
0000408A  6016      7568          bra.s     vsprintf_43
                    7569   vsprintf_42:
0000408C  4878 0010 7570          pea       16
00004090  2F03      7571          move.l    D3,-(A7)
00004092  206E 0010 7572          move.l    16(A6),A0
00004096  58AE 0010 7573          addq.l    #4,16(A6)
0000409A  2F10      7574          move.l    (A0),-(A7)
0000409C  4E94      7575          jsr       (A4)
0000409E  DEFC 000C 7576          add.w     #12,A7
                    7577   vsprintf_43:
000040A2  6000 0052 7578          bra       vsprintf_23
                    7579   vsprintf_30:
000040A6  206E 0010 7580          move.l    16(A6),A0
000040AA  58AE 0010 7581          addq.l    #4,16(A6)
000040AE  2010      7582          move.l    (A0),D0
000040B0  2042      7583          move.l    D2,A0
000040B2  5282      7584          addq.l    #1,D2
000040B4  1080      7585          move.b    D0,(A0)
000040B6  2042      7586          move.l    D2,A0
000040B8  4210      7587          clr.b     (A0)
000040BA  200D      7588          move.l    A5,D0
000040BC  6704      7589          beq.s     vsprintf_44
000040BE  200D      7590          move.l    A5,D0
000040C0  6002      7591          bra.s     vsprintf_45
                    7592   vsprintf_44:
000040C2  7001      7593          moveq     #1,D0
                    7594   vsprintf_45:
000040C4  2A00      7595          move.l    D0,D5
000040C6  6000 002E 7596          bra       vsprintf_23
                    7597   vsprintf_31:
000040CA  206E 0010 7598          move.l    16(A6),A0
000040CE  58AE 0010 7599          addq.l    #4,16(A6)
000040D2  2610      7600          move.l    (A0),D3
000040D4  0C85 FFFF 7601          cmp.l     #-1,D5
000040D8  FFFF      
000040DA  660A      7602          bne.s     vsprintf_46
000040DC  2F03      7603          move.l    D3,-(A7)
000040DE  6100 04D8 7604          bsr       _strlen
000040E2  584F      7605          addq.w    #4,A7
000040E4  2A00      7606          move.l    D0,D5
                    7607   vsprintf_46:
000040E6  600E      7608          bra.s     vsprintf_23
                    7609   vsprintf_22:
000040E8  206E 000C 7610          move.l    12(A6),A0
000040EC  2242      7611          move.l    D2,A1
000040EE  5282      7612          addq.l    #1,D2
000040F0  1290      7613          move.b    (A0),(A1)
000040F2  2042      7614          move.l    D2,A0
000040F4  4210      7615          clr.b     (A0)
                    7616   vsprintf_23:
000040F6  2F03      7617          move.l    D3,-(A7)
000040F8  6100 04BE 7618          bsr       _strlen
000040FC  584F      7619          addq.w    #4,A7
000040FE  1800      7620          move.b    D0,D4
00004100  206E 000C 7621          move.l    12(A6),A0
00004104  1010      7622          move.b    (A0),D0
00004106  4880      7623          ext.w     D0
00004108  48C0      7624          ext.l     D0
0000410A  0C80 0000 7625          cmp.l     #115,D0
0000410E  0073      
00004110  6618      7626          bne.s     vsprintf_48
00004112  0C85 0000 7627          cmp.l     #0,D5
00004116  0000      
00004118  6D10      7628          blt.s     vsprintf_48
0000411A  4884      7629          ext.w     D4
0000411C  48C4      7630          ext.l     D4
0000411E  B885      7631          cmp.l     D5,D4
00004120  6F04      7632          ble.s     vsprintf_50
00004122  1005      7633          move.b    D5,D0
00004124  6002      7634          bra.s     vsprintf_51
                    7635   vsprintf_50:
00004126  1004      7636          move.b    D4,D0
                    7637   vsprintf_51:
00004128  1800      7638          move.b    D0,D4
                    7639   vsprintf_48:
0000412A  206E 000C 7640          move.l    12(A6),A0
0000412E  1010      7641          move.b    (A0),D0
00004130  4880      7642          ext.w     D0
00004132  48C0      7643          ext.l     D0
00004134  0C80 0000 7644          cmp.l     #88,D0
00004138  0058      
0000413A  6600 0026 7645          bne       vsprintf_56
0000413E  41EE FFDC 7646          lea       -36(A6),A0
00004142  2408      7647          move.l    A0,D2
                    7648   vsprintf_54:
00004144  2042      7649          move.l    D2,A0
00004146  4A10      7650          tst.b     (A0)
00004148  6718      7651          beq.s     vsprintf_56
0000414A  2042      7652          move.l    D2,A0
0000414C  1210      7653          move.b    (A0),D1
0000414E  4881      7654          ext.w     D1
00004150  48C1      7655          ext.l     D1
00004152  2F01      7656          move.l    D1,-(A7)
00004154  6100 FB5C 7657          bsr       _toupper
00004158  584F      7658          addq.w    #4,A7
0000415A  2042      7659          move.l    D2,A0
0000415C  1080      7660          move.b    D0,(A0)
0000415E  5282      7661          addq.l    #1,D2
00004160  60E2      7662          bra       vsprintf_54
                    7663   vsprintf_56:
00004162  7E00      7664          moveq     #0,D7
00004164  41EE FFD4 7665          lea       -44(A6),A0
00004168  2408      7666          move.l    A0,D2
0000416A  206E 000C 7667          move.l    12(A6),A0
0000416E  1010      7668          move.b    (A0),D0
00004170  4880      7669          ext.w     D0
00004172  48C0      7670          ext.l     D0
00004174  0C80 0000 7671          cmp.l     #100,D0
00004178  0064      
0000417A  6714      7672          beq.s     vsprintf_59
0000417C  206E 000C 7673          move.l    12(A6),A0
00004180  1010      7674          move.b    (A0),D0
00004182  4880      7675          ext.w     D0
00004184  48C0      7676          ext.l     D0
00004186  0C80 0000 7677          cmp.l     #105,D0
0000418A  0069      
0000418C  6600 0076 7678          bne       vsprintf_65
                    7679   vsprintf_59:
00004190  4A2E FFCE 7680          tst.b     -50(A6)
00004194  6612      7681          bne.s     vsprintf_62
00004196  2043      7682          move.l    D3,A0
00004198  1010      7683          move.b    (A0),D0
0000419A  4880      7684          ext.w     D0
0000419C  48C0      7685          ext.l     D0
0000419E  0C80 0000 7686          cmp.l     #45,D0
000041A2  002D      
000041A4  6600 002E 7687          bne       vsprintf_60
                    7688   vsprintf_62:
000041A8  2043      7689          move.l    D3,A0
000041AA  1010      7690          move.b    (A0),D0
000041AC  4880      7691          ext.w     D0
000041AE  48C0      7692          ext.l     D0
000041B0  0C80 0000 7693          cmp.l     #45,D0
000041B4  002D      
000041B6  660E      7694          bne.s     vsprintf_63
000041B8  2043      7695          move.l    D3,A0
000041BA  5283      7696          addq.l    #1,D3
000041BC  2242      7697          move.l    D2,A1
000041BE  5282      7698          addq.l    #1,D2
000041C0  1290      7699          move.b    (A0),(A1)
000041C2  5304      7700          subq.b    #1,D4
000041C4  6008      7701          bra.s     vsprintf_64
                    7702   vsprintf_63:
000041C6  2042      7703          move.l    D2,A0
000041C8  5282      7704          addq.l    #1,D2
000041CA  10BC 002B 7705          move.b    #43,(A0)
                    7706   vsprintf_64:
000041CE  5287      7707          addq.l    #1,D7
000041D0  6000 0032 7708          bra       vsprintf_65
                    7709   vsprintf_60:
000041D4  4A2E FFCF 7710          tst.b     -49(A6)
000041D8  6700 002A 7711          beq       vsprintf_65
000041DC  2043      7712          move.l    D3,A0
000041DE  1010      7713          move.b    (A0),D0
000041E0  4880      7714          ext.w     D0
000041E2  48C0      7715          ext.l     D0
000041E4  0C80 0000 7716          cmp.l     #45,D0
000041E8  002D      
000041EA  660E      7717          bne.s     vsprintf_67
000041EC  2043      7718          move.l    D3,A0
000041EE  5283      7719          addq.l    #1,D3
000041F0  2242      7720          move.l    D2,A1
000041F2  5282      7721          addq.l    #1,D2
000041F4  1290      7722          move.b    (A0),(A1)
000041F6  5304      7723          subq.b    #1,D4
000041F8  6008      7724          bra.s     vsprintf_68
                    7725   vsprintf_67:
000041FA  2042      7726          move.l    D2,A0
000041FC  5282      7727          addq.l    #1,D2
000041FE  10BC 0020 7728          move.b    #32,(A0)
                    7729   vsprintf_68:
00004202  5287      7730          addq.l    #1,D7
                    7731   vsprintf_65:
00004204  4A2E FFD0 7732          tst.b     -48(A6)
00004208  6700 0066 7733          beq       vsprintf_77
0000420C  206E 000C 7734          move.l    12(A6),A0
00004210  1010      7735          move.b    (A0),D0
00004212  4880      7736          ext.w     D0
00004214  48C0      7737          ext.l     D0
00004216  0C80 0000 7738          cmp.l     #111,D0
0000421A  006F      
0000421C  671A      7739          beq.s     vsprintf_73
0000421E  6E0C      7740          bgt.s     vsprintf_76
00004220  0C80 0000 7741          cmp.l     #88,D0
00004224  0058      
00004226  6710      7742          beq.s     vsprintf_73
00004228  6000 0046 7743          bra       vsprintf_77
                    7744   vsprintf_76:
0000422C  0C80 0000 7745          cmp.l     #120,D0
00004230  0078      
00004232  6704      7746          beq.s     vsprintf_73
00004234  6000 003A 7747          bra       vsprintf_77
                    7748   vsprintf_73:
00004238  2042      7749          move.l    D2,A0
0000423A  5282      7750          addq.l    #1,D2
0000423C  10BC 0030 7751          move.b    #48,(A0)
00004240  5287      7752          addq.l    #1,D7
00004242  206E 000C 7753          move.l    12(A6),A0
00004246  1010      7754          move.b    (A0),D0
00004248  4880      7755          ext.w     D0
0000424A  48C0      7756          ext.l     D0
0000424C  0C80 0000 7757          cmp.l     #120,D0
00004250  0078      
00004252  6712      7758          beq.s     vsprintf_79
00004254  206E 000C 7759          move.l    12(A6),A0
00004258  1010      7760          move.b    (A0),D0
0000425A  4880      7761          ext.w     D0
0000425C  48C0      7762          ext.l     D0
0000425E  0C80 0000 7763          cmp.l     #88,D0
00004262  0058      
00004264  660A      7764          bne.s     vsprintf_77
                    7765   vsprintf_79:
00004266  2042      7766          move.l    D2,A0
00004268  5282      7767          addq.l    #1,D2
0000426A  10BC 0078 7768          move.b    #120,(A0)
0000426E  5287      7769          addq.l    #1,D7
                    7770   vsprintf_77:
00004270  2042      7771          move.l    D2,A0
00004272  4210      7772          clr.b     (A0)
00004274  206E 000C 7773          move.l    12(A6),A0
00004278  1010      7774          move.b    (A0),D0
0000427A  4880      7775          ext.w     D0
0000427C  48C0      7776          ext.l     D0
0000427E  0C80 0000 7777          cmp.l     #105,D0
00004282  0069      
00004284  6700 0076 7778          beq       vsprintf_82
00004288  6E42      7779          bgt.s     vsprintf_93
0000428A  0C80 0000 7780          cmp.l     #99,D0
0000428E  0063      
00004290  6700 0084 7781          beq       vsprintf_96
00004294  6E1C      7782          bgt.s     vsprintf_94
00004296  0C80 0000 7783          cmp.l     #88,D0
0000429A  0058      
0000429C  6700 005E 7784          beq       vsprintf_82
000042A0  6E00 0184 7785          bgt       vsprintf_80
000042A4  0C80 0000 7786          cmp.l     #69,D0
000042A8  0045      
000042AA  6700 0050 7787          beq       vsprintf_82
000042AE  6000 0176 7788          bra       vsprintf_80
                    7789   vsprintf_94:
000042B2  0C80 0000 7790          cmp.l     #101,D0
000042B6  0065      
000042B8  6700 0042 7791          beq       vsprintf_82
000042BC  6E00 0168 7792          bgt       vsprintf_80
000042C0  0C80 0000 7793          cmp.l     #100,D0
000042C4  0064      
000042C6  6734      7794          beq.s     vsprintf_82
000042C8  6000 015C 7795          bra       vsprintf_80
                    7796   vsprintf_93:
000042CC  0C80 0000 7797          cmp.l     #117,D0
000042D0  0075      
000042D2  6728      7798          beq.s     vsprintf_82
000042D4  6E1A      7799          bgt.s     vsprintf_95
000042D6  0C80 0000 7800          cmp.l     #115,D0
000042DA  0073      
000042DC  6700 0038 7801          beq       vsprintf_96
000042E0  6E00 0144 7802          bgt       vsprintf_80
000042E4  0C80 0000 7803          cmp.l     #111,D0
000042E8  006F      
000042EA  6710      7804          beq.s     vsprintf_82
000042EC  6000 0138 7805          bra       vsprintf_80
                    7806   vsprintf_95:
000042F0  0C80 0000 7807          cmp.l     #120,D0
000042F4  0078      
000042F6  6704      7808          beq.s     vsprintf_82
000042F8  6000 012C 7809          bra       vsprintf_80
                    7810   vsprintf_82:
000042FC  4A2E FFD2 7811          tst.b     -46(A6)
00004300  6714      7812          beq.s     vsprintf_96
00004302  4A2E FFCD 7813          tst.b     -51(A6)
00004306  660E      7814          bne.s     vsprintf_96
00004308  200D      7815          move.l    A5,D0
0000430A  9087      7816          sub.l     D7,D0
0000430C  4884      7817          ext.w     D4
0000430E  48C4      7818          ext.l     D4
00004310  9084      7819          sub.l     D4,D0
00004312  2D40 FFFC 7820          move.l    D0,-4(A6)
                    7821   vsprintf_96:
00004316  202E FFFC 7822          move.l    -4(A6),D0
0000431A  0C80 0000 7823          cmp.l     #0,D0
0000431E  0000      
00004320  6C04      7824          bge.s     vsprintf_98
00004322  42AE FFFC 7825          clr.l     -4(A6)
                    7826   vsprintf_98:
00004326  4A2E FFCD 7827          tst.b     -51(A6)
0000432A  6600 0030 7828          bne       vsprintf_104
0000432E  4884      7829          ext.w     D4
00004330  48C4      7830          ext.l     D4
00004332  2004      7831          move.l    D4,D0
00004334  D0AE FFFC 7832          add.l     -4(A6),D0
00004338  D087      7833          add.l     D7,D0
0000433A  1D40 FFD1 7834          move.b    D0,-47(A6)
                    7835   vsprintf_102:
0000433E  102E FFD1 7836          move.b    -47(A6),D0
00004342  4880      7837          ext.w     D0
00004344  48C0      7838          ext.l     D0
00004346  220D      7839          move.l    A5,D1
00004348  534D      7840          subq.w    #1,A5
0000434A  B081      7841          cmp.l     D1,D0
0000434C  6C0E      7842          bge.s     vsprintf_104
0000434E  4878 0020 7843          pea       32
00004352  2F0A      7844          move.l    A2,-(A7)
00004354  4E93      7845          jsr       (A3)
00004356  504F      7846          addq.w    #8,A7
00004358  5286      7847          addq.l    #1,D6
0000435A  60E2      7848          bra       vsprintf_102
                    7849   vsprintf_104:
0000435C  41EE FFD4 7850          lea       -44(A6),A0
00004360  2408      7851          move.l    A0,D2
                    7852   vsprintf_105:
00004362  2042      7853          move.l    D2,A0
00004364  4A10      7854          tst.b     (A0)
00004366  6716      7855          beq.s     vsprintf_107
00004368  2042      7856          move.l    D2,A0
0000436A  5282      7857          addq.l    #1,D2
0000436C  1210      7858          move.b    (A0),D1
0000436E  4881      7859          ext.w     D1
00004370  48C1      7860          ext.l     D1
00004372  2F01      7861          move.l    D1,-(A7)
00004374  2F0A      7862          move.l    A2,-(A7)
00004376  4E93      7863          jsr       (A3)
00004378  504F      7864          addq.w    #8,A7
0000437A  5286      7865          addq.l    #1,D6
0000437C  60E4      7866          bra       vsprintf_105
                    7867   vsprintf_107:
0000437E  202E FFFC 7868          move.l    -4(A6),D0
00004382  1D40 FFD1 7869          move.b    D0,-47(A6)
                    7870   vsprintf_108:
00004386  102E FFD1 7871          move.b    -47(A6),D0
0000438A  532E FFD1 7872          subq.b    #1,-47(A6)
0000438E  4A00      7873          tst.b     D0
00004390  670E      7874          beq.s     vsprintf_110
00004392  4878 0030 7875          pea       48
00004396  2F0A      7876          move.l    A2,-(A7)
00004398  4E93      7877          jsr       (A3)
0000439A  504F      7878          addq.w    #8,A7
0000439C  5286      7879          addq.l    #1,D6
0000439E  60E6      7880          bra       vsprintf_108
                    7881   vsprintf_110:
000043A0  2043      7882          move.l    D3,A0
000043A2  4A10      7883          tst.b     (A0)
000043A4  6700 0048 7884          beq       vsprintf_113
000043A8  206E 000C 7885          move.l    12(A6),A0
000043AC  1010      7886          move.b    (A0),D0
000043AE  4880      7887          ext.w     D0
000043B0  48C0      7888          ext.l     D0
000043B2  0C80 0000 7889          cmp.l     #115,D0
000043B6  0073      
000043B8  670C      7890          beq.s     vsprintf_116
000043BA  6E18      7891          bgt.s     vsprintf_119
000043BC  0C80 0000 7892          cmp.l     #99,D0
000043C0  0063      
000043C2  6702      7893          beq.s     vsprintf_116
000043C4  600E      7894          bra.s     vsprintf_119
                    7895   vsprintf_116:
000043C6  2005      7896          move.l    D5,D0
000043C8  5385      7897          subq.l    #1,D5
000043CA  0C80 0000 7898          cmp.l     #0,D0
000043CE  0000      
000043D0  6E02      7899          bgt.s     vsprintf_119
000043D2  6016      7900          bra.s     vsprintf_115
                    7901   vsprintf_119:
000043D4  2043      7902          move.l    D3,A0
000043D6  5283      7903          addq.l    #1,D3
000043D8  1210      7904          move.b    (A0),D1
000043DA  4881      7905          ext.w     D1
000043DC  48C1      7906          ext.l     D1
000043DE  2F01      7907          move.l    D1,-(A7)
000043E0  2F0A      7908          move.l    A2,-(A7)
000043E2  4E93      7909          jsr       (A3)
000043E4  504F      7910          addq.w    #8,A7
000043E6  5286      7911          addq.l    #1,D6
000043E8  6002      7912          bra.s     vsprintf_112
                    7913   vsprintf_115:
000043EA  6002      7914          bra.s     vsprintf_113
                    7915   vsprintf_112:
000043EC  60B2      7916          bra       vsprintf_110
                    7917   vsprintf_113:
000043EE  4A2E FFCD 7918          tst.b     -51(A6)
000043F2  6700 0030 7919          beq       vsprintf_125
000043F6  4884      7920          ext.w     D4
000043F8  48C4      7921          ext.l     D4
000043FA  2004      7922          move.l    D4,D0
000043FC  D0AE FFFC 7923          add.l     -4(A6),D0
00004400  D087      7924          add.l     D7,D0
00004402  1D40 FFD1 7925          move.b    D0,-47(A6)
                    7926   vsprintf_123:
00004406  102E FFD1 7927          move.b    -47(A6),D0
0000440A  4880      7928          ext.w     D0
0000440C  48C0      7929          ext.l     D0
0000440E  220D      7930          move.l    A5,D1
00004410  534D      7931          subq.w    #1,A5
00004412  B081      7932          cmp.l     D1,D0
00004414  6C0E      7933          bge.s     vsprintf_125
00004416  4878 0020 7934          pea       32
0000441A  2F0A      7935          move.l    A2,-(A7)
0000441C  4E93      7936          jsr       (A3)
0000441E  504F      7937          addq.w    #8,A7
00004420  5386      7938          subq.l    #1,D6
00004422  60E2      7939          bra       vsprintf_123
                    7940   vsprintf_125:
00004424  6014      7941          bra.s     vsprintf_81
                    7942   vsprintf_80:
00004426  206E 000C 7943          move.l    12(A6),A0
0000442A  1210      7944          move.b    (A0),D1
0000442C  4881      7945          ext.w     D1
0000442E  48C1      7946          ext.l     D1
00004430  2F01      7947          move.l    D1,-(A7)
00004432  2F0A      7948          move.l    A2,-(A7)
00004434  4E93      7949          jsr       (A3)
00004436  504F      7950          addq.w    #8,A7
00004438  5286      7951          addq.l    #1,D6
                    7952   vsprintf_81:
0000443A  52AE 000C 7953          addq.l    #1,12(A6)
                    7954   vsprintf_2:
0000443E  6000 F9D6 7955          bra       vsprintf_1
                    7956   vsprintf_3:
00004442  4A92      7957          tst.l     (A2)
00004444  6710      7958          beq.s     vsprintf_126
00004446  4201      7959          clr.b     D1
00004448  C2BC 0000 7960          and.l     #255,D1
0000444C  00FF      
0000444E  2F01      7961          move.l    D1,-(A7)
00004450  2F0A      7962          move.l    A2,-(A7)
00004452  4E93      7963          jsr       (A3)
00004454  504F      7964          addq.w    #8,A7
                    7965   vsprintf_126:
00004456  2006      7966          move.l    D6,D0
00004458  4CDF 3CFC 7967          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
0000445C  4E5E      7968          unlk      A6
0000445E  4E75      7969          rts
                    7970   @itoa_convert:
00004460  4E56 0000 7971          link      A6,#0
00004464  48E7 3C00 7972          movem.l   D2/D3/D4/D5,-(A7)
00004468  242E 0008 7973          move.l    8(A6),D2
0000446C  262E 0010 7974          move.l    16(A6),D3
00004470  2A2E 000C 7975          move.l    12(A6),D5
00004474  2F05      7976          move.l    D5,-(A7)
00004476  2F03      7977          move.l    D3,-(A7)
00004478  6100 F614 7978          bsr       ULDIV
0000447C  202F 0004 7979          move.l    4(A7),D0
00004480  504F      7980          addq.w    #8,A7
00004482  2800      7981          move.l    D0,D4
00004484  BA83      7982          cmp.l     D3,D5
00004486  651A      7983          blo.s     @itoa_convert_1
00004488  2F03      7984          move.l    D3,-(A7)
0000448A  2F05      7985          move.l    D5,-(A7)
0000448C  2F03      7986          move.l    D3,-(A7)
0000448E  6100 F5FE 7987          bsr       ULDIV
00004492  2217      7988          move.l    (A7),D1
00004494  504F      7989          addq.w    #8,A7
00004496  2F01      7990          move.l    D1,-(A7)
00004498  2F02      7991          move.l    D2,-(A7)
0000449A  61C4      7992          bsr       @itoa_convert
0000449C  DEFC 000C 7993          add.w     #12,A7
000044A0  2400      7994          move.l    D0,D2
                    7995   @itoa_convert_1:
000044A2  0C84 0000 7996          cmp.l     #9,D4
000044A6  0009      
000044A8  6E0A      7997          bgt.s     @itoa_convert_3
000044AA  2004      7998          move.l    D4,D0
000044AC  0680 0000 7999          add.l     #48,D0
000044B0  0030      
000044B2  600E      8000          bra.s     @itoa_convert_4
                    8001   @itoa_convert_3:
000044B4  2004      8002          move.l    D4,D0
000044B6  0680 0000 8003          add.l     #97,D0
000044BA  0061      
000044BC  0480 0000 8004          sub.l     #10,D0
000044C0  000A      
                    8005   @itoa_convert_4:
000044C2  2042      8006          move.l    D2,A0
000044C4  1080      8007          move.b    D0,(A0)
000044C6  2002      8008          move.l    D2,D0
000044C8  5280      8009          addq.l    #1,D0
000044CA  4CDF 003C 8010          movem.l   (A7)+,D2/D3/D4/D5
000044CE  4E5E      8011          unlk      A6
000044D0  4E75      8012          rts
                    8013   _ltoa:
000044D2  4E56 0000 8014          link      A6,#0
000044D6  48E7 3C00 8015          movem.l   D2/D3/D4/D5,-(A7)
000044DA  242E 0008 8016          move.l    8(A6),D2
000044DE  262E 000C 8017          move.l    12(A6),D3
000044E2  2A2E 0010 8018          move.l    16(A6),D5
000044E6  2803      8019          move.l    D3,D4
000044E8  0C85 0000 8020          cmp.l     #2,D5
000044EC  0002      
000044EE  6D08      8021          blt.s     ltoa_3
000044F0  0C85 0000 8022          cmp.l     #36,D5
000044F4  0024      
000044F6  6F06      8023          ble.s     ltoa_1
                    8024   ltoa_3:
000044F8  2003      8025          move.l    D3,D0
000044FA  6000 0052 8026          bra       ltoa_4
                    8027   ltoa_1:
000044FE  0C85 0000 8028          cmp.l     #10,D5
00004502  000A      
00004504  6600 0032 8029          bne       ltoa_5
00004508  0C82 0000 8030          cmp.l     #0,D2
0000450C  0000      
0000450E  6C28      8031          bge.s     ltoa_5
00004510  2002      8032          move.l    D2,D0
00004512  4480      8033          neg.l     D0
00004514  2400      8034          move.l    D0,D2
00004516  0C82 0000 8035          cmp.l     #0,D2
0000451A  0000      
0000451C  6C12      8036          bge.s     ltoa_7
0000451E  4879 0000 8037          pea       @itoa_1
00004522  51F0      
00004524  2F03      8038          move.l    D3,-(A7)
00004526  6100 F556 8039          bsr       _strcpy
0000452A  504F      8040          addq.w    #8,A7
0000452C  2003      8041          move.l    D3,D0
0000452E  601E      8042          bra.s     ltoa_4
                    8043   ltoa_7:
00004530  2044      8044          move.l    D4,A0
00004532  5284      8045          addq.l    #1,D4
00004534  10BC 002D 8046          move.b    #45,(A0)
                    8047   ltoa_5:
00004538  2F05      8048          move.l    D5,-(A7)
0000453A  2F02      8049          move.l    D2,-(A7)
0000453C  2F04      8050          move.l    D4,-(A7)
0000453E  6100 FF20 8051          bsr       @itoa_convert
00004542  DEFC 000C 8052          add.w     #12,A7
00004546  2800      8053          move.l    D0,D4
00004548  2044      8054          move.l    D4,A0
0000454A  4210      8055          clr.b     (A0)
0000454C  2003      8056          move.l    D3,D0
                    8057   ltoa_4:
0000454E  4CDF 003C 8058          movem.l   (A7)+,D2/D3/D4/D5
00004552  4E5E      8059          unlk      A6
00004554  4E75      8060          rts
                    8061   _ultoa:
00004556  4E56 0000 8062          link      A6,#0
0000455A  48E7 3800 8063          movem.l   D2/D3/D4,-(A7)
0000455E  262E 0010 8064          move.l    16(A6),D3
00004562  282E 000C 8065          move.l    12(A6),D4
00004566  2404      8066          move.l    D4,D2
00004568  0C83 0000 8067          cmp.l     #2,D3
0000456C  0002      
0000456E  6D08      8068          blt.s     ultoa_3
00004570  0C83 0000 8069          cmp.l     #36,D3
00004574  0024      
00004576  6F04      8070          ble.s     ultoa_1
                    8071   ultoa_3:
00004578  2004      8072          move.l    D4,D0
0000457A  6018      8073          bra.s     ultoa_4
                    8074   ultoa_1:
0000457C  2F03      8075          move.l    D3,-(A7)
0000457E  2F2E 0008 8076          move.l    8(A6),-(A7)
00004582  2F02      8077          move.l    D2,-(A7)
00004584  6100 FEDA 8078          bsr       @itoa_convert
00004588  DEFC 000C 8079          add.w     #12,A7
0000458C  2400      8080          move.l    D0,D2
0000458E  2042      8081          move.l    D2,A0
00004590  4210      8082          clr.b     (A0)
00004592  2004      8083          move.l    D4,D0
                    8084   ultoa_4:
00004594  4CDF 001C 8085          movem.l   (A7)+,D2/D3/D4
00004598  4E5E      8086          unlk      A6
0000459A  4E75      8087          rts
                    8088   _itoa:
0000459C  4E56 0000 8089          link      A6,#0
000045A0  2F2E 0010 8090          move.l    16(A6),-(A7)
000045A4  2F2E 000C 8091          move.l    12(A6),-(A7)
000045A8  2F2E 0008 8092          move.l    8(A6),-(A7)
000045AC  6100 FF24 8093          bsr       _ltoa
000045B0  DEFC 000C 8094          add.w     #12,A7
000045B4  4E5E      8095          unlk      A6
000045B6  4E75      8096          rts
                    8097   _strlen:
000045B8  206F 0004 8098          move.l    (4,A7),A0
000045BC  2248      8099          move.l    A0,A1
                    8100   strlen_1:
000045BE  4A19      8101          tst.b     (A1)+
000045C0  66FC      8102          bne       strlen_1
000045C2  2009      8103          move.l    A1,D0
000045C4  9088      8104          sub.l     A0,D0
000045C6  5380      8105          subq.l    #1,D0
000045C8  4E75      8106          rts
                    8107          section   const
                    8108   
                    8109   @m68kde~1_1:
000045CA  0D0A 4475 8110          dc.b      13,10,68,117,109,112,32,77,101,109,111,114,121
000045CE  6D70 204D 
000045D2  656D 6F72 
000045D6  79        
000045D7  2042 6C6F 8111          dc.b      32,66,108,111,99,107,58,32,60,69,83,67,62,32
000045DB  636B 3A20 
000045DF  3C45 5343 
000045E3  3E20      
000045E5  746F 2041 8112          dc.b      116,111,32,65,98,111,114,116,44,32,60,83,80
000045E9  626F 7274 
000045ED  2C20 3C53 
000045F1  50        
000045F2  4143 453E 8113          dc.b      65,67,69,62,32,116,111,32,67,111,110,116,105
000045F6  2074 6F20 
000045FA  436F 6E74 
000045FE  69        
000045FF  6E75 6500 8114          dc.b      110,117,101,0
                    8115   @m68kde~1_2:
00004604  0D0A 456E 8116          dc.b      13,10,69,110,116,101,114,32,83,116,97,114,116
00004608  7465 7220 
0000460C  5374 6172 
00004610  74        
00004611  2041 6464 8117          dc.b      32,65,100,100,114,101,115,115,58,32,0
00004615  7265 7373 
00004619  3A20 00   
                    8118   @m68kde~1_3:
0000461C  0D0A 2530 8119          dc.b      13,10,37,48,56,120,32,0
00004620  3878 2000 
                    8120   @m68kde~1_4:
00004624  2530 3258 8121          dc.b      37,48,50,88,0
00004628  00        
                    8122   @m68kde~1_5:
0000462A  2020 00   8123          dc.b      32,32,0
                    8124   @m68kde~1_6:
0000462E  0D0A 00   8125          dc.b      13,10,0
                    8126   @m68kde~1_7:
00004632  0D0A 4669 8127          dc.b      13,10,70,105,108,108,32,77,101,109,111,114,121
00004636  6C6C 204D 
0000463A  656D 6F72 
0000463E  79        
0000463F  2042 6C6F 8128          dc.b      32,66,108,111,99,107,0
00004643  636B 00   
                    8129   @m68kde~1_8:
00004646  0D0A 456E 8130          dc.b      13,10,69,110,116,101,114,32,69,110,100,32,65
0000464A  7465 7220 
0000464E  456E 6420 
00004652  41        
00004653  6464 7265 8131          dc.b      100,100,114,101,115,115,58,32,0
00004657  7373 3A20 
0000465B  00        
                    8132   @m68kde~1_9:
0000465C  0D0A 456E 8133          dc.b      13,10,69,110,116,101,114,32,70,105,108,108,32
00004660  7465 7220 
00004664  4669 6C6C 
00004668  20        
00004669  4461 7461 8134          dc.b      68,97,116,97,58,32,0
0000466D  3A20 00   
                    8135   @m68kde~1_10:
00004670  0D0A 4669 8136          dc.b      13,10,70,105,108,108,105,110,103,32,65,100,100
00004674  6C6C 696E 
00004678  6720 4164 
0000467C  64        
0000467D  7265 7373 8137          dc.b      114,101,115,115,101,115,32,91,36,37,48,56,88
00004681  6573 205B 
00004685  2425 3038 
00004689  58        
0000468A  202D 2024 8138          dc.b      32,45,32,36,37,48,56,88,93,32,119,105,116,104
0000468E  2530 3858 
00004692  5D20 7769 
00004696  7468      
00004698  2024 2530 8139          dc.b      32,36,37,48,50,88,0
0000469C  3258 00   
                    8140   @m68kde~1_11:
000046A0  0D0A 5573 8141          dc.b      13,10,85,115,101,32,72,121,112,101,114,84,101
000046A4  6520 4879 
000046A8  7065 7254 
000046AC  65        
000046AD  726D 696E 8142          dc.b      114,109,105,110,97,108,32,116,111,32,83,101
000046B1  616C 2074 
000046B5  6F20 5365 
000046B9  6E64 2054 8143          dc.b      110,100,32,84,101,120,116,32,70,105,108,101
000046BD  6578 7420 
000046C1  4669 6C65 
000046C5  2028 2E68 8144          dc.b      32,40,46,104,101,120,41,13,10,0
000046C9  6578 290D 
000046CD  0A00      
                    8145   @m68kde~1_12:
000046D0  0D0A 4C6F 8146          dc.b      13,10,76,111,97,100,32,70,97,105,108,101,100
000046D4  6164 2046 
000046D8  6169 6C65 
000046DC  64        
000046DD  2061 7420 8147          dc.b      32,97,116,32,65,100,100,114,101,115,115,32,61
000046E1  4164 6472 
000046E5  6573 7320 
000046E9  3D        
000046EA  205B 2425 8148          dc.b      32,91,36,37,48,56,88,93,13,10,0
000046EE  3038 585D 
000046F2  0D0A 00   
                    8149   @m68kde~1_13:
000046F6  0D0A 5375 8150          dc.b      13,10,83,117,99,99,101,115,115,58,32,68,111
000046FA  6363 6573 
000046FE  733A 2044 
00004702  6F        
00004703  776E 6C6F 8151          dc.b      119,110,108,111,97,100,101,100,32,37,100,32
00004707  6164 6564 
0000470B  2025 6420 
0000470F  6279 7465 8152          dc.b      98,121,116,101,115,13,10,0
00004713  730D 0A00 
                    8153   @m68kde~1_14:
00004718  0D0A 4578 8154          dc.b      13,10,69,120,97,109,105,110,101,32,97,110,100
0000471C  616D 696E 
00004720  6520 616E 
00004724  64        
00004725  2043 6861 8155          dc.b      32,67,104,97,110,103,101,32,77,101,109,111,114
00004729  6E67 6520 
0000472D  4D65 6D6F 
00004731  72        
00004732  7900      8156          dc.b      121,0
                    8157   @m68kde~1_15:
00004734  0D0A 3C45 8158          dc.b      13,10,60,69,83,67,62,32,116,111,32,83,116,111
00004738  5343 3E20 
0000473C  746F 2053 
00004740  746F      
00004742  702C 203C 8159          dc.b      112,44,32,60,83,80,65,67,69,62,32,116,111,32
00004746  5350 4143 
0000474A  453E 2074 
0000474E  6F20      
00004750  4164 7661 8160          dc.b      65,100,118,97,110,99,101,44,32,39,45,39,32,116
00004754  6E63 652C 
00004758  2027 2D27 
0000475C  2074      
0000475E  6F20 476F 8161          dc.b      111,32,71,111,32,66,97,99,107,44,32,60,68,65
00004762  2042 6163 
00004766  6B2C 203C 
0000476A  4441      
0000476C  5441 3E20 8162          dc.b      84,65,62,32,116,111,32,99,104,97,110,103,101
00004770  746F 2063 
00004774  6861 6E67 
00004778  65        
00004779  00        8163          dc.b      0
                    8164   @m68kde~1_16:
0000477A  0D0A 456E 8165          dc.b      13,10,69,110,116,101,114,32,65,100,100,114,101
0000477E  7465 7220 
00004782  4164 6472 
00004786  65        
00004787  7373 3A20 8166          dc.b      115,115,58,32,0
0000478B  00        
                    8167   @m68kde~1_17:
0000478C  0D0A 5B25 8168          dc.b      13,10,91,37,48,56,120,93,32,58,32,37,48,50,120
00004790  3038 785D 
00004794  203A 2025 
00004798  3032 78   
0000479B  2020 00   8169          dc.b      32,32,0
                    8170   @m68kde~1_18:
0000479E  0D0A 5761 8171          dc.b      13,10,87,97,114,110,105,110,103,32,67,104,97
000047A2  726E 696E 
000047A6  6720 4368 
000047AA  61        
000047AB  6E67 6520 8172          dc.b      110,103,101,32,70,97,105,108,101,100,58,32,87
000047AF  4661 696C 
000047B3  6564 3A20 
000047B7  57        
000047B8  726F 7465 8173          dc.b      114,111,116,101,32,91,37,48,50,120,93,44,32
000047BC  205B 2530 
000047C0  3278 5D2C 
000047C4  20        
000047C5  5265 6164 8174          dc.b      82,101,97,100,32,91,37,48,50,120,93,0
000047C9  205B 2530 
000047CD  3278 5D00 
                    8175   @m68kde~1_19:
000047D2  2425 3038 8176          dc.b      36,37,48,56,88,32,32,0
000047D6  5820 2000 
                    8177   @m68kde~1_20:
000047DA  2000      8178          dc.b      32,0
                    8179   @m68kde~1_21:
000047DC  2E00      8180          dc.b      46,0
                    8181   @m68kde~1_22:
000047DE  2563 00   8182          dc.b      37,99,0
                    8183   @m68kde~1_23:
000047E2  00        8184          dc.b      0
                    8185   @m68kde~1_24:
000047E4  0D0A 0D0A 8186          dc.b      13,10,13,10,32,68,48,32,61,32,36,37,48,56,88
000047E8  2044 3020 
000047EC  3D20 2425 
000047F0  3038 58   
000047F3  2020 4130 8187          dc.b      32,32,65,48,32,61,32,36,37,48,56,88,0
000047F7  203D 2024 
000047FB  2530 3858 
000047FF  00        
                    8188   @m68kde~1_25:
00004800  0D0A 2044 8189          dc.b      13,10,32,68,49,32,61,32,36,37,48,56,88,32,32
00004804  3120 3D20 
00004808  2425 3038 
0000480C  5820 20   
0000480F  4131 203D 8190          dc.b      65,49,32,61,32,36,37,48,56,88,0
00004813  2024 2530 
00004817  3858 00   
                    8191   @m68kde~1_26:
0000481A  0D0A 2044 8192          dc.b      13,10,32,68,50,32,61,32,36,37,48,56,88,32,32
0000481E  3220 3D20 
00004822  2425 3038 
00004826  5820 20   
00004829  4132 203D 8193          dc.b      65,50,32,61,32,36,37,48,56,88,0
0000482D  2024 2530 
00004831  3858 00   
                    8194   @m68kde~1_27:
00004834  0D0A 2044 8195          dc.b      13,10,32,68,51,32,61,32,36,37,48,56,88,32,32
00004838  3320 3D20 
0000483C  2425 3038 
00004840  5820 20   
00004843  4133 203D 8196          dc.b      65,51,32,61,32,36,37,48,56,88,0
00004847  2024 2530 
0000484B  3858 00   
                    8197   @m68kde~1_28:
0000484E  0D0A 2044 8198          dc.b      13,10,32,68,52,32,61,32,36,37,48,56,88,32,32
00004852  3420 3D20 
00004856  2425 3038 
0000485A  5820 20   
0000485D  4134 203D 8199          dc.b      65,52,32,61,32,36,37,48,56,88,0
00004861  2024 2530 
00004865  3858 00   
                    8200   @m68kde~1_29:
00004868  0D0A 2044 8201          dc.b      13,10,32,68,53,32,61,32,36,37,48,56,88,32,32
0000486C  3520 3D20 
00004870  2425 3038 
00004874  5820 20   
00004877  4135 203D 8202          dc.b      65,53,32,61,32,36,37,48,56,88,0
0000487B  2024 2530 
0000487F  3858 00   
                    8203   @m68kde~1_30:
00004882  0D0A 2044 8204          dc.b      13,10,32,68,54,32,61,32,36,37,48,56,88,32,32
00004886  3620 3D20 
0000488A  2425 3038 
0000488E  5820 20   
00004891  4136 203D 8205          dc.b      65,54,32,61,32,36,37,48,56,88,0
00004895  2024 2530 
00004899  3858 00   
                    8206   @m68kde~1_31:
0000489C  0D0A 2044 8207          dc.b      13,10,32,68,55,32,61,32,36,37,48,56,88,32,32
000048A0  3720 3D20 
000048A4  2425 3038 
000048A8  5820 20   
000048AB  4137 203D 8208          dc.b      65,55,32,61,32,36,37,48,56,88,0
000048AF  2024 2530 
000048B3  3858 00   
                    8209   @m68kde~1_32:
000048B6  0D0A 0D0A 8210          dc.b      13,10,13,10,85,83,80,32,61,32,36,37,48,56,88
000048BA  5553 5020 
000048BE  3D20 2425 
000048C2  3038 58   
000048C5  2020 2841 8211          dc.b      32,32,40,65,55,41,32,85,115,101,114,32,83,80
000048C9  3729 2055 
000048CD  7365 7220 
000048D1  5350      
000048D3  00        8212          dc.b      0
                    8213   @m68kde~1_33:
000048D4  0D0A 5353 8214          dc.b      13,10,83,83,80,32,61,32,36,37,48,56,88,32,32
000048D8  5020 3D20 
000048DC  2425 3038 
000048E0  5820 20   
000048E3  2841 3729 8215          dc.b      40,65,55,41,32,83,117,112,101,114,118,105,115
000048E7  2053 7570 
000048EB  6572 7669 
000048EF  73        
000048F0  6F72 2053 8216          dc.b      111,114,32,83,80,0
000048F4  5000      
                    8217   @m68kde~1_34:
000048F6  0D0A 2053 8218          dc.b      13,10,32,83,82,32,61,32,36,37,48,52,88,32,32
000048FA  5220 3D20 
000048FE  2425 3034 
00004902  5820 20   
00004905  2000      8219          dc.b      32,0
                    8220   @m68kde~1_35:
00004908  2020 205B 8221          dc.b      32,32,32,91,0
0000490C  00        
                    8222   @m68kde~1_36:
0000490E  0D0A 2050 8223          dc.b      13,10,32,80,67,32,61,32,36,37,48,56,88,32,32
00004912  4320 3D20 
00004916  2425 3038 
0000491A  5820 20   
0000491D  00        8224          dc.b      0
                    8225   @m68kde~1_37:
0000491E  5B40 2042 8226          dc.b      91,64,32,66,82,69,65,75,80,79,73,78,84,93,0
00004922  5245 414B 
00004926  504F 494E 
0000492A  545D 00   
                    8227   @m68kde~1_38:
0000492E  0D0A 5750 8228          dc.b      13,10,87,80,37,100,32,61,32,37,115,0
00004932  2564 203D 
00004936  2025 7300 
                    8229   @m68kde~1_39:
0000493A  0D0A 0D0A 8230          dc.b      13,10,13,10,13,10,13,10,13,10,13,10,83,105,110
0000493E  0D0A 0D0A 
00004942  0D0A 0D0A 
00004946  5369 6E   
00004949  676C 6520 8231          dc.b      103,108,101,32,83,116,101,112,32,32,58,91,79
0000494D  5374 6570 
00004951  2020 3A5B 
00004955  4F        
00004956  4E5D 00   8232          dc.b      78,93,0
                    8233   @m68kde~1_40:
0000495A  0D0A 4272 8234          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
0000495E  6561 6B20 
00004962  506F 696E 
00004966  74        
00004967  7320 3A5B 8235          dc.b      115,32,58,91,68,105,115,97,98,108,101,100,93
0000496B  4469 7361 
0000496F  626C 6564 
00004973  5D        
00004974  00        8236          dc.b      0
                    8237   @m68kde~1_41:
00004976  0D0A 5072 8238          dc.b      13,10,80,114,101,115,115,32,60,83,80,65,67,69
0000497A  6573 7320 
0000497E  3C53 5041 
00004982  4345      
00004984  3E20 746F 8239          dc.b      62,32,116,111,32,69,120,101,99,117,116,101,32
00004988  2045 7865 
0000498C  6375 7465 
00004990  20        
00004991  4E65 7874 8240          dc.b      78,101,120,116,32,73,110,115,116,114,117,99
00004995  2049 6E73 
00004999  7472 7563 
0000499D  7469 6F6E 8241          dc.b      116,105,111,110,0
000049A1  00        
                    8242   @m68kde~1_42:
000049A2  0D0A 5072 8243          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
000049A6  6573 7320 
000049AA  3C45 5343 
000049AE  3E20      
000049B0  746F 2052 8244          dc.b      116,111,32,82,101,115,117,109,101,32,80,114
000049B4  6573 756D 
000049B8  6520 5072 
000049BC  6F67 7261 8245          dc.b      111,103,114,97,109,0
000049C0  6D00      
                    8246   @m68kde~1_43:
000049C2  0D0A 496C 8247          dc.b      13,10,73,108,108,101,103,97,108,32,68,97,116
000049C6  6C65 6761 
000049CA  6C20 4461 
000049CE  74        
000049CF  6120 5265 8248          dc.b      97,32,82,101,103,105,115,116,101,114,32,58,32
000049D3  6769 7374 
000049D7  6572 203A 
000049DB  20        
000049DC  5573 6520 8249          dc.b      85,115,101,32,68,48,45,68,55,46,46,46,46,46
000049E0  4430 2D44 
000049E4  372E 2E2E 
000049E8  2E2E      
000049EA  0D0A 00   8250          dc.b      13,10,0
                    8251   @m68kde~1_44:
000049EE  0D0A 4425 8252          dc.b      13,10,68,37,99,32,61,32,0
000049F2  6320 3D20 
000049F6  00        
                    8253   @m68kde~1_45:
000049F8  0D0A 496C 8254          dc.b      13,10,73,108,108,101,103,97,108,32,65,100,100
000049FC  6C65 6761 
00004A00  6C20 4164 
00004A04  64        
00004A05  7265 7373 8255          dc.b      114,101,115,115,32,82,101,103,105,115,116,101
00004A09  2052 6567 
00004A0D  6973 7465 
00004A11  7220 3A20 8256          dc.b      114,32,58,32,85,115,101,32,65,48,45,65,55,46
00004A15  5573 6520 
00004A19  4130 2D41 
00004A1D  372E      
00004A1F  2E2E 2E2E 8257          dc.b      46,46,46,46,13,10,0
00004A23  0D0A 00   
                    8258   @m68kde~1_46:
00004A26  0D0A 4125 8259          dc.b      13,10,65,37,99,32,61,32,0
00004A2A  6320 3D20 
00004A2E  00        
                    8260   @m68kde~1_47:
00004A30  0D0A 5573 8261          dc.b      13,10,85,115,101,114,32,83,80,32,61,32,0
00004A34  6572 2053 
00004A38  5020 3D20 
00004A3C  00        
                    8262   @m68kde~1_48:
00004A3E  0D0A 496C 8263          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
00004A42  6C65 6761 
00004A46  6C20 5265 
00004A4A  67        
00004A4B  6973 7465 8264          dc.b      105,115,116,101,114,46,46,46,46,0
00004A4F  722E 2E2E 
00004A53  2E00      
                    8265   @m68kde~1_49:
00004A56  0D0A 5379 8266          dc.b      13,10,83,121,115,116,101,109,32,83,80,32,61
00004A5A  7374 656D 
00004A5E  2053 5020 
00004A62  3D        
00004A63  2000      8267          dc.b      32,0
                    8268   @m68kde~1_50:
00004A66  0D0A 5043 8269          dc.b      13,10,80,67,32,61,32,0
00004A6A  203D 2000 
                    8270   @m68kde~1_51:
00004A6E  0D0A 5352 8271          dc.b      13,10,83,82,32,61,32,0
00004A72  203D 2000 
                    8272   @m68kde~1_52:
00004A76  0D0A 496C 8273          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
00004A7A  6C65 6761 
00004A7E  6C20 5265 
00004A82  67        
00004A83  6973 7465 8274          dc.b      105,115,116,101,114,58,32,85,115,101,32,65,48
00004A87  723A 2055 
00004A8B  7365 2041 
00004A8F  30        
00004A90  2D41 372C 8275          dc.b      45,65,55,44,32,68,48,45,68,55,44,32,83,83,80
00004A94  2044 302D 
00004A98  4437 2C20 
00004A9C  5353 50   
00004A9F  2C20 5553 8276          dc.b      44,32,85,83,80,44,32,80,67,32,111,114,32,83
00004AA3  502C 2050 
00004AA7  4320 6F72 
00004AAB  2053      
00004AAD  520D 0A00 8277          dc.b      82,13,10,0
                    8278   @m68kde~1_53:
00004AB2  0D0A 0D0A 8279          dc.b      13,10,13,10,78,117,109,32,32,32,32,32,65,100
00004AB6  4E75 6D20 
00004ABA  2020 2020 
00004ABE  4164      
00004AC0  6472 6573 8280          dc.b      100,114,101,115,115,32,32,32,32,32,32,73,110
00004AC4  7320 2020 
00004AC8  2020 2049 
00004ACC  6E        
00004ACD  7374 7275 8281          dc.b      115,116,114,117,99,116,105,111,110,0
00004AD1  6374 696F 
00004AD5  6E00      
                    8282   @m68kde~1_54:
00004AD8  0D0A 2D2D 8283          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
00004ADC  2D20 2020 
00004AE0  2020 2D2D 
00004AE4  2D2D 2D   
00004AE7  2D2D 2D2D 8284          dc.b      45,45,45,45,32,32,32,32,45,45,45,45,45,45,45
00004AEB  2020 2020 
00004AEF  2D2D 2D2D 
00004AF3  2D2D 2D   
00004AF6  2D2D 2D2D 8285          dc.b      45,45,45,45,0
00004AFA  00        
                    8286   @m68kde~1_55:
00004AFC  0D0A 4E6F 8287          dc.b      13,10,78,111,32,66,114,101,97,107,80,111,105
00004B00  2042 7265 
00004B04  616B 506F 
00004B08  69        
00004B09  6E74 7320 8288          dc.b      110,116,115,32,83,101,116,0
00004B0D  5365 7400 
                    8289   @m68kde~1_56:
00004B12  0D0A 2533 8290          dc.b      13,10,37,51,100,32,32,32,32,32,36,37,48,56,120
00004B16  6420 2020 
00004B1A  2020 2425 
00004B1E  3038 78   
00004B21  00        8291          dc.b      0
                    8292   @m68kde~1_57:
00004B22  0D0A 4E75 8293          dc.b      13,10,78,117,109,32,32,32,32,32,65,100,100,114
00004B26  6D20 2020 
00004B2A  2020 4164 
00004B2E  6472      
00004B30  6573 7300 8294          dc.b      101,115,115,0
                    8295   @m68kde~1_58:
00004B34  0D0A 2D2D 8296          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
00004B38  2D20 2020 
00004B3C  2020 2D2D 
00004B40  2D2D 2D   
00004B43  2D2D 2D2D 8297          dc.b      45,45,45,45,0
00004B47  00        
                    8298   @m68kde~1_59:
00004B48  0D0A 4E6F 8299          dc.b      13,10,78,111,32,87,97,116,99,104,80,111,105
00004B4C  2057 6174 
00004B50  6368 506F 
00004B54  69        
00004B55  6E74 7320 8300          dc.b      110,116,115,32,83,101,116,0
00004B59  5365 7400 
                    8301   @m68kde~1_60:
00004B5E  0D0A 456E 8302          dc.b      13,10,69,110,116,101,114,32,66,114,101,97,107
00004B62  7465 7220 
00004B66  4272 6561 
00004B6A  6B        
00004B6B  2050 6F69 8303          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
00004B6F  6E74 204E 
00004B73  756D 6265 
00004B77  72        
00004B78  3A20 00   8304          dc.b      58,32,0
                    8305   @m68kde~1_61:
00004B7C  0D0A 496C 8306          dc.b      13,10,73,108,108,101,103,97,108,32,82,97,110
00004B80  6C65 6761 
00004B84  6C20 5261 
00004B88  6E        
00004B89  6765 203A 8307          dc.b      103,101,32,58,32,85,115,101,32,48,32,45,32,55
00004B8D  2055 7365 
00004B91  2030 202D 
00004B95  2037      
00004B97  00        8308          dc.b      0
                    8309   @m68kde~1_62:
00004B98  0D0A 4272 8310          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004B9C  6561 6B20 
00004BA0  506F 696E 
00004BA4  74        
00004BA5  2043 6C65 8311          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
00004BA9  6172 6564 
00004BAD  2E2E 2E2E 
00004BB1  2E        
00004BB2  0D0A 00   8312          dc.b      13,10,0
                    8313   @m68kde~1_63:
00004BB6  0D0A 4272 8314          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004BBA  6561 6B20 
00004BBE  506F 696E 
00004BC2  74        
00004BC3  2077 6173 8315          dc.b      32,119,97,115,110,39,116,32,83,101,116,46,46
00004BC7  6E27 7420 
00004BCB  5365 742E 
00004BCF  2E        
00004BD0  2E2E 2E00 8316          dc.b      46,46,46,0
                    8317   @m68kde~1_64:
00004BD4  0D0A 456E 8318          dc.b      13,10,69,110,116,101,114,32,87,97,116,99,104
00004BD8  7465 7220 
00004BDC  5761 7463 
00004BE0  68        
00004BE1  2050 6F69 8319          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
00004BE5  6E74 204E 
00004BE9  756D 6265 
00004BED  72        
00004BEE  3A20 00   8320          dc.b      58,32,0
                    8321   @m68kde~1_65:
00004BF2  0D0A 5761 8322          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004BF6  7463 6820 
00004BFA  506F 696E 
00004BFE  74        
00004BFF  2043 6C65 8323          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
00004C03  6172 6564 
00004C07  2E2E 2E2E 
00004C0B  2E        
00004C0C  0D0A 00   8324          dc.b      13,10,0
                    8325   @m68kde~1_66:
00004C10  0D0A 5761 8326          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004C14  7463 6820 
00004C18  506F 696E 
00004C1C  74        
00004C1D  2057 6173 8327          dc.b      32,87,97,115,32,110,111,116,32,83,101,116,46
00004C21  206E 6F74 
00004C25  2053 6574 
00004C29  2E        
00004C2A  2E2E 2E2E 8328          dc.b      46,46,46,46,0
00004C2E  00        
                    8329   @m68kde~1_67:
00004C30  0D0A 4E6F 8330          dc.b      13,10,78,111,32,70,82,69,69,32,66,114,101,97
00004C34  2046 5245 
00004C38  4520 4272 
00004C3C  6561      
00004C3E  6B20 506F 8331          dc.b      107,32,80,111,105,110,116,115,46,46,46,46,46
00004C42  696E 7473 
00004C46  2E2E 2E2E 
00004C4A  2E        
00004C4B  00        8332          dc.b      0
                    8333   @m68kde~1_68:
00004C4C  0D0A 4272 8334          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004C50  6561 6B20 
00004C54  506F 696E 
00004C58  74        
00004C59  2041 6464 8335          dc.b      32,65,100,100,114,101,115,115,58,32,0
00004C5D  7265 7373 
00004C61  3A20 00   
                    8336   @m68kde~1_69:
00004C64  0D0A 4572 8337          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
00004C68  726F 7220 
00004C6C  3A20 4272 
00004C70  65        
00004C71  616B 2050 8338          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
00004C75  6F69 6E74 
00004C79  7320 4341 
00004C7D  4E        
00004C7E  4E4F 5420 8339          dc.b      78,79,84,32,98,101,32,115,101,116,32,97,116
00004C82  6265 2073 
00004C86  6574 2061 
00004C8A  74        
00004C8B  204F 4444 8340          dc.b      32,79,68,68,32,97,100,100,114,101,115,115,101
00004C8F  2061 6464 
00004C93  7265 7373 
00004C97  65        
00004C98  7300      8341          dc.b      115,0
                    8342   @m68kde~1_70:
00004C9A  0D0A 4572 8343          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
00004C9E  726F 7220 
00004CA2  3A20 4272 
00004CA6  65        
00004CA7  616B 2050 8344          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
00004CAB  6F69 6E74 
00004CAF  7320 4341 
00004CB3  4E        
00004CB4  4E4F 5420 8345          dc.b      78,79,84,32,98,101,32,115,101,116,32,102,111
00004CB8  6265 2073 
00004CBC  6574 2066 
00004CC0  6F        
00004CC1  7220 524F 8346          dc.b      114,32,82,79,77,32,105,110,32,82,97,110,103
00004CC5  4D20 696E 
00004CC9  2052 616E 
00004CCD  67        
00004CCE  6520 3A20 8347          dc.b      101,32,58,32,91,36,48,45,36,48,48,48,48,55,70
00004CD2  5B24 302D 
00004CD6  2430 3030 
00004CDA  3037 46   
00004CDD  4646 5D00 8348          dc.b      70,70,93,0
                    8349   @m68kde~1_71:
00004CE2  0D0A 4572 8350          dc.b      13,10,69,114,114,111,114,58,32,66,114,101,97
00004CE6  726F 723A 
00004CEA  2042 7265 
00004CEE  61        
00004CEF  6B20 506F 8351          dc.b      107,32,80,111,105,110,116,32,65,108,114,101
00004CF3  696E 7420 
00004CF7  416C 7265 
00004CFB  6164 7920 8352          dc.b      97,100,121,32,69,120,105,115,116,115,32,97,116
00004CFF  4578 6973 
00004D03  7473 2061 
00004D07  74        
00004D08  2041 6464 8353          dc.b      32,65,100,100,114,101,115,115,32,58,32,37,48
00004D0C  7265 7373 
00004D10  203A 2025 
00004D14  30        
00004D15  3878 0D0A 8354          dc.b      56,120,13,10,0
00004D19  00        
                    8355   @m68kde~1_72:
00004D1A  0D0A 4272 8356          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004D1E  6561 6B20 
00004D22  506F 696E 
00004D26  74        
00004D27  2053 6574 8357          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
00004D2B  2061 7420 
00004D2F  4164 6472 
00004D33  65        
00004D34  7373 3A20 8358          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
00004D38  5B24 2530 
00004D3C  3878 5D00 
                    8359   @m68kde~1_73:
00004D40  0D0A 4E6F 8360          dc.b      13,10,78,111,32,70,82,69,69,32,87,97,116,99
00004D44  2046 5245 
00004D48  4520 5761 
00004D4C  7463      
00004D4E  6820 506F 8361          dc.b      104,32,80,111,105,110,116,115,46,46,46,46,46
00004D52  696E 7473 
00004D56  2E2E 2E2E 
00004D5A  2E        
00004D5B  00        8362          dc.b      0
                    8363   @m68kde~1_74:
00004D5C  0D0A 5761 8364          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004D60  7463 6820 
00004D64  506F 696E 
00004D68  74        
00004D69  2041 6464 8365          dc.b      32,65,100,100,114,101,115,115,58,32,0
00004D6D  7265 7373 
00004D71  3A20 00   
                    8366   @m68kde~1_75:
00004D74  0D0A 4572 8367          dc.b      13,10,69,114,114,111,114,58,32,87,97,116,99
00004D78  726F 723A 
00004D7C  2057 6174 
00004D80  63        
00004D81  6820 506F 8368          dc.b      104,32,80,111,105,110,116,32,65,108,114,101
00004D85  696E 7420 
00004D89  416C 7265 
00004D8D  6164 7920 8369          dc.b      97,100,121,32,83,101,116,32,97,116,32,65,100
00004D91  5365 7420 
00004D95  6174 2041 
00004D99  64        
00004D9A  6472 6573 8370          dc.b      100,114,101,115,115,32,58,32,37,48,56,120,13
00004D9E  7320 3A20 
00004DA2  2530 3878 
00004DA6  0D        
00004DA7  0A00      8371          dc.b      10,0
                    8372   @m68kde~1_76:
00004DAA  0D0A 5761 8373          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004DAE  7463 6820 
00004DB2  506F 696E 
00004DB6  74        
00004DB7  2053 6574 8374          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
00004DBB  2061 7420 
00004DBF  4164 6472 
00004DC3  65        
00004DC4  7373 3A20 8375          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
00004DC8  5B24 2530 
00004DCC  3878 5D00 
                    8376   @m68kde~1_77:
00004DD0  0D0A 0D0A 8377          dc.b      13,10,13,10,13,10,13,10,64,66,82,69,65,75,80
00004DD4  0D0A 0D0A 
00004DD8  4042 5245 
00004DDC  414B 50   
00004DDF  4F49 4E54 8378          dc.b      79,73,78,84,0
00004DE3  00        
                    8379   @m68kde~1_78:
00004DE4  0D0A 5369 8380          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00004DE8  6E67 6C65 
00004DEC  2053 7465 
00004DF0  70        
00004DF1  203A 205B 8381          dc.b      32,58,32,91,79,78,93,0
00004DF5  4F4E 5D00 
                    8382   @m68kde~1_79:
00004DFA  0D0A 4272 8383          dc.b      13,10,66,114,101,97,107,80,111,105,110,116,115
00004DFE  6561 6B50 
00004E02  6F69 6E74 
00004E06  73        
00004E07  203A 205B 8384          dc.b      32,58,32,91,69,110,97,98,108,101,100,93,0
00004E0B  456E 6162 
00004E0F  6C65 645D 
00004E13  00        
                    8385   @m68kde~1_80:
00004E14  0D0A 5072 8386          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00004E18  6573 7320 
00004E1C  3C45 5343 
00004E20  3E20      
00004E22  746F 2052 8387          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
00004E26  6573 756D 
00004E2A  6520 5573 
00004E2E  6572 2050 8388          dc.b      101,114,32,80,114,111,103,114,97,109,13,10,0
00004E32  726F 6772 
00004E36  616D 0D0A 
00004E3A  00        
                    8389   @m68kde~1_81:
00004E3C  0D0A 556E 8390          dc.b      13,10,85,110,107,110,111,119,110,32,67,111,109
00004E40  6B6E 6F77 
00004E44  6E20 436F 
00004E48  6D        
00004E49  6D61 6E64 8391          dc.b      109,97,110,100,46,46,46,46,46,13,10,0
00004E4D  2E2E 2E2E 
00004E51  2E0D 0A00 
                    8392   @m68kde~1_82:
00004E56  0D0A 5072 8393          dc.b      13,10,80,114,111,103,114,97,109,32,69,110,100
00004E5A  6F67 7261 
00004E5E  6D20 456E 
00004E62  64        
00004E63  6564 2028 8394          dc.b      101,100,32,40,84,82,65,80,32,35,49,53,41,46
00004E67  5452 4150 
00004E6B  2023 3135 
00004E6F  292E      
00004E71  2E2E 2E00 8395          dc.b      46,46,46,0
                    8396   @m68kde~1_83:
00004E76  0D0A 4B69 8397          dc.b      13,10,75,105,108,108,32,65,108,108,32,66,114
00004E7A  6C6C 2041 
00004E7E  6C6C 2042 
00004E82  72        
00004E83  6561 6B20 8398          dc.b      101,97,107,32,80,111,105,110,116,115,46,46,46
00004E87  506F 696E 
00004E8B  7473 2E2E 
00004E8F  2E        
00004E90  2879 2F6E 8399          dc.b      40,121,47,110,41,63,0
00004E94  293F 00   
                    8400   @m68kde~1_84:
00004E98  0D0A 4B69 8401          dc.b      13,10,75,105,108,108,32,65,108,108,32,87,97
00004E9C  6C6C 2041 
00004EA0  6C6C 2057 
00004EA4  61        
00004EA5  7463 6820 8402          dc.b      116,99,104,32,80,111,105,110,116,115,46,46,46
00004EA9  506F 696E 
00004EAD  7473 2E2E 
00004EB1  2E        
00004EB2  2879 2F6E 8403          dc.b      40,121,47,110,41,63,0
00004EB6  293F 00   
                    8404   @m68kde~1_85:
00004EBA  0D0A 2D2D 8405          dc.b      13,10,45,45,45,45,45,45,45,45,45,45,45,45,45
00004EBE  2D2D 2D2D 
00004EC2  2D2D 2D2D 
00004EC6  2D2D 2D   
00004EC9  2D2D 2D2D 8406          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00004ECD  2D2D 2D2D 
00004ED1  2D2D 2D2D 
00004ED5  2D2D 2D   
00004ED8  2D2D 2D2D 8407          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00004EDC  2D2D 2D2D 
00004EE0  2D2D 2D2D 
00004EE4  2D2D 2D   
00004EE7  2D2D 2D2D 8408          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00004EEB  2D2D 2D2D 
00004EEF  2D2D 2D2D 
00004EF3  2D2D 2D   
00004EF6  2D2D 2D2D 8409          dc.b      45,45,45,45,45,45,0
00004EFA  2D2D 00   
                    8410   @m68kde~1_86:
00004EFE  0D0A 2020 8411          dc.b      13,10,32,32,70,105,110,97,108,32,80,114,111
00004F02  4669 6E61 
00004F06  6C20 5072 
00004F0A  6F        
00004F0B  6A65 6374 8412          dc.b      106,101,99,116,0
00004F0F  00        
                    8413   @m68kde~1_87:
00004F10  0D0A 2020 8414          dc.b      13,10,32,32,72,32,32,32,32,45,32,83,97,121,32
00004F14  4820 2020 
00004F18  202D 2053 
00004F1C  6179 20   
00004F1F  4865 6C6C 8415          dc.b      72,101,108,108,111,32,87,111,114,108,100,0
00004F23  6F20 576F 
00004F27  726C 6400 
                    8416   @m68kde~1_88:
00004F2C  0D0A 2020 8417          dc.b      13,10,32,32,84,32,32,32,32,45,32,82,117,110
00004F30  5420 2020 
00004F34  202D 2052 
00004F38  756E      
00004F3A  2054 6574 8418          dc.b      32,84,101,116,114,105,115,32,71,97,109,101,0
00004F3E  7269 7320 
00004F42  4761 6D65 
00004F46  00        
                    8419   @m68kde~1_89:
00004F48  0D0A 2300 8420          dc.b      13,10,35,0
                    8421   @m68kde~1_90:
00004F4C  0A52 756E 8422          dc.b      10,82,117,110,110,105,110,103,32,84,101,116
00004F50  6E69 6E67 
00004F54  2054 6574 
00004F58  7269 7320 8423          dc.b      114,105,115,32,71,97,109,101,10,0
00004F5C  4761 6D65 
00004F60  0A00      
                    8424   @m68kde~1_91:
00004F62  0A53 6179 8425          dc.b      10,83,97,121,105,110,103,32,72,101,108,108,111
00004F66  696E 6720 
00004F6A  4865 6C6C 
00004F6E  6F        
00004F6F  2057 6F72 8426          dc.b      32,87,111,114,108,100,10,0
00004F73  6C64 0A00 
                    8427   @m68kde~1_92:
00004F78  0D0A 0D0A 8428          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
00004F7C  5072 6F67 
00004F80  7261 6D20 
00004F84  41        
00004F85  424F 5254 8429          dc.b      66,79,82,84,32,33,33,33,33,33,33,13,10,0
00004F89  2021 2121 
00004F8D  2121 210D 
00004F91  0A00      
                    8430   @m68kde~1_93:
00004F94  2573 0D0A 8431          dc.b      37,115,13,10,0
00004F98  00        
                    8432   @m68kde~1_94:
00004F9A  0D0A 0D0A 8433          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
00004F9E  5072 6F67 
00004FA2  7261 6D20 
00004FA6  41        
00004FA7  424F 5254 8434          dc.b      66,79,82,84,32,33,33,33,33,33,0
00004FAB  2021 2121 
00004FAF  2121 00   
                    8435   @m68kde~1_95:
00004FB2  0D0A 556E 8436          dc.b      13,10,85,110,104,97,110,100,108,101,100,32,73
00004FB6  6861 6E64 
00004FBA  6C65 6420 
00004FBE  49        
00004FBF  6E74 6572 8437          dc.b      110,116,101,114,114,117,112,116,58,32,73,82
00004FC3  7275 7074 
00004FC7  3A20 4952 
00004FCB  5125 6420 8438          dc.b      81,37,100,32,33,33,33,33,33,0
00004FCF  2121 2121 
00004FD3  2100      
                    8439   @m68kde~1_96:
00004FD6  4144 4452 8440          dc.b      65,68,68,82,69,83,83,32,69,82,82,79,82,58,32
00004FDA  4553 5320 
00004FDE  4552 524F 
00004FE2  523A 20   
00004FE5  3136 206F 8441          dc.b      49,54,32,111,114,32,51,50,32,66,105,116,32,84
00004FE9  7220 3332 
00004FED  2042 6974 
00004FF1  2054      
00004FF3  7261 6E73 8442          dc.b      114,97,110,115,102,101,114,32,116,111,47,102
00004FF7  6665 7220 
00004FFB  746F 2F66 
00004FFF  726F 6D20 8443          dc.b      114,111,109,32,97,110,32,79,68,68,32,65,100
00005003  616E 204F 
00005007  4444 2041 
0000500B  64        
0000500C  6472 6573 8444          dc.b      100,114,101,115,115,46,46,46,46,0
00005010  732E 2E2E 
00005014  2E00      
                    8445   @m68kde~1_97:
00005016  556E 6861 8446          dc.b      85,110,104,97,110,100,108,101,100,32,84,114
0000501A  6E64 6C65 
0000501E  6420 5472 
00005022  6170 2021 8447          dc.b      97,112,32,33,33,33,33,33,0
00005026  2121 2121 
0000502A  00        
                    8448   @m68kde~1_98:
0000502C  4255 5320 8449          dc.b      66,85,83,32,69,114,114,111,114,33,0
00005030  4572 726F 
00005034  7221 00   
                    8450   @m68kde~1_99:
00005038  4144 4452 8451          dc.b      65,68,68,82,69,83,83,32,69,114,114,111,114,33
0000503C  4553 5320 
00005040  4572 726F 
00005044  7221      
00005046  00        8452          dc.b      0
                    8453   @m68kde~1_100:
00005048  494C 4C45 8454          dc.b      73,76,76,69,71,65,76,32,73,78,83,84,82,85,67
0000504C  4741 4C20 
00005050  494E 5354 
00005054  5255 43   
00005057  5449 4F4E 8455          dc.b      84,73,79,78,0
0000505B  00        
                    8456   @m68kde~1_101:
0000505C  4449 5649 8457          dc.b      68,73,86,73,68,69,32,66,89,32,90,69,82,79,0
00005060  4445 2042 
00005064  5920 5A45 
00005068  524F 00   
                    8458   @m68kde~1_102:
0000506C  2743 484B 8459          dc.b      39,67,72,75,39,32,73,78,83,84,82,85,67,84,73
00005070  2720 494E 
00005074  5354 5255 
00005078  4354 49   
0000507B  4F4E 00   8460          dc.b      79,78,0
                    8461   @m68kde~1_103:
0000507E  5452 4150 8462          dc.b      84,82,65,80,86,32,73,78,83,84,82,85,67,84,73
00005082  5620 494E 
00005086  5354 5255 
0000508A  4354 49   
0000508D  4F4E 00   8463          dc.b      79,78,0
                    8464   @m68kde~1_104:
00005090  5052 4956 8465          dc.b      80,82,73,86,73,76,69,71,69,32,86,73,79,76,65
00005094  494C 4547 
00005098  4520 5649 
0000509C  4F4C 41   
0000509F  5449 4F4E 8466          dc.b      84,73,79,78,0
000050A3  00        
                    8467   @m68kde~1_105:
000050A4  554E 494E 8468          dc.b      85,78,73,78,73,84,73,65,76,73,83,69,68,32,73
000050A8  4954 4941 
000050AC  4C49 5345 
000050B0  4420 49   
000050B3  5251 00   8469          dc.b      82,81,0
                    8470   @m68kde~1_106:
000050B6  5350 5552 8471          dc.b      83,80,85,82,73,79,85,83,32,73,82,81,0
000050BA  494F 5553 
000050BE  2049 5251 
000050C2  00        
                    8472   @m68kde~1_107:
000050C4  4350 454E 8473          dc.b      67,80,69,78,32,52,49,50,32,50,48,50,51,87,50
000050C8  2034 3132 
000050CC  2032 3032 
000050D0  3357 32   
000050D3  0D0A 546F 8474          dc.b      13,10,84,111,109,32,87,97,110,103,44,32,55,54
000050D7  6D20 5761 
000050DB  6E67 2C20 
000050DF  3736      
000050E1  3334 3033 8475          dc.b      51,52,48,51,52,56,0
000050E5  3438 00   
                    8476   @m68kde~1_108:
000050E8  436F 7079 8477          dc.b      67,111,112,121,114,105,103,104,116,32,40,67
000050EC  7269 6768 
000050F0  7420 2843 
000050F4  2920 504A 8478          dc.b      41,32,80,74,32,68,97,118,105,101,115,32,50,48
000050F8  2044 6176 
000050FC  6965 7320 
00005100  3230      
00005102  3136 00   8479          dc.b      49,54,0
                    8480   @m68kde~1_109:
00005106  0D0A 2573 8481          dc.b      13,10,37,115,0
0000510A  00        
                    8482   @tetris_1:
0000510C  2573 0A00 8483          dc.b      37,115,10,0
                    8484   @tetris_2:
00005110  6761 6D65 8485          dc.b      103,97,109,101,32,111,118,101,114,0
00005114  206F 7665 
00005118  7200      
                    8486   @tetris_3:
0000511A  2047 616D 8487          dc.b      32,71,97,109,101,32,111,118,101,114,33,32,0
0000511E  6520 6F76 
00005122  6572 2120 
00005126  00        
                    8488   @tetris_4:
00005128  2053 636F 8489          dc.b      32,83,99,111,114,101,58,32,37,100,32,0
0000512C  7265 3A20 
00005130  2564 2000 
                    8490   @tetris_5:
00005134  0A0A 4761 8491          dc.b      10,10,71,97,109,101,32,111,118,101,114,33,32
00005138  6D65 206F 
0000513C  7665 7221 
00005140  20        
00005141  0A59 6F75 8492          dc.b      10,89,111,117,114,32,115,99,111,114,101,32,119
00005145  7220 7363 
00005149  6F72 6520 
0000514D  77        
0000514E  6173 3A20 8493          dc.b      97,115,58,32,37,100,10,0
00005152  2564 0A00 
                    8494   @tetris_6:
00005156  0A50 7265 8495          dc.b      10,80,114,101,115,115,32,97,110,121,32,107,101
0000515A  7373 2061 
0000515E  6E79 206B 
00005162  65        
00005163  7920 746F 8496          dc.b      121,32,116,111,32,99,111,110,116,105,110,117
00005167  2063 6F6E 
0000516B  7469 6E75 
0000516F  650A 00   8497          dc.b      101,10,0
                    8498   @tetris_7:
00005172  7363 6F72 8499          dc.b      115,99,111,114,101,0
00005176  6500      
                    8500   @tetris_8:
00005178  0A0A 0A00 8501          dc.b      10,10,10,0
                    8502   @tetris_9:
0000517C  696E 6974 8503          dc.b      105,110,105,116,105,97,108,95,110,101,119,108
00005180  6961 6C5F 
00005184  6E65 776C 
00005188  696E 6500 8504          dc.b      105,110,101,0
                    8505   @tetris_10:
0000518C  2000      8506          dc.b      32,0
                    8507   @tetris_11:
0000518E  7370 6163 8508          dc.b      115,112,97,99,101,0
00005192  6500      
                    8509   @tetris_12:
00005194  4350 454E 8510          dc.b      67,80,69,78,52,49,50,32,84,101,116,114,105,115
00005198  3431 3220 
0000519C  5465 7472 
000051A0  6973      
000051A2  0A00      8511          dc.b      10,0
                    8512   @tetris_13:
000051A4  7469 746C 8513          dc.b      116,105,116,108,101,0
000051A8  6500      
                    8514   @tetris_14:
000051AA  2300      8515          dc.b      35,0
                    8516   @tetris_15:
000051AC  7461 626C 8517          dc.b      116,97,98,108,101,35,0
000051B0  6523 00   
                    8518   @tetris_16:
000051B4  2E00      8519          dc.b      46,0
                    8520   @tetris_17:
000051B6  7461 626C 8521          dc.b      116,97,98,108,101,46,0
000051BA  652E 00   
                    8522   @tetris_18:
000051BE  0A00      8523          dc.b      10,0
                    8524   @tetris_19:
000051C0  6E65 776C 8525          dc.b      110,101,119,108,105,110,101,49,0
000051C4  696E 6531 
000051C8  00        
                    8526   @tetris_20:
000051CA  0A53 636F 8527          dc.b      10,83,99,111,114,101,58,32,37,100,10,0
000051CE  7265 3A20 
000051D2  2564 0A00 
                    8528   @tetris_21:
000051D6  7363 6F72 8529          dc.b      115,99,111,114,101,112,114,105,110,116,0
000051DA  6570 7269 
000051DE  6E74 00   
                    8530   @tetris_22:
000051E2  0A47 616D 8531          dc.b      10,71,97,109,101,32,111,118,101,114,33,10,0
000051E6  6520 6F76 
000051EA  6572 210A 
000051EE  00        
                    8532          section   data
000051F0            8533                   align
          0000 51F0 8534   DataStart       equ       *
                    8535   
                    8536   *********************************************************************************************************
                    8537   * Data Section for Initialised Data - these will be placed in rom as constants and have to be copied
                    8538   * to ram as part of the CStart routine in this file
                    8539   *********************************************************************************************************
                    8540   
                    8541   @itoa_1:
000051F0  2D32 3134 8542          dc.b      45,50,49,52,55,52,56,51,54,52,56,0
000051F4  3734 3833 
000051F8  3634 3800 
                    8543          section   bss
000051FC            8544                   align
          0000 51FC 8545   DataEnd         equ     *                       this label will equate to the address of the last byte of global variable in it
                    8546   
                    8547   *********************************************************************************************************
                    8548   * Section for Uninitialised Data held in ROM as constants
                    8549   *********************************************************************************************************
                    8550   
08030000            8551                   org     RamVectorTable          Ram based vector table must be stored here otherwise InstallException Handler will not work
          0000 000C 8552   DataLength      equ     DataEnd-DataStart       length of data needed to copy to Ram on bootup
                    8553   
                    8554   
08030000            8555   bss             org       bss
                    8556   
                    8557   *********************************************************************************************************
                    8558   * Build a ram based vector table for interrupts so we can install our own Exception Handlers in C code at run time
                    8559   * install the exception handler using the C function InstallExceptionHandler()
                    8560   *********************************************************************************************************
                    8561   
                    8562   
                    8563   
08030000            8564   VInitialSP       ds.l    1      dummy as we can't really install a handler for this
08030004            8565   VInitialPC       ds.l    1      dummy as we can't reallin install a handler for this
08030008            8566   VBusError        ds.l    1      storage for address of Bus Error Handler
0803000C            8567   VAddressError    ds.l    1      storage for address of Address Error Handler
08030010            8568   VIllegalInstr    ds.l    1      storage for address of Illegal Instruction handler
08030014            8569   VDividebyZero    ds.l    1      storage for address of divide by zero handler
08030018            8570   VCheck           ds.l    1      ditto
0803001C            8571   VTrapV           ds.l    1      ditto
08030020            8572   VPrivilege       ds.l    1      ditto
08030024            8573   VTrace           ds.l    1
08030028            8574   VLine1010emul    ds.l    1
0803002C            8575   VLine1111emul    ds.l    1
08030030            8576   VUnassigned1     ds.l    1
08030034            8577   VUnassigned2     ds.l    1
08030038            8578   VUnassigned3     ds.l    1
0803003C            8579   VUninit_IRQ      ds.l    1
08030040            8580   VUnassigned4     ds.l    1
08030044            8581   VUnassigned5     ds.l    1
08030048            8582   VUnassigned6     ds.l    1
0803004C            8583   VUnassigned7     ds.l    1
08030050            8584   VUnassigned8     ds.l    1
08030054            8585   VUnassigned9     ds.l    1
08030058            8586   VUnassigned10    ds.l    1
0803005C            8587   VUnassigned11    ds.l    1
08030060            8588   VSpuriousIRQ     ds.l    1
                    8589   
                    8590   * Interrupt handlers Vector 25-31
08030064            8591   VL1IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030068            8592   VL2IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0803006C            8593   VL3IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030070            8594   VL4IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030074            8595   VL5IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030078            8596   VL6IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0803007C            8597   VL7IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
                    8598   
                    8599   * Trap Handler vectors 32-47
08030080            8600   VTrap0           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030084            8601   VTrap1           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030088            8602   VTrap2           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0803008C            8603   VTrap3           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030090            8604   VTrap4           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030094            8605   VTrap5           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030098            8606   VTrap6           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0803009C            8607   VTrap7           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300A0            8608   VTrap8           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300A4            8609   VTrap9           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300A8            8610   VTrap10          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300AC            8611   VTrap11          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300B0            8612   VTrap12          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300B4            8613   VTrap13          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300B8            8614   VTrap14          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300BC            8615   VTrap15          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
                    8616   
                    8617   * the remaining exceptions are unassigned in the 68000 so no need to allocate storage for them here
                    8618   
                    8619   ***********************************************************************************************************
                    8620   * Other Variables
                    8621   ***********************************************************************************************************
                    8622   *__DebugA5       ds.l    1
                    8623   *__UserA5        ds.l    1
                    8624   
                    8625   ***********************************************************************************************************
080300C0            8626   __ungetbuf:     ds.l    1       ; ungetbuffer for stdio functions
080300C4            8627   __allocp:       ds.l    0       ; start of allocation units
080300C4            8628   __heap:         ds.l    0       ; pointers for malloc functions
                    8629   
                    8630   *__himem:       ds.l    himem            ; highest memory location + 1
                    8631   *__stklen:      ds.l    stklen           ; default stack size
                    8632   
                    8633   *********************************************************************************************************
                    8634   * Section for Heap
                    8635   *********************************************************************************************************
                    8636   
                    8637   _i:
080300C4            8638          ds.b      4
                    8639   _x:
080300C8            8640          ds.b      4
                    8641   _y:
080300CC            8642          ds.b      4
                    8643   _z:
080300D0            8644          ds.b      4
                    8645   _PortA_Count:
080300D4            8646          ds.b      4
                    8647   _Trace:
080300D8            8648          ds.b      4
                    8649   _GoFlag:
080300DC            8650          ds.b      4
                    8651   _Echo:
080300E0            8652          ds.b      4
                    8653   _d0:
080300E4            8654          ds.b      4
                    8655   _d1:
080300E8            8656          ds.b      4
                    8657   _d2:
080300EC            8658          ds.b      4
                    8659   _d3:
080300F0            8660          ds.b      4
                    8661   _d4:
080300F4            8662          ds.b      4
                    8663   _d5:
080300F8            8664          ds.b      4
                    8665   _d6:
080300FC            8666          ds.b      4
                    8667   _d7:
08030100            8668          ds.b      4
                    8669   _a0:
08030104            8670          ds.b      4
                    8671   _a1:
08030108            8672          ds.b      4
                    8673   _a2:
0803010C            8674          ds.b      4
                    8675   _a3:
08030110            8676          ds.b      4
                    8677   _a4:
08030114            8678          ds.b      4
                    8679   _a5:
08030118            8680          ds.b      4
                    8681   _a6:
0803011C            8682          ds.b      4
                    8683   _PC:
08030120            8684          ds.b      4
                    8685   _SSP:
08030124            8686          ds.b      4
                    8687   _USP:
08030128            8688          ds.b      4
                    8689   _SR:
0803012C            8690          ds.b      2
                    8691   _BreakPointAddress:
0803012E            8692          ds.b      32
                    8693   _BreakPointInstruction:
0803014E            8694          ds.b      16
                    8695   _BreakPointSetOrCleared:
0803015E            8696          ds.b      32
                    8697   _InstructionSize:
0803017E            8698          ds.b      4
                    8699   _WatchPointAddress:
08030182            8700          ds.b      32
                    8701   _WatchPointSetOrCleared:
080301A2            8702          ds.b      32
                    8703   _WatchPointString:
080301C2            8704          ds.b      800
                    8705   _TempString:
080304E2            8706          ds.b      100
                    8707   _Table:
08030546            8708          ds.b      300
                    8709   _TableColor:
08030672            8710          ds.b      315
                    8711   _currentColor:
080307AE            8712          ds.b      1
                    8713   _tetris_score:
080307B0            8714          ds.b      4
                    8715   _GameOn:
080307B4            8716          ds.b      1
                    8717   _tetris_timer:
080307B6            8718          ds.b      4
                    8719   _octl:
080307BA            8720          ds.b      1
                    8721   _current:
080307BC            8722          ds.b      28
                    8723   _ShapesArray:
080307D8            8724          ds.b      196
                    8725   _Tetris_Speed:
0803089C            8726          ds.b      8
                    8727   _printw_x:
080308A4            8728          ds.b      4
                    8729   _printw_y:
080308A8            8730          ds.b      4
                    8731   _cx:
080308AC            8732          ds.b      1
                    8733   _cy:
080308AE            8734          ds.b      1
                    8735   _timer_count:
080308B0            8736          ds.b      4
                    8737          section   heap
080308B4            8738                   align
          0803 08B4 8739   bssEnd          equ *                   end of storage space for unitialised variables
                    8740   *                                       we have to copy all initialised variable from rom to here at startup
          0803 08B4 8741   heap   equ       *
080308B4            8742                    align
          0000 0000

Assembly errors: 0
