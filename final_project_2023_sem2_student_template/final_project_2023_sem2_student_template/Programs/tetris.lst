680x0 MACRO ASSEMBLER   Version 5.00   (c) 1992-2005 Peter J. Fondse

Date: 12 Apr 2024      Time: 11:24:57          Source: C:\USERS\10054\ONEDRIVE\CPEN 412 FINAL PROJECT\FINAL_PROJECT_2023_SEM2_STUDENT_TEMPLATE\FINAL_PROJECT_2023_SEM2_STUDENT_TEMPLATE\PROGRAMS\TETRIS.SRC

                       1          section   code
                       2   ; for initial stack use $08040000 if your system uses SRAM for main memory (top of 256kbyte SRAM space)
                       3   ; When your system is converted to use DRAM for main memory set this constant to $0C000000 (top of 64MByte DRAM space
                       4   
          0804 0000    5   StackPointerVal     equ $08040000      when using sram
                       6   ;StackPointerVal     equ $0C000000      when using dram
                       7   
                       8   ; define RamVectorTable as $0803000 if your system uses SRAM for main memory
                       9   ; When your system is converted to use DRAM for main memory define RamVectorTable constant as $0B000000 (top of 64MByte DRAM space)
                      10   
          0803 0000   11   RamVectorTable      equ $08030000      when using sram
                      12   ;RamVectorTable      equ $0B000000      when using dram
                      13   
                      14   
                      15   
                      16   ; CSTART.ASM  -  C startup-code for Debug Monitor
00000000              17                   align
                      18   
00000000              19                   org $00000000          ;start of rom based vector table, 68k hard wired to expect this at $0
                      20   
00000000  0804 0000   21   InitialSP       dc.l StackPointerVal   ;initial supervisor state stack pointer(stack decrements first before being used)
00000004  0000 0400   22   InitialPC       dc.l start             ;address of 1st instruction of program after a reset
00000008  0000 0796   23   BusError        dc.l E_BErro           ;bus error - stop program
0000000C  0000 07A8   24   AddressError    dc.l E_AErro           ;address error - stop program
00000010  0000 07BA   25   IllegalInstr    dc.l E_IInst           ;illegal instruction - stop program
00000014  0000 07CC   26   DividebyZero    dc.l E_DZero           ;divide by zero error - stop program
00000018  0000 07DE   27   Check           dc.l E_Check           ;Check instruction - stop program
0000001C  0000 07F0   28   TrapV           dc.l E_Trapv           ;Trapv instruction - stop program
00000020  0000 0802   29   Privilege       dc.l E_Priv            ;privilige violation - stop program
00000024  0000 0814   30   Trace           dc.l E_Trace           ;stop on trace
00000028  0000 0826   31   Line1010emul    dc.l E_1010            ;1010 instructions stop
0000002C  0000 0838   32   Line1111emul    dc.l E_1111            ;1111 instructions stop
00000030  0000 084A   33   Unassigned1     dc.l E_Unnas1           ;unassigned vector
00000034  0000 084A   34   Unassigned2     dc.l E_Unnas2           ;unassigned vector
00000038  0000 084A   35   Unassigned3     dc.l E_Unnas3           ;unassigned vector
0000003C  0000 084A   36   Uninit_IRQ      dc.l E_UnitI           ;uninitialised interrupt
00000040  0000 084A   37   Unassigned4     dc.l E_Unnas4           ;unassigned vector
00000044  0000 084A   38   Unassigned5     dc.l E_Unnas5           ;unassigned vector
00000048  0000 084A   39   Unassigned6     dc.l E_Unnas6           ;unassigned vector
0000004C  0000 084A   40   Unassigned7     dc.l E_Unnas7           ;unassigned vector
00000050  0000 084A   41   Unassigned8     dc.l E_Unnas8           ;unassigned vector
00000054  0000 084A   42   Unassigned9     dc.l E_Unnas9           ;unassigned vector
00000058  0000 084A   43   Unassigned10    dc.l E_Unnas10           ;unassigned vector
0000005C  0000 084A   44   Unassigned11    dc.l E_Unnas11           ;unassigned vector
00000060  0000 084A   45   SpuriousIRQ     dc.l E_Spuri           ;stop on spurious irq
                      46   *
                      47   *
00000064  0000 042E   48   Level1IRQ       dc.l Level1RamISR
00000068  0000 0440   49   Level2IRQ       dc.l Level2RamISR
0000006C  0000 0452   50   Level3IRQ       dc.l Level3RamISR
00000070  0000 0464   51   Level4IRQ       dc.l Level4RamISR
00000074  0000 0476   52   Level5IRQ       dc.l Level5RamISR
00000078  0000 0580   53   Level6IRQ       dc.l Level6RamISR
0000007C  0000 0592   54   Level7IRQ       dc.l Level7RamISR
                      55   *
                      56   *
00000080  0000 05A4   57   Trap0           dc.l Trap0RamISR        ; User installed trap handler
00000084  0000 05B6   58   Trap1           dc.l Trap1RamISR        ; User installed trap handler
00000088  0000 05C8   59   Trap2           dc.l Trap2RamISR        ; User installed trap handler
0000008C  0000 05DA   60   Trap3           dc.l Trap3RamISR        ; User installed trap handler
00000090  0000 05EC   61   Trap4           dc.l Trap4RamISR        ; User installed trap handler
00000094  0000 05FE   62   Trap5           dc.l Trap5RamISR        ; User installed trap handler
00000098  0000 0610   63   Trap6           dc.l Trap6RamISR        ; User installed trap handler
0000009C  0000 0622   64   Trap7           dc.l Trap7RamISR        ; User installed trap handler
000000A0  0000 0634   65   Trap8           dc.l Trap8RamISR        ; User installed trap handler
000000A4  0000 0646   66   Trap9           dc.l Trap9RamISR        ; User installed trap handler
000000A8  0000 0658   67   Trap10          dc.l Trap10RamISR       ; User installed trap handler
000000AC  0000 066A   68   Trap11          dc.l Trap11RamISR       ; User installed trap handler
000000B0  0000 067C   69   Trap12          dc.l Trap12RamISR       ; User installed trap handler
000000B4  0000 068E   70   Trap13          dc.l Trap13RamISR       ; User installed trap handler
000000B8  0000 06A0   71   Trap14          dc.l Trap14RamISR       ; User installed trap handler
000000BC  0000 0790   72   Trap15          dc.l Trap15RamISR       ; User installed trap handler
                      73   
                      74   *
                      75   * Other vectors 64-255 are users vectors for autovectored IO device (not implemented in TG68)
                      76   *
                      77   
00000400              78                   org       $00000400
                      79   
00000400  46FC 2700   80   start:          move.w     #$2700,SR             ;set interrupts to disable until later
                      81   
                      82   *************************************************************************************
                      83   ** add some 68000 instruction to read and write to memory, IO etc. This doesn't do anything
                      84   ** important, it just creates read and write bus cycles to specific addresses which
                      85   ** help with debugging hardware in Quartus simulations
                      86   **************************************************************************************
                      87   
                      88                   ; some important initialisation do not modify
00000404  23FC FFFF   89                   move.l    #-1,__ungetbuf  ; unget-buffer for keyboard input
00000408  FFFF 0803 
0000040C  00C0      
0000040E  23FC 0000   90                   move.l    #0,__allocp     ; pointer to allocated memory for malloc-function
00000412  0000 0803 
00000416  00C4      
00000418  23FC 0803   91                   move.l    #heap,__heap    ; pointer to free memory
0000041C  0776 0803 
00000420  00C4      
00000422  46FC 2000   92                   move.w    #$2000,SR       ; enable interrupts
                      93   
00000426  4EB9 0000   94   mainloop        jsr       _main
0000042A  2204      
0000042C  60F8        95                   bra       mainloop
                      96   
                      97   *********************************************************************************************************
                      98   * Code to call Ram Based Interrupt handler and other exeception handler code
                      99   *********************************************************************************************************
0000042E  48E7 FFFE  100   Level1RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000432  2079 0803  101                   move.l    VL1IRQ,a0               get ram based address into a0
00000436  0064      
00000438  4E90       102                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000043A  4CDF 7FFF  103                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000043E  4E73       104                   rte
00000440  48E7 FFFE  105   Level2RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000444  2079 0803  106                   move.l    VL2IRQ,a0               get ram based address into a0
00000448  0068      
0000044A  4E90       107                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000044C  4CDF 7FFF  108                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000450  4E73       109                   rte
00000452  48E7 FFFE  110   Level3RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000456  2079 0803  111                   move.l    VL3IRQ,a0               get ram based address into a0
0000045A  006C      
0000045C  4E90       112                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000045E  4CDF 7FFF  113                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000462  4E73       114                   rte
00000464  48E7 FFFE  115   Level4RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000468  2079 0803  116                   move.l    VL4IRQ,a0               get ram based address into a0
0000046C  0070      
0000046E  4E90       117                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
00000470  4CDF 7FFF  118                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000474  4E73       119                   rte
                     120   
                     121   * Trace trap Handler
                     122   
                     123   Level5RamISR
                     124   *
                     125   **         Copy 68000 registers from debug monitor Variables,
                     126   *
                     127   *
00000476  23FC 0000  128                   move.l    #1,_Trace              switch on Trace Mode
0000047A  0001 0803 
0000047E  00D8      
00000480  13FC 0000  129                   move.b    #$0,$0040000A          turn off a trace exception so we don't when generate a trace when disassembling instruction in the register dump (disassembling causes access to use program)
00000484  0040 000A 
00000488  33DF 0803  130                   move.w    (sp)+,_SR              get at the users status register pointed to by stack pointer and copy
0000048C  012C      
0000048E  23DF 0803  131                   move.l    (sp)+,_PC              get at the users program counter and copy
00000492  0120      
                     132   *
00000494  23CF 0803  133                   move.l    SP,_SSP                copy system stack pointer to debug monitor variable
00000498  0124      
0000049A  23C0 0803  134                   move.l    d0,_d0
0000049E  00E4      
000004A0  23C1 0803  135                   move.l    d1,_d1
000004A4  00E8      
000004A6  23C2 0803  136                   move.l    d2,_d2
000004AA  00EC      
000004AC  23C3 0803  137                   move.l    d3,_d3
000004B0  00F0      
000004B2  23C4 0803  138                   move.l    d4,_d4
000004B6  00F4      
000004B8  23C5 0803  139                   move.l    d5,_d5
000004BC  00F8      
000004BE  23C6 0803  140                   move.l    d6,_d6
000004C2  00FC      
000004C4  23C7 0803  141                   move.l    d7,_d7
000004C8  0100      
                     142   *
000004CA  23C8 0803  143                   move.l    a0,_a0
000004CE  0104      
000004D0  23C9 0803  144                   move.l    a1,_a1
000004D4  0108      
000004D6  23CA 0803  145                   move.l    a2,_a2
000004DA  010C      
000004DC  23CB 0803  146                   move.l    a3,_a3
000004E0  0110      
000004E2  23CC 0803  147                   move.l    a4,_a4
000004E6  0114      
000004E8  23CD 0803  148                   move.l    a5,_a5
000004EC  0118      
000004EE  23CE 0803  149                   move.l    a6,_a6
000004F2  011C      
000004F4  4E68       150                   move.l    usp,a0
000004F6  23C8 0803  151                   move.l    a0,_USP
000004FA  0128      
                     152   *
000004FC  2079 0803  153                   move.l    VL5IRQ,a0              get ram based address into a0, trace exception for next instruction will be generated in Menu SPACE command
00000500  0074      
00000502  4E90       154                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     155   
                     156   ** After trace, reload 68000 registers with new values before continuing
                     157   
00000504  2039 0803  158                   move.l   _d0,d0
00000508  00E4      
0000050A  2239 0803  159                   move.l   _d1,d1
0000050E  00E8      
00000510  2439 0803  160                   move.l   _d2,d2
00000514  00EC      
00000516  2639 0803  161                   move.l   _d3,d3
0000051A  00F0      
0000051C  2839 0803  162                   move.l   _d4,d4
00000520  00F4      
00000522  2A39 0803  163                   move.l   _d5,d5
00000526  00F8      
00000528  2C39 0803  164                   move.l   _d6,d6
0000052C  00FC      
0000052E  2E39 0803  165                   move.l   _d7,d7
00000532  0100      
                     166   
00000534  2079 0803  167                   move.l   _USP,a0
00000538  0128      
0000053A  4E60       168                   move.l   a0,USP                     load user stack pointer
0000053C  2079 0803  169                   move.l   _a0,a0
00000540  0104      
00000542  2279 0803  170                   move.l   _a1,a1
00000546  0108      
00000548  2479 0803  171                   move.l   _a2,a2
0000054C  010C      
0000054E  2679 0803  172                   move.l   _a3,a3
00000552  0110      
00000554  2879 0803  173                   move.l   _a4,a4
00000558  0114      
0000055A  2A79 0803  174                   move.l   _a5,a5
0000055E  0118      
00000560  2C79 0803  175                   move.l   _a6,a6
00000564  011C      
                     176   
00000566  2E79 0803  177                   move.l   _SSP,sp
0000056A  0124      
0000056C  2F39 0803  178                   move.l   _PC,-(sp)
00000570  0120      
00000572  3F39 0803  179                   move.w   _SR,-(sp)
00000576  012C      
00000578  11F8 0074  180                   move.b    $00000074,$0	          read trace exception vector after accessing disassembly to reset the trace request causes by disassembling program above
0000057C  0000      
0000057E  4E73       181                   rte
                     182   
                     183   * address trap handler
                     184   
00000580  48E7 FFFE  185   Level6RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000584  2079 0803  186                   move.l    VL6IRQ,a0               get ram based address into a0
00000588  0078      
0000058A  4E90       187                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000058C  4CDF 7FFF  188                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000590  4E73       189                   rte
                     190   
00000592  48E7 FFFE  191   Level7RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000596  2079 0803  192                   move.l    VL7IRQ,a0               get ram based address into a0
0000059A  007C      
0000059C  4E90       193                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000059E  4CDF 7FFF  194                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005A2  4E73       195                   rte
                     196   
                     197   
                     198   ********************************************************************************************************
                     199   * Ram based Trap handler and other exeception handler code
                     200   *********************************************************************************************************
                     201   
000005A4  48E7 FFFE  202   Trap0RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005A8  2079 0803  203                   move.l    VTrap0,a0                get ram based address into a0
000005AC  0080      
000005AE  4E90       204                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000005B0  4CDF 7FFF  205                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005B4  4E73       206                   rte
                     207   
000005B6  48E7 FFFE  208   Trap1RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005BA  2079 0803  209                   move.l    VTrap1,a0                get ram based address into a0
000005BE  0084      
000005C0  4E90       210                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000005C2  4CDF 7FFF  211                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005C6  4E73       212                   rte
                     213   
000005C8  48E7 FFFE  214   Trap2RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005CC  2079 0803  215                   move.l    VTrap2,a0                get ram based address into a0
000005D0  0088      
000005D2  4E90       216                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000005D4  4CDF 7FFF  217                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005D8  4E73       218                   rte
                     219   
000005DA  48E7 FFFE  220   Trap3RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005DE  2079 0803  221                   move.l    VTrap3,a0                get ram based address into a0
000005E2  008C      
000005E4  4E90       222                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000005E6  4CDF 7FFF  223                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005EA  4E73       224                   rte
                     225   
000005EC  48E7 FFFE  226   Trap4RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005F0  2079 0803  227                   move.l    VTrap4,a0                get ram based address into a0
000005F4  0090      
000005F6  4E90       228                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000005F8  4CDF 7FFF  229                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005FC  4E73       230                   rte
                     231   
000005FE  48E7 FFFE  232   Trap5RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000602  2079 0803  233                   move.l    VTrap5,a0                get ram based address into a0
00000606  0094      
00000608  4E90       234                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000060A  4CDF 7FFF  235                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000060E  4E73       236                   rte
                     237   
00000610  48E7 FFFE  238   Trap6RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000614  2079 0803  239                   move.l    VTrap6,a0                get ram based address into a0
00000618  0098      
0000061A  4E90       240                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000061C  4CDF 7FFF  241                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000620  4E73       242                   rte
                     243   
00000622  48E7 FFFE  244   Trap7RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000626  2079 0803  245                   move.l    VTrap7,a0                get ram based address into a0
0000062A  009C      
0000062C  4E90       246                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000062E  4CDF 7FFF  247                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000632  4E73       248                   rte
                     249   
00000634  48E7 FFFE  250   Trap8RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000638  2079 0803  251                   move.l    VTrap8,a0                get ram based address into a0
0000063C  00A0      
0000063E  4E90       252                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000640  4CDF 7FFF  253                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000644  4E73       254                   rte
                     255   
00000646  48E7 FFFE  256   Trap9RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000064A  2079 0803  257                   move.l    VTrap9,a0                get ram based address into a0
0000064E  00A4      
00000650  4E90       258                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000652  4CDF 7FFF  259                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000656  4E73       260                   rte
                     261   
00000658  48E7 FFFE  262   Trap10RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000065C  2079 0803  263                   move.l    VTrap10,a0                get ram based address into a0
00000660  00A8      
00000662  4E90       264                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000664  4CDF 7FFF  265                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000668  4E73       266                   rte
                     267   
0000066A  48E7 FFFE  268   Trap11RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000066E  2079 0803  269                   move.l    VTrap11,a0                get ram based address into a0
00000672  00AC      
00000674  4E90       270                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000676  4CDF 7FFF  271                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000067A  4E73       272                   rte
                     273   
0000067C  48E7 FFFE  274   Trap12RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000680  2079 0803  275                   move.l    VTrap12,a0                get ram based address into a0
00000684  00B0      
00000686  4E90       276                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000688  4CDF 7FFF  277                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000068C  4E73       278                   rte
                     279   
0000068E  48E7 FFFE  280   Trap13RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000692  2079 0803  281                   move.l    VTrap13,a0                get ram based address into a0
00000696  00B4      
00000698  4E90       282                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000069A  4CDF 7FFF  283                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000069E  4E73       284                   rte
                     285   
                     286   Trap14RamISR    ;Break Point Handler
                     287   *
                     288   **         Copy 68000 registers from debug monitor Variables
                     289   *
000006A0  23FC 0000  290                   move.l    #1,_Trace      switch on Trace Mode
000006A4  0001 0803 
000006A8  00D8      
000006AA  33DF 0803  291                   move.w    (sp)+,_SR       get at the users status register pointed to by stack pointer and copy
000006AE  012C      
000006B0  23DF 0803  292                   move.l    (sp)+,_PC      get at the users program counter and copy
000006B4  0120      
                     293   *
000006B6  23C0 0803  294                   move.l    d0,_d0
000006BA  00E4      
000006BC  23C1 0803  295                   move.l    d1,_d1
000006C0  00E8      
000006C2  23C2 0803  296                   move.l    d2,_d2
000006C6  00EC      
000006C8  23C3 0803  297                   move.l    d3,_d3
000006CC  00F0      
000006CE  23C4 0803  298                   move.l    d4,_d4
000006D2  00F4      
000006D4  23C5 0803  299                   move.l    d5,_d5
000006D8  00F8      
000006DA  23C6 0803  300                   move.l    d6,_d6
000006DE  00FC      
000006E0  23C7 0803  301                   move.l    d7,_d7
000006E4  0100      
                     302   *
000006E6  23C8 0803  303                   move.l    a0,_a0
000006EA  0104      
000006EC  23C9 0803  304                   move.l    a1,_a1
000006F0  0108      
000006F2  23CA 0803  305                   move.l    a2,_a2
000006F6  010C      
000006F8  23CB 0803  306                   move.l    a3,_a3
000006FC  0110      
000006FE  23CC 0803  307                   move.l    a4,_a4
00000702  0114      
00000704  23CD 0803  308                   move.l    a5,_a5
00000708  0118      
0000070A  23CE 0803  309                   move.l    a6,_a6
0000070E  011C      
00000710  4E68       310                   move.l    USP,a0
00000712  23C8 0803  311                   move.l    a0,_USP
00000716  0128      
                     312   *
00000718  2079 0803  313                   move.l    VTrap14,a0             get ram based address into a0
0000071C  00B8      
0000071E  4E90       314                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     315   
                     316   ** After breakpoint reload 68000 registers with new values before continuing
                     317   
                     318   *                move.b    #$ff,$0040000A     generate a trace exception for the next instruction
00000720  2039 0803  319                   move.l   _d0,d0
00000724  00E4      
00000726  2239 0803  320                   move.l   _d1,d1
0000072A  00E8      
0000072C  2439 0803  321                   move.l   _d2,d2
00000730  00EC      
00000732  2639 0803  322                   move.l   _d3,d3
00000736  00F0      
00000738  2839 0803  323                   move.l   _d4,d4
0000073C  00F4      
0000073E  2A39 0803  324                   move.l   _d5,d5
00000742  00F8      
00000744  2C39 0803  325                   move.l   _d6,d6
00000748  00FC      
0000074A  2E39 0803  326                   move.l   _d7,d7
0000074E  0100      
                     327   
00000750  2079 0803  328                   move.l   _USP,a0
00000754  0128      
00000756  4E60       329                   move.l   a0,USP        load user stack pointer A7
00000758  2079 0803  330                   move.l   _a0,a0
0000075C  0104      
0000075E  2279 0803  331                   move.l   _a1,a1
00000762  0108      
00000764  2479 0803  332                   move.l   _a2,a2
00000768  010C      
0000076A  2679 0803  333                   move.l   _a3,a3
0000076E  0110      
00000770  2879 0803  334                   move.l   _a4,a4
00000774  0114      
00000776  2A79 0803  335                   move.l   _a5,a5
0000077A  0118      
0000077C  2C79 0803  336                   move.l   _a6,a6
00000780  011C      
                     337   
00000782  2F39 0803  338                   move.l   _PC,-(sp)
00000786  0120      
00000788  3F39 0803  339                   move.w   _SR,-(sp)
0000078C  012C      
0000078E  4E73       340                   rte
                     341   
00000790  4EF9 0000  342   Trap15RamISR    jmp     _CallDebugMonitor
00000794  1E32      
                     343   *                movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                     344   *                move.l    VTrap15,a0                get ram based address into a0
                     345   *                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                     346   *                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                     347   *                rte
                     348   
                     349   *********************************************************************************************************
                     350   *Default exception handler for everything without a specific handler
                     351   *********************************************************************************************************
                     352   
                     353   *
                     354   **              Jump here for each unhandled exception
                     355   **              If you need to, MAKE SURE YOU SAVE ALL IMPORTANT REGISTERS AND RESTORE THEM BEFORE RETURNING (IF APPROPRIATE)
                     356   *
                     357   
00000796  48E7 FFFE  358   E_BErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000079A  2079 0803  359                   move.l    VBusError,a0            get ram based address into a0
0000079E  0008      
000007A0  4E90       360                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000007A2  4CDF 7FFF  361                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000007A6  4E73       362                   rte
000007A8  48E7 FFFE  363   E_AErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000007AC  2079 0803  364                   move.l    VAddressError,a0        get ram based address into a0
000007B0  000C      
000007B2  4E90       365                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000007B4  4CDF 7FFF  366                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000007B8  4E73       367                   rte
000007BA  48E7 FFFE  368   E_IInst         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000007BE  2079 0803  369                   move.l    VIllegalInstr,a0        get ram based address into a0
000007C2  0010      
000007C4  4E90       370                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000007C6  4CDF 7FFF  371                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000007CA  4E73       372                   rte
000007CC  48E7 FFFE  373   E_DZero         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000007D0  2079 0803  374                   move.l    VDividebyZero,a0        get ram based address into a0
000007D4  0014      
000007D6  4E90       375                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000007D8  4CDF 7FFF  376                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000007DC  4E73       377                   rte
000007DE  48E7 FFFE  378   E_Check         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000007E2  2079 0803  379                   move.l    VCheck,a0               get ram based address into a0
000007E6  0018      
000007E8  4E90       380                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000007EA  4CDF 7FFF  381                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000007EE  4E73       382                   rte
000007F0  48E7 FFFE  383   E_Trapv         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000007F4  2079 0803  384                   move.l    VTrapV,a0               get ram based address into a0
000007F8  001C      
000007FA  4E90       385                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000007FC  4CDF 7FFF  386                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000800  4E73       387                   rte
00000802  48E7 FFFE  388   E_Priv          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000806  2079 0803  389                   move.l    VPrivilege,a0           get ram based address into a0
0000080A  0020      
0000080C  4E90       390                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000080E  4CDF 7FFF  391                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000812  4E73       392                   rte
00000814  48E7 FFFE  393   E_Trace         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000818  2079 0803  394                   move.l    VTrace,a0               get ram based address into a0
0000081C  0024      
0000081E  4E90       395                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000820  4CDF 7FFF  396                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000824  4E73       397                   rte
00000826  48E7 FFFE  398   E_1010          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000082A  2079 0803  399                   move.l    VLine1010emul,a0        get ram based address into a0
0000082E  0028      
00000830  4E90       400                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000832  4CDF 7FFF  401                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000836  4E73       402                   rte
00000838  48E7 FFFE  403   E_1111          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000083C  2079 0803  404                   move.l    VLine1111emul,a0        get ram based address into a0
00000840  002C      
00000842  4E90       405                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000844  4CDF 7FFF  406                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000848  4E73       407                   rte
                     408   E_Unnas1
                     409   E_Unnas2
                     410   E_Unnas3
                     411   E_UnitI
                     412   E_Unnas4
                     413   E_Unnas5
                     414   E_Unnas6
                     415   E_Unnas7
                     416   E_Unnas8
                     417   E_Unnas9
                     418   E_Unnas10
                     419   E_Unnas11
                     420   E_Spuri
0000084A  60FE       421   _stop            bra _stop                         stop
                     422   ***************************************************************************************************
                     423   * Go() function in debug monitor
                     424   ***************************************************************************************************
                     425   _go
0000084C  2E79 0803  426                   move.l   _SSP,a7        load system stack pointer (remember we are in supervisor mode when running this so a7 is the System stack pointer)
00000850  0124      
00000852  2F39 0803  427                   move.l   _PC,-(sp)      copy debug monitor PC variable to the stack
00000856  0120      
00000858  3F39 0803  428                   move.w   _SR,-(sp)      copy debug monitor status reg to the stack
0000085C  012C      
                     429   
0000085E  1038 0078  430                   move.b   $00000078,d0  remove any spurious address exception arising after power on
00000862  2039 0803  431                   move.l   _d0,d0
00000866  00E4      
00000868  2239 0803  432                   move.l   _d1,d1
0000086C  00E8      
0000086E  2439 0803  433                   move.l   _d2,d2
00000872  00EC      
00000874  2639 0803  434                   move.l   _d3,d3
00000878  00F0      
0000087A  2839 0803  435                   move.l   _d4,d4
0000087E  00F4      
00000880  2A39 0803  436                   move.l   _d5,d5
00000884  00F8      
00000886  2C39 0803  437                   move.l   _d6,d6
0000088A  00FC      
0000088C  2E39 0803  438                   move.l   _d7,d7
00000890  0100      
                     439   
00000892  2079 0803  440                   move.l   _USP,a0
00000896  0128      
00000898  4E60       441                   move.l   a0,USP        load user stack pointer (remember we are in supervisor mode when running this, so a7 is the System stack pointer)
0000089A  2079 0803  442                   move.l   _a0,a0
0000089E  0104      
000008A0  2279 0803  443                   move.l   _a1,a1
000008A4  0108      
000008A6  2479 0803  444                   move.l   _a2,a2
000008AA  010C      
000008AC  2679 0803  445                   move.l   _a3,a3
000008B0  0110      
000008B2  2879 0803  446                   move.l   _a4,a4
000008B6  0114      
000008B8  2A79 0803  447                   move.l   _a5,a5
000008BC  0118      
000008BE  2C79 0803  448                   move.l   _a6,a6
000008C2  011C      
000008C4  4E73       449                   rte                    load the status reg and PC from the stack and commence running
                     450                                          *used to be rte but this didn't load the status byte
                     451   
                     452   ; C:\USERS\10054\ONEDRIVE\CPEN 412 FINAL PROJECT\FINAL_PROJECT_2023_SEM2_STUDENT_TEMPLATE\FINAL_PROJECT_2023_SEM2_STUDENT_TEMPLATE\PROGRAMS\DEBUGMONITORCODE\M68KDEBUG (NO DISASSEMBLER).C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                     453   ; #include "DebugMonitor.h"
                     454   ; #include "say_phoneme.h"
                     455   ; // use 08030000 for a system running from sram or 0B000000 for system running from dram
                     456   ; #define StartOfExceptionVectorTable 0x08030000
                     457   ; //#define StartOfExceptionVectorTable 0x0B000000
                     458   ; // use 0C000000 for dram or hex 08040000 for sram
                     459   ; #define TopOfStack 0x08040000
                     460   ; //#define TopOfStack 0x0C000000
                     461   ; #define voice *(char*)(0xFF00FFFE)
                     462   ; #define VGA_ADDRESS 0xFFFF0000 
                     463   ; /* DO NOT INITIALISE GLOBAL VARIABLES - DO IT in MAIN() */
                     464   ; unsigned int i, x, y, z, PortA_Count;
                     465   ; int     Trace, GoFlag, Echo;                       // used in tracing/single stepping
                     466   ; // 68000 register dump and preintialise value (these can be changed by the user program when it is running, e.g. stack pointer, registers etc
                     467   ; unsigned int d0,d1,d2,d3,d4,d5,d6,d7 ;
                     468   ; unsigned int a0,a1,a2,a3,a4,a5,a6 ;
                     469   ; unsigned int PC, SSP, USP ;
                     470   ; unsigned short int SR;
                     471   ; // Breakpoint variables
                     472   ; unsigned int BreakPointAddress[8];                      //array of 8 breakpoint addresses
                     473   ; unsigned short int BreakPointInstruction[8] ;           // to hold the instruction opcode at the breakpoint
                     474   ; unsigned int BreakPointSetOrCleared[8] ;
                     475   ; unsigned int InstructionSize ;
                     476   ; // watchpoint variables
                     477   ; unsigned int WatchPointAddress[8];                      //array of 8 breakpoint addresses
                     478   ; unsigned int WatchPointSetOrCleared[8] ;
                     479   ; char WatchPointString[8][100] ;
                     480   ; char    TempString[100] ;
                     481   ; void Wait1ms(void)
                     482   ; {
                     483   _Wait1ms:
000008C6  2F02       484          move.l    D2,-(A7)
                     485   ; int i;
                     486   ; for (i = 0; i < 1000; i++)
000008C8  4282       487          clr.l     D2
                     488   Wait1ms_1:
000008CA  0C82 0000  489          cmp.l     #1000,D2
000008CE  03E8      
000008D0  6C04       490          bge.s     Wait1ms_3
000008D2  5282       491          addq.l    #1,D2
000008D4  60F4       492          bra       Wait1ms_1
                     493   Wait1ms_3:
000008D6  241F       494          move.l    (A7)+,D2
000008D8  4E75       495          rts
                     496   ; ;
                     497   ; }
                     498   ; void Wait3ms(void)
                     499   ; {
                     500   _Wait3ms:
000008DA  2F02       501          move.l    D2,-(A7)
                     502   ; int i;
                     503   ; for (i = 0; i < 3; i++)
000008DC  4282       504          clr.l     D2
                     505   Wait3ms_1:
000008DE  0C82 0000  506          cmp.l     #3,D2
000008E2  0003      
000008E4  6C08       507          bge.s     Wait3ms_3
                     508   ; Wait1ms();
000008E6  4EB8 08C6  509          jsr       _Wait1ms
000008EA  5282       510          addq.l    #1,D2
000008EC  60F0       511          bra       Wait3ms_1
                     512   Wait3ms_3:
000008EE  241F       513          move.l    (A7)+,D2
000008F0  4E75       514          rts
                     515   ; }
                     516   ; void Wait250ms(void)
                     517   ; {
                     518   _Wait250ms:
000008F2  2F02       519          move.l    D2,-(A7)
                     520   ; int i;
                     521   ; for (i = 0; i < 250; i++)
000008F4  4282       522          clr.l     D2
                     523   Wait250ms_1:
000008F6  0C82 0000  524          cmp.l     #250,D2
000008FA  00FA      
000008FC  6C08       525          bge.s     Wait250ms_3
                     526   ; Wait1ms();
000008FE  4EB8 08C6  527          jsr       _Wait1ms
00000902  5282       528          addq.l    #1,D2
00000904  60F0       529          bra       Wait250ms_1
                     530   Wait250ms_3:
00000906  241F       531          move.l    (A7)+,D2
00000908  4E75       532          rts
                     533   ; }
                     534   ; void Wait500ms(void)
                     535   ; {
                     536   _Wait500ms:
0000090A  2F02       537          move.l    D2,-(A7)
                     538   ; int i;
                     539   ; for (i = 0; i < 500; i++)
0000090C  4282       540          clr.l     D2
                     541   Wait500ms_1:
0000090E  0C82 0000  542          cmp.l     #500,D2
00000912  01F4      
00000914  6C08       543          bge.s     Wait500ms_3
                     544   ; Wait1ms();
00000916  4EB8 08C6  545          jsr       _Wait1ms
0000091A  5282       546          addq.l    #1,D2
0000091C  60F0       547          bra       Wait500ms_1
                     548   Wait500ms_3:
0000091E  241F       549          move.l    (A7)+,D2
00000920  4E75       550          rts
                     551   ; }
                     552   ; void Wait750ms(void)
                     553   ; {
                     554   _Wait750ms:
00000922  2F02       555          move.l    D2,-(A7)
                     556   ; int i;
                     557   ; for (i = 0; i < 750; i++)
00000924  4282       558          clr.l     D2
                     559   Wait750ms_1:
00000926  0C82 0000  560          cmp.l     #750,D2
0000092A  02EE      
0000092C  6C08       561          bge.s     Wait750ms_3
                     562   ; Wait1ms();
0000092E  4EB8 08C6  563          jsr       _Wait1ms
00000932  5282       564          addq.l    #1,D2
00000934  60F0       565          bra       Wait750ms_1
                     566   Wait750ms_3:
00000936  241F       567          move.l    (A7)+,D2
00000938  4E75       568          rts
                     569   ; }
                     570   ; void InstallExceptionHandler( void (*function_ptr)(), int level)
                     571   ; {
                     572   _InstallExceptionHandler:
0000093A  4E56 FFFC  573          link      A6,#-4
                     574   ; volatile long int *RamVectorAddress = (volatile long int *)(StartOfExceptionVectorTable) ;   // pointer to the Ram based interrupt vector table created in Cstart in debug monitor
0000093E  2D7C 0803  575          move.l    #134414336,-4(A6)
00000942  0000 FFFC 
                     576   ; RamVectorAddress[level] = (long int *)(function_ptr);
00000946  206E FFFC  577          move.l    -4(A6),A0
0000094A  202E 000C  578          move.l    12(A6),D0
0000094E  E588       579          lsl.l     #2,D0
00000950  21AE 0008  580          move.l    8(A6),0(A0,D0.L)
00000954  0800      
00000956  4E5E       581          unlk      A6
00000958  4E75       582          rts
                     583   ; }
                     584   ; void say_phoneme   (char phoneme_code) {
                     585   _say_phoneme:
0000095A  4E56 0000  586          link      A6,#0
                     587   ; //you need to write this function
                     588   ; voice = phoneme_code;
0000095E  13EE 000B  589          move.b    11(A6),-16711682
00000962  FF00 FFFE 
00000966  4E5E       590          unlk      A6
00000968  4E75       591          rts
                     592   ; }
                     593   ; void say_Sasha(){
                     594   _say_Sasha:
                     595   ; talkphonemeSS();
0000096A  4EB9 0000  596          jsr       _talkphonemeSS
0000096E  25EC      
                     597   ; talkphonemeAA();
00000970  4EB9 0000  598          jsr       _talkphonemeAA
00000974  23E8      
                     599   ; talkphonemeSH();
00000976  4EB9 0000  600          jsr       _talkphonemeSH
0000097A  25E0      
                     601   ; // talkphonemeHH1();
                     602   ; talkphonemeAA();
0000097C  4EB9 0000  603          jsr       _talkphonemeAA
00000980  23E8      
                     604   ; endword();
00000982  4EB9 0000  605          jsr       _endword
00000986  2A8E      
00000988  4E75       606          rts
                     607   ; }
                     608   ; void say_hello() {
                     609   _say_hello:
                     610   ; talkphonemeHH1();
0000098A  4EB9 0000  611          jsr       _talkphonemeHH1
0000098E  24FC      
                     612   ; talkphonemeEH();
00000990  4EB9 0000  613          jsr       _talkphonemeEH
00000994  2490      
                     614   ; talkphonemeLL();
00000996  4EB9 0000  615          jsr       _talkphonemeLL
0000099A  255C      
                     616   ; talkphonemeAX();
0000099C  4EB9 0000  617          jsr       _talkphonemeAX
000009A0  2424      
                     618   ; talkphonemeOW();
000009A2  4EB9 0000  619          jsr       _talkphonemeOW
000009A6  25A4      
                     620   ; endword();
000009A8  4EB9 0000  621          jsr       _endword
000009AC  2A8E      
000009AE  4E75       622          rts
                     623   ; }
                     624   ; void say_world() {
                     625   _say_world:
                     626   ; talkphonemeWW();
000009B0  4EB9 0000  627          jsr       _talkphonemeWW
000009B4  2658      
                     628   ; talkphonemeER2();
000009B6  4EB9 0000  629          jsr       _talkphonemeER2
000009BA  24B4      
                     630   ; talkphonemeLL();
000009BC  4EB9 0000  631          jsr       _talkphonemeLL
000009C0  255C      
                     632   ; talkphonemeDD1();
000009C2  4EB9 0000  633          jsr       _talkphonemeDD1
000009C6  2460      
                     634   ; endword();
000009C8  4EB9 0000  635          jsr       _endword
000009CC  2A8E      
000009CE  4E75       636          rts
                     637   ; }
                     638   ; /*********************************************************************************************
                     639   ; *Subroutine to initialise the RS232 Port by writing some commands to the internal registers
                     640   ; *********************************************************************************************/
                     641   ; void Init_RS232(void)
                     642   ; {
                     643   _Init_RS232:
                     644   ; RS232_Control = (char)(0x15) ; //  %00010101    divide by 16 clock, set rts low, 8 bits no parity, 1 stop bit transmitter interrupt disabled
000009D0  13FC 0015  645          move.b    #21,4194368
000009D4  0040 0040 
                     646   ; RS232_Baud = (char)(0x1) ;      // program baud rate generator 000 = 230k, 001 = 115k, 010 = 57.6k, 011 = 38.4k, 100 = 19.2, all others = 9600
000009D8  13FC 0001  647          move.b    #1,4194372
000009DC  0040 0044 
000009E0  4E75       648          rts
                     649   ; }
                     650   ; int kbhit(void)
                     651   ; {
                     652   _kbhit:
                     653   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // wait for Rx bit in status register to be '1'
000009E2  1039 0040  654          move.b    4194368,D0
000009E6  0040      
000009E8  C03C 0001  655          and.b     #1,D0
000009EC  0C00 0001  656          cmp.b     #1,D0
000009F0  6604       657          bne.s     kbhit_1
                     658   ; return 1 ;
000009F2  7001       659          moveq     #1,D0
000009F4  6002       660          bra.s     kbhit_3
                     661   kbhit_1:
                     662   ; else
                     663   ; return 0 ;
000009F6  4280       664          clr.l     D0
                     665   kbhit_3:
000009F8  4E75       666          rts
                     667   ; }
                     668   ; /*********************************************************************************************************
                     669   ; **  Subroutine to provide a low level output function to 6850 ACIA
                     670   ; **  This routine provides the basic functionality to output a single character to the serial Port
                     671   ; **  to allow the board to communicate with HyperTerminal Program
                     672   ; **
                     673   ; **  NOTE you do not call this function directly, instead you call the normal putchar() function
                     674   ; **  which in turn calls _putch() below). Other functions like puts(), printf() call putchar() so will
                     675   ; **  call _putch() also
                     676   ; *********************************************************************************************************/
                     677   ; int _putch( int c)
                     678   ; {
                     679   __putch:
000009FA  4E56 0000  680          link      A6,#0
                     681   ; while(((char)(RS232_Status) & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
                     682   _putch_1:
000009FE  1039 0040  683          move.b    4194368,D0
00000A02  0040      
00000A04  C03C 0002  684          and.b     #2,D0
00000A08  0C00 0002  685          cmp.b     #2,D0
00000A0C  6702       686          beq.s     _putch_3
00000A0E  60EE       687          bra       _putch_1
                     688   _putch_3:
                     689   ; ;
                     690   ; (char)(RS232_TxData) = ((char)(c) & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
00000A10  202E 0008  691          move.l    8(A6),D0
00000A14  C03C 007F  692          and.b     #127,D0
00000A18  13C0 0040  693          move.b    D0,4194370
00000A1C  0042      
                     694   ; return c ;                                              // putchar() expects the character to be returned
00000A1E  202E 0008  695          move.l    8(A6),D0
00000A22  4E5E       696          unlk      A6
00000A24  4E75       697          rts
                     698   ; }
                     699   ; /*********************************************************************************************************
                     700   ; **  Subroutine to provide a low level input function to 6850 ACIA
                     701   ; **  This routine provides the basic functionality to input a single character from the serial Port
                     702   ; **  to allow the board to communicate with HyperTerminal Program Keyboard (your PC)
                     703   ; **
                     704   ; **  NOTE you do not call this function directly, instead you call the normal _getch() function
                     705   ; **  which in turn calls _getch() below). Other functions like gets(), scanf() call _getch() so will
                     706   ; **  call _getch() also
                     707   ; *********************************************************************************************************/
                     708   ; int _getch( void )
                     709   ; {
                     710   __getch:
00000A26  2F02       711          move.l    D2,-(A7)
                     712   ; int c ;
                     713   ; while(((char)(RS232_Status) & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
                     714   _getch_1:
00000A28  1039 0040  715          move.b    4194368,D0
00000A2C  0040      
00000A2E  C03C 0001  716          and.b     #1,D0
00000A32  0C00 0001  717          cmp.b     #1,D0
00000A36  6702       718          beq.s     _getch_3
00000A38  60EE       719          bra       _getch_1
                     720   _getch_3:
                     721   ; ;
                     722   ; c = (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
00000A3A  1039 0040  723          move.b    4194370,D0
00000A3E  0042      
00000A40  C0BC 0000  724          and.l     #255,D0
00000A44  00FF      
00000A46  C0BC 0000  725          and.l     #127,D0
00000A4A  007F      
00000A4C  2400       726          move.l    D0,D2
                     727   ; // shall we echo the character? Echo is set to TRUE at reset, but for speed we don't want to echo when downloading code with the 'L' debugger command
                     728   ; if(Echo)
00000A4E  4AB9 0803  729          tst.l     _Echo.L
00000A52  00E0      
00000A54  6708       730          beq.s     _getch_4
                     731   ; _putch(c);
00000A56  2F02       732          move.l    D2,-(A7)
00000A58  4EB8 09FA  733          jsr       __putch
00000A5C  584F       734          addq.w    #4,A7
                     735   _getch_4:
                     736   ; return c ;
00000A5E  2002       737          move.l    D2,D0
00000A60  241F       738          move.l    (A7)+,D2
00000A62  4E75       739          rts
                     740   ; }
                     741   ; // flush the input stream for any unread characters
                     742   ; void FlushKeyboard(void)
                     743   ; {
                     744   _FlushKeyboard:
00000A64  4E56 FFFC  745          link      A6,#-4
                     746   ; char c ;
                     747   ; while(1)    {
                     748   FlushKeyboard_1:
                     749   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // if Rx bit in status register is '1'
00000A68  1039 0040  750          move.b    4194368,D0
00000A6C  0040      
00000A6E  C03C 0001  751          and.b     #1,D0
00000A72  0C00 0001  752          cmp.b     #1,D0
00000A76  6610       753          bne.s     FlushKeyboard_4
                     754   ; c = ((char)(RS232_RxData) & (char)(0x7f)) ;
00000A78  1039 0040  755          move.b    4194370,D0
00000A7C  0042      
00000A7E  C03C 007F  756          and.b     #127,D0
00000A82  1D40 FFFF  757          move.b    D0,-1(A6)
00000A86  6002       758          bra.s     FlushKeyboard_5
                     759   FlushKeyboard_4:
                     760   ; else
                     761   ; return ;
00000A88  6002       762          bra.s     FlushKeyboard_6
                     763   FlushKeyboard_5:
00000A8A  60DC       764          bra       FlushKeyboard_1
                     765   FlushKeyboard_6:
00000A8C  4E5E       766          unlk      A6
00000A8E  4E75       767          rts
                     768   ; }
                     769   ; }
                     770   ; // converts hex char to 4 bit binary equiv in range 0000-1111 (0-F)
                     771   ; // char assumed to be a valid hex char 0-9, a-f, A-F
                     772   ; char xtod(int c)
                     773   ; {
                     774   _xtod:
00000A90  4E56 0000  775          link      A6,#0
00000A94  2F02       776          move.l    D2,-(A7)
00000A96  242E 0008  777          move.l    8(A6),D2
                     778   ; if ((char)(c) <= (char)('9'))
00000A9A  0C02 0039  779          cmp.b     #57,D2
00000A9E  6E08       780          bgt.s     xtod_1
                     781   ; return c - (char)(0x30);    // 0 - 9 = 0x30 - 0x39 so convert to number by sutracting 0x30
00000AA0  1002       782          move.b    D2,D0
00000AA2  0400 0030  783          sub.b     #48,D0
00000AA6  6014       784          bra.s     xtod_3
                     785   xtod_1:
                     786   ; else if((char)(c) > (char)('F'))    // assume lower case
00000AA8  0C02 0046  787          cmp.b     #70,D2
00000AAC  6F08       788          ble.s     xtod_4
                     789   ; return c - (char)(0x57);    // a-f = 0x61-66 so needs to be converted to 0x0A - 0x0F so subtract 0x57
00000AAE  1002       790          move.b    D2,D0
00000AB0  0400 0057  791          sub.b     #87,D0
00000AB4  6006       792          bra.s     xtod_3
                     793   xtod_4:
                     794   ; else
                     795   ; return c - (char)(0x37);    // A-F = 0x41-46 so needs to be converted to 0x0A - 0x0F so subtract 0x37
00000AB6  1002       796          move.b    D2,D0
00000AB8  0400 0037  797          sub.b     #55,D0
                     798   xtod_3:
00000ABC  241F       799          move.l    (A7)+,D2
00000ABE  4E5E       800          unlk      A6
00000AC0  4E75       801          rts
                     802   ; }
                     803   ; int Get2HexDigits(char *CheckSumPtr)
                     804   ; {
                     805   _Get2HexDigits:
00000AC2  4E56 0000  806          link      A6,#0
00000AC6  2F02       807          move.l    D2,-(A7)
                     808   ; register int i = (xtod(_getch()) << 4) | (xtod(_getch()));
00000AC8  2F00       809          move.l    D0,-(A7)
00000ACA  4EB8 0A26  810          jsr       __getch
00000ACE  2200       811          move.l    D0,D1
00000AD0  201F       812          move.l    (A7)+,D0
00000AD2  2F01       813          move.l    D1,-(A7)
00000AD4  4EB8 0A90  814          jsr       _xtod
00000AD8  584F       815          addq.w    #4,A7
00000ADA  C0BC 0000  816          and.l     #255,D0
00000ADE  00FF      
00000AE0  E980       817          asl.l     #4,D0
00000AE2  2F00       818          move.l    D0,-(A7)
00000AE4  2F01       819          move.l    D1,-(A7)
00000AE6  4EB8 0A26  820          jsr       __getch
00000AEA  221F       821          move.l    (A7)+,D1
00000AEC  2F00       822          move.l    D0,-(A7)
00000AEE  4EB8 0A90  823          jsr       _xtod
00000AF2  584F       824          addq.w    #4,A7
00000AF4  2200       825          move.l    D0,D1
00000AF6  201F       826          move.l    (A7)+,D0
00000AF8  C2BC 0000  827          and.l     #255,D1
00000AFC  00FF      
00000AFE  8081       828          or.l      D1,D0
00000B00  2400       829          move.l    D0,D2
                     830   ; if(CheckSumPtr)
00000B02  4AAE 0008  831          tst.l     8(A6)
00000B06  6706       832          beq.s     Get2HexDigits_1
                     833   ; *CheckSumPtr += i ;
00000B08  206E 0008  834          move.l    8(A6),A0
00000B0C  D510       835          add.b     D2,(A0)
                     836   Get2HexDigits_1:
                     837   ; return i ;
00000B0E  2002       838          move.l    D2,D0
00000B10  241F       839          move.l    (A7)+,D2
00000B12  4E5E       840          unlk      A6
00000B14  4E75       841          rts
                     842   ; }
                     843   ; int Get4HexDigits(char *CheckSumPtr)
                     844   ; {
                     845   _Get4HexDigits:
00000B16  4E56 0000  846          link      A6,#0
                     847   ; return (Get2HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000B1A  2F2E 0008  848          move.l    8(A6),-(A7)
00000B1E  4EB8 0AC2  849          jsr       _Get2HexDigits
00000B22  584F       850          addq.w    #4,A7
00000B24  E180       851          asl.l     #8,D0
00000B26  2F00       852          move.l    D0,-(A7)
00000B28  2F2E 0008  853          move.l    8(A6),-(A7)
00000B2C  4EB8 0AC2  854          jsr       _Get2HexDigits
00000B30  584F       855          addq.w    #4,A7
00000B32  2200       856          move.l    D0,D1
00000B34  201F       857          move.l    (A7)+,D0
00000B36  8081       858          or.l      D1,D0
00000B38  4E5E       859          unlk      A6
00000B3A  4E75       860          rts
                     861   ; }
                     862   ; int Get6HexDigits(char *CheckSumPtr)
                     863   ; {
                     864   _Get6HexDigits:
00000B3C  4E56 0000  865          link      A6,#0
                     866   ; return (Get4HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000B40  2F2E 0008  867          move.l    8(A6),-(A7)
00000B44  4EB8 0B16  868          jsr       _Get4HexDigits
00000B48  584F       869          addq.w    #4,A7
00000B4A  E180       870          asl.l     #8,D0
00000B4C  2F00       871          move.l    D0,-(A7)
00000B4E  2F2E 0008  872          move.l    8(A6),-(A7)
00000B52  4EB8 0AC2  873          jsr       _Get2HexDigits
00000B56  584F       874          addq.w    #4,A7
00000B58  2200       875          move.l    D0,D1
00000B5A  201F       876          move.l    (A7)+,D0
00000B5C  8081       877          or.l      D1,D0
00000B5E  4E5E       878          unlk      A6
00000B60  4E75       879          rts
                     880   ; }
                     881   ; int Get8HexDigits(char *CheckSumPtr)
                     882   ; {
                     883   _Get8HexDigits:
00000B62  4E56 0000  884          link      A6,#0
                     885   ; return (Get4HexDigits(CheckSumPtr) << 16) | (Get4HexDigits(CheckSumPtr));
00000B66  2F2E 0008  886          move.l    8(A6),-(A7)
00000B6A  4EB8 0B16  887          jsr       _Get4HexDigits
00000B6E  584F       888          addq.w    #4,A7
00000B70  E180       889          asl.l     #8,D0
00000B72  E180       890          asl.l     #8,D0
00000B74  2F00       891          move.l    D0,-(A7)
00000B76  2F2E 0008  892          move.l    8(A6),-(A7)
00000B7A  4EB8 0B16  893          jsr       _Get4HexDigits
00000B7E  584F       894          addq.w    #4,A7
00000B80  2200       895          move.l    D0,D1
00000B82  201F       896          move.l    (A7)+,D0
00000B84  8081       897          or.l      D1,D0
00000B86  4E5E       898          unlk      A6
00000B88  4E75       899          rts
                     900   ; }
                     901   ; void DumpMemory(void)   // simple dump memory fn
                     902   ; {
                     903   _DumpMemory:
00000B8A  48E7 3C30  904          movem.l   D2/D3/D4/D5/A2/A3,-(A7)
00000B8E  45F9 0000  905          lea       _printf.L,A2
00000B92  3B36      
00000B94  47F9 0000  906          lea       _putch.L,A3
00000B98  3A64      
                     907   ; int i, j ;
                     908   ; unsigned char *RamPtr,c ; // pointer to where the program is download (assumed)
                     909   ; printf("\r\nDump Memory Block: <ESC> to Abort, <SPACE> to Continue") ;
00000B9A  4879 0000  910          pea       @m68kde~1_1.L
00000B9E  4422      
00000BA0  4E92       911          jsr       (A2)
00000BA2  584F       912          addq.w    #4,A7
                     913   ; printf("\r\nEnter Start Address: ") ;
00000BA4  4879 0000  914          pea       @m68kde~1_2.L
00000BA8  445C      
00000BAA  4E92       915          jsr       (A2)
00000BAC  584F       916          addq.w    #4,A7
                     917   ; RamPtr = Get8HexDigits(0) ;
00000BAE  42A7       918          clr.l     -(A7)
00000BB0  4EB8 0B62  919          jsr       _Get8HexDigits
00000BB4  584F       920          addq.w    #4,A7
00000BB6  2600       921          move.l    D0,D3
                     922   ; while(1)    {
                     923   DumpMemory_1:
                     924   ; for(i = 0; i < 16; i ++)    {
00000BB8  4285       925          clr.l     D5
                     926   DumpMemory_4:
00000BBA  0C85 0000  927          cmp.l     #16,D5
00000BBE  0010      
00000BC0  6C00 0096  928          bge       DumpMemory_6
                     929   ; printf("\r\n%08x ", RamPtr) ;
00000BC4  2F03       930          move.l    D3,-(A7)
00000BC6  4879 0000  931          pea       @m68kde~1_3.L
00000BCA  4474      
00000BCC  4E92       932          jsr       (A2)
00000BCE  504F       933          addq.w    #8,A7
                     934   ; for(j=0; j < 16; j ++)  {
00000BD0  4282       935          clr.l     D2
                     936   DumpMemory_7:
00000BD2  0C82 0000  937          cmp.l     #16,D2
00000BD6  0010      
00000BD8  6C24       938          bge.s     DumpMemory_9
                     939   ; printf("%02X",RamPtr[j]) ;
00000BDA  2043       940          move.l    D3,A0
00000BDC  1230 2800  941          move.b    0(A0,D2.L),D1
00000BE0  C2BC 0000  942          and.l     #255,D1
00000BE4  00FF      
00000BE6  2F01       943          move.l    D1,-(A7)
00000BE8  4879 0000  944          pea       @m68kde~1_4.L
00000BEC  447C      
00000BEE  4E92       945          jsr       (A2)
00000BF0  504F       946          addq.w    #8,A7
                     947   ; putchar(' ') ;
00000BF2  4878 0020  948          pea       32
00000BF6  4E93       949          jsr       (A3)
00000BF8  584F       950          addq.w    #4,A7
00000BFA  5282       951          addq.l    #1,D2
00000BFC  60D4       952          bra       DumpMemory_7
                     953   DumpMemory_9:
                     954   ; }
                     955   ; // now display the data as ASCII at the end
                     956   ; printf("  ") ;
00000BFE  4879 0000  957          pea       @m68kde~1_5.L
00000C02  4482      
00000C04  4E92       958          jsr       (A2)
00000C06  584F       959          addq.w    #4,A7
                     960   ; for(j = 0; j < 16; j++) {
00000C08  4282       961          clr.l     D2
                     962   DumpMemory_10:
00000C0A  0C82 0000  963          cmp.l     #16,D2
00000C0E  0010      
00000C10  6C00 003A  964          bge       DumpMemory_12
                     965   ; c = ((char)(RamPtr[j]) & 0x7f) ;
00000C14  2043       966          move.l    D3,A0
00000C16  1030 2800  967          move.b    0(A0,D2.L),D0
00000C1A  C03C 007F  968          and.b     #127,D0
00000C1E  1800       969          move.b    D0,D4
                     970   ; if((c > (char)(0x7f)) || (c < ' '))
00000C20  0C04 007F  971          cmp.b     #127,D4
00000C24  6206       972          bhi.s     DumpMemory_15
00000C26  0C04 0020  973          cmp.b     #32,D4
00000C2A  640A       974          bhs.s     DumpMemory_13
                     975   DumpMemory_15:
                     976   ; putchar('.') ;
00000C2C  4878 002E  977          pea       46
00000C30  4E93       978          jsr       (A3)
00000C32  584F       979          addq.w    #4,A7
00000C34  6012       980          bra.s     DumpMemory_14
                     981   DumpMemory_13:
                     982   ; else
                     983   ; putchar(RamPtr[j]) ;
00000C36  2043       984          move.l    D3,A0
00000C38  1230 2800  985          move.b    0(A0,D2.L),D1
00000C3C  C2BC 0000  986          and.l     #255,D1
00000C40  00FF      
00000C42  2F01       987          move.l    D1,-(A7)
00000C44  4E93       988          jsr       (A3)
00000C46  584F       989          addq.w    #4,A7
                     990   DumpMemory_14:
00000C48  5282       991          addq.l    #1,D2
00000C4A  60BE       992          bra       DumpMemory_10
                     993   DumpMemory_12:
                     994   ; }
                     995   ; RamPtr = RamPtr + 16 ;
00000C4C  0683 0000  996          add.l     #16,D3
00000C50  0010      
00000C52  5285       997          addq.l    #1,D5
00000C54  6000 FF64  998          bra       DumpMemory_4
                     999   DumpMemory_6:
                    1000   ; }
                    1001   ; printf("\r\n") ;
00000C58  4879 0000 1002          pea       @m68kde~1_6.L
00000C5C  4486      
00000C5E  4E92      1003          jsr       (A2)
00000C60  584F      1004          addq.w    #4,A7
                    1005   ; c = _getch() ;
00000C62  4EB8 0A26 1006          jsr       __getch
00000C66  1800      1007          move.b    D0,D4
                    1008   ; if(c == 0x1b)          // break on ESC
00000C68  0C04 001B 1009          cmp.b     #27,D4
00000C6C  6602      1010          bne.s     DumpMemory_16
                    1011   ; break ;
00000C6E  6004      1012          bra.s     DumpMemory_3
                    1013   DumpMemory_16:
00000C70  6000 FF46 1014          bra       DumpMemory_1
                    1015   DumpMemory_3:
00000C74  4CDF 0C3C 1016          movem.l   (A7)+,D2/D3/D4/D5/A2/A3
00000C78  4E75      1017          rts
                    1018   ; }
                    1019   ; }
                    1020   ; void FillMemory()
                    1021   ; {
                    1022   _FillMemory:
00000C7A  48E7 3820 1023          movem.l   D2/D3/D4/A2,-(A7)
00000C7E  45F9 0000 1024          lea       _printf.L,A2
00000C82  3B36      
                    1025   ; char *StartRamPtr, *EndRamPtr ;
                    1026   ; unsigned char FillData ;
                    1027   ; printf("\r\nFill Memory Block") ;
00000C84  4879 0000 1028          pea       @m68kde~1_7.L
00000C88  448A      
00000C8A  4E92      1029          jsr       (A2)
00000C8C  584F      1030          addq.w    #4,A7
                    1031   ; printf("\r\nEnter Start Address: ") ;
00000C8E  4879 0000 1032          pea       @m68kde~1_2.L
00000C92  445C      
00000C94  4E92      1033          jsr       (A2)
00000C96  584F      1034          addq.w    #4,A7
                    1035   ; StartRamPtr = Get8HexDigits(0) ;
00000C98  42A7      1036          clr.l     -(A7)
00000C9A  4EB8 0B62 1037          jsr       _Get8HexDigits
00000C9E  584F      1038          addq.w    #4,A7
00000CA0  2400      1039          move.l    D0,D2
                    1040   ; printf("\r\nEnter End Address: ") ;
00000CA2  4879 0000 1041          pea       @m68kde~1_8.L
00000CA6  449E      
00000CA8  4E92      1042          jsr       (A2)
00000CAA  584F      1043          addq.w    #4,A7
                    1044   ; EndRamPtr = Get8HexDigits(0) ;
00000CAC  42A7      1045          clr.l     -(A7)
00000CAE  4EB8 0B62 1046          jsr       _Get8HexDigits
00000CB2  584F      1047          addq.w    #4,A7
00000CB4  2800      1048          move.l    D0,D4
                    1049   ; printf("\r\nEnter Fill Data: ") ;
00000CB6  4879 0000 1050          pea       @m68kde~1_9.L
00000CBA  44B4      
00000CBC  4E92      1051          jsr       (A2)
00000CBE  584F      1052          addq.w    #4,A7
                    1053   ; FillData = Get2HexDigits(0) ;
00000CC0  42A7      1054          clr.l     -(A7)
00000CC2  4EB8 0AC2 1055          jsr       _Get2HexDigits
00000CC6  584F      1056          addq.w    #4,A7
00000CC8  1600      1057          move.b    D0,D3
                    1058   ; printf("\r\nFilling Addresses [$%08X - $%08X] with $%02X", StartRamPtr, EndRamPtr, FillData) ;
00000CCA  C6BC 0000 1059          and.l     #255,D3
00000CCE  00FF      
00000CD0  2F03      1060          move.l    D3,-(A7)
00000CD2  2F04      1061          move.l    D4,-(A7)
00000CD4  2F02      1062          move.l    D2,-(A7)
00000CD6  4879 0000 1063          pea       @m68kde~1_10.L
00000CDA  44C8      
00000CDC  4E92      1064          jsr       (A2)
00000CDE  DEFC 0010 1065          add.w     #16,A7
                    1066   ; while(StartRamPtr < EndRamPtr)
                    1067   FillMemory_1:
00000CE2  B484      1068          cmp.l     D4,D2
00000CE4  6408      1069          bhs.s     FillMemory_3
                    1070   ; *StartRamPtr++ = FillData ;
00000CE6  2042      1071          move.l    D2,A0
00000CE8  5282      1072          addq.l    #1,D2
00000CEA  1083      1073          move.b    D3,(A0)
00000CEC  60F4      1074          bra       FillMemory_1
                    1075   FillMemory_3:
00000CEE  4CDF 041C 1076          movem.l   (A7)+,D2/D3/D4/A2
00000CF2  4E75      1077          rts
                    1078   ; }
                    1079   ; void Load_SRecordFile()
                    1080   ; {
                    1081   _Load_SRecordFile:
00000CF4  4E56 FFDC 1082          link      A6,#-36
00000CF8  48E7 3F3C 1083          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00000CFC  45EE FFFA 1084          lea       -6(A6),A2
00000D00  47F8 0AC2 1085          lea       _Get2HexDigits.L,A3
00000D04  49F9 0000 1086          lea       _printf.L,A4
00000D08  3B36      
                    1087   ; int i, Address, AddressSize, DataByte, NumDataBytesToRead, LoadFailed, FailedAddress, AddressFail, SRecordCount = 0, ByteTotal = 0 ;
00000D0A  42AE FFEE 1088          clr.l     -18(A6)
00000D0E  3A7C 0000 1089          move.w    #0,A5
                    1090   ; int result, ByteCount ;
                    1091   ; char c, CheckSum, ReadCheckSum, HeaderType ;
                    1092   ; char *RamPtr ;                          // pointer to Memory where downloaded program will be stored
                    1093   ; LoadFailed = 0 ;                        //assume LOAD operation will pass
00000D12  7E00      1094          moveq     #0,D7
                    1095   ; AddressFail = 0 ;
00000D14  42AE FFEA 1096          clr.l     -22(A6)
                    1097   ; Echo = 0 ;                              // don't echo S records during download
00000D18  42B9 0803 1098          clr.l     _Echo.L
00000D1C  00E0      
                    1099   ; printf("\r\nUse HyperTerminal to Send Text File (.hex)\r\n") ;
00000D1E  4879 0000 1100          pea       @m68kde~1_11.L
00000D22  44F8      
00000D24  4E94      1101          jsr       (A4)
00000D26  584F      1102          addq.w    #4,A7
                    1103   ; while(1)    {
                    1104   Load_SRecordFile_1:
                    1105   ; CheckSum = 0 ;
00000D28  4212      1106          clr.b     (A2)
                    1107   ; do {
                    1108   Load_SRecordFile_4:
                    1109   ; c = toupper(_getch()) ;
00000D2A  2F00      1110          move.l    D0,-(A7)
00000D2C  4EB8 0A26 1111          jsr       __getch
00000D30  2200      1112          move.l    D0,D1
00000D32  201F      1113          move.l    (A7)+,D0
00000D34  2F01      1114          move.l    D1,-(A7)
00000D36  4EB9 0000 1115          jsr       _toupper
00000D3A  3B0A      
00000D3C  584F      1116          addq.w    #4,A7
00000D3E  1C00      1117          move.b    D0,D6
                    1118   ; if(c == 0x1b )      // if break
00000D40  0C06 001B 1119          cmp.b     #27,D6
00000D44  6604      1120          bne.s     Load_SRecordFile_6
                    1121   ; return;
00000D46  6000 0132 1122          bra       Load_SRecordFile_8
                    1123   Load_SRecordFile_6:
00000D4A  0C06 0053 1124          cmp.b     #83,D6
00000D4E  66DA      1125          bne       Load_SRecordFile_4
                    1126   ; }while(c != (char)('S'));   // wait for S start of header
                    1127   ; HeaderType = _getch() ;
00000D50  4EB8 0A26 1128          jsr       __getch
00000D54  1600      1129          move.b    D0,D3
                    1130   ; if(HeaderType == (char)('0') || HeaderType == (char)('5'))       // ignore s0, s5 records
00000D56  0C03 0030 1131          cmp.b     #48,D3
00000D5A  6706      1132          beq.s     Load_SRecordFile_11
00000D5C  0C03 0035 1133          cmp.b     #53,D3
00000D60  6604      1134          bne.s     Load_SRecordFile_9
                    1135   Load_SRecordFile_11:
                    1136   ; continue ;
00000D62  6000 00D2 1137          bra       Load_SRecordFile_23
                    1138   Load_SRecordFile_9:
                    1139   ; if(HeaderType >= (char)('7'))
00000D66  0C03 0037 1140          cmp.b     #55,D3
00000D6A  6D04      1141          blt.s     Load_SRecordFile_12
                    1142   ; break ;                 // end load on s7,s8,s9 records
00000D6C  6000 00CC 1143          bra       Load_SRecordFile_3
                    1144   Load_SRecordFile_12:
                    1145   ; // get the bytecount
                    1146   ; ByteCount = Get2HexDigits(&CheckSum) ;
00000D70  2F0A      1147          move.l    A2,-(A7)
00000D72  4E93      1148          jsr       (A3)
00000D74  584F      1149          addq.w    #4,A7
00000D76  2D40 FFF6 1150          move.l    D0,-10(A6)
                    1151   ; // get the address, 4 digits for s1, 6 digits for s2, and 8 digits for s3 record
                    1152   ; if(HeaderType == (char)('1')) {
00000D7A  0C03 0031 1153          cmp.b     #49,D3
00000D7E  660E      1154          bne.s     Load_SRecordFile_14
                    1155   ; AddressSize = 2 ;       // 2 byte address
00000D80  7A02      1156          moveq     #2,D5
                    1157   ; Address = Get4HexDigits(&CheckSum);
00000D82  2F0A      1158          move.l    A2,-(A7)
00000D84  4EB8 0B16 1159          jsr       _Get4HexDigits
00000D88  584F      1160          addq.w    #4,A7
00000D8A  2800      1161          move.l    D0,D4
00000D8C  6020      1162          bra.s     Load_SRecordFile_17
                    1163   Load_SRecordFile_14:
                    1164   ; }
                    1165   ; else if (HeaderType == (char)('2')) {
00000D8E  0C03 0032 1166          cmp.b     #50,D3
00000D92  660E      1167          bne.s     Load_SRecordFile_16
                    1168   ; AddressSize = 3 ;       // 3 byte address
00000D94  7A03      1169          moveq     #3,D5
                    1170   ; Address = Get6HexDigits(&CheckSum) ;
00000D96  2F0A      1171          move.l    A2,-(A7)
00000D98  4EB8 0B3C 1172          jsr       _Get6HexDigits
00000D9C  584F      1173          addq.w    #4,A7
00000D9E  2800      1174          move.l    D0,D4
00000DA0  600C      1175          bra.s     Load_SRecordFile_17
                    1176   Load_SRecordFile_16:
                    1177   ; }
                    1178   ; else    {
                    1179   ; AddressSize = 4 ;       // 4 byte address
00000DA2  7A04      1180          moveq     #4,D5
                    1181   ; Address = Get8HexDigits(&CheckSum) ;
00000DA4  2F0A      1182          move.l    A2,-(A7)
00000DA6  4EB8 0B62 1183          jsr       _Get8HexDigits
00000DAA  584F      1184          addq.w    #4,A7
00000DAC  2800      1185          move.l    D0,D4
                    1186   Load_SRecordFile_17:
                    1187   ; }
                    1188   ; RamPtr = (char *)(Address) ;                            // point to download area
00000DAE  2D44 FFFC 1189          move.l    D4,-4(A6)
                    1190   ; NumDataBytesToRead = ByteCount - AddressSize - 1 ;
00000DB2  202E FFF6 1191          move.l    -10(A6),D0
00000DB6  9085      1192          sub.l     D5,D0
00000DB8  5380      1193          subq.l    #1,D0
00000DBA  2D40 FFE2 1194          move.l    D0,-30(A6)
                    1195   ; for(i = 0; i < NumDataBytesToRead; i ++) {     // read in remaining data bytes (ignore address and checksum at the end
00000DBE  4282      1196          clr.l     D2
                    1197   Load_SRecordFile_18:
00000DC0  B4AE FFE2 1198          cmp.l     -30(A6),D2
00000DC4  6C1E      1199          bge.s     Load_SRecordFile_20
                    1200   ; DataByte = Get2HexDigits(&CheckSum) ;
00000DC6  2F0A      1201          move.l    A2,-(A7)
00000DC8  4E93      1202          jsr       (A3)
00000DCA  584F      1203          addq.w    #4,A7
00000DCC  2D40 FFDE 1204          move.l    D0,-34(A6)
                    1205   ; *RamPtr++ = DataByte ;                      // store downloaded byte in Ram at specified address
00000DD0  202E FFDE 1206          move.l    -34(A6),D0
00000DD4  206E FFFC 1207          move.l    -4(A6),A0
00000DD8  52AE FFFC 1208          addq.l    #1,-4(A6)
00000DDC  1080      1209          move.b    D0,(A0)
                    1210   ; ByteTotal++;
00000DDE  524D      1211          addq.w    #1,A5
00000DE0  5282      1212          addq.l    #1,D2
00000DE2  60DC      1213          bra       Load_SRecordFile_18
                    1214   Load_SRecordFile_20:
                    1215   ; }
                    1216   ; // checksum is the 1's complement of the sum of all data pairs following the bytecount, i.e. it includes the address and the data itself
                    1217   ; ReadCheckSum = Get2HexDigits(0) ;
00000DE4  42A7      1218          clr.l     -(A7)
00000DE6  4E93      1219          jsr       (A3)
00000DE8  584F      1220          addq.w    #4,A7
00000DEA  1D40 FFFB 1221          move.b    D0,-5(A6)
                    1222   ; if((~CheckSum&0Xff) != (ReadCheckSum&0Xff))   {
00000DEE  1012      1223          move.b    (A2),D0
00000DF0  4600      1224          not.b     D0
00000DF2  4880      1225          ext.w     D0
00000DF4  C07C 00FF 1226          and.w     #255,D0
00000DF8  122E FFFB 1227          move.b    -5(A6),D1
00000DFC  4881      1228          ext.w     D1
00000DFE  C27C 00FF 1229          and.w     #255,D1
00000E02  B041      1230          cmp.w     D1,D0
00000E04  6708      1231          beq.s     Load_SRecordFile_21
                    1232   ; LoadFailed = 1 ;
00000E06  7E01      1233          moveq     #1,D7
                    1234   ; FailedAddress = Address ;
00000E08  2D44 FFE6 1235          move.l    D4,-26(A6)
                    1236   ; break;
00000E0C  602C      1237          bra.s     Load_SRecordFile_3
                    1238   Load_SRecordFile_21:
                    1239   ; }
                    1240   ; SRecordCount++ ;
00000E0E  52AE FFEE 1241          addq.l    #1,-18(A6)
                    1242   ; // display feedback on progress
                    1243   ; if(SRecordCount % 25 == 0)
00000E12  2F2E FFEE 1244          move.l    -18(A6),-(A7)
00000E16  4878 0019 1245          pea       25
00000E1A  4EB9 0000 1246          jsr       LDIV
00000E1E  38F8      
00000E20  202F 0004 1247          move.l    4(A7),D0
00000E24  504F      1248          addq.w    #8,A7
00000E26  4A80      1249          tst.l     D0
00000E28  660C      1250          bne.s     Load_SRecordFile_23
                    1251   ; putchar('.') ;
00000E2A  4878 002E 1252          pea       46
00000E2E  4EB9 0000 1253          jsr       _putch
00000E32  3A64      
00000E34  584F      1254          addq.w    #4,A7
                    1255   Load_SRecordFile_23:
00000E36  6000 FEF0 1256          bra       Load_SRecordFile_1
                    1257   Load_SRecordFile_3:
                    1258   ; }
                    1259   ; if(LoadFailed == 1) {
00000E3A  0C87 0000 1260          cmp.l     #1,D7
00000E3E  0001      
00000E40  6610      1261          bne.s     Load_SRecordFile_25
                    1262   ; printf("\r\nLoad Failed at Address = [$%08X]\r\n", FailedAddress) ;
00000E42  2F2E FFE6 1263          move.l    -26(A6),-(A7)
00000E46  4879 0000 1264          pea       @m68kde~1_12.L
00000E4A  4528      
00000E4C  4E94      1265          jsr       (A4)
00000E4E  504F      1266          addq.w    #8,A7
00000E50  600C      1267          bra.s     Load_SRecordFile_26
                    1268   Load_SRecordFile_25:
                    1269   ; }
                    1270   ; else
                    1271   ; printf("\r\nSuccess: Downloaded %d bytes\r\n", ByteTotal) ;
00000E52  2F0D      1272          move.l    A5,-(A7)
00000E54  4879 0000 1273          pea       @m68kde~1_13.L
00000E58  454E      
00000E5A  4E94      1274          jsr       (A4)
00000E5C  504F      1275          addq.w    #8,A7
                    1276   Load_SRecordFile_26:
                    1277   ; // pause at the end to wait for download to finish transmitting at the end of S8 etc
                    1278   ; for(i = 0; i < 400000; i ++)
00000E5E  4282      1279          clr.l     D2
                    1280   Load_SRecordFile_27:
00000E60  0C82 0006 1281          cmp.l     #400000,D2
00000E64  1A80      
00000E66  6C04      1282          bge.s     Load_SRecordFile_29
00000E68  5282      1283          addq.l    #1,D2
00000E6A  60F4      1284          bra       Load_SRecordFile_27
                    1285   Load_SRecordFile_29:
                    1286   ; ;
                    1287   ; FlushKeyboard() ;
00000E6C  4EB8 0A64 1288          jsr       _FlushKeyboard
                    1289   ; Echo = 1;
00000E70  23FC 0000 1290          move.l    #1,_Echo.L
00000E74  0001 0803 
00000E78  00E0      
                    1291   Load_SRecordFile_8:
00000E7A  4CDF 3CFC 1292          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00000E7E  4E5E      1293          unlk      A6
00000E80  4E75      1294          rts
                    1295   ; }
                    1296   ; void MemoryChange(void)
                    1297   ; {
                    1298   _MemoryChange:
00000E82  48E7 3820 1299          movem.l   D2/D3/D4/A2,-(A7)
00000E86  45F9 0000 1300          lea       _printf.L,A2
00000E8A  3B36      
                    1301   ; unsigned char *RamPtr,c ; // pointer to memory
                    1302   ; int Data ;
                    1303   ; printf("\r\nExamine and Change Memory") ;
00000E8C  4879 0000 1304          pea       @m68kde~1_14.L
00000E90  4570      
00000E92  4E92      1305          jsr       (A2)
00000E94  584F      1306          addq.w    #4,A7
                    1307   ; printf("\r\n<ESC> to Stop, <SPACE> to Advance, '-' to Go Back, <DATA> to change") ;
00000E96  4879 0000 1308          pea       @m68kde~1_15.L
00000E9A  458C      
00000E9C  4E92      1309          jsr       (A2)
00000E9E  584F      1310          addq.w    #4,A7
                    1311   ; printf("\r\nEnter Address: ") ;
00000EA0  4879 0000 1312          pea       @m68kde~1_16.L
00000EA4  45D2      
00000EA6  4E92      1313          jsr       (A2)
00000EA8  584F      1314          addq.w    #4,A7
                    1315   ; RamPtr = Get8HexDigits(0) ;
00000EAA  42A7      1316          clr.l     -(A7)
00000EAC  4EB8 0B62 1317          jsr       _Get8HexDigits
00000EB0  584F      1318          addq.w    #4,A7
00000EB2  2600      1319          move.l    D0,D3
                    1320   ; while(1)    {
                    1321   MemoryChange_1:
                    1322   ; printf("\r\n[%08x] : %02x  ", RamPtr, *RamPtr) ;
00000EB4  2043      1323          move.l    D3,A0
00000EB6  1210      1324          move.b    (A0),D1
00000EB8  C2BC 0000 1325          and.l     #255,D1
00000EBC  00FF      
00000EBE  2F01      1326          move.l    D1,-(A7)
00000EC0  2F03      1327          move.l    D3,-(A7)
00000EC2  4879 0000 1328          pea       @m68kde~1_17.L
00000EC6  45E4      
00000EC8  4E92      1329          jsr       (A2)
00000ECA  DEFC 000C 1330          add.w     #12,A7
                    1331   ; c = tolower(_getch()) ;
00000ECE  2F00      1332          move.l    D0,-(A7)
00000ED0  4EB8 0A26 1333          jsr       __getch
00000ED4  2200      1334          move.l    D0,D1
00000ED6  201F      1335          move.l    (A7)+,D0
00000ED8  2F01      1336          move.l    D1,-(A7)
00000EDA  4EB9 0000 1337          jsr       _tolower
00000EDE  3A94      
00000EE0  584F      1338          addq.w    #4,A7
00000EE2  1400      1339          move.b    D0,D2
                    1340   ; if(c == (char)(0x1b))
00000EE4  0C02 001B 1341          cmp.b     #27,D2
00000EE8  6604      1342          bne.s     MemoryChange_4
                    1343   ; return ;                                // abort on escape
00000EEA  6000 0090 1344          bra       MemoryChange_6
                    1345   MemoryChange_4:
                    1346   ; else if((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f')) {  // are we trying to change data at this location by entering a hex char
00000EEE  0C02 0030 1347          cmp.b     #48,D2
00000EF2  6506      1348          blo.s     MemoryChange_10
00000EF4  0C02 0039 1349          cmp.b     #57,D2
00000EF8  6310      1350          bls.s     MemoryChange_9
                    1351   MemoryChange_10:
00000EFA  0C02 0061 1352          cmp.b     #97,D2
00000EFE  6500 006E 1353          blo       MemoryChange_7
00000F02  0C02 0066 1354          cmp.b     #102,D2
00000F06  6200 0066 1355          bhi       MemoryChange_7
                    1356   MemoryChange_9:
                    1357   ; Data = (xtod(c) << 4) | (xtod(_getch()));
00000F0A  C4BC 0000 1358          and.l     #255,D2
00000F0E  00FF      
00000F10  2F02      1359          move.l    D2,-(A7)
00000F12  4EB8 0A90 1360          jsr       _xtod
00000F16  584F      1361          addq.w    #4,A7
00000F18  C0BC 0000 1362          and.l     #255,D0
00000F1C  00FF      
00000F1E  E980      1363          asl.l     #4,D0
00000F20  2F00      1364          move.l    D0,-(A7)
00000F22  2F01      1365          move.l    D1,-(A7)
00000F24  4EB8 0A26 1366          jsr       __getch
00000F28  221F      1367          move.l    (A7)+,D1
00000F2A  2F00      1368          move.l    D0,-(A7)
00000F2C  4EB8 0A90 1369          jsr       _xtod
00000F30  584F      1370          addq.w    #4,A7
00000F32  2200      1371          move.l    D0,D1
00000F34  201F      1372          move.l    (A7)+,D0
00000F36  C2BC 0000 1373          and.l     #255,D1
00000F3A  00FF      
00000F3C  8081      1374          or.l      D1,D0
00000F3E  2800      1375          move.l    D0,D4
                    1376   ; *RamPtr = (char)(Data) ;
00000F40  2043      1377          move.l    D3,A0
00000F42  1084      1378          move.b    D4,(A0)
                    1379   ; if(*RamPtr != Data) {
00000F44  2043      1380          move.l    D3,A0
00000F46  1010      1381          move.b    (A0),D0
00000F48  C0BC 0000 1382          and.l     #255,D0
00000F4C  00FF      
00000F4E  B084      1383          cmp.l     D4,D0
00000F50  671A      1384          beq.s     MemoryChange_11
                    1385   ; printf("\r\nWarning Change Failed: Wrote [%02x], Read [%02x]", Data, *RamPtr) ;
00000F52  2043      1386          move.l    D3,A0
00000F54  1210      1387          move.b    (A0),D1
00000F56  C2BC 0000 1388          and.l     #255,D1
00000F5A  00FF      
00000F5C  2F01      1389          move.l    D1,-(A7)
00000F5E  2F04      1390          move.l    D4,-(A7)
00000F60  4879 0000 1391          pea       @m68kde~1_18.L
00000F64  45F6      
00000F66  4E92      1392          jsr       (A2)
00000F68  DEFC 000C 1393          add.w     #12,A7
                    1394   MemoryChange_11:
00000F6C  6008      1395          bra.s     MemoryChange_13
                    1396   MemoryChange_7:
                    1397   ; }
                    1398   ; }
                    1399   ; else if(c == (char)('-'))
00000F6E  0C02 002D 1400          cmp.b     #45,D2
00000F72  6602      1401          bne.s     MemoryChange_13
                    1402   ; RamPtr -= 2 ; ;
00000F74  5583      1403          subq.l    #2,D3
                    1404   MemoryChange_13:
                    1405   ; RamPtr ++ ;
00000F76  5283      1406          addq.l    #1,D3
00000F78  6000 FF3A 1407          bra       MemoryChange_1
                    1408   MemoryChange_6:
00000F7C  4CDF 041C 1409          movem.l   (A7)+,D2/D3/D4/A2
00000F80  4E75      1410          rts
                    1411   ; }
                    1412   ; }
                    1413   ; //////////////////////////////////////////////////////////////////////////////////////////////////
                    1414   ; // IMPORTANT
                    1415   ; // TG68 does not support the Native Trace mode of the original 68000 so tracing
                    1416   ; // has to be done with an interrupt (IRQ Level 6)
                    1417   ; //
                    1418   ; // To allow the 68000 to execute one more instruction after each pseudo trace (IRQ6)
                    1419   ; // the IRQ is removed in hardware once the TG68 reads the IRQ autovector (i.e. acknowledges the IRQ)
                    1420   ; //
                    1421   ; // on return from the IRQ service handler, the first access to the user memory program space
                    1422   ; // generates a fresh IRQ (in hardware) to generate a new trace, this allows the tg68 to
                    1423   ; // execute one more new instruction (without it the TG68 would trace on the same instruction
                    1424   ; // each time and not after the next one). It also means it doesn't simgle step outside the user
                    1425   ; // program area
                    1426   ; //
                    1427   ; // The bottom line is the Trace handler, which includes the Dump registers below
                    1428   ; // cannot access the user memory to display for example the Instruction Opcode or to disassemble etc
                    1429   ; // as this would lead to a new IRQ being reset and the TG68 would trace on same instruction
                    1430   ; // NOT SURE THIS IS TRUE NOW THAT TRACE HANDLER HAS BEEN MODIVIED TO NOT AUTOMATICALLY GENERATE A TRACE EXCEPTION
                    1431   ; // INSTEAD IT IS DONE IN THE 'N' COMMAND FOR NEXT
                    1432   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    1433   ; void DumpRegisters()
                    1434   ; {
                    1435   _DumpRegisters:
00000F82  48E7 3F3C 1436          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00000F86  45F9 0000 1437          lea       _putch.L,A2
00000F8A  3A64      
00000F8C  47F9 0000 1438          lea       _printf.L,A3
00000F90  3B36      
00000F92  49F9 0803 1439          lea       _SR.L,A4
00000F96  012C      
00000F98  4BF9 0803 1440          lea       _WatchPointString.L,A5
00000F9C  01C2      
                    1441   ; short i, x, j, k ;
                    1442   ; unsigned char c, *BytePointer;
                    1443   ; // buld up strings for displaying watchpoints
                    1444   ; for(x = 0; x < (short)(8); x++)
00000F9E  4242      1445          clr.w     D2
                    1446   DumpRegisters_1:
00000FA0  0C42 0008 1447          cmp.w     #8,D2
00000FA4  6C00 01C6 1448          bge       DumpRegisters_3
                    1449   ; {
                    1450   ; if(WatchPointSetOrCleared[x] == 1)
00000FA8  48C2      1451          ext.l     D2
00000FAA  2002      1452          move.l    D2,D0
00000FAC  E588      1453          lsl.l     #2,D0
00000FAE  41F9 0803 1454          lea       _WatchPointSetOrCleared.L,A0
00000FB2  01A2      
00000FB4  2030 0800 1455          move.l    0(A0,D0.L),D0
00000FB8  0C80 0000 1456          cmp.l     #1,D0
00000FBC  0001      
00000FBE  6600 0186 1457          bne       DumpRegisters_4
                    1458   ; {
                    1459   ; sprintf(WatchPointString[x], "$%08X  ", WatchPointAddress[x]) ;
00000FC2  48C2      1460          ext.l     D2
00000FC4  2202      1461          move.l    D2,D1
00000FC6  E589      1462          lsl.l     #2,D1
00000FC8  41F9 0803 1463          lea       _WatchPointAddress.L,A0
00000FCC  0182      
00000FCE  2F30 1800 1464          move.l    0(A0,D1.L),-(A7)
00000FD2  4879 0000 1465          pea       @m68kde~1_19.L
00000FD6  462A      
00000FD8  220D      1466          move.l    A5,D1
00000FDA  48C2      1467          ext.l     D2
00000FDC  2F00      1468          move.l    D0,-(A7)
00000FDE  2002      1469          move.l    D2,D0
00000FE0  C1FC 0064 1470          muls      #100,D0
00000FE4  D280      1471          add.l     D0,D1
00000FE6  201F      1472          move.l    (A7)+,D0
00000FE8  2F01      1473          move.l    D1,-(A7)
00000FEA  4EB9 0000 1474          jsr       _sprintf
00000FEE  3AC0      
00000FF0  DEFC 000C 1475          add.w     #12,A7
                    1476   ; BytePointer = (char *)(WatchPointAddress[x]) ;
00000FF4  48C2      1477          ext.l     D2
00000FF6  2002      1478          move.l    D2,D0
00000FF8  E588      1479          lsl.l     #2,D0
00000FFA  41F9 0803 1480          lea       _WatchPointAddress.L,A0
00000FFE  0182      
00001000  2A30 0800 1481          move.l    0(A0,D0.L),D5
                    1482   ; for(j = 0; j < (short)(16); j+=2)
00001004  4243      1483          clr.w     D3
                    1484   DumpRegisters_6:
00001006  0C43 0010 1485          cmp.w     #16,D3
0000100A  6C00 0082 1486          bge       DumpRegisters_8
                    1487   ; {
                    1488   ; for(k = 0; k < (short)(2); k++)
0000100E  4246      1489          clr.w     D6
                    1490   DumpRegisters_9:
00001010  0C46 0002 1491          cmp.w     #2,D6
00001014  6C00 0052 1492          bge       DumpRegisters_11
                    1493   ; {
                    1494   ; sprintf(TempString, "%02X", BytePointer[j+k]) ;
00001018  2045      1495          move.l    D5,A0
0000101A  48C3      1496          ext.l     D3
0000101C  2203      1497          move.l    D3,D1
0000101E  48C6      1498          ext.l     D6
00001020  D286      1499          add.l     D6,D1
00001022  1230 1800 1500          move.b    0(A0,D1.L),D1
00001026  C2BC 0000 1501          and.l     #255,D1
0000102A  00FF      
0000102C  2F01      1502          move.l    D1,-(A7)
0000102E  4879 0000 1503          pea       @m68kde~1_4.L
00001032  447C      
00001034  4879 0803 1504          pea       _TempString.L
00001038  04E2      
0000103A  4EB9 0000 1505          jsr       _sprintf
0000103E  3AC0      
00001040  DEFC 000C 1506          add.w     #12,A7
                    1507   ; strcat(WatchPointString[x], TempString) ;
00001044  4879 0803 1508          pea       _TempString.L
00001048  04E2      
0000104A  220D      1509          move.l    A5,D1
0000104C  48C2      1510          ext.l     D2
0000104E  2F00      1511          move.l    D0,-(A7)
00001050  2002      1512          move.l    D2,D0
00001052  C1FC 0064 1513          muls      #100,D0
00001056  D280      1514          add.l     D0,D1
00001058  201F      1515          move.l    (A7)+,D0
0000105A  2F01      1516          move.l    D1,-(A7)
0000105C  4EB9 0000 1517          jsr       _strcat
00001060  3AF4      
00001062  504F      1518          addq.w    #8,A7
00001064  5246      1519          addq.w    #1,D6
00001066  60A8      1520          bra       DumpRegisters_9
                    1521   DumpRegisters_11:
                    1522   ; }
                    1523   ; strcat(WatchPointString[x]," ") ;
00001068  4879 0000 1524          pea       @m68kde~1_20.L
0000106C  4632      
0000106E  220D      1525          move.l    A5,D1
00001070  48C2      1526          ext.l     D2
00001072  2F00      1527          move.l    D0,-(A7)
00001074  2002      1528          move.l    D2,D0
00001076  C1FC 0064 1529          muls      #100,D0
0000107A  D280      1530          add.l     D0,D1
0000107C  201F      1531          move.l    (A7)+,D0
0000107E  2F01      1532          move.l    D1,-(A7)
00001080  4EB9 0000 1533          jsr       _strcat
00001084  3AF4      
00001086  504F      1534          addq.w    #8,A7
00001088  5443      1535          addq.w    #2,D3
0000108A  6000 FF7A 1536          bra       DumpRegisters_6
                    1537   DumpRegisters_8:
                    1538   ; }
                    1539   ; strcat(WatchPointString[x], "  ") ;
0000108E  4879 0000 1540          pea       @m68kde~1_5.L
00001092  4482      
00001094  220D      1541          move.l    A5,D1
00001096  48C2      1542          ext.l     D2
00001098  2F00      1543          move.l    D0,-(A7)
0000109A  2002      1544          move.l    D2,D0
0000109C  C1FC 0064 1545          muls      #100,D0
000010A0  D280      1546          add.l     D0,D1
000010A2  201F      1547          move.l    (A7)+,D0
000010A4  2F01      1548          move.l    D1,-(A7)
000010A6  4EB9 0000 1549          jsr       _strcat
000010AA  3AF4      
000010AC  504F      1550          addq.w    #8,A7
                    1551   ; BytePointer = (char *)(WatchPointAddress[x]) ;
000010AE  48C2      1552          ext.l     D2
000010B0  2002      1553          move.l    D2,D0
000010B2  E588      1554          lsl.l     #2,D0
000010B4  41F9 0803 1555          lea       _WatchPointAddress.L,A0
000010B8  0182      
000010BA  2A30 0800 1556          move.l    0(A0,D0.L),D5
                    1557   ; for(j = 0; j < (short)(16); j++)
000010BE  4243      1558          clr.w     D3
                    1559   DumpRegisters_12:
000010C0  0C43 0010 1560          cmp.w     #16,D3
000010C4  6C00 007E 1561          bge       DumpRegisters_14
                    1562   ; {
                    1563   ; c = ((char)(BytePointer[j]) & 0x7f) ;
000010C8  2045      1564          move.l    D5,A0
000010CA  48C3      1565          ext.l     D3
000010CC  1030 3800 1566          move.b    0(A0,D3.L),D0
000010D0  C03C 007F 1567          and.b     #127,D0
000010D4  1E00      1568          move.b    D0,D7
                    1569   ; if((c > (char)(0x7f)) || (c < (char)(' ')))
000010D6  0C07 007F 1570          cmp.b     #127,D7
000010DA  6206      1571          bhi.s     DumpRegisters_17
000010DC  0C07 0020 1572          cmp.b     #32,D7
000010E0  6416      1573          bhs.s     DumpRegisters_15
                    1574   DumpRegisters_17:
                    1575   ; sprintf(TempString, ".") ;
000010E2  4879 0000 1576          pea       @m68kde~1_21.L
000010E6  4634      
000010E8  4879 0803 1577          pea       _TempString.L
000010EC  04E2      
000010EE  4EB9 0000 1578          jsr       _sprintf
000010F2  3AC0      
000010F4  504F      1579          addq.w    #8,A7
000010F6  6026      1580          bra.s     DumpRegisters_16
                    1581   DumpRegisters_15:
                    1582   ; else
                    1583   ; sprintf(TempString, "%c", BytePointer[j]) ;
000010F8  2045      1584          move.l    D5,A0
000010FA  48C3      1585          ext.l     D3
000010FC  1230 3800 1586          move.b    0(A0,D3.L),D1
00001100  C2BC 0000 1587          and.l     #255,D1
00001104  00FF      
00001106  2F01      1588          move.l    D1,-(A7)
00001108  4879 0000 1589          pea       @m68kde~1_22.L
0000110C  4636      
0000110E  4879 0803 1590          pea       _TempString.L
00001112  04E2      
00001114  4EB9 0000 1591          jsr       _sprintf
00001118  3AC0      
0000111A  DEFC 000C 1592          add.w     #12,A7
                    1593   DumpRegisters_16:
                    1594   ; strcat(WatchPointString[x], TempString) ;
0000111E  4879 0803 1595          pea       _TempString.L
00001122  04E2      
00001124  220D      1596          move.l    A5,D1
00001126  48C2      1597          ext.l     D2
00001128  2F00      1598          move.l    D0,-(A7)
0000112A  2002      1599          move.l    D2,D0
0000112C  C1FC 0064 1600          muls      #100,D0
00001130  D280      1601          add.l     D0,D1
00001132  201F      1602          move.l    (A7)+,D0
00001134  2F01      1603          move.l    D1,-(A7)
00001136  4EB9 0000 1604          jsr       _strcat
0000113A  3AF4      
0000113C  504F      1605          addq.w    #8,A7
0000113E  5243      1606          addq.w    #1,D3
00001140  6000 FF7E 1607          bra       DumpRegisters_12
                    1608   DumpRegisters_14:
00001144  6020      1609          bra.s     DumpRegisters_5
                    1610   DumpRegisters_4:
                    1611   ; }
                    1612   ; }
                    1613   ; else
                    1614   ; strcpy(WatchPointString[x], "") ;
00001146  4879 0000 1615          pea       @m68kde~1_23.L
0000114A  463A      
0000114C  220D      1616          move.l    A5,D1
0000114E  48C2      1617          ext.l     D2
00001150  2F00      1618          move.l    D0,-(A7)
00001152  2002      1619          move.l    D2,D0
00001154  C1FC 0064 1620          muls      #100,D0
00001158  D280      1621          add.l     D0,D1
0000115A  201F      1622          move.l    (A7)+,D0
0000115C  2F01      1623          move.l    D1,-(A7)
0000115E  4EB9 0000 1624          jsr       _strcpy
00001162  38D6      
00001164  504F      1625          addq.w    #8,A7
                    1626   DumpRegisters_5:
00001166  5242      1627          addq.w    #1,D2
00001168  6000 FE36 1628          bra       DumpRegisters_1
                    1629   DumpRegisters_3:
                    1630   ; }
                    1631   ; printf("\r\n\r\n D0 = $%08X  A0 = $%08X",d0,a0) ;
0000116C  2F39 0803 1632          move.l    _a0.L,-(A7)
00001170  0104      
00001172  2F39 0803 1633          move.l    _d0.L,-(A7)
00001176  00E4      
00001178  4879 0000 1634          pea       @m68kde~1_24.L
0000117C  463C      
0000117E  4E93      1635          jsr       (A3)
00001180  DEFC 000C 1636          add.w     #12,A7
                    1637   ; printf("\r\n D1 = $%08X  A1 = $%08X",d1,a1) ;
00001184  2F39 0803 1638          move.l    _a1.L,-(A7)
00001188  0108      
0000118A  2F39 0803 1639          move.l    _d1.L,-(A7)
0000118E  00E8      
00001190  4879 0000 1640          pea       @m68kde~1_25.L
00001194  4658      
00001196  4E93      1641          jsr       (A3)
00001198  DEFC 000C 1642          add.w     #12,A7
                    1643   ; printf("\r\n D2 = $%08X  A2 = $%08X",d2,a2) ;
0000119C  2F39 0803 1644          move.l    _a2.L,-(A7)
000011A0  010C      
000011A2  2F39 0803 1645          move.l    _d2.L,-(A7)
000011A6  00EC      
000011A8  4879 0000 1646          pea       @m68kde~1_26.L
000011AC  4672      
000011AE  4E93      1647          jsr       (A3)
000011B0  DEFC 000C 1648          add.w     #12,A7
                    1649   ; printf("\r\n D3 = $%08X  A3 = $%08X",d3,a3) ;
000011B4  2F39 0803 1650          move.l    _a3.L,-(A7)
000011B8  0110      
000011BA  2F39 0803 1651          move.l    _d3.L,-(A7)
000011BE  00F0      
000011C0  4879 0000 1652          pea       @m68kde~1_27.L
000011C4  468C      
000011C6  4E93      1653          jsr       (A3)
000011C8  DEFC 000C 1654          add.w     #12,A7
                    1655   ; printf("\r\n D4 = $%08X  A4 = $%08X",d4,a4) ;
000011CC  2F39 0803 1656          move.l    _a4.L,-(A7)
000011D0  0114      
000011D2  2F39 0803 1657          move.l    _d4.L,-(A7)
000011D6  00F4      
000011D8  4879 0000 1658          pea       @m68kde~1_28.L
000011DC  46A6      
000011DE  4E93      1659          jsr       (A3)
000011E0  DEFC 000C 1660          add.w     #12,A7
                    1661   ; printf("\r\n D5 = $%08X  A5 = $%08X",d5,a5) ;
000011E4  2F39 0803 1662          move.l    _a5.L,-(A7)
000011E8  0118      
000011EA  2F39 0803 1663          move.l    _d5.L,-(A7)
000011EE  00F8      
000011F0  4879 0000 1664          pea       @m68kde~1_29.L
000011F4  46C0      
000011F6  4E93      1665          jsr       (A3)
000011F8  DEFC 000C 1666          add.w     #12,A7
                    1667   ; printf("\r\n D6 = $%08X  A6 = $%08X",d6,a6) ;
000011FC  2F39 0803 1668          move.l    _a6.L,-(A7)
00001200  011C      
00001202  2F39 0803 1669          move.l    _d6.L,-(A7)
00001206  00FC      
00001208  4879 0000 1670          pea       @m68kde~1_30.L
0000120C  46DA      
0000120E  4E93      1671          jsr       (A3)
00001210  DEFC 000C 1672          add.w     #12,A7
                    1673   ; printf("\r\n D7 = $%08X  A7 = $%08X",d7,((SR & (unsigned short int)(0x2000)) == ((unsigned short int)(0x2000))) ? SSP : USP) ;
00001214  3214      1674          move.w    (A4),D1
00001216  C27C 2000 1675          and.w     #8192,D1
0000121A  0C41 2000 1676          cmp.w     #8192,D1
0000121E  6608      1677          bne.s     DumpRegisters_18
00001220  2239 0803 1678          move.l    _SSP.L,D1
00001224  0124      
00001226  6006      1679          bra.s     DumpRegisters_19
                    1680   DumpRegisters_18:
00001228  2239 0803 1681          move.l    _USP.L,D1
0000122C  0128      
                    1682   DumpRegisters_19:
0000122E  2F01      1683          move.l    D1,-(A7)
00001230  2F39 0803 1684          move.l    _d7.L,-(A7)
00001234  0100      
00001236  4879 0000 1685          pea       @m68kde~1_31.L
0000123A  46F4      
0000123C  4E93      1686          jsr       (A3)
0000123E  DEFC 000C 1687          add.w     #12,A7
                    1688   ; printf("\r\n\r\nUSP = $%08X  (A7) User SP", USP ) ;
00001242  2F39 0803 1689          move.l    _USP.L,-(A7)
00001246  0128      
00001248  4879 0000 1690          pea       @m68kde~1_32.L
0000124C  470E      
0000124E  4E93      1691          jsr       (A3)
00001250  504F      1692          addq.w    #8,A7
                    1693   ; printf("\r\nSSP = $%08X  (A7) Supervisor SP", SSP) ;
00001252  2F39 0803 1694          move.l    _SSP.L,-(A7)
00001256  0124      
00001258  4879 0000 1695          pea       @m68kde~1_33.L
0000125C  472C      
0000125E  4E93      1696          jsr       (A3)
00001260  504F      1697          addq.w    #8,A7
                    1698   ; printf("\r\n SR = $%04X   ",SR) ;
00001262  3214      1699          move.w    (A4),D1
00001264  C2BC 0000 1700          and.l     #65535,D1
00001268  FFFF      
0000126A  2F01      1701          move.l    D1,-(A7)
0000126C  4879 0000 1702          pea       @m68kde~1_34.L
00001270  474E      
00001272  4E93      1703          jsr       (A3)
00001274  504F      1704          addq.w    #8,A7
                    1705   ; // display the status word in characters etc.
                    1706   ; printf("   [") ;
00001276  4879 0000 1707          pea       @m68kde~1_35.L
0000127A  4760      
0000127C  4E93      1708          jsr       (A3)
0000127E  584F      1709          addq.w    #4,A7
                    1710   ; if((SR & (unsigned short int)(0x8000)) == (unsigned short int)(0x8000)) putchar('T') ; else putchar('-') ;      // Trace bit(bit 15)
00001280  3014      1711          move.w    (A4),D0
00001282  C07C 8000 1712          and.w     #32768,D0
00001286  0C40 8000 1713          cmp.w     #32768,D0
0000128A  660A      1714          bne.s     DumpRegisters_20
0000128C  4878 0054 1715          pea       84
00001290  4E92      1716          jsr       (A2)
00001292  584F      1717          addq.w    #4,A7
00001294  6008      1718          bra.s     DumpRegisters_21
                    1719   DumpRegisters_20:
00001296  4878 002D 1720          pea       45
0000129A  4E92      1721          jsr       (A2)
0000129C  584F      1722          addq.w    #4,A7
                    1723   DumpRegisters_21:
                    1724   ; if((SR & (unsigned short int)(0x2000)) == (unsigned short int)(0x2000)) putchar('S') ; else putchar('U') ;      // supervisor bit  (bit 13)
0000129E  3014      1725          move.w    (A4),D0
000012A0  C07C 2000 1726          and.w     #8192,D0
000012A4  0C40 2000 1727          cmp.w     #8192,D0
000012A8  660A      1728          bne.s     DumpRegisters_22
000012AA  4878 0053 1729          pea       83
000012AE  4E92      1730          jsr       (A2)
000012B0  584F      1731          addq.w    #4,A7
000012B2  6008      1732          bra.s     DumpRegisters_23
                    1733   DumpRegisters_22:
000012B4  4878 0055 1734          pea       85
000012B8  4E92      1735          jsr       (A2)
000012BA  584F      1736          addq.w    #4,A7
                    1737   DumpRegisters_23:
                    1738   ; if((SR & (unsigned short int)(0x0400)) == (unsigned short int)(0x0400)) putchar('1') ; else putchar('0') ;      // IRQ2 Bit (bit 10)
000012BC  3014      1739          move.w    (A4),D0
000012BE  C07C 0400 1740          and.w     #1024,D0
000012C2  0C40 0400 1741          cmp.w     #1024,D0
000012C6  660A      1742          bne.s     DumpRegisters_24
000012C8  4878 0031 1743          pea       49
000012CC  4E92      1744          jsr       (A2)
000012CE  584F      1745          addq.w    #4,A7
000012D0  6008      1746          bra.s     DumpRegisters_25
                    1747   DumpRegisters_24:
000012D2  4878 0030 1748          pea       48
000012D6  4E92      1749          jsr       (A2)
000012D8  584F      1750          addq.w    #4,A7
                    1751   DumpRegisters_25:
                    1752   ; if((SR & (unsigned short int)(0x0200)) == (unsigned short int)(0x0200)) putchar('1') ; else putchar('0') ;      // IRQ1 Bit (bit 9)
000012DA  3014      1753          move.w    (A4),D0
000012DC  C07C 0200 1754          and.w     #512,D0
000012E0  0C40 0200 1755          cmp.w     #512,D0
000012E4  660A      1756          bne.s     DumpRegisters_26
000012E6  4878 0031 1757          pea       49
000012EA  4E92      1758          jsr       (A2)
000012EC  584F      1759          addq.w    #4,A7
000012EE  6008      1760          bra.s     DumpRegisters_27
                    1761   DumpRegisters_26:
000012F0  4878 0030 1762          pea       48
000012F4  4E92      1763          jsr       (A2)
000012F6  584F      1764          addq.w    #4,A7
                    1765   DumpRegisters_27:
                    1766   ; if((SR & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100)) putchar('1') ; else putchar('0') ;      // IRQ0 Bit (bit 8)
000012F8  3014      1767          move.w    (A4),D0
000012FA  C07C 0100 1768          and.w     #256,D0
000012FE  0C40 0100 1769          cmp.w     #256,D0
00001302  660A      1770          bne.s     DumpRegisters_28
00001304  4878 0031 1771          pea       49
00001308  4E92      1772          jsr       (A2)
0000130A  584F      1773          addq.w    #4,A7
0000130C  6008      1774          bra.s     DumpRegisters_29
                    1775   DumpRegisters_28:
0000130E  4878 0030 1776          pea       48
00001312  4E92      1777          jsr       (A2)
00001314  584F      1778          addq.w    #4,A7
                    1779   DumpRegisters_29:
                    1780   ; if((SR & (unsigned short int)(0x0010)) == (unsigned short int)(0x0010)) putchar('X') ; else putchar('-') ;      // X Bit (bit 4)
00001316  3014      1781          move.w    (A4),D0
00001318  C07C 0010 1782          and.w     #16,D0
0000131C  0C40 0010 1783          cmp.w     #16,D0
00001320  660A      1784          bne.s     DumpRegisters_30
00001322  4878 0058 1785          pea       88
00001326  4E92      1786          jsr       (A2)
00001328  584F      1787          addq.w    #4,A7
0000132A  6008      1788          bra.s     DumpRegisters_31
                    1789   DumpRegisters_30:
0000132C  4878 002D 1790          pea       45
00001330  4E92      1791          jsr       (A2)
00001332  584F      1792          addq.w    #4,A7
                    1793   DumpRegisters_31:
                    1794   ; if((SR & (unsigned short int)(0x0008)) == (unsigned short int)(0x0008)) putchar('N') ; else putchar('-') ;      // N Bit (bit 3)
00001334  3014      1795          move.w    (A4),D0
00001336  C07C 0008 1796          and.w     #8,D0
0000133A  0C40 0008 1797          cmp.w     #8,D0
0000133E  660A      1798          bne.s     DumpRegisters_32
00001340  4878 004E 1799          pea       78
00001344  4E92      1800          jsr       (A2)
00001346  584F      1801          addq.w    #4,A7
00001348  6008      1802          bra.s     DumpRegisters_33
                    1803   DumpRegisters_32:
0000134A  4878 002D 1804          pea       45
0000134E  4E92      1805          jsr       (A2)
00001350  584F      1806          addq.w    #4,A7
                    1807   DumpRegisters_33:
                    1808   ; if((SR & (unsigned short int)(0x0004)) == (unsigned short int)(0x0004)) putchar('Z') ; else putchar('-') ;      // Z Bit (bit 2)
00001352  3014      1809          move.w    (A4),D0
00001354  C07C 0004 1810          and.w     #4,D0
00001358  0C40 0004 1811          cmp.w     #4,D0
0000135C  660A      1812          bne.s     DumpRegisters_34
0000135E  4878 005A 1813          pea       90
00001362  4E92      1814          jsr       (A2)
00001364  584F      1815          addq.w    #4,A7
00001366  6008      1816          bra.s     DumpRegisters_35
                    1817   DumpRegisters_34:
00001368  4878 002D 1818          pea       45
0000136C  4E92      1819          jsr       (A2)
0000136E  584F      1820          addq.w    #4,A7
                    1821   DumpRegisters_35:
                    1822   ; if((SR & (unsigned short int)(0x0002)) == (unsigned short int)(0x0002)) putchar('V') ; else putchar('-') ;      // V Bit (bit 1)
00001370  3014      1823          move.w    (A4),D0
00001372  C07C 0002 1824          and.w     #2,D0
00001376  0C40 0002 1825          cmp.w     #2,D0
0000137A  660A      1826          bne.s     DumpRegisters_36
0000137C  4878 0056 1827          pea       86
00001380  4E92      1828          jsr       (A2)
00001382  584F      1829          addq.w    #4,A7
00001384  6008      1830          bra.s     DumpRegisters_37
                    1831   DumpRegisters_36:
00001386  4878 002D 1832          pea       45
0000138A  4E92      1833          jsr       (A2)
0000138C  584F      1834          addq.w    #4,A7
                    1835   DumpRegisters_37:
                    1836   ; if((SR & (unsigned short int)(0x0001)) == (unsigned short int)(0x0001)) putchar('C') ; else putchar('-') ;      // C Bit (bit 0)
0000138E  3014      1837          move.w    (A4),D0
00001390  C07C 0001 1838          and.w     #1,D0
00001394  0C40 0001 1839          cmp.w     #1,D0
00001398  660A      1840          bne.s     DumpRegisters_38
0000139A  4878 0043 1841          pea       67
0000139E  4E92      1842          jsr       (A2)
000013A0  584F      1843          addq.w    #4,A7
000013A2  6008      1844          bra.s     DumpRegisters_39
                    1845   DumpRegisters_38:
000013A4  4878 002D 1846          pea       45
000013A8  4E92      1847          jsr       (A2)
000013AA  584F      1848          addq.w    #4,A7
                    1849   DumpRegisters_39:
                    1850   ; putchar(']') ;
000013AC  4878 005D 1851          pea       93
000013B0  4E92      1852          jsr       (A2)
000013B2  584F      1853          addq.w    #4,A7
                    1854   ; printf("\r\n PC = $%08X  ", PC) ;
000013B4  2F39 0803 1855          move.l    _PC.L,-(A7)
000013B8  0120      
000013BA  4879 0000 1856          pea       @m68kde~1_36.L
000013BE  4766      
000013C0  4E93      1857          jsr       (A3)
000013C2  504F      1858          addq.w    #8,A7
                    1859   ; if(*(unsigned short int *)(PC) == 0x4e4e)
000013C4  2039 0803 1860          move.l    _PC.L,D0
000013C8  0120      
000013CA  2040      1861          move.l    D0,A0
000013CC  3010      1862          move.w    (A0),D0
000013CE  0C40 4E4E 1863          cmp.w     #20046,D0
000013D2  660A      1864          bne.s     DumpRegisters_40
                    1865   ; printf("[@ BREAKPOINT]") ;
000013D4  4879 0000 1866          pea       @m68kde~1_37.L
000013D8  4776      
000013DA  4E93      1867          jsr       (A3)
000013DC  584F      1868          addq.w    #4,A7
                    1869   DumpRegisters_40:
                    1870   ; printf("\r\n") ;
000013DE  4879 0000 1871          pea       @m68kde~1_6.L
000013E2  4486      
000013E4  4E93      1872          jsr       (A3)
000013E6  584F      1873          addq.w    #4,A7
                    1874   ; for(i=0; i < 8; i++)    {
000013E8  4244      1875          clr.w     D4
                    1876   DumpRegisters_42:
000013EA  0C44 0008 1877          cmp.w     #8,D4
000013EE  6C00 0040 1878          bge       DumpRegisters_44
                    1879   ; if(WatchPointSetOrCleared[i] == 1)
000013F2  48C4      1880          ext.l     D4
000013F4  2004      1881          move.l    D4,D0
000013F6  E588      1882          lsl.l     #2,D0
000013F8  41F9 0803 1883          lea       _WatchPointSetOrCleared.L,A0
000013FC  01A2      
000013FE  2030 0800 1884          move.l    0(A0,D0.L),D0
00001402  0C80 0000 1885          cmp.l     #1,D0
00001406  0001      
00001408  6622      1886          bne.s     DumpRegisters_45
                    1887   ; printf("\r\nWP%d = %s", i, WatchPointString[i]) ;
0000140A  220D      1888          move.l    A5,D1
0000140C  48C4      1889          ext.l     D4
0000140E  2F00      1890          move.l    D0,-(A7)
00001410  2004      1891          move.l    D4,D0
00001412  C1FC 0064 1892          muls      #100,D0
00001416  D280      1893          add.l     D0,D1
00001418  201F      1894          move.l    (A7)+,D0
0000141A  2F01      1895          move.l    D1,-(A7)
0000141C  48C4      1896          ext.l     D4
0000141E  2F04      1897          move.l    D4,-(A7)
00001420  4879 0000 1898          pea       @m68kde~1_38.L
00001424  4786      
00001426  4E93      1899          jsr       (A3)
00001428  DEFC 000C 1900          add.w     #12,A7
                    1901   DumpRegisters_45:
0000142C  5244      1902          addq.w    #1,D4
0000142E  60BA      1903          bra       DumpRegisters_42
                    1904   DumpRegisters_44:
00001430  4CDF 3CFC 1905          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00001434  4E75      1906          rts
                    1907   ; }
                    1908   ; }
                    1909   ; // Trace Exception Handler
                    1910   ; void DumpRegistersandPause(void)
                    1911   ; {
                    1912   _DumpRegistersandPause:
00001436  2F0A      1913          move.l    A2,-(A7)
00001438  45F9 0000 1914          lea       _printf.L,A2
0000143C  3B36      
                    1915   ; printf("\r\n\r\n\r\n\r\n\r\n\r\nSingle Step  :[ON]") ;
0000143E  4879 0000 1916          pea       @m68kde~1_39.L
00001442  4792      
00001444  4E92      1917          jsr       (A2)
00001446  584F      1918          addq.w    #4,A7
                    1919   ; printf("\r\nBreak Points :[Disabled]") ;
00001448  4879 0000 1920          pea       @m68kde~1_40.L
0000144C  47B2      
0000144E  4E92      1921          jsr       (A2)
00001450  584F      1922          addq.w    #4,A7
                    1923   ; DumpRegisters() ;
00001452  4EB8 0F82 1924          jsr       _DumpRegisters
                    1925   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
00001456  4879 0000 1926          pea       @m68kde~1_41.L
0000145A  47CE      
0000145C  4E92      1927          jsr       (A2)
0000145E  584F      1928          addq.w    #4,A7
                    1929   ; printf("\r\nPress <ESC> to Resume Program") ;
00001460  4879 0000 1930          pea       @m68kde~1_42.L
00001464  47FA      
00001466  4E92      1931          jsr       (A2)
00001468  584F      1932          addq.w    #4,A7
                    1933   ; menu() ;
0000146A  4EB9 0000 1934          jsr       _menu
0000146E  1FD6      
00001470  245F      1935          move.l    (A7)+,A2
00001472  4E75      1936          rts
                    1937   ; }
                    1938   ; void ChangeRegisters(void)
                    1939   ; {
                    1940   _ChangeRegisters:
00001474  4E56 FFFC 1941          link      A6,#-4
00001478  48E7 303C 1942          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
0000147C  45F9 0000 1943          lea       _printf.L,A2
00001480  3B36      
00001482  47EE FFFC 1944          lea       -4(A6),A3
00001486  49F8 0B62 1945          lea       _Get8HexDigits.L,A4
0000148A  4BF8 0A26 1946          lea       __getch.L,A5
                    1947   ; // get register name d0-d7, a0-a7, up, sp, sr, pc
                    1948   ; int reg_val ;
                    1949   ; char c, reg[3] ;
                    1950   ; reg[0] = tolower(_getch()) ;
0000148E  2F00      1951          move.l    D0,-(A7)
00001490  4E95      1952          jsr       (A5)
00001492  2200      1953          move.l    D0,D1
00001494  201F      1954          move.l    (A7)+,D0
00001496  2F01      1955          move.l    D1,-(A7)
00001498  4EB9 0000 1956          jsr       _tolower
0000149C  3A94      
0000149E  584F      1957          addq.w    #4,A7
000014A0  1680      1958          move.b    D0,(A3)
                    1959   ; reg[1] = c = tolower(_getch()) ;
000014A2  2F00      1960          move.l    D0,-(A7)
000014A4  4E95      1961          jsr       (A5)
000014A6  2200      1962          move.l    D0,D1
000014A8  201F      1963          move.l    (A7)+,D0
000014AA  2F01      1964          move.l    D1,-(A7)
000014AC  4EB9 0000 1965          jsr       _tolower
000014B0  3A94      
000014B2  584F      1966          addq.w    #4,A7
000014B4  1400      1967          move.b    D0,D2
000014B6  1740 0001 1968          move.b    D0,1(A3)
                    1969   ; if(reg[0] == (char)('d'))  {    // change data register
000014BA  1013      1970          move.b    (A3),D0
000014BC  0C00 0064 1971          cmp.b     #100,D0
000014C0  6600 00AE 1972          bne       ChangeRegisters_1
                    1973   ; if((reg[1] > (char)('7')) || (reg[1] < (char)('0'))) {
000014C4  102B 0001 1974          move.b    1(A3),D0
000014C8  0C00 0037 1975          cmp.b     #55,D0
000014CC  6E0A      1976          bgt.s     ChangeRegisters_5
000014CE  102B 0001 1977          move.b    1(A3),D0
000014D2  0C00 0030 1978          cmp.b     #48,D0
000014D6  6C0E      1979          bge.s     ChangeRegisters_3
                    1980   ChangeRegisters_5:
                    1981   ; printf("\r\nIllegal Data Register : Use D0-D7.....\r\n") ;
000014D8  4879 0000 1982          pea       @m68kde~1_43.L
000014DC  481A      
000014DE  4E92      1983          jsr       (A2)
000014E0  584F      1984          addq.w    #4,A7
                    1985   ; return ;
000014E2  6000 0244 1986          bra       ChangeRegisters_6
                    1987   ChangeRegisters_3:
                    1988   ; }
                    1989   ; else {
                    1990   ; printf("\r\nD%c = ", c) ;
000014E6  4882      1991          ext.w     D2
000014E8  48C2      1992          ext.l     D2
000014EA  2F02      1993          move.l    D2,-(A7)
000014EC  4879 0000 1994          pea       @m68kde~1_44.L
000014F0  4846      
000014F2  4E92      1995          jsr       (A2)
000014F4  504F      1996          addq.w    #8,A7
                    1997   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000014F6  42A7      1998          clr.l     -(A7)
000014F8  4E94      1999          jsr       (A4)
000014FA  584F      2000          addq.w    #4,A7
000014FC  2600      2001          move.l    D0,D3
                    2002   ; }
                    2003   ; // bit cludgy but d0-d7 not stored as an array for good reason
                    2004   ; if(c == (char)('0'))
000014FE  0C02 0030 2005          cmp.b     #48,D2
00001502  660A      2006          bne.s     ChangeRegisters_7
                    2007   ; d0 = reg_val ;
00001504  23C3 0803 2008          move.l    D3,_d0.L
00001508  00E4      
0000150A  6000 0060 2009          bra       ChangeRegisters_20
                    2010   ChangeRegisters_7:
                    2011   ; else if(c == (char)('1'))
0000150E  0C02 0031 2012          cmp.b     #49,D2
00001512  660A      2013          bne.s     ChangeRegisters_9
                    2014   ; d1 = reg_val ;
00001514  23C3 0803 2015          move.l    D3,_d1.L
00001518  00E8      
0000151A  6000 0050 2016          bra       ChangeRegisters_20
                    2017   ChangeRegisters_9:
                    2018   ; else if(c == (char)('2'))
0000151E  0C02 0032 2019          cmp.b     #50,D2
00001522  660A      2020          bne.s     ChangeRegisters_11
                    2021   ; d2 = reg_val ;
00001524  23C3 0803 2022          move.l    D3,_d2.L
00001528  00EC      
0000152A  6000 0040 2023          bra       ChangeRegisters_20
                    2024   ChangeRegisters_11:
                    2025   ; else if(c == (char)('3'))
0000152E  0C02 0033 2026          cmp.b     #51,D2
00001532  6608      2027          bne.s     ChangeRegisters_13
                    2028   ; d3 = reg_val ;
00001534  23C3 0803 2029          move.l    D3,_d3.L
00001538  00F0      
0000153A  6030      2030          bra.s     ChangeRegisters_20
                    2031   ChangeRegisters_13:
                    2032   ; else if(c == (char)('4'))
0000153C  0C02 0034 2033          cmp.b     #52,D2
00001540  6608      2034          bne.s     ChangeRegisters_15
                    2035   ; d4 = reg_val ;
00001542  23C3 0803 2036          move.l    D3,_d4.L
00001546  00F4      
00001548  6022      2037          bra.s     ChangeRegisters_20
                    2038   ChangeRegisters_15:
                    2039   ; else if(c == (char)('5'))
0000154A  0C02 0035 2040          cmp.b     #53,D2
0000154E  6608      2041          bne.s     ChangeRegisters_17
                    2042   ; d5 = reg_val ;
00001550  23C3 0803 2043          move.l    D3,_d5.L
00001554  00F8      
00001556  6014      2044          bra.s     ChangeRegisters_20
                    2045   ChangeRegisters_17:
                    2046   ; else if(c == (char)('6'))
00001558  0C02 0036 2047          cmp.b     #54,D2
0000155C  6608      2048          bne.s     ChangeRegisters_19
                    2049   ; d6 = reg_val ;
0000155E  23C3 0803 2050          move.l    D3,_d6.L
00001562  00FC      
00001564  6006      2051          bra.s     ChangeRegisters_20
                    2052   ChangeRegisters_19:
                    2053   ; else
                    2054   ; d7 = reg_val ;
00001566  23C3 0803 2055          move.l    D3,_d7.L
0000156A  0100      
                    2056   ChangeRegisters_20:
0000156C  6000 01B6 2057          bra       ChangeRegisters_51
                    2058   ChangeRegisters_1:
                    2059   ; }
                    2060   ; else if(reg[0] == (char)('a'))  {    // change address register, a7 is the user stack pointer, sp is the system stack pointer
00001570  1013      2061          move.b    (A3),D0
00001572  0C00 0061 2062          cmp.b     #97,D0
00001576  6600 00A6 2063          bne       ChangeRegisters_21
                    2064   ; if((c > (char)('7')) || (c < (char)('0'))) {
0000157A  0C02 0037 2065          cmp.b     #55,D2
0000157E  6E06      2066          bgt.s     ChangeRegisters_25
00001580  0C02 0030 2067          cmp.b     #48,D2
00001584  6C0E      2068          bge.s     ChangeRegisters_23
                    2069   ChangeRegisters_25:
                    2070   ; printf("\r\nIllegal Address Register : Use A0-A7.....\r\n") ;
00001586  4879 0000 2071          pea       @m68kde~1_45.L
0000158A  4850      
0000158C  4E92      2072          jsr       (A2)
0000158E  584F      2073          addq.w    #4,A7
                    2074   ; return ;
00001590  6000 0196 2075          bra       ChangeRegisters_6
                    2076   ChangeRegisters_23:
                    2077   ; }
                    2078   ; else {
                    2079   ; printf("\r\nA%c = ", c) ;
00001594  4882      2080          ext.w     D2
00001596  48C2      2081          ext.l     D2
00001598  2F02      2082          move.l    D2,-(A7)
0000159A  4879 0000 2083          pea       @m68kde~1_46.L
0000159E  487E      
000015A0  4E92      2084          jsr       (A2)
000015A2  504F      2085          addq.w    #8,A7
                    2086   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000015A4  42A7      2087          clr.l     -(A7)
000015A6  4E94      2088          jsr       (A4)
000015A8  584F      2089          addq.w    #4,A7
000015AA  2600      2090          move.l    D0,D3
                    2091   ; }
                    2092   ; // bit cludgy but a0-a7 not stored as an array for good reason
                    2093   ; if(c == (char)('0'))
000015AC  0C02 0030 2094          cmp.b     #48,D2
000015B0  660A      2095          bne.s     ChangeRegisters_26
                    2096   ; a0 = reg_val ;
000015B2  23C3 0803 2097          move.l    D3,_a0.L
000015B6  0104      
000015B8  6000 0060 2098          bra       ChangeRegisters_39
                    2099   ChangeRegisters_26:
                    2100   ; else if(c == (char)('1'))
000015BC  0C02 0031 2101          cmp.b     #49,D2
000015C0  660A      2102          bne.s     ChangeRegisters_28
                    2103   ; a1 = reg_val ;
000015C2  23C3 0803 2104          move.l    D3,_a1.L
000015C6  0108      
000015C8  6000 0050 2105          bra       ChangeRegisters_39
                    2106   ChangeRegisters_28:
                    2107   ; else if(c == (char)('2'))
000015CC  0C02 0032 2108          cmp.b     #50,D2
000015D0  660A      2109          bne.s     ChangeRegisters_30
                    2110   ; a2 = reg_val ;
000015D2  23C3 0803 2111          move.l    D3,_a2.L
000015D6  010C      
000015D8  6000 0040 2112          bra       ChangeRegisters_39
                    2113   ChangeRegisters_30:
                    2114   ; else if(c == (char)('3'))
000015DC  0C02 0033 2115          cmp.b     #51,D2
000015E0  6608      2116          bne.s     ChangeRegisters_32
                    2117   ; a3 = reg_val ;
000015E2  23C3 0803 2118          move.l    D3,_a3.L
000015E6  0110      
000015E8  6030      2119          bra.s     ChangeRegisters_39
                    2120   ChangeRegisters_32:
                    2121   ; else if(c == (char)('4'))
000015EA  0C02 0034 2122          cmp.b     #52,D2
000015EE  6608      2123          bne.s     ChangeRegisters_34
                    2124   ; a4 = reg_val ;
000015F0  23C3 0803 2125          move.l    D3,_a4.L
000015F4  0114      
000015F6  6022      2126          bra.s     ChangeRegisters_39
                    2127   ChangeRegisters_34:
                    2128   ; else if(c == (char)('5'))
000015F8  0C02 0035 2129          cmp.b     #53,D2
000015FC  6608      2130          bne.s     ChangeRegisters_36
                    2131   ; a5 = reg_val ;
000015FE  23C3 0803 2132          move.l    D3,_a5.L
00001602  0118      
00001604  6014      2133          bra.s     ChangeRegisters_39
                    2134   ChangeRegisters_36:
                    2135   ; else if(c == (char)('6'))
00001606  0C02 0036 2136          cmp.b     #54,D2
0000160A  6608      2137          bne.s     ChangeRegisters_38
                    2138   ; a6 = reg_val ;
0000160C  23C3 0803 2139          move.l    D3,_a6.L
00001610  011C      
00001612  6006      2140          bra.s     ChangeRegisters_39
                    2141   ChangeRegisters_38:
                    2142   ; else
                    2143   ; USP = reg_val ;
00001614  23C3 0803 2144          move.l    D3,_USP.L
00001618  0128      
                    2145   ChangeRegisters_39:
0000161A  6000 0108 2146          bra       ChangeRegisters_51
                    2147   ChangeRegisters_21:
                    2148   ; }
                    2149   ; else if((reg[0] == (char)('u')) && (c == (char)('s')))  {
0000161E  1013      2150          move.b    (A3),D0
00001620  0C00 0075 2151          cmp.b     #117,D0
00001624  6600 004E 2152          bne       ChangeRegisters_40
00001628  0C02 0073 2153          cmp.b     #115,D2
0000162C  6600 0046 2154          bne       ChangeRegisters_40
                    2155   ; if(tolower(_getch()) == 'p')  {    // change user stack pointer
00001630  2F00      2156          move.l    D0,-(A7)
00001632  4E95      2157          jsr       (A5)
00001634  2200      2158          move.l    D0,D1
00001636  201F      2159          move.l    (A7)+,D0
00001638  2F01      2160          move.l    D1,-(A7)
0000163A  4EB9 0000 2161          jsr       _tolower
0000163E  3A94      
00001640  584F      2162          addq.w    #4,A7
00001642  0C80 0000 2163          cmp.l     #112,D0
00001646  0070      
00001648  6618      2164          bne.s     ChangeRegisters_42
                    2165   ; printf("\r\nUser SP = ") ;
0000164A  4879 0000 2166          pea       @m68kde~1_47.L
0000164E  4888      
00001650  4E92      2167          jsr       (A2)
00001652  584F      2168          addq.w    #4,A7
                    2169   ; USP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001654  42A7      2170          clr.l     -(A7)
00001656  4E94      2171          jsr       (A4)
00001658  584F      2172          addq.w    #4,A7
0000165A  23C0 0803 2173          move.l    D0,_USP.L
0000165E  0128      
00001660  600E      2174          bra.s     ChangeRegisters_43
                    2175   ChangeRegisters_42:
                    2176   ; }
                    2177   ; else {
                    2178   ; printf("\r\nIllegal Register....") ;
00001662  4879 0000 2179          pea       @m68kde~1_48.L
00001666  4896      
00001668  4E92      2180          jsr       (A2)
0000166A  584F      2181          addq.w    #4,A7
                    2182   ; return ;
0000166C  6000 00BA 2183          bra       ChangeRegisters_6
                    2184   ChangeRegisters_43:
00001670  6000 00B2 2185          bra       ChangeRegisters_51
                    2186   ChangeRegisters_40:
                    2187   ; }
                    2188   ; }
                    2189   ; else if((reg[0] == (char)('s')) && (c == (char)('s')))  {
00001674  1013      2190          move.b    (A3),D0
00001676  0C00 0073 2191          cmp.b     #115,D0
0000167A  6600 004E 2192          bne       ChangeRegisters_44
0000167E  0C02 0073 2193          cmp.b     #115,D2
00001682  6600 0046 2194          bne       ChangeRegisters_44
                    2195   ; if(tolower(_getch()) == 'p')  {    // change system stack pointer
00001686  2F00      2196          move.l    D0,-(A7)
00001688  4E95      2197          jsr       (A5)
0000168A  2200      2198          move.l    D0,D1
0000168C  201F      2199          move.l    (A7)+,D0
0000168E  2F01      2200          move.l    D1,-(A7)
00001690  4EB9 0000 2201          jsr       _tolower
00001694  3A94      
00001696  584F      2202          addq.w    #4,A7
00001698  0C80 0000 2203          cmp.l     #112,D0
0000169C  0070      
0000169E  6618      2204          bne.s     ChangeRegisters_46
                    2205   ; printf("\r\nSystem SP = ") ;
000016A0  4879 0000 2206          pea       @m68kde~1_49.L
000016A4  48AE      
000016A6  4E92      2207          jsr       (A2)
000016A8  584F      2208          addq.w    #4,A7
                    2209   ; SSP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000016AA  42A7      2210          clr.l     -(A7)
000016AC  4E94      2211          jsr       (A4)
000016AE  584F      2212          addq.w    #4,A7
000016B0  23C0 0803 2213          move.l    D0,_SSP.L
000016B4  0124      
000016B6  600E      2214          bra.s     ChangeRegisters_47
                    2215   ChangeRegisters_46:
                    2216   ; }
                    2217   ; else {
                    2218   ; printf("\r\nIllegal Register....") ;
000016B8  4879 0000 2219          pea       @m68kde~1_48.L
000016BC  4896      
000016BE  4E92      2220          jsr       (A2)
000016C0  584F      2221          addq.w    #4,A7
                    2222   ; return ;
000016C2  6000 0064 2223          bra       ChangeRegisters_6
                    2224   ChangeRegisters_47:
000016C6  6000 005C 2225          bra       ChangeRegisters_51
                    2226   ChangeRegisters_44:
                    2227   ; }
                    2228   ; }
                    2229   ; else if((reg[0] == (char)('p')) && (c == (char)('c')))  {    // change program counter
000016CA  1013      2230          move.b    (A3),D0
000016CC  0C00 0070 2231          cmp.b     #112,D0
000016D0  6620      2232          bne.s     ChangeRegisters_48
000016D2  0C02 0063 2233          cmp.b     #99,D2
000016D6  661A      2234          bne.s     ChangeRegisters_48
                    2235   ; printf("\r\nPC = ") ;
000016D8  4879 0000 2236          pea       @m68kde~1_50.L
000016DC  48BE      
000016DE  4E92      2237          jsr       (A2)
000016E0  584F      2238          addq.w    #4,A7
                    2239   ; PC = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000016E2  42A7      2240          clr.l     -(A7)
000016E4  4E94      2241          jsr       (A4)
000016E6  584F      2242          addq.w    #4,A7
000016E8  23C0 0803 2243          move.l    D0,_PC.L
000016EC  0120      
000016EE  6000 0034 2244          bra       ChangeRegisters_51
                    2245   ChangeRegisters_48:
                    2246   ; }
                    2247   ; else if((reg[0] == (char)('s')) && (c == (char)('r')))  {    // change status register
000016F2  1013      2248          move.b    (A3),D0
000016F4  0C00 0073 2249          cmp.b     #115,D0
000016F8  6620      2250          bne.s     ChangeRegisters_50
000016FA  0C02 0072 2251          cmp.b     #114,D2
000016FE  661A      2252          bne.s     ChangeRegisters_50
                    2253   ; printf("\r\nSR = ") ;
00001700  4879 0000 2254          pea       @m68kde~1_51.L
00001704  48C6      
00001706  4E92      2255          jsr       (A2)
00001708  584F      2256          addq.w    #4,A7
                    2257   ; SR = Get4HexDigits(0) ;    // read 16 bit value from user keyboard
0000170A  42A7      2258          clr.l     -(A7)
0000170C  4EB8 0B16 2259          jsr       _Get4HexDigits
00001710  584F      2260          addq.w    #4,A7
00001712  33C0 0803 2261          move.w    D0,_SR.L
00001716  012C      
00001718  600A      2262          bra.s     ChangeRegisters_51
                    2263   ChangeRegisters_50:
                    2264   ; }
                    2265   ; else
                    2266   ; printf("\r\nIllegal Register: Use A0-A7, D0-D7, SSP, USP, PC or SR\r\n") ;
0000171A  4879 0000 2267          pea       @m68kde~1_52.L
0000171E  48CE      
00001720  4E92      2268          jsr       (A2)
00001722  584F      2269          addq.w    #4,A7
                    2270   ChangeRegisters_51:
                    2271   ; DumpRegisters() ;
00001724  4EB8 0F82 2272          jsr       _DumpRegisters
                    2273   ChangeRegisters_6:
00001728  4CDF 3C0C 2274          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
0000172C  4E5E      2275          unlk      A6
0000172E  4E75      2276          rts
                    2277   ; }
                    2278   ; void BreakPointDisplay(void)
                    2279   ; {
                    2280   _BreakPointDisplay:
00001730  48E7 3030 2281          movem.l   D2/D3/A2/A3,-(A7)
00001734  45F9 0000 2282          lea       _printf.L,A2
00001738  3B36      
0000173A  47F9 0803 2283          lea       _BreakPointAddress.L,A3
0000173E  012E      
                    2284   ; int i, BreakPointsSet = 0 ;
00001740  4283      2285          clr.l     D3
                    2286   ; // any break points  set
                    2287   ; for(i = 0; i < 8; i++)  {
00001742  4282      2288          clr.l     D2
                    2289   BreakPointDisplay_1:
00001744  0C82 0000 2290          cmp.l     #8,D2
00001748  0008      
0000174A  6C1C      2291          bge.s     BreakPointDisplay_3
                    2292   ; if(BreakPointSetOrCleared[i] == 1)
0000174C  2002      2293          move.l    D2,D0
0000174E  E588      2294          lsl.l     #2,D0
00001750  41F9 0803 2295          lea       _BreakPointSetOrCleared.L,A0
00001754  015E      
00001756  2030 0800 2296          move.l    0(A0,D0.L),D0
0000175A  0C80 0000 2297          cmp.l     #1,D0
0000175E  0001      
00001760  6602      2298          bne.s     BreakPointDisplay_4
                    2299   ; BreakPointsSet = 1;
00001762  7601      2300          moveq     #1,D3
                    2301   BreakPointDisplay_4:
00001764  5282      2302          addq.l    #1,D2
00001766  60DC      2303          bra       BreakPointDisplay_1
                    2304   BreakPointDisplay_3:
                    2305   ; }
                    2306   ; if(BreakPointsSet == 1) {
00001768  0C83 0000 2307          cmp.l     #1,D3
0000176C  0001      
0000176E  6616      2308          bne.s     BreakPointDisplay_6
                    2309   ; printf("\r\n\r\nNum     Address      Instruction") ;
00001770  4879 0000 2310          pea       @m68kde~1_53.L
00001774  490A      
00001776  4E92      2311          jsr       (A2)
00001778  584F      2312          addq.w    #4,A7
                    2313   ; printf("\r\n---     ---------    -----------") ;
0000177A  4879 0000 2314          pea       @m68kde~1_54.L
0000177E  4930      
00001780  4E92      2315          jsr       (A2)
00001782  584F      2316          addq.w    #4,A7
00001784  600A      2317          bra.s     BreakPointDisplay_7
                    2318   BreakPointDisplay_6:
                    2319   ; }
                    2320   ; else
                    2321   ; printf("\r\nNo BreakPoints Set") ;
00001786  4879 0000 2322          pea       @m68kde~1_55.L
0000178A  4954      
0000178C  4E92      2323          jsr       (A2)
0000178E  584F      2324          addq.w    #4,A7
                    2325   BreakPointDisplay_7:
                    2326   ; for(i = 0; i < 8; i++)  {
00001790  4282      2327          clr.l     D2
                    2328   BreakPointDisplay_8:
00001792  0C82 0000 2329          cmp.l     #8,D2
00001796  0008      
00001798  6C00 005A 2330          bge       BreakPointDisplay_10
                    2331   ; // put opcode back, then put break point back
                    2332   ; if(BreakPointSetOrCleared[i] == 1)  {
0000179C  2002      2333          move.l    D2,D0
0000179E  E588      2334          lsl.l     #2,D0
000017A0  41F9 0803 2335          lea       _BreakPointSetOrCleared.L,A0
000017A4  015E      
000017A6  2030 0800 2336          move.l    0(A0,D0.L),D0
000017AA  0C80 0000 2337          cmp.l     #1,D0
000017AE  0001      
000017B0  6600 003E 2338          bne       BreakPointDisplay_11
                    2339   ; *(unsigned short int *)(BreakPointAddress[i]) = BreakPointInstruction[i];
000017B4  2002      2340          move.l    D2,D0
000017B6  E388      2341          lsl.l     #1,D0
000017B8  41F9 0803 2342          lea       _BreakPointInstruction.L,A0
000017BC  014E      
000017BE  2202      2343          move.l    D2,D1
000017C0  E589      2344          lsl.l     #2,D1
000017C2  2233 1800 2345          move.l    0(A3,D1.L),D1
000017C6  2241      2346          move.l    D1,A1
000017C8  32B0 0800 2347          move.w    0(A0,D0.L),(A1)
                    2348   ; *(unsigned short int *)(BreakPointAddress[i]) = (unsigned short int)(0x4e4e) ;
000017CC  2002      2349          move.l    D2,D0
000017CE  E588      2350          lsl.l     #2,D0
000017D0  2033 0800 2351          move.l    0(A3,D0.L),D0
000017D4  2040      2352          move.l    D0,A0
000017D6  30BC 4E4E 2353          move.w    #20046,(A0)
                    2354   ; printf("\r\n%3d     $%08x",i, BreakPointAddress[i]) ;
000017DA  2202      2355          move.l    D2,D1
000017DC  E589      2356          lsl.l     #2,D1
000017DE  2F33 1800 2357          move.l    0(A3,D1.L),-(A7)
000017E2  2F02      2358          move.l    D2,-(A7)
000017E4  4879 0000 2359          pea       @m68kde~1_56.L
000017E8  496A      
000017EA  4E92      2360          jsr       (A2)
000017EC  DEFC 000C 2361          add.w     #12,A7
                    2362   BreakPointDisplay_11:
000017F0  5282      2363          addq.l    #1,D2
000017F2  609E      2364          bra       BreakPointDisplay_8
                    2365   BreakPointDisplay_10:
                    2366   ; }
                    2367   ; }
                    2368   ; printf("\r\n") ;
000017F4  4879 0000 2369          pea       @m68kde~1_6.L
000017F8  4486      
000017FA  4E92      2370          jsr       (A2)
000017FC  584F      2371          addq.w    #4,A7
000017FE  4CDF 0C0C 2372          movem.l   (A7)+,D2/D3/A2/A3
00001802  4E75      2373          rts
                    2374   ; }
                    2375   ; void WatchPointDisplay(void)
                    2376   ; {
                    2377   _WatchPointDisplay:
00001804  48E7 3020 2378          movem.l   D2/D3/A2,-(A7)
00001808  45F9 0000 2379          lea       _printf.L,A2
0000180C  3B36      
                    2380   ; int i ;
                    2381   ; int WatchPointsSet = 0 ;
0000180E  4283      2382          clr.l     D3
                    2383   ; // any watchpoints set
                    2384   ; for(i = 0; i < 8; i++)  {
00001810  4282      2385          clr.l     D2
                    2386   WatchPointDisplay_1:
00001812  0C82 0000 2387          cmp.l     #8,D2
00001816  0008      
00001818  6C1C      2388          bge.s     WatchPointDisplay_3
                    2389   ; if(WatchPointSetOrCleared[i] == 1)
0000181A  2002      2390          move.l    D2,D0
0000181C  E588      2391          lsl.l     #2,D0
0000181E  41F9 0803 2392          lea       _WatchPointSetOrCleared.L,A0
00001822  01A2      
00001824  2030 0800 2393          move.l    0(A0,D0.L),D0
00001828  0C80 0000 2394          cmp.l     #1,D0
0000182C  0001      
0000182E  6602      2395          bne.s     WatchPointDisplay_4
                    2396   ; WatchPointsSet = 1;
00001830  7601      2397          moveq     #1,D3
                    2398   WatchPointDisplay_4:
00001832  5282      2399          addq.l    #1,D2
00001834  60DC      2400          bra       WatchPointDisplay_1
                    2401   WatchPointDisplay_3:
                    2402   ; }
                    2403   ; if(WatchPointsSet == 1) {
00001836  0C83 0000 2404          cmp.l     #1,D3
0000183A  0001      
0000183C  6616      2405          bne.s     WatchPointDisplay_6
                    2406   ; printf("\r\nNum     Address") ;
0000183E  4879 0000 2407          pea       @m68kde~1_57.L
00001842  497A      
00001844  4E92      2408          jsr       (A2)
00001846  584F      2409          addq.w    #4,A7
                    2410   ; printf("\r\n---     ---------") ;
00001848  4879 0000 2411          pea       @m68kde~1_58.L
0000184C  498C      
0000184E  4E92      2412          jsr       (A2)
00001850  584F      2413          addq.w    #4,A7
00001852  600A      2414          bra.s     WatchPointDisplay_7
                    2415   WatchPointDisplay_6:
                    2416   ; }
                    2417   ; else
                    2418   ; printf("\r\nNo WatchPoints Set") ;
00001854  4879 0000 2419          pea       @m68kde~1_59.L
00001858  49A0      
0000185A  4E92      2420          jsr       (A2)
0000185C  584F      2421          addq.w    #4,A7
                    2422   WatchPointDisplay_7:
                    2423   ; for(i = 0; i < 8; i++)  {
0000185E  4282      2424          clr.l     D2
                    2425   WatchPointDisplay_8:
00001860  0C82 0000 2426          cmp.l     #8,D2
00001864  0008      
00001866  6C00 0038 2427          bge       WatchPointDisplay_10
                    2428   ; if(WatchPointSetOrCleared[i] == 1)
0000186A  2002      2429          move.l    D2,D0
0000186C  E588      2430          lsl.l     #2,D0
0000186E  41F9 0803 2431          lea       _WatchPointSetOrCleared.L,A0
00001872  01A2      
00001874  2030 0800 2432          move.l    0(A0,D0.L),D0
00001878  0C80 0000 2433          cmp.l     #1,D0
0000187C  0001      
0000187E  661C      2434          bne.s     WatchPointDisplay_11
                    2435   ; printf("\r\n%3d     $%08x",i, WatchPointAddress[i]) ;
00001880  2202      2436          move.l    D2,D1
00001882  E589      2437          lsl.l     #2,D1
00001884  41F9 0803 2438          lea       _WatchPointAddress.L,A0
00001888  0182      
0000188A  2F30 1800 2439          move.l    0(A0,D1.L),-(A7)
0000188E  2F02      2440          move.l    D2,-(A7)
00001890  4879 0000 2441          pea       @m68kde~1_56.L
00001894  496A      
00001896  4E92      2442          jsr       (A2)
00001898  DEFC 000C 2443          add.w     #12,A7
                    2444   WatchPointDisplay_11:
0000189C  5282      2445          addq.l    #1,D2
0000189E  60C0      2446          bra       WatchPointDisplay_8
                    2447   WatchPointDisplay_10:
                    2448   ; }
                    2449   ; printf("\r\n") ;
000018A0  4879 0000 2450          pea       @m68kde~1_6.L
000018A4  4486      
000018A6  4E92      2451          jsr       (A2)
000018A8  584F      2452          addq.w    #4,A7
000018AA  4CDF 040C 2453          movem.l   (A7)+,D2/D3/A2
000018AE  4E75      2454          rts
                    2455   ; }
                    2456   ; void BreakPointClear(void)
                    2457   ; {
                    2458   _BreakPointClear:
000018B0  4E56 FFFC 2459          link      A6,#-4
000018B4  48E7 2020 2460          movem.l   D2/A2,-(A7)
000018B8  45F9 0000 2461          lea       _printf.L,A2
000018BC  3B36      
                    2462   ; unsigned int i ;
                    2463   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2464   ; BreakPointDisplay() ;
000018BE  4EB8 1730 2465          jsr       _BreakPointDisplay
                    2466   ; printf("\r\nEnter Break Point Number: ") ;
000018C2  4879 0000 2467          pea       @m68kde~1_60.L
000018C6  49B6      
000018C8  4E92      2468          jsr       (A2)
000018CA  584F      2469          addq.w    #4,A7
                    2470   ; i = xtod(_getch()) ;           // get break pointer number
000018CC  2F00      2471          move.l    D0,-(A7)
000018CE  4EB8 0A26 2472          jsr       __getch
000018D2  2200      2473          move.l    D0,D1
000018D4  201F      2474          move.l    (A7)+,D0
000018D6  2F01      2475          move.l    D1,-(A7)
000018D8  4EB8 0A90 2476          jsr       _xtod
000018DC  584F      2477          addq.w    #4,A7
000018DE  C0BC 0000 2478          and.l     #255,D0
000018E2  00FF      
000018E4  2400      2479          move.l    D0,D2
                    2480   ; if((i < 0) || (i > 7))   {
000018E6  0C82 0000 2481          cmp.l     #0,D2
000018EA  0000      
000018EC  6508      2482          blo.s     BreakPointClear_3
000018EE  0C82 0000 2483          cmp.l     #7,D2
000018F2  0007      
000018F4  630E      2484          bls.s     BreakPointClear_1
                    2485   BreakPointClear_3:
                    2486   ; printf("\r\nIllegal Range : Use 0 - 7") ;
000018F6  4879 0000 2487          pea       @m68kde~1_61.L
000018FA  49D4      
000018FC  4E92      2488          jsr       (A2)
000018FE  584F      2489          addq.w    #4,A7
                    2490   ; return ;
00001900  6000 0080 2491          bra       BreakPointClear_4
                    2492   BreakPointClear_1:
                    2493   ; }
                    2494   ; if(BreakPointSetOrCleared[i] == 1)  {       // if break point set
00001904  2002      2495          move.l    D2,D0
00001906  E588      2496          lsl.l     #2,D0
00001908  41F9 0803 2497          lea       _BreakPointSetOrCleared.L,A0
0000190C  015E      
0000190E  2030 0800 2498          move.l    0(A0,D0.L),D0
00001912  0C80 0000 2499          cmp.l     #1,D0
00001916  0001      
00001918  6600 005A 2500          bne       BreakPointClear_5
                    2501   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program we are about to change
0000191C  2002      2502          move.l    D2,D0
0000191E  E588      2503          lsl.l     #2,D0
00001920  41F9 0803 2504          lea       _BreakPointAddress.L,A0
00001924  012E      
00001926  2D70 0800 2505          move.l    0(A0,D0.L),-4(A6)
0000192A  FFFC      
                    2506   ; BreakPointAddress[i] = 0 ;
0000192C  2002      2507          move.l    D2,D0
0000192E  E588      2508          lsl.l     #2,D0
00001930  41F9 0803 2509          lea       _BreakPointAddress.L,A0
00001934  012E      
00001936  42B0 0800 2510          clr.l     0(A0,D0.L)
                    2511   ; BreakPointSetOrCleared[i] = 0 ;
0000193A  2002      2512          move.l    D2,D0
0000193C  E588      2513          lsl.l     #2,D0
0000193E  41F9 0803 2514          lea       _BreakPointSetOrCleared.L,A0
00001942  015E      
00001944  42B0 0800 2515          clr.l     0(A0,D0.L)
                    2516   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
00001948  2002      2517          move.l    D2,D0
0000194A  E388      2518          lsl.l     #1,D0
0000194C  41F9 0803 2519          lea       _BreakPointInstruction.L,A0
00001950  014E      
00001952  226E FFFC 2520          move.l    -4(A6),A1
00001956  32B0 0800 2521          move.w    0(A0,D0.L),(A1)
                    2522   ; BreakPointInstruction[i] = 0 ;
0000195A  2002      2523          move.l    D2,D0
0000195C  E388      2524          lsl.l     #1,D0
0000195E  41F9 0803 2525          lea       _BreakPointInstruction.L,A0
00001962  014E      
00001964  4270 0800 2526          clr.w     0(A0,D0.L)
                    2527   ; printf("\r\nBreak Point Cleared.....\r\n") ;
00001968  4879 0000 2528          pea       @m68kde~1_62.L
0000196C  49F0      
0000196E  4E92      2529          jsr       (A2)
00001970  584F      2530          addq.w    #4,A7
00001972  600A      2531          bra.s     BreakPointClear_6
                    2532   BreakPointClear_5:
                    2533   ; }
                    2534   ; else
                    2535   ; printf("\r\nBreak Point wasn't Set.....") ;
00001974  4879 0000 2536          pea       @m68kde~1_63.L
00001978  4A0E      
0000197A  4E92      2537          jsr       (A2)
0000197C  584F      2538          addq.w    #4,A7
                    2539   BreakPointClear_6:
                    2540   ; BreakPointDisplay() ;
0000197E  4EB8 1730 2541          jsr       _BreakPointDisplay
                    2542   ; return ;
                    2543   BreakPointClear_4:
00001982  4CDF 0404 2544          movem.l   (A7)+,D2/A2
00001986  4E5E      2545          unlk      A6
00001988  4E75      2546          rts
                    2547   ; }
                    2548   ; void WatchPointClear(void)
                    2549   ; {
                    2550   _WatchPointClear:
0000198A  48E7 2020 2551          movem.l   D2/A2,-(A7)
0000198E  45F9 0000 2552          lea       _printf.L,A2
00001992  3B36      
                    2553   ; unsigned int i ;
                    2554   ; WatchPointDisplay() ;
00001994  4EB8 1804 2555          jsr       _WatchPointDisplay
                    2556   ; printf("\r\nEnter Watch Point Number: ") ;
00001998  4879 0000 2557          pea       @m68kde~1_64.L
0000199C  4A2C      
0000199E  4E92      2558          jsr       (A2)
000019A0  584F      2559          addq.w    #4,A7
                    2560   ; i = xtod(_getch()) ;           // get watch pointer number
000019A2  2F00      2561          move.l    D0,-(A7)
000019A4  4EB8 0A26 2562          jsr       __getch
000019A8  2200      2563          move.l    D0,D1
000019AA  201F      2564          move.l    (A7)+,D0
000019AC  2F01      2565          move.l    D1,-(A7)
000019AE  4EB8 0A90 2566          jsr       _xtod
000019B2  584F      2567          addq.w    #4,A7
000019B4  C0BC 0000 2568          and.l     #255,D0
000019B8  00FF      
000019BA  2400      2569          move.l    D0,D2
                    2570   ; if((i < 0) || (i > 7))   {
000019BC  0C82 0000 2571          cmp.l     #0,D2
000019C0  0000      
000019C2  6508      2572          blo.s     WatchPointClear_3
000019C4  0C82 0000 2573          cmp.l     #7,D2
000019C8  0007      
000019CA  630E      2574          bls.s     WatchPointClear_1
                    2575   WatchPointClear_3:
                    2576   ; printf("\r\nIllegal Range : Use 0 - 7") ;
000019CC  4879 0000 2577          pea       @m68kde~1_61.L
000019D0  49D4      
000019D2  4E92      2578          jsr       (A2)
000019D4  584F      2579          addq.w    #4,A7
                    2580   ; return ;
000019D6  6000 004E 2581          bra       WatchPointClear_4
                    2582   WatchPointClear_1:
                    2583   ; }
                    2584   ; if(WatchPointSetOrCleared[i] == 1)  {       // if watch point set
000019DA  2002      2585          move.l    D2,D0
000019DC  E588      2586          lsl.l     #2,D0
000019DE  41F9 0803 2587          lea       _WatchPointSetOrCleared.L,A0
000019E2  01A2      
000019E4  2030 0800 2588          move.l    0(A0,D0.L),D0
000019E8  0C80 0000 2589          cmp.l     #1,D0
000019EC  0001      
000019EE  6628      2590          bne.s     WatchPointClear_5
                    2591   ; WatchPointAddress[i] = 0 ;
000019F0  2002      2592          move.l    D2,D0
000019F2  E588      2593          lsl.l     #2,D0
000019F4  41F9 0803 2594          lea       _WatchPointAddress.L,A0
000019F8  0182      
000019FA  42B0 0800 2595          clr.l     0(A0,D0.L)
                    2596   ; WatchPointSetOrCleared[i] = 0 ;
000019FE  2002      2597          move.l    D2,D0
00001A00  E588      2598          lsl.l     #2,D0
00001A02  41F9 0803 2599          lea       _WatchPointSetOrCleared.L,A0
00001A06  01A2      
00001A08  42B0 0800 2600          clr.l     0(A0,D0.L)
                    2601   ; printf("\r\nWatch Point Cleared.....\r\n") ;
00001A0C  4879 0000 2602          pea       @m68kde~1_65.L
00001A10  4A4A      
00001A12  4E92      2603          jsr       (A2)
00001A14  584F      2604          addq.w    #4,A7
00001A16  600A      2605          bra.s     WatchPointClear_6
                    2606   WatchPointClear_5:
                    2607   ; }
                    2608   ; else
                    2609   ; printf("\r\nWatch Point Was not Set.....") ;
00001A18  4879 0000 2610          pea       @m68kde~1_66.L
00001A1C  4A68      
00001A1E  4E92      2611          jsr       (A2)
00001A20  584F      2612          addq.w    #4,A7
                    2613   WatchPointClear_6:
                    2614   ; WatchPointDisplay() ;
00001A22  4EB8 1804 2615          jsr       _WatchPointDisplay
                    2616   ; return ;
                    2617   WatchPointClear_4:
00001A26  4CDF 0404 2618          movem.l   (A7)+,D2/A2
00001A2A  4E75      2619          rts
                    2620   ; }
                    2621   ; void DisableBreakPoints(void)
                    2622   ; {
                    2623   _DisableBreakPoints:
00001A2C  4E56 FFFC 2624          link      A6,#-4
00001A30  2F02      2625          move.l    D2,-(A7)
                    2626   ; int i ;
                    2627   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2628   ; for(i = 0; i < 8; i++)  {
00001A32  4282      2629          clr.l     D2
                    2630   DisableBreakPoints_1:
00001A34  0C82 0000 2631          cmp.l     #8,D2
00001A38  0008      
00001A3A  6C00 003E 2632          bge       DisableBreakPoints_3
                    2633   ; if(BreakPointSetOrCleared[i] == 1)    {                                                    // if break point set
00001A3E  2002      2634          move.l    D2,D0
00001A40  E588      2635          lsl.l     #2,D0
00001A42  41F9 0803 2636          lea       _BreakPointSetOrCleared.L,A0
00001A46  015E      
00001A48  2030 0800 2637          move.l    0(A0,D0.L),D0
00001A4C  0C80 0000 2638          cmp.l     #1,D0
00001A50  0001      
00001A52  6622      2639          bne.s     DisableBreakPoints_4
                    2640   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001A54  2002      2641          move.l    D2,D0
00001A56  E588      2642          lsl.l     #2,D0
00001A58  41F9 0803 2643          lea       _BreakPointAddress.L,A0
00001A5C  012E      
00001A5E  2D70 0800 2644          move.l    0(A0,D0.L),-4(A6)
00001A62  FFFC      
                    2645   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program overwritting the $4e4e
00001A64  2002      2646          move.l    D2,D0
00001A66  E388      2647          lsl.l     #1,D0
00001A68  41F9 0803 2648          lea       _BreakPointInstruction.L,A0
00001A6C  014E      
00001A6E  226E FFFC 2649          move.l    -4(A6),A1
00001A72  32B0 0800 2650          move.w    0(A0,D0.L),(A1)
                    2651   DisableBreakPoints_4:
00001A76  5282      2652          addq.l    #1,D2
00001A78  60BA      2653          bra       DisableBreakPoints_1
                    2654   DisableBreakPoints_3:
00001A7A  241F      2655          move.l    (A7)+,D2
00001A7C  4E5E      2656          unlk      A6
00001A7E  4E75      2657          rts
                    2658   ; }
                    2659   ; }
                    2660   ; }
                    2661   ; void EnableBreakPoints(void)
                    2662   ; {
                    2663   _EnableBreakPoints:
00001A80  4E56 FFFC 2664          link      A6,#-4
00001A84  2F02      2665          move.l    D2,-(A7)
                    2666   ; int i ;
                    2667   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2668   ; for(i = 0; i < 8; i++)  {
00001A86  4282      2669          clr.l     D2
                    2670   EnableBreakPoints_1:
00001A88  0C82 0000 2671          cmp.l     #8,D2
00001A8C  0008      
00001A8E  6C32      2672          bge.s     EnableBreakPoints_3
                    2673   ; if(BreakPointSetOrCleared[i] == 1)    {                                                     // if break point set
00001A90  2002      2674          move.l    D2,D0
00001A92  E588      2675          lsl.l     #2,D0
00001A94  41F9 0803 2676          lea       _BreakPointSetOrCleared.L,A0
00001A98  015E      
00001A9A  2030 0800 2677          move.l    0(A0,D0.L),D0
00001A9E  0C80 0000 2678          cmp.l     #1,D0
00001AA2  0001      
00001AA4  6618      2679          bne.s     EnableBreakPoints_4
                    2680   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001AA6  2002      2681          move.l    D2,D0
00001AA8  E588      2682          lsl.l     #2,D0
00001AAA  41F9 0803 2683          lea       _BreakPointAddress.L,A0
00001AAE  012E      
00001AB0  2D70 0800 2684          move.l    0(A0,D0.L),-4(A6)
00001AB4  FFFC      
                    2685   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e);                              // put the breakpoint back in user program
00001AB6  206E FFFC 2686          move.l    -4(A6),A0
00001ABA  30BC 4E4E 2687          move.w    #20046,(A0)
                    2688   EnableBreakPoints_4:
00001ABE  5282      2689          addq.l    #1,D2
00001AC0  60C6      2690          bra       EnableBreakPoints_1
                    2691   EnableBreakPoints_3:
00001AC2  241F      2692          move.l    (A7)+,D2
00001AC4  4E5E      2693          unlk      A6
00001AC6  4E75      2694          rts
                    2695   ; }
                    2696   ; }
                    2697   ; }
                    2698   ; void KillAllBreakPoints(void)
                    2699   ; {
                    2700   _KillAllBreakPoints:
00001AC8  4E56 FFFC 2701          link      A6,#-4
00001ACC  2F02      2702          move.l    D2,-(A7)
                    2703   ; int i ;
                    2704   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2705   ; for(i = 0; i < 8; i++)  {
00001ACE  4282      2706          clr.l     D2
                    2707   KillAllBreakPoints_1:
00001AD0  0C82 0000 2708          cmp.l     #8,D2
00001AD4  0008      
00001AD6  6C00 0052 2709          bge       KillAllBreakPoints_3
                    2710   ; // clear BP
                    2711   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001ADA  2002      2712          move.l    D2,D0
00001ADC  E588      2713          lsl.l     #2,D0
00001ADE  41F9 0803 2714          lea       _BreakPointAddress.L,A0
00001AE2  012E      
00001AE4  2D70 0800 2715          move.l    0(A0,D0.L),-4(A6)
00001AE8  FFFC      
                    2716   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program
00001AEA  2002      2717          move.l    D2,D0
00001AEC  E388      2718          lsl.l     #1,D0
00001AEE  41F9 0803 2719          lea       _BreakPointInstruction.L,A0
00001AF2  014E      
00001AF4  226E FFFC 2720          move.l    -4(A6),A1
00001AF8  32B0 0800 2721          move.w    0(A0,D0.L),(A1)
                    2722   ; BreakPointAddress[i] = 0 ;                                                             // set BP address to NULL
00001AFC  2002      2723          move.l    D2,D0
00001AFE  E588      2724          lsl.l     #2,D0
00001B00  41F9 0803 2725          lea       _BreakPointAddress.L,A0
00001B04  012E      
00001B06  42B0 0800 2726          clr.l     0(A0,D0.L)
                    2727   ; BreakPointInstruction[i] = 0 ;
00001B0A  2002      2728          move.l    D2,D0
00001B0C  E388      2729          lsl.l     #1,D0
00001B0E  41F9 0803 2730          lea       _BreakPointInstruction.L,A0
00001B12  014E      
00001B14  4270 0800 2731          clr.w     0(A0,D0.L)
                    2732   ; BreakPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00001B18  2002      2733          move.l    D2,D0
00001B1A  E588      2734          lsl.l     #2,D0
00001B1C  41F9 0803 2735          lea       _BreakPointSetOrCleared.L,A0
00001B20  015E      
00001B22  42B0 0800 2736          clr.l     0(A0,D0.L)
00001B26  5282      2737          addq.l    #1,D2
00001B28  60A6      2738          bra       KillAllBreakPoints_1
                    2739   KillAllBreakPoints_3:
00001B2A  241F      2740          move.l    (A7)+,D2
00001B2C  4E5E      2741          unlk      A6
00001B2E  4E75      2742          rts
                    2743   ; }
                    2744   ; //BreakPointDisplay() ;       // display the break points
                    2745   ; }
                    2746   ; void KillAllWatchPoints(void)
                    2747   ; {
                    2748   _KillAllWatchPoints:
00001B30  2F02      2749          move.l    D2,-(A7)
                    2750   ; int i ;
                    2751   ; for(i = 0; i < 8; i++)  {
00001B32  4282      2752          clr.l     D2
                    2753   KillAllWatchPoints_1:
00001B34  0C82 0000 2754          cmp.l     #8,D2
00001B38  0008      
00001B3A  6C20      2755          bge.s     KillAllWatchPoints_3
                    2756   ; WatchPointAddress[i] = 0 ;                                                             // set BP address to NULL
00001B3C  2002      2757          move.l    D2,D0
00001B3E  E588      2758          lsl.l     #2,D0
00001B40  41F9 0803 2759          lea       _WatchPointAddress.L,A0
00001B44  0182      
00001B46  42B0 0800 2760          clr.l     0(A0,D0.L)
                    2761   ; WatchPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00001B4A  2002      2762          move.l    D2,D0
00001B4C  E588      2763          lsl.l     #2,D0
00001B4E  41F9 0803 2764          lea       _WatchPointSetOrCleared.L,A0
00001B52  01A2      
00001B54  42B0 0800 2765          clr.l     0(A0,D0.L)
00001B58  5282      2766          addq.l    #1,D2
00001B5A  60D8      2767          bra       KillAllWatchPoints_1
                    2768   KillAllWatchPoints_3:
00001B5C  241F      2769          move.l    (A7)+,D2
00001B5E  4E75      2770          rts
                    2771   ; }
                    2772   ; //WatchPointDisplay() ;       // display the break points
                    2773   ; }
                    2774   ; void SetBreakPoint(void)
                    2775   ; {
                    2776   _SetBreakPoint:
00001B60  4E56 FFFC 2777          link      A6,#-4
00001B64  48E7 3830 2778          movem.l   D2/D3/D4/A2/A3,-(A7)
00001B68  45F9 0000 2779          lea       _printf.L,A2
00001B6C  3B36      
00001B6E  47F9 0803 2780          lea       _BreakPointSetOrCleared.L,A3
00001B72  015E      
                    2781   ; int i ;
                    2782   ; int BPNumber;
                    2783   ; int BPAddress;
                    2784   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2785   ; // see if any free break points
                    2786   ; for(i = 0; i < 8; i ++) {
00001B74  4282      2787          clr.l     D2
                    2788   SetBreakPoint_1:
00001B76  0C82 0000 2789          cmp.l     #8,D2
00001B7A  0008      
00001B7C  6C10      2790          bge.s     SetBreakPoint_3
                    2791   ; if( BreakPointSetOrCleared[i] == 0)
00001B7E  2002      2792          move.l    D2,D0
00001B80  E588      2793          lsl.l     #2,D0
00001B82  2033 0800 2794          move.l    0(A3,D0.L),D0
00001B86  6602      2795          bne.s     SetBreakPoint_4
                    2796   ; break ;         // if spare BP found allow user to set it
00001B88  6004      2797          bra.s     SetBreakPoint_3
                    2798   SetBreakPoint_4:
00001B8A  5282      2799          addq.l    #1,D2
00001B8C  60E8      2800          bra       SetBreakPoint_1
                    2801   SetBreakPoint_3:
                    2802   ; }
                    2803   ; if(i == 8) {
00001B8E  0C82 0000 2804          cmp.l     #8,D2
00001B92  0008      
00001B94  660E      2805          bne.s     SetBreakPoint_6
                    2806   ; printf("\r\nNo FREE Break Points.....") ;
00001B96  4879 0000 2807          pea       @m68kde~1_67.L
00001B9A  4A88      
00001B9C  4E92      2808          jsr       (A2)
00001B9E  584F      2809          addq.w    #4,A7
                    2810   ; return ;
00001BA0  6000 00D6 2811          bra       SetBreakPoint_15
                    2812   SetBreakPoint_6:
                    2813   ; }
                    2814   ; printf("\r\nBreak Point Address: ") ;
00001BA4  4879 0000 2815          pea       @m68kde~1_68.L
00001BA8  4AA4      
00001BAA  4E92      2816          jsr       (A2)
00001BAC  584F      2817          addq.w    #4,A7
                    2818   ; BPAddress = Get8HexDigits(0) ;
00001BAE  42A7      2819          clr.l     -(A7)
00001BB0  4EB8 0B62 2820          jsr       _Get8HexDigits
00001BB4  584F      2821          addq.w    #4,A7
00001BB6  2600      2822          move.l    D0,D3
                    2823   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BPAddress) ;     // point to the instruction in the user program we are about to change
00001BB8  2803      2824          move.l    D3,D4
                    2825   ; if((BPAddress & 0x00000001) == 0x00000001)  {   // cannot set BP at an odd address
00001BBA  2003      2826          move.l    D3,D0
00001BBC  C0BC 0000 2827          and.l     #1,D0
00001BC0  0001      
00001BC2  0C80 0000 2828          cmp.l     #1,D0
00001BC6  0001      
00001BC8  660E      2829          bne.s     SetBreakPoint_9
                    2830   ; printf("\r\nError : Break Points CANNOT be set at ODD addresses") ;
00001BCA  4879 0000 2831          pea       @m68kde~1_69.L
00001BCE  4ABC      
00001BD0  4E92      2832          jsr       (A2)
00001BD2  584F      2833          addq.w    #4,A7
                    2834   ; return ;
00001BD4  6000 00A2 2835          bra       SetBreakPoint_15
                    2836   SetBreakPoint_9:
                    2837   ; }
                    2838   ; if(BPAddress < 0x00008000)  {   // cannot set BP in ROM
00001BD8  0C83 0000 2839          cmp.l     #32768,D3
00001BDC  8000      
00001BDE  640E      2840          bhs.s     SetBreakPoint_11
                    2841   ; printf("\r\nError : Break Points CANNOT be set for ROM in Range : [$0-$00007FFF]") ;
00001BE0  4879 0000 2842          pea       @m68kde~1_70.L
00001BE4  4AF2      
00001BE6  4E92      2843          jsr       (A2)
00001BE8  584F      2844          addq.w    #4,A7
                    2845   ; return ;
00001BEA  6000 008C 2846          bra       SetBreakPoint_15
                    2847   SetBreakPoint_11:
                    2848   ; }
                    2849   ; // search for first free bp or existing same BP
                    2850   ; for(i = 0; i < 8; i++)  {
00001BEE  4282      2851          clr.l     D2
                    2852   SetBreakPoint_13:
00001BF0  0C82 0000 2853          cmp.l     #8,D2
00001BF4  0008      
00001BF6  6C00 0080 2854          bge       SetBreakPoint_15
                    2855   ; if(BreakPointAddress[i] == BPAddress)   {
00001BFA  2002      2856          move.l    D2,D0
00001BFC  E588      2857          lsl.l     #2,D0
00001BFE  41F9 0803 2858          lea       _BreakPointAddress.L,A0
00001C02  012E      
00001C04  B6B0 0800 2859          cmp.l     0(A0,D0.L),D3
00001C08  6610      2860          bne.s     SetBreakPoint_16
                    2861   ; printf("\r\nError: Break Point Already Exists at Address : %08x\r\n", BPAddress) ;
00001C0A  2F03      2862          move.l    D3,-(A7)
00001C0C  4879 0000 2863          pea       @m68kde~1_71.L
00001C10  4B3A      
00001C12  4E92      2864          jsr       (A2)
00001C14  504F      2865          addq.w    #8,A7
                    2866   ; return ;
00001C16  6000 0060 2867          bra       SetBreakPoint_15
                    2868   SetBreakPoint_16:
                    2869   ; }
                    2870   ; if(BreakPointSetOrCleared[i] == 0) {
00001C1A  2002      2871          move.l    D2,D0
00001C1C  E588      2872          lsl.l     #2,D0
00001C1E  2033 0800 2873          move.l    0(A3,D0.L),D0
00001C22  6600 004E 2874          bne       SetBreakPoint_18
                    2875   ; // set BP here
                    2876   ; BreakPointSetOrCleared[i] = 1 ;                                 // mark this breakpoint as set
00001C26  2002      2877          move.l    D2,D0
00001C28  E588      2878          lsl.l     #2,D0
00001C2A  27BC 0000 2879          move.l    #1,0(A3,D0.L)
00001C2E  0001 0800 
                    2880   ; BreakPointInstruction[i] = *ProgramBreakPointAddress ;          // copy the user program instruction here so we can put it back afterwards
00001C32  2044      2881          move.l    D4,A0
00001C34  2002      2882          move.l    D2,D0
00001C36  E388      2883          lsl.l     #1,D0
00001C38  43F9 0803 2884          lea       _BreakPointInstruction.L,A1
00001C3C  014E      
00001C3E  3390 0800 2885          move.w    (A0),0(A1,D0.L)
                    2886   ; printf("\r\nBreak Point Set at Address: [$%08x]", ProgramBreakPointAddress) ;
00001C42  2F04      2887          move.l    D4,-(A7)
00001C44  4879 0000 2888          pea       @m68kde~1_72.L
00001C48  4B72      
00001C4A  4E92      2889          jsr       (A2)
00001C4C  504F      2890          addq.w    #8,A7
                    2891   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e)    ;   // put a Trap14 instruction at the user specified address
00001C4E  2044      2892          move.l    D4,A0
00001C50  30BC 4E4E 2893          move.w    #20046,(A0)
                    2894   ; BreakPointAddress[i] = BPAddress ;                              // record the address of this break point in the debugger
00001C54  2002      2895          move.l    D2,D0
00001C56  E588      2896          lsl.l     #2,D0
00001C58  41F9 0803 2897          lea       _BreakPointAddress.L,A0
00001C5C  012E      
00001C5E  2183 0800 2898          move.l    D3,0(A0,D0.L)
                    2899   ; printf("\r\n") ;
00001C62  4879 0000 2900          pea       @m68kde~1_6.L
00001C66  4486      
00001C68  4E92      2901          jsr       (A2)
00001C6A  584F      2902          addq.w    #4,A7
                    2903   ; BreakPointDisplay() ;       // display the break points
00001C6C  4EB8 1730 2904          jsr       _BreakPointDisplay
                    2905   ; return ;
00001C70  6006      2906          bra.s     SetBreakPoint_15
                    2907   SetBreakPoint_18:
00001C72  5282      2908          addq.l    #1,D2
00001C74  6000 FF7A 2909          bra       SetBreakPoint_13
                    2910   SetBreakPoint_15:
00001C78  4CDF 0C1C 2911          movem.l   (A7)+,D2/D3/D4/A2/A3
00001C7C  4E5E      2912          unlk      A6
00001C7E  4E75      2913          rts
                    2914   ; }
                    2915   ; }
                    2916   ; }
                    2917   ; void SetWatchPoint(void)
                    2918   ; {
                    2919   _SetWatchPoint:
00001C80  4E56 FFF8 2920          link      A6,#-8
00001C84  48E7 3030 2921          movem.l   D2/D3/A2/A3,-(A7)
00001C88  45F9 0000 2922          lea       _printf.L,A2
00001C8C  3B36      
00001C8E  47F9 0803 2923          lea       _WatchPointSetOrCleared.L,A3
00001C92  01A2      
                    2924   ; int i ;
                    2925   ; int WPNumber;
                    2926   ; int WPAddress;
                    2927   ; volatile unsigned short int *ProgramWatchPointAddress ;
                    2928   ; // see if any free break points
                    2929   ; for(i = 0; i < 8; i ++) {
00001C94  4282      2930          clr.l     D2
                    2931   SetWatchPoint_1:
00001C96  0C82 0000 2932          cmp.l     #8,D2
00001C9A  0008      
00001C9C  6C10      2933          bge.s     SetWatchPoint_3
                    2934   ; if( WatchPointSetOrCleared[i] == 0)
00001C9E  2002      2935          move.l    D2,D0
00001CA0  E588      2936          lsl.l     #2,D0
00001CA2  2033 0800 2937          move.l    0(A3,D0.L),D0
00001CA6  6602      2938          bne.s     SetWatchPoint_4
                    2939   ; break ;         // if spare WP found allow user to set it
00001CA8  6004      2940          bra.s     SetWatchPoint_3
                    2941   SetWatchPoint_4:
00001CAA  5282      2942          addq.l    #1,D2
00001CAC  60E8      2943          bra       SetWatchPoint_1
                    2944   SetWatchPoint_3:
                    2945   ; }
                    2946   ; if(i == 8) {
00001CAE  0C82 0000 2947          cmp.l     #8,D2
00001CB2  0008      
00001CB4  660E      2948          bne.s     SetWatchPoint_6
                    2949   ; printf("\r\nNo FREE Watch Points.....") ;
00001CB6  4879 0000 2950          pea       @m68kde~1_73.L
00001CBA  4B98      
00001CBC  4E92      2951          jsr       (A2)
00001CBE  584F      2952          addq.w    #4,A7
                    2953   ; return ;
00001CC0  6000 008C 2954          bra       SetWatchPoint_11
                    2955   SetWatchPoint_6:
                    2956   ; }
                    2957   ; printf("\r\nWatch Point Address: ") ;
00001CC4  4879 0000 2958          pea       @m68kde~1_74.L
00001CC8  4BB4      
00001CCA  4E92      2959          jsr       (A2)
00001CCC  584F      2960          addq.w    #4,A7
                    2961   ; WPAddress = Get8HexDigits(0) ;
00001CCE  42A7      2962          clr.l     -(A7)
00001CD0  4EB8 0B62 2963          jsr       _Get8HexDigits
00001CD4  584F      2964          addq.w    #4,A7
00001CD6  2600      2965          move.l    D0,D3
                    2966   ; // search for first free wp or existing same wp
                    2967   ; for(i = 0; i < 8; i++)  {
00001CD8  4282      2968          clr.l     D2
                    2969   SetWatchPoint_9:
00001CDA  0C82 0000 2970          cmp.l     #8,D2
00001CDE  0008      
00001CE0  6C00 006C 2971          bge       SetWatchPoint_11
                    2972   ; if(WatchPointAddress[i] == WPAddress && WPAddress != 0)   {     //so we can set a wp at 0
00001CE4  2002      2973          move.l    D2,D0
00001CE6  E588      2974          lsl.l     #2,D0
00001CE8  41F9 0803 2975          lea       _WatchPointAddress.L,A0
00001CEC  0182      
00001CEE  B6B0 0800 2976          cmp.l     0(A0,D0.L),D3
00001CF2  6614      2977          bne.s     SetWatchPoint_12
00001CF4  4A83      2978          tst.l     D3
00001CF6  6710      2979          beq.s     SetWatchPoint_12
                    2980   ; printf("\r\nError: Watch Point Already Set at Address : %08x\r\n", WPAddress) ;
00001CF8  2F03      2981          move.l    D3,-(A7)
00001CFA  4879 0000 2982          pea       @m68kde~1_75.L
00001CFE  4BCC      
00001D00  4E92      2983          jsr       (A2)
00001D02  504F      2984          addq.w    #8,A7
                    2985   ; return ;
00001D04  6000 0048 2986          bra       SetWatchPoint_11
                    2987   SetWatchPoint_12:
                    2988   ; }
                    2989   ; if(WatchPointSetOrCleared[i] == 0) {
00001D08  2002      2990          move.l    D2,D0
00001D0A  E588      2991          lsl.l     #2,D0
00001D0C  2033 0800 2992          move.l    0(A3,D0.L),D0
00001D10  6600 0038 2993          bne       SetWatchPoint_14
                    2994   ; WatchPointSetOrCleared[i] = 1 ;                                 // mark this watchpoint as set
00001D14  2002      2995          move.l    D2,D0
00001D16  E588      2996          lsl.l     #2,D0
00001D18  27BC 0000 2997          move.l    #1,0(A3,D0.L)
00001D1C  0001 0800 
                    2998   ; printf("\r\nWatch Point Set at Address: [$%08x]", WPAddress) ;
00001D20  2F03      2999          move.l    D3,-(A7)
00001D22  4879 0000 3000          pea       @m68kde~1_76.L
00001D26  4C02      
00001D28  4E92      3001          jsr       (A2)
00001D2A  504F      3002          addq.w    #8,A7
                    3003   ; WatchPointAddress[i] = WPAddress ;                              // record the address of this watch point in the debugger
00001D2C  2002      3004          move.l    D2,D0
00001D2E  E588      3005          lsl.l     #2,D0
00001D30  41F9 0803 3006          lea       _WatchPointAddress.L,A0
00001D34  0182      
00001D36  2183 0800 3007          move.l    D3,0(A0,D0.L)
                    3008   ; printf("\r\n") ;
00001D3A  4879 0000 3009          pea       @m68kde~1_6.L
00001D3E  4486      
00001D40  4E92      3010          jsr       (A2)
00001D42  584F      3011          addq.w    #4,A7
                    3012   ; WatchPointDisplay() ;       // display the break points
00001D44  4EB8 1804 3013          jsr       _WatchPointDisplay
                    3014   ; return ;
00001D48  6004      3015          bra.s     SetWatchPoint_11
                    3016   SetWatchPoint_14:
00001D4A  5282      3017          addq.l    #1,D2
00001D4C  608C      3018          bra       SetWatchPoint_9
                    3019   SetWatchPoint_11:
00001D4E  4CDF 0C0C 3020          movem.l   (A7)+,D2/D3/A2/A3
00001D52  4E5E      3021          unlk      A6
00001D54  4E75      3022          rts
                    3023   ; }
                    3024   ; }
                    3025   ; }
                    3026   ; void HandleBreakPoint(void)
                    3027   ; {
                    3028   _HandleBreakPoint:
00001D56  4E56 FFFC 3029          link      A6,#-4
00001D5A  48E7 0038 3030          movem.l   A2/A3/A4,-(A7)
00001D5E  45F9 0803 3031          lea       _i.L,A2
00001D62  00C4      
00001D64  47F9 0000 3032          lea       _printf.L,A3
00001D68  3B36      
00001D6A  49F9 0803 3033          lea       _PC.L,A4
00001D6E  0120      
                    3034   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3035   ; // now we have to put the break point back to run the instruction
                    3036   ; // PC will contain the address of the TRAP instruction but advanced by two bytes so lets play with that
                    3037   ; PC = PC - 2 ;  // ready for user to resume after reaching breakpoint
00001D70  5594      3038          subq.l    #2,(A4)
                    3039   ; printf("\r\n\r\n\r\n\r\n@BREAKPOINT") ;
00001D72  4879 0000 3040          pea       @m68kde~1_77.L
00001D76  4C28      
00001D78  4E93      3041          jsr       (A3)
00001D7A  584F      3042          addq.w    #4,A7
                    3043   ; printf("\r\nSingle Step : [ON]") ;
00001D7C  4879 0000 3044          pea       @m68kde~1_78.L
00001D80  4C3C      
00001D82  4E93      3045          jsr       (A3)
00001D84  584F      3046          addq.w    #4,A7
                    3047   ; printf("\r\nBreakPoints : [Enabled]") ;
00001D86  4879 0000 3048          pea       @m68kde~1_79.L
00001D8A  4C52      
00001D8C  4E93      3049          jsr       (A3)
00001D8E  584F      3050          addq.w    #4,A7
                    3051   ; // now clear the break point (put original instruction back)
                    3052   ; ProgramBreakPointAddress = PC ;
00001D90  2D54 FFFC 3053          move.l    (A4),-4(A6)
                    3054   ; for(i = 0; i < 8; i ++) {
00001D94  4292      3055          clr.l     (A2)
                    3056   HandleBreakPoint_1:
00001D96  2012      3057          move.l    (A2),D0
00001D98  0C80 0000 3058          cmp.l     #8,D0
00001D9C  0008      
00001D9E  6400 0056 3059          bhs       HandleBreakPoint_3
                    3060   ; if(BreakPointAddress[i] == PC) {        // if we have found the breakpoint
00001DA2  2012      3061          move.l    (A2),D0
00001DA4  E588      3062          lsl.l     #2,D0
00001DA6  41F9 0803 3063          lea       _BreakPointAddress.L,A0
00001DAA  012E      
00001DAC  2230 0800 3064          move.l    0(A0,D0.L),D1
00001DB0  B294      3065          cmp.l     (A4),D1
00001DB2  6600 003E 3066          bne       HandleBreakPoint_4
                    3067   ; BreakPointAddress[i] = 0 ;
00001DB6  2012      3068          move.l    (A2),D0
00001DB8  E588      3069          lsl.l     #2,D0
00001DBA  41F9 0803 3070          lea       _BreakPointAddress.L,A0
00001DBE  012E      
00001DC0  42B0 0800 3071          clr.l     0(A0,D0.L)
                    3072   ; BreakPointSetOrCleared[i] = 0 ;
00001DC4  2012      3073          move.l    (A2),D0
00001DC6  E588      3074          lsl.l     #2,D0
00001DC8  41F9 0803 3075          lea       _BreakPointSetOrCleared.L,A0
00001DCC  015E      
00001DCE  42B0 0800 3076          clr.l     0(A0,D0.L)
                    3077   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
00001DD2  2012      3078          move.l    (A2),D0
00001DD4  E388      3079          lsl.l     #1,D0
00001DD6  41F9 0803 3080          lea       _BreakPointInstruction.L,A0
00001DDA  014E      
00001DDC  226E FFFC 3081          move.l    -4(A6),A1
00001DE0  32B0 0800 3082          move.w    0(A0,D0.L),(A1)
                    3083   ; BreakPointInstruction[i] = 0 ;
00001DE4  2012      3084          move.l    (A2),D0
00001DE6  E388      3085          lsl.l     #1,D0
00001DE8  41F9 0803 3086          lea       _BreakPointInstruction.L,A0
00001DEC  014E      
00001DEE  4270 0800 3087          clr.w     0(A0,D0.L)
                    3088   HandleBreakPoint_4:
00001DF2  5292      3089          addq.l    #1,(A2)
00001DF4  60A0      3090          bra       HandleBreakPoint_1
                    3091   HandleBreakPoint_3:
                    3092   ; }
                    3093   ; }
                    3094   ; DumpRegisters() ;
00001DF6  4EB8 0F82 3095          jsr       _DumpRegisters
                    3096   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
00001DFA  4879 0000 3097          pea       @m68kde~1_41.L
00001DFE  47CE      
00001E00  4E93      3098          jsr       (A3)
00001E02  584F      3099          addq.w    #4,A7
                    3100   ; printf("\r\nPress <ESC> to Resume User Program\r\n") ;
00001E04  4879 0000 3101          pea       @m68kde~1_80.L
00001E08  4C6C      
00001E0A  4E93      3102          jsr       (A3)
00001E0C  584F      3103          addq.w    #4,A7
                    3104   ; menu() ;
00001E0E  4EB9 0000 3105          jsr       _menu
00001E12  1FD6      
00001E14  4CDF 1C00 3106          movem.l   (A7)+,A2/A3/A4
00001E18  4E5E      3107          unlk      A6
00001E1A  4E75      3108          rts
                    3109   ; }
                    3110   ; void UnknownCommand()
                    3111   ; {
                    3112   _UnknownCommand:
                    3113   ; printf("\r\nUnknown Command.....\r\n") ;
00001E1C  4879 0000 3114          pea       @m68kde~1_81.L
00001E20  4C94      
00001E22  4EB9 0000 3115          jsr       _printf
00001E26  3B36      
00001E28  584F      3116          addq.w    #4,A7
                    3117   ; Help() ;
00001E2A  4EB9 0000 3118          jsr       _Help
00001E2E  1F40      
00001E30  4E75      3119          rts
                    3120   ; }
                    3121   ; // system when the users program executes a TRAP #15 instruction to halt program and return to debug monitor
                    3122   ; void CallDebugMonitor(void)
                    3123   ; {
                    3124   _CallDebugMonitor:
                    3125   ; printf("\r\nProgram Ended (TRAP #15)....") ;
00001E32  4879 0000 3126          pea       @m68kde~1_82.L
00001E36  4CAE      
00001E38  4EB9 0000 3127          jsr       _printf
00001E3C  3B36      
00001E3E  584F      3128          addq.w    #4,A7
                    3129   ; menu();
00001E40  4EB9 0000 3130          jsr       _menu
00001E44  1FD6      
00001E46  4E75      3131          rts
                    3132   ; }
                    3133   ; void Breakpoint(void)
                    3134   ; {
                    3135   _Breakpoint:
00001E48  2F02      3136          move.l    D2,-(A7)
                    3137   ; char c;
                    3138   ; c = toupper(_getch());
00001E4A  2F00      3139          move.l    D0,-(A7)
00001E4C  4EB8 0A26 3140          jsr       __getch
00001E50  2200      3141          move.l    D0,D1
00001E52  201F      3142          move.l    (A7)+,D0
00001E54  2F01      3143          move.l    D1,-(A7)
00001E56  4EB9 0000 3144          jsr       _toupper
00001E5A  3B0A      
00001E5C  584F      3145          addq.w    #4,A7
00001E5E  1400      3146          move.b    D0,D2
                    3147   ; if( c == (char)('D'))                                      // BreakPoint Display
00001E60  0C02 0044 3148          cmp.b     #68,D2
00001E64  6608      3149          bne.s     Breakpoint_1
                    3150   ; BreakPointDisplay() ;
00001E66  4EB8 1730 3151          jsr       _BreakPointDisplay
00001E6A  6000 0054 3152          bra       Breakpoint_10
                    3153   Breakpoint_1:
                    3154   ; else if(c == (char)('K')) {                                 // breakpoint Kill
00001E6E  0C02 004B 3155          cmp.b     #75,D2
00001E72  6630      3156          bne.s     Breakpoint_3
                    3157   ; printf("\r\nKill All Break Points...(y/n)?") ;
00001E74  4879 0000 3158          pea       @m68kde~1_83.L
00001E78  4CCE      
00001E7A  4EB9 0000 3159          jsr       _printf
00001E7E  3B36      
00001E80  584F      3160          addq.w    #4,A7
                    3161   ; c = toupper(_getch());
00001E82  2F00      3162          move.l    D0,-(A7)
00001E84  4EB8 0A26 3163          jsr       __getch
00001E88  2200      3164          move.l    D0,D1
00001E8A  201F      3165          move.l    (A7)+,D0
00001E8C  2F01      3166          move.l    D1,-(A7)
00001E8E  4EB9 0000 3167          jsr       _toupper
00001E92  3B0A      
00001E94  584F      3168          addq.w    #4,A7
00001E96  1400      3169          move.b    D0,D2
                    3170   ; if(c == (char)('Y'))
00001E98  0C02 0059 3171          cmp.b     #89,D2
00001E9C  6604      3172          bne.s     Breakpoint_5
                    3173   ; KillAllBreakPoints() ;
00001E9E  4EB8 1AC8 3174          jsr       _KillAllBreakPoints
                    3175   Breakpoint_5:
00001EA2  601C      3176          bra.s     Breakpoint_10
                    3177   Breakpoint_3:
                    3178   ; }
                    3179   ; else if(c == (char)('S')) {
00001EA4  0C02 0053 3180          cmp.b     #83,D2
00001EA8  6606      3181          bne.s     Breakpoint_7
                    3182   ; SetBreakPoint() ;
00001EAA  4EB8 1B60 3183          jsr       _SetBreakPoint
00001EAE  6010      3184          bra.s     Breakpoint_10
                    3185   Breakpoint_7:
                    3186   ; }
                    3187   ; else if(c == (char)('C')) {
00001EB0  0C02 0043 3188          cmp.b     #67,D2
00001EB4  6606      3189          bne.s     Breakpoint_9
                    3190   ; BreakPointClear() ;
00001EB6  4EB8 18B0 3191          jsr       _BreakPointClear
00001EBA  6004      3192          bra.s     Breakpoint_10
                    3193   Breakpoint_9:
                    3194   ; }
                    3195   ; else
                    3196   ; UnknownCommand() ;
00001EBC  4EB8 1E1C 3197          jsr       _UnknownCommand
                    3198   Breakpoint_10:
00001EC0  241F      3199          move.l    (A7)+,D2
00001EC2  4E75      3200          rts
                    3201   ; }
                    3202   ; void Watchpoint(void)
                    3203   ; {
                    3204   _Watchpoint:
00001EC4  2F02      3205          move.l    D2,-(A7)
                    3206   ; char c;
                    3207   ; c = toupper(_getch());
00001EC6  2F00      3208          move.l    D0,-(A7)
00001EC8  4EB8 0A26 3209          jsr       __getch
00001ECC  2200      3210          move.l    D0,D1
00001ECE  201F      3211          move.l    (A7)+,D0
00001ED0  2F01      3212          move.l    D1,-(A7)
00001ED2  4EB9 0000 3213          jsr       _toupper
00001ED6  3B0A      
00001ED8  584F      3214          addq.w    #4,A7
00001EDA  1400      3215          move.b    D0,D2
                    3216   ; if( c == (char)('D'))                                      // WatchPoint Display
00001EDC  0C02 0044 3217          cmp.b     #68,D2
00001EE0  6608      3218          bne.s     Watchpoint_1
                    3219   ; WatchPointDisplay() ;
00001EE2  4EB8 1804 3220          jsr       _WatchPointDisplay
00001EE6  6000 0054 3221          bra       Watchpoint_10
                    3222   Watchpoint_1:
                    3223   ; else if(c == (char)('K')) {                                 // wtahcpoint Kill
00001EEA  0C02 004B 3224          cmp.b     #75,D2
00001EEE  6630      3225          bne.s     Watchpoint_3
                    3226   ; printf("\r\nKill All Watch Points...(y/n)?") ;
00001EF0  4879 0000 3227          pea       @m68kde~1_84.L
00001EF4  4CF0      
00001EF6  4EB9 0000 3228          jsr       _printf
00001EFA  3B36      
00001EFC  584F      3229          addq.w    #4,A7
                    3230   ; c = toupper(_getch());
00001EFE  2F00      3231          move.l    D0,-(A7)
00001F00  4EB8 0A26 3232          jsr       __getch
00001F04  2200      3233          move.l    D0,D1
00001F06  201F      3234          move.l    (A7)+,D0
00001F08  2F01      3235          move.l    D1,-(A7)
00001F0A  4EB9 0000 3236          jsr       _toupper
00001F0E  3B0A      
00001F10  584F      3237          addq.w    #4,A7
00001F12  1400      3238          move.b    D0,D2
                    3239   ; if(c == (char)('Y'))
00001F14  0C02 0059 3240          cmp.b     #89,D2
00001F18  6604      3241          bne.s     Watchpoint_5
                    3242   ; KillAllWatchPoints() ;
00001F1A  4EB8 1B30 3243          jsr       _KillAllWatchPoints
                    3244   Watchpoint_5:
00001F1E  601C      3245          bra.s     Watchpoint_10
                    3246   Watchpoint_3:
                    3247   ; }
                    3248   ; else if(c == (char)('S')) {
00001F20  0C02 0053 3249          cmp.b     #83,D2
00001F24  6606      3250          bne.s     Watchpoint_7
                    3251   ; SetWatchPoint() ;
00001F26  4EB8 1C80 3252          jsr       _SetWatchPoint
00001F2A  6010      3253          bra.s     Watchpoint_10
                    3254   Watchpoint_7:
                    3255   ; }
                    3256   ; else if(c == (char)('C')) {
00001F2C  0C02 0043 3257          cmp.b     #67,D2
00001F30  6606      3258          bne.s     Watchpoint_9
                    3259   ; WatchPointClear() ;
00001F32  4EB8 198A 3260          jsr       _WatchPointClear
00001F36  6004      3261          bra.s     Watchpoint_10
                    3262   Watchpoint_9:
                    3263   ; }
                    3264   ; else
                    3265   ; UnknownCommand() ;
00001F38  4EB8 1E1C 3266          jsr       _UnknownCommand
                    3267   Watchpoint_10:
00001F3C  241F      3268          move.l    (A7)+,D2
00001F3E  4E75      3269          rts
                    3270   ; }
                    3271   ; void Help(void)
                    3272   ; {
                    3273   _Help:
00001F40  48E7 2020 3274          movem.l   D2/A2,-(A7)
00001F44  45F9 0000 3275          lea       _printf.L,A2
00001F48  3B36      
                    3276   ; char *banner = "\r\n----------------------------------------------------------------" ;
00001F4A  41F9 0000 3277          lea       @m68kde~1_85.L,A0
00001F4E  4D12      
00001F50  2408      3278          move.l    A0,D2
                    3279   ; printf(banner) ;
00001F52  2F02      3280          move.l    D2,-(A7)
00001F54  4E92      3281          jsr       (A2)
00001F56  584F      3282          addq.w    #4,A7
                    3283   ; printf("\r\n  Final Project") ;
00001F58  4879 0000 3284          pea       @m68kde~1_86.L
00001F5C  4D56      
00001F5E  4E92      3285          jsr       (A2)
00001F60  584F      3286          addq.w    #4,A7
                    3287   ; printf(banner) ;
00001F62  2F02      3288          move.l    D2,-(A7)
00001F64  4E92      3289          jsr       (A2)
00001F66  584F      3290          addq.w    #4,A7
                    3291   ; printf("\r\n  H    - Say Hello World") ;
00001F68  4879 0000 3292          pea       @m68kde~1_87.L
00001F6C  4D68      
00001F6E  4E92      3293          jsr       (A2)
00001F70  584F      3294          addq.w    #4,A7
                    3295   ; printf(banner) ;
00001F72  2F02      3296          move.l    D2,-(A7)
00001F74  4E92      3297          jsr       (A2)
00001F76  584F      3298          addq.w    #4,A7
                    3299   ; printf("\r\n  T    - Run Tetris Game") ;
00001F78  4879 0000 3300          pea       @m68kde~1_88.L
00001F7C  4D84      
00001F7E  4E92      3301          jsr       (A2)
00001F80  584F      3302          addq.w    #4,A7
                    3303   ; printf(banner) ;
00001F82  2F02      3304          move.l    D2,-(A7)
00001F84  4E92      3305          jsr       (A2)
00001F86  584F      3306          addq.w    #4,A7
00001F88  4CDF 0404 3307          movem.l   (A7)+,D2/A2
00001F8C  4E75      3308          rts
                    3309   ; }
                    3310   ; void writeVGA_debug(int addr, char data, char z) {
                    3311   _writeVGA_debug:
00001F8E  4E56 0000 3312          link      A6,#0
00001F92  2F02      3313          move.l    D2,-(A7)
                    3314   ; char *VGA = (char *)(VGA_ADDRESS + addr * 2);
00001F94  203C FFFF 3315          move.l    #-65536,D0
00001F98  0000      
00001F9A  2F2E 0008 3316          move.l    8(A6),-(A7)
00001F9E  4878 0002 3317          pea       2
00001FA2  4EB9 0000 3318          jsr       LMUL
00001FA6  39D6      
00001FA8  2217      3319          move.l    (A7),D1
00001FAA  504F      3320          addq.w    #8,A7
00001FAC  D081      3321          add.l     D1,D0
00001FAE  2400      3322          move.l    D0,D2
                    3323   ; *(char *)(0xFF030000) = (0xF2 & 0xF8) | z;
00001FB0  303C 00F0 3324          move.w    #240,D0
00001FB4  122E 0013 3325          move.b    19(A6),D1
00001FB8  4881      3326          ext.w     D1
00001FBA  8041      3327          or.w      D1,D0
00001FBC  13C0 FF03 3328          move.b    D0,-16580608
00001FC0  0000      
                    3329   ; *(VGA) = data;
00001FC2  2042      3330          move.l    D2,A0
00001FC4  10AE 000F 3331          move.b    15(A6),(A0)
                    3332   ; *(VGA + 1) = data;
00001FC8  2042      3333          move.l    D2,A0
00001FCA  116E 000F 3334          move.b    15(A6),1(A0)
00001FCE  0001      
00001FD0  241F      3335          move.l    (A7)+,D2
00001FD2  4E5E      3336          unlk      A6
00001FD4  4E75      3337          rts
                    3338   ; }
                    3339   ; void menu(void)
                    3340   ; {
                    3341   _menu:
00001FD6  4E56 FFF4 3342          link      A6,#-12
00001FDA  48E7 3C20 3343          movem.l   D2/D3/D4/D5/A2,-(A7)
00001FDE  45F9 0000 3344          lea       _printf.L,A2
00001FE2  3B36      
                    3345   ; char c, data, z;
                    3346   ; int c1 ;
                    3347   ; int addr, i, j;
                    3348   ; while(1)    {
                    3349   menu_1:
                    3350   ; FlushKeyboard() ;               // dump unread characters from keyboard
00001FE4  4EB8 0A64 3351          jsr       _FlushKeyboard
                    3352   ; printf("\r\n#") ;
00001FE8  4879 0000 3353          pea       @m68kde~1_89.L
00001FEC  4DA0      
00001FEE  4E92      3354          jsr       (A2)
00001FF0  584F      3355          addq.w    #4,A7
                    3356   ; c = toupper(_getch());
00001FF2  2F00      3357          move.l    D0,-(A7)
00001FF4  4EB8 0A26 3358          jsr       __getch
00001FF8  2200      3359          move.l    D0,D1
00001FFA  201F      3360          move.l    (A7)+,D0
00001FFC  2F01      3361          move.l    D1,-(A7)
00001FFE  4EB9 0000 3362          jsr       _toupper
00002002  3B0A      
00002004  584F      3363          addq.w    #4,A7
00002006  1A00      3364          move.b    D0,D5
                    3365   ; if ( c == (char)('T'))  {
00002008  0C05 0054 3366          cmp.b     #84,D5
0000200C  6614      3367          bne.s     menu_4
                    3368   ; printf("\nRunning Tetris Game\n");
0000200E  4879 0000 3369          pea       @m68kde~1_90.L
00002012  4DA4      
00002014  4E92      3370          jsr       (A2)
00002016  584F      3371          addq.w    #4,A7
                    3372   ; tetris_main();
00002018  4EB9 0000 3373          jsr       _tetris_main
0000201C  3614      
                    3374   ; continue;
0000201E  6000 00A2 3375          bra       menu_2
                    3376   menu_4:
                    3377   ; }
                    3378   ; if ( c == (char)('H'))  {
00002022  0C05 0048 3379          cmp.b     #72,D5
00002026  6616      3380          bne.s     menu_6
                    3381   ; printf("\nSaying Hello World\n");
00002028  4879 0000 3382          pea       @m68kde~1_91.L
0000202C  4DBA      
0000202E  4E92      3383          jsr       (A2)
00002030  584F      3384          addq.w    #4,A7
                    3385   ; say_hello();
00002032  4EB8 098A 3386          jsr       _say_hello
                    3387   ; say_world();
00002036  4EB8 09B0 3388          jsr       _say_world
                    3389   ; continue;
0000203A  6000 0086 3390          bra       menu_2
                    3391   menu_6:
                    3392   ; }
                    3393   ; if ( c == (char)('V'))  {
0000203E  0C05 0056 3394          cmp.b     #86,D5
00002042  6600 007A 3395          bne       menu_8
                    3396   ; printf("\nMemory Change in VGA\n");
00002046  4879 0000 3397          pea       @m68kde~1_92.L
0000204A  4DD0      
0000204C  4E92      3398          jsr       (A2)
0000204E  584F      3399          addq.w    #4,A7
                    3400   ; // while (1) {
                    3401   ; //     printf("\nAddress: 0x0000 to 0x0FFF");
                    3402   ; //     addr = Get4HexDigits(0);
                    3403   ; //     printf("\nData: ");
                    3404   ; //     data = Get2HexDigits(0);
                    3405   ; //     writeVGA(addr, data);
                    3406   ; // }
                    3407   ; j = 0;
00002050  4282      3408          clr.l     D2
                    3409   ; z = 0;
00002052  4204      3410          clr.b     D4
                    3411   ; // 一排80个
                    3412   ; // 一共40排
                    3413   ; for (i = 0; i <= 0xFFFF; i++) {
00002054  4283      3414          clr.l     D3
                    3415   menu_10:
00002056  0C83 0000 3416          cmp.l     #65535,D3
0000205A  FFFF      
0000205C  6200 005E 3417          bhi       menu_12
                    3418   ; data = (j + 'A');
00002060  2002      3419          move.l    D2,D0
00002062  0680 0000 3420          add.l     #65,D0
00002066  0041      
00002068  1D40 FFF7 3421          move.b    D0,-9(A6)
                    3422   ; writeVGA_debug(i, data, z);
0000206C  4884      3423          ext.w     D4
0000206E  48C4      3424          ext.l     D4
00002070  2F04      3425          move.l    D4,-(A7)
00002072  122E FFF7 3426          move.b    -9(A6),D1
00002076  4881      3427          ext.w     D1
00002078  48C1      3428          ext.l     D1
0000207A  2F01      3429          move.l    D1,-(A7)
0000207C  2F03      3430          move.l    D3,-(A7)
0000207E  4EB8 1F8E 3431          jsr       _writeVGA_debug
00002082  DEFC 000C 3432          add.w     #12,A7
                    3433   ; ++j; ++z;
00002086  5282      3434          addq.l    #1,D2
00002088  5204      3435          addq.b    #1,D4
                    3436   ; if (z == 8) z = 1;
0000208A  0C04 0008 3437          cmp.b     #8,D4
0000208E  6602      3438          bne.s     menu_13
00002090  7801      3439          moveq     #1,D4
                    3440   menu_13:
                    3441   ; if (j == 26) j = 0;
00002092  0C82 0000 3442          cmp.l     #26,D2
00002096  001A      
00002098  6602      3443          bne.s     menu_15
0000209A  4282      3444          clr.l     D2
                    3445   menu_15:
                    3446   ; printf("\nAddress: 0x%04X, Data: %c", i, j + 'A');
0000209C  2202      3447          move.l    D2,D1
0000209E  0681 0000 3448          add.l     #65,D1
000020A2  0041      
000020A4  2F01      3449          move.l    D1,-(A7)
000020A6  2F03      3450          move.l    D3,-(A7)
000020A8  4879 0000 3451          pea       @m68kde~1_93.L
000020AC  4DE8      
000020AE  4E92      3452          jsr       (A2)
000020B0  DEFC 000C 3453          add.w     #12,A7
                    3454   ; Wait1ms();
000020B4  4EB8 08C6 3455          jsr       _Wait1ms
000020B8  5283      3456          addq.l    #1,D3
000020BA  609A      3457          bra       menu_10
                    3458   menu_12:
                    3459   ; }
                    3460   ; continue;
000020BC  6004      3461          bra.s     menu_2
                    3462   menu_8:
                    3463   ; }
                    3464   ; // if ( c == (char)('M'))  {
                    3465   ; //     while (1){
                    3466   ; //         *(char *)(VGA_ADDRESS) = 0x41;
                    3467   ; //         printf("\nAddress: %ld", VGA_ADDRESS);
                    3468   ; //     }
                    3469   ; //     continue;
                    3470   ; // }
                    3471   ; // if ( c == (char)('S'))  {
                    3472   ; //     printf("\nSasha\n");
                    3473   ; //     say_Sasha();
                    3474   ; //     cursor_x = cx;
                    3475   ; //     cursor_y = cy;
                    3476   ; //     while (1) {
                    3477   ; //         FlushKeyboard() ;               // dump unread characters from keyboard
                    3478   ; //         printf("\r\n#") ;
                    3479   ; //         c = toupper(_getch());
                    3480   ; //         if (c == (char)('W')) {
                    3481   ; //             cy -= 1;
                    3482   ; //             printf("\nMove Up, cy = %d\n", cy);
                    3483   ; //             cursor_y = cy;
                    3484   ; //             continue;
                    3485   ; //         }
                    3486   ; //         if (c == (char)('S')) {
                    3487   ; //             cy += 1;
                    3488   ; //             printf("\nMove Down, cy = %d\n", cy);
                    3489   ; //             cursor_y = cy;
                    3490   ; //             continue;
                    3491   ; //         }
                    3492   ; //         if (c == (char)('A')) {
                    3493   ; //             cx -= 1;
                    3494   ; //             printf("\nMove Left, cx = %d\n", cx);
                    3495   ; //             cursor_x = cx;
                    3496   ; //             continue;
                    3497   ; //         }
                    3498   ; //         if (c == (char)('D')) {
                    3499   ; //             cx += 1;
                    3500   ; //             printf("\nMove Right, cx = %d\n", cx);
                    3501   ; //             cursor_x = cx;
                    3502   ; //             continue;
                    3503   ; //         }
                    3504   ; //     }
                    3505   ; //     continue;
                    3506   ; // }
                    3507   ; UnknownCommand() ;
000020BE  4EB8 1E1C 3508          jsr       _UnknownCommand
                    3509   menu_2:
000020C2  6000 FF20 3510          bra       menu_1
                    3511   ; }
                    3512   ; }
                    3513   ; void PrintErrorMessageandAbort(char *string) {
                    3514   _PrintErrorMessageandAbort:
000020C6  4E56 0000 3515          link      A6,#0
                    3516   ; printf("\r\n\r\nProgram ABORT !!!!!!\r\n") ;
000020CA  4879 0000 3517          pea       @m68kde~1_94.L
000020CE  4E04      
000020D0  4EB9 0000 3518          jsr       _printf
000020D4  3B36      
000020D6  584F      3519          addq.w    #4,A7
                    3520   ; printf("%s\r\n", string) ;
000020D8  2F2E 0008 3521          move.l    8(A6),-(A7)
000020DC  4879 0000 3522          pea       @m68kde~1_95.L
000020E0  4E20      
000020E2  4EB9 0000 3523          jsr       _printf
000020E6  3B36      
000020E8  504F      3524          addq.w    #8,A7
                    3525   ; menu() ;
000020EA  4EB8 1FD6 3526          jsr       _menu
000020EE  4E5E      3527          unlk      A6
000020F0  4E75      3528          rts
                    3529   ; }
                    3530   ; void IRQMessage(int level) {
                    3531   _IRQMessage:
000020F2  4E56 0000 3532          link      A6,#0
                    3533   ; printf("\r\n\r\nProgram ABORT !!!!!");
000020F6  4879 0000 3534          pea       @m68kde~1_96.L
000020FA  4E26      
000020FC  4EB9 0000 3535          jsr       _printf
00002100  3B36      
00002102  584F      3536          addq.w    #4,A7
                    3537   ; printf("\r\nUnhandled Interrupt: IRQ%d !!!!!", level) ;
00002104  2F2E 0008 3538          move.l    8(A6),-(A7)
00002108  4879 0000 3539          pea       @m68kde~1_97.L
0000210C  4E3E      
0000210E  4EB9 0000 3540          jsr       _printf
00002112  3B36      
00002114  504F      3541          addq.w    #8,A7
                    3542   ; menu() ;
00002116  4EB8 1FD6 3543          jsr       _menu
0000211A  4E5E      3544          unlk      A6
0000211C  4E75      3545          rts
                    3546   ; }
                    3547   ; void UnhandledIRQ1(void) {
                    3548   _UnhandledIRQ1:
                    3549   ; IRQMessage(1);
0000211E  4878 0001 3550          pea       1
00002122  4EB8 20F2 3551          jsr       _IRQMessage
00002126  584F      3552          addq.w    #4,A7
00002128  4E75      3553          rts
                    3554   ; }
                    3555   ; void UnhandledIRQ2(void) {
                    3556   _UnhandledIRQ2:
                    3557   ; IRQMessage(2);
0000212A  4878 0002 3558          pea       2
0000212E  4EB8 20F2 3559          jsr       _IRQMessage
00002132  584F      3560          addq.w    #4,A7
00002134  4E75      3561          rts
                    3562   ; }
                    3563   ; void UnhandledIRQ3(void){
                    3564   _UnhandledIRQ3:
                    3565   ; IRQMessage(3);
00002136  4878 0003 3566          pea       3
0000213A  4EB8 20F2 3567          jsr       _IRQMessage
0000213E  584F      3568          addq.w    #4,A7
00002140  4E75      3569          rts
                    3570   ; }
                    3571   ; void UnhandledIRQ4(void) {
                    3572   _UnhandledIRQ4:
                    3573   ; IRQMessage(4);
00002142  4878 0004 3574          pea       4
00002146  4EB8 20F2 3575          jsr       _IRQMessage
0000214A  584F      3576          addq.w    #4,A7
0000214C  4E75      3577          rts
                    3578   ; }
                    3579   ; void UnhandledIRQ5(void) {
                    3580   _UnhandledIRQ5:
                    3581   ; IRQMessage(5);
0000214E  4878 0005 3582          pea       5
00002152  4EB8 20F2 3583          jsr       _IRQMessage
00002156  584F      3584          addq.w    #4,A7
00002158  4E75      3585          rts
                    3586   ; }
                    3587   ; void UnhandledIRQ6(void) {
                    3588   _UnhandledIRQ6:
                    3589   ; PrintErrorMessageandAbort("ADDRESS ERROR: 16 or 32 Bit Transfer to/from an ODD Address....") ;
0000215A  4879 0000 3590          pea       @m68kde~1_98.L
0000215E  4E62      
00002160  4EB8 20C6 3591          jsr       _PrintErrorMessageandAbort
00002164  584F      3592          addq.w    #4,A7
                    3593   ; menu() ;
00002166  4EB8 1FD6 3594          jsr       _menu
0000216A  4E75      3595          rts
                    3596   ; }
                    3597   ; void UnhandledIRQ7(void) {
                    3598   _UnhandledIRQ7:
                    3599   ; IRQMessage(7);
0000216C  4878 0007 3600          pea       7
00002170  4EB8 20F2 3601          jsr       _IRQMessage
00002174  584F      3602          addq.w    #4,A7
00002176  4E75      3603          rts
                    3604   ; }
                    3605   ; void UnhandledTrap(void) {
                    3606   _UnhandledTrap:
                    3607   ; PrintErrorMessageandAbort("Unhandled Trap !!!!!") ;
00002178  4879 0000 3608          pea       @m68kde~1_99.L
0000217C  4EA2      
0000217E  4EB8 20C6 3609          jsr       _PrintErrorMessageandAbort
00002182  584F      3610          addq.w    #4,A7
00002184  4E75      3611          rts
                    3612   ; }
                    3613   ; void BusError() {
                    3614   _BusError:
                    3615   ; PrintErrorMessageandAbort("BUS Error!") ;
00002186  4879 0000 3616          pea       @m68kde~1_100.L
0000218A  4EB8      
0000218C  4EB8 20C6 3617          jsr       _PrintErrorMessageandAbort
00002190  584F      3618          addq.w    #4,A7
00002192  4E75      3619          rts
                    3620   ; }
                    3621   ; void AddressError() {
                    3622   _AddressError:
                    3623   ; PrintErrorMessageandAbort("ADDRESS Error!") ;
00002194  4879 0000 3624          pea       @m68kde~1_101.L
00002198  4EC4      
0000219A  4EB8 20C6 3625          jsr       _PrintErrorMessageandAbort
0000219E  584F      3626          addq.w    #4,A7
000021A0  4E75      3627          rts
                    3628   ; }
                    3629   ; void IllegalInstruction() {
                    3630   _IllegalInstruction:
                    3631   ; PrintErrorMessageandAbort("ILLEGAL INSTRUCTION") ;
000021A2  4879 0000 3632          pea       @m68kde~1_102.L
000021A6  4ED4      
000021A8  4EB8 20C6 3633          jsr       _PrintErrorMessageandAbort
000021AC  584F      3634          addq.w    #4,A7
000021AE  4E75      3635          rts
                    3636   ; }
                    3637   ; void Dividebyzero() {
                    3638   _Dividebyzero:
                    3639   ; PrintErrorMessageandAbort("DIVIDE BY ZERO") ;
000021B0  4879 0000 3640          pea       @m68kde~1_103.L
000021B4  4EE8      
000021B6  4EB8 20C6 3641          jsr       _PrintErrorMessageandAbort
000021BA  584F      3642          addq.w    #4,A7
000021BC  4E75      3643          rts
                    3644   ; }
                    3645   ; void Check() {
                    3646   _Check:
                    3647   ; PrintErrorMessageandAbort("'CHK' INSTRUCTION") ;
000021BE  4879 0000 3648          pea       @m68kde~1_104.L
000021C2  4EF8      
000021C4  4EB8 20C6 3649          jsr       _PrintErrorMessageandAbort
000021C8  584F      3650          addq.w    #4,A7
000021CA  4E75      3651          rts
                    3652   ; }
                    3653   ; void Trapv() {
                    3654   _Trapv:
                    3655   ; PrintErrorMessageandAbort("TRAPV INSTRUCTION") ;
000021CC  4879 0000 3656          pea       @m68kde~1_105.L
000021D0  4F0A      
000021D2  4EB8 20C6 3657          jsr       _PrintErrorMessageandAbort
000021D6  584F      3658          addq.w    #4,A7
000021D8  4E75      3659          rts
                    3660   ; }
                    3661   ; void PrivError() {
                    3662   _PrivError:
                    3663   ; PrintErrorMessageandAbort("PRIVILEGE VIOLATION") ;
000021DA  4879 0000 3664          pea       @m68kde~1_106.L
000021DE  4F1C      
000021E0  4EB8 20C6 3665          jsr       _PrintErrorMessageandAbort
000021E4  584F      3666          addq.w    #4,A7
000021E6  4E75      3667          rts
                    3668   ; }
                    3669   ; void UnitIRQ() {
                    3670   _UnitIRQ:
                    3671   ; PrintErrorMessageandAbort("UNINITIALISED IRQ") ;
000021E8  4879 0000 3672          pea       @m68kde~1_107.L
000021EC  4F30      
000021EE  4EB8 20C6 3673          jsr       _PrintErrorMessageandAbort
000021F2  584F      3674          addq.w    #4,A7
000021F4  4E75      3675          rts
                    3676   ; }
                    3677   ; void Spurious() {
                    3678   _Spurious:
                    3679   ; PrintErrorMessageandAbort("SPURIOUS IRQ") ;
000021F6  4879 0000 3680          pea       @m68kde~1_108.L
000021FA  4F42      
000021FC  4EB8 20C6 3681          jsr       _PrintErrorMessageandAbort
00002200  584F      3682          addq.w    #4,A7
00002202  4E75      3683          rts
                    3684   ; }
                    3685   ; void main(void)
                    3686   ; {
                    3687   _main:
00002204  4E56 FFF0 3688          link      A6,#-16
00002208  48E7 2020 3689          movem.l   D2/A2,-(A7)
0000220C  45F8 093A 3690          lea       _InstallExceptionHandler.L,A2
                    3691   ; char c ;
                    3692   ; int i, j ;
                    3693   ; char *BugMessage = "CPEN 412 2023W2\r\nTom Wang, 76340348";
00002210  41F9 0000 3694          lea       @m68kde~1_109.L,A0
00002214  4F50      
00002216  2D48 FFF8 3695          move.l    A0,-8(A6)
                    3696   ; char *CopyrightMessage = "Copyright (C) PJ Davies 2016";
0000221A  41F9 0000 3697          lea       @m68kde~1_110.L,A0
0000221E  4F74      
00002220  2D48 FFFC 3698          move.l    A0,-4(A6)
                    3699   ; KillAllBreakPoints() ;
00002224  4EB8 1AC8 3700          jsr       _KillAllBreakPoints
                    3701   ; i = x = y = z = PortA_Count = 0;
00002228  42B9 0803 3702          clr.l     _PortA_Count.L
0000222C  00D4      
0000222E  42B9 0803 3703          clr.l     _z.L
00002232  00D0      
00002234  42B9 0803 3704          clr.l     _y.L
00002238  00CC      
0000223A  42B9 0803 3705          clr.l     _x.L
0000223E  00C8      
00002240  4282      3706          clr.l     D2
                    3707   ; Trace = GoFlag = 0;                       // used in tracing/single stepping
00002242  42B9 0803 3708          clr.l     _GoFlag.L
00002246  00DC      
00002248  42B9 0803 3709          clr.l     _Trace.L
0000224C  00D8      
                    3710   ; Echo = 1 ;
0000224E  23FC 0000 3711          move.l    #1,_Echo.L
00002252  0001 0803 
00002256  00E0      
                    3712   ; // Initialise Breakpoint variables
                    3713   ; for(i = 0; i < 8; i++)  {
00002258  4282      3714          clr.l     D2
                    3715   main_1:
0000225A  0C82 0000 3716          cmp.l     #8,D2
0000225E  0008      
00002260  6C00 004C 3717          bge       main_3
                    3718   ; BreakPointAddress[i] = 0;               //array of 8 breakpoint addresses
00002264  2002      3719          move.l    D2,D0
00002266  E588      3720          lsl.l     #2,D0
00002268  41F9 0803 3721          lea       _BreakPointAddress.L,A0
0000226C  012E      
0000226E  42B0 0800 3722          clr.l     0(A0,D0.L)
                    3723   ; WatchPointAddress[i] = 0 ;
00002272  2002      3724          move.l    D2,D0
00002274  E588      3725          lsl.l     #2,D0
00002276  41F9 0803 3726          lea       _WatchPointAddress.L,A0
0000227A  0182      
0000227C  42B0 0800 3727          clr.l     0(A0,D0.L)
                    3728   ; BreakPointInstruction[i] = 0;           // to hold the instruction at the break point
00002280  2002      3729          move.l    D2,D0
00002282  E388      3730          lsl.l     #1,D0
00002284  41F9 0803 3731          lea       _BreakPointInstruction.L,A0
00002288  014E      
0000228A  4270 0800 3732          clr.w     0(A0,D0.L)
                    3733   ; BreakPointSetOrCleared[i] = 0;          // indicates if break point set
0000228E  2002      3734          move.l    D2,D0
00002290  E588      3735          lsl.l     #2,D0
00002292  41F9 0803 3736          lea       _BreakPointSetOrCleared.L,A0
00002296  015E      
00002298  42B0 0800 3737          clr.l     0(A0,D0.L)
                    3738   ; WatchPointSetOrCleared[i] = 0;
0000229C  2002      3739          move.l    D2,D0
0000229E  E588      3740          lsl.l     #2,D0
000022A0  41F9 0803 3741          lea       _WatchPointSetOrCleared.L,A0
000022A4  01A2      
000022A6  42B0 0800 3742          clr.l     0(A0,D0.L)
000022AA  5282      3743          addq.l    #1,D2
000022AC  60AC      3744          bra       main_1
                    3745   main_3:
                    3746   ; }
                    3747   ; Init_RS232() ;     // initialise the RS232 port
000022AE  4EB8 09D0 3748          jsr       _Init_RS232
                    3749   ; for( i = 32; i < 48; i++)
000022B2  7420      3750          moveq     #32,D2
                    3751   main_4:
000022B4  0C82 0000 3752          cmp.l     #48,D2
000022B8  0030      
000022BA  6C0E      3753          bge.s     main_6
                    3754   ; InstallExceptionHandler(UnhandledTrap, i) ;		        // install Trap exception handler on vector 32-47
000022BC  2F02      3755          move.l    D2,-(A7)
000022BE  4878 2178 3756          pea       _UnhandledTrap.L
000022C2  4E92      3757          jsr       (A2)
000022C4  504F      3758          addq.w    #8,A7
000022C6  5282      3759          addq.l    #1,D2
000022C8  60EA      3760          bra       main_4
                    3761   main_6:
                    3762   ; InstallExceptionHandler(menu, 47) ;		                   // TRAP #15 call debug and end program
000022CA  4878 002F 3763          pea       47
000022CE  4878 1FD6 3764          pea       _menu.L
000022D2  4E92      3765          jsr       (A2)
000022D4  504F      3766          addq.w    #8,A7
                    3767   ; InstallExceptionHandler(UnhandledIRQ1, 25) ;		      // install handler for interrupts
000022D6  4878 0019 3768          pea       25
000022DA  4878 211E 3769          pea       _UnhandledIRQ1.L
000022DE  4E92      3770          jsr       (A2)
000022E0  504F      3771          addq.w    #8,A7
                    3772   ; InstallExceptionHandler(UnhandledIRQ2, 26) ;		      // install handler for interrupts
000022E2  4878 001A 3773          pea       26
000022E6  4878 212A 3774          pea       _UnhandledIRQ2.L
000022EA  4E92      3775          jsr       (A2)
000022EC  504F      3776          addq.w    #8,A7
                    3777   ; InstallExceptionHandler(UnhandledIRQ3, 27) ;		      // install handler for interrupts
000022EE  4878 001B 3778          pea       27
000022F2  4878 2136 3779          pea       _UnhandledIRQ3.L
000022F6  4E92      3780          jsr       (A2)
000022F8  504F      3781          addq.w    #8,A7
                    3782   ; InstallExceptionHandler(UnhandledIRQ4, 28) ;		      // install handler for interrupts
000022FA  4878 001C 3783          pea       28
000022FE  4878 2142 3784          pea       _UnhandledIRQ4.L
00002302  4E92      3785          jsr       (A2)
00002304  504F      3786          addq.w    #8,A7
                    3787   ; InstallExceptionHandler(UnhandledIRQ5, 29) ;		      // install handler for interrupts
00002306  4878 001D 3788          pea       29
0000230A  4878 214E 3789          pea       _UnhandledIRQ5.L
0000230E  4E92      3790          jsr       (A2)
00002310  504F      3791          addq.w    #8,A7
                    3792   ; InstallExceptionHandler(UnhandledIRQ6, 30) ;		      // install handler for interrupts
00002312  4878 001E 3793          pea       30
00002316  4878 215A 3794          pea       _UnhandledIRQ6.L
0000231A  4E92      3795          jsr       (A2)
0000231C  504F      3796          addq.w    #8,A7
                    3797   ; InstallExceptionHandler(UnhandledIRQ7, 31) ;		      // install handler for interrupts
0000231E  4878 001F 3798          pea       31
00002322  4878 216C 3799          pea       _UnhandledIRQ7.L
00002326  4E92      3800          jsr       (A2)
00002328  504F      3801          addq.w    #8,A7
                    3802   ; InstallExceptionHandler(HandleBreakPoint, 46) ;		           // install Trap 14 Break Point exception handler on vector 46
0000232A  4878 002E 3803          pea       46
0000232E  4878 1D56 3804          pea       _HandleBreakPoint.L
00002332  4E92      3805          jsr       (A2)
00002334  504F      3806          addq.w    #8,A7
                    3807   ; InstallExceptionHandler(DumpRegistersandPause, 29) ;		   // install TRACE handler for IRQ5 on vector 29
00002336  4878 001D 3808          pea       29
0000233A  4878 1436 3809          pea       _DumpRegistersandPause.L
0000233E  4E92      3810          jsr       (A2)
00002340  504F      3811          addq.w    #8,A7
                    3812   ; InstallExceptionHandler(BusError,2) ;                          // install Bus error handler
00002342  4878 0002 3813          pea       2
00002346  4878 2186 3814          pea       _BusError.L
0000234A  4E92      3815          jsr       (A2)
0000234C  504F      3816          addq.w    #8,A7
                    3817   ; InstallExceptionHandler(AddressError,3) ;                      // install address error handler (doesn't work on soft core 68k implementation)
0000234E  4878 0003 3818          pea       3
00002352  4878 2194 3819          pea       _AddressError.L
00002356  4E92      3820          jsr       (A2)
00002358  504F      3821          addq.w    #8,A7
                    3822   ; InstallExceptionHandler(IllegalInstruction,4) ;                // install illegal instruction exception handler
0000235A  4878 0004 3823          pea       4
0000235E  4878 21A2 3824          pea       _IllegalInstruction.L
00002362  4E92      3825          jsr       (A2)
00002364  504F      3826          addq.w    #8,A7
                    3827   ; InstallExceptionHandler(Dividebyzero,5) ;                      // install /0 exception handler
00002366  4878 0005 3828          pea       5
0000236A  4878 21B0 3829          pea       _Dividebyzero.L
0000236E  4E92      3830          jsr       (A2)
00002370  504F      3831          addq.w    #8,A7
                    3832   ; InstallExceptionHandler(Check,6) ;                             // install check instruction exception handler
00002372  4878 0006 3833          pea       6
00002376  4878 21BE 3834          pea       _Check.L
0000237A  4E92      3835          jsr       (A2)
0000237C  504F      3836          addq.w    #8,A7
                    3837   ; InstallExceptionHandler(Trapv,7) ;                             // install trapv instruction exception handler
0000237E  4878 0007 3838          pea       7
00002382  4878 21CC 3839          pea       _Trapv.L
00002386  4E92      3840          jsr       (A2)
00002388  504F      3841          addq.w    #8,A7
                    3842   ; InstallExceptionHandler(PrivError,8) ;                         // install Priv Violation exception handler
0000238A  4878 0008 3843          pea       8
0000238E  4878 21DA 3844          pea       _PrivError.L
00002392  4E92      3845          jsr       (A2)
00002394  504F      3846          addq.w    #8,A7
                    3847   ; InstallExceptionHandler(UnitIRQ,15) ;                          // install uninitialised IRQ exception handler
00002396  4878 000F 3848          pea       15
0000239A  4878 21E8 3849          pea       _UnitIRQ.L
0000239E  4E92      3850          jsr       (A2)
000023A0  504F      3851          addq.w    #8,A7
                    3852   ; InstallExceptionHandler(Check,24) ;                            // install spurious IRQ exception handler
000023A2  4878 0018 3853          pea       24
000023A6  4878 21BE 3854          pea       _Check.L
000023AA  4E92      3855          jsr       (A2)
000023AC  504F      3856          addq.w    #8,A7
                    3857   ; FlushKeyboard() ;                        // dump unread characters from keyboard
000023AE  4EB8 0A64 3858          jsr       _FlushKeyboard
                    3859   ; TraceException = 0 ;                     // clear trace exception port to remove any software generated single step/trace
000023B2  4239 0040 3860          clr.b     4194314
000023B6  000A      
                    3861   ; printf("\r\n%s", BugMessage) ;
000023B8  2F2E FFF8 3862          move.l    -8(A6),-(A7)
000023BC  4879 0000 3863          pea       @m68kde~1_111.L
000023C0  4F92      
000023C2  4EB9 0000 3864          jsr       _printf
000023C6  3B36      
000023C8  504F      3865          addq.w    #8,A7
                    3866   ; printf("\r\n%s", CopyrightMessage) ;
000023CA  2F2E FFFC 3867          move.l    -4(A6),-(A7)
000023CE  4879 0000 3868          pea       @m68kde~1_111.L
000023D2  4F92      
000023D4  4EB9 0000 3869          jsr       _printf
000023D8  3B36      
000023DA  504F      3870          addq.w    #8,A7
                    3871   ; menu();
000023DC  4EB8 1FD6 3872          jsr       _menu
000023E0  4CDF 0404 3873          movem.l   (A7)+,D2/A2
000023E4  4E5E      3874          unlk      A6
000023E6  4E75      3875          rts
                    3876   ; }
                    3877   ; C:\USERS\10054\ONEDRIVE\CPEN 412 FINAL PROJECT\FINAL_PROJECT_2023_SEM2_STUDENT_TEMPLATE\FINAL_PROJECT_2023_SEM2_STUDENT_TEMPLATE\PROGRAMS\DEBUGMONITORCODE\SAY_PHONEME.C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                    3878   ; #include "say_phoneme.h"
                    3879   ; void talkphonemeAA (){ say_phoneme(phoneme_AA  ) ; };
                    3880   _talkphonemeAA:
000023E8  4878 0018 3881          pea       24
000023EC  4EB8 095A 3882          jsr       _say_phoneme
000023F0  584F      3883          addq.w    #4,A7
000023F2  4E75      3884          rts
                    3885   ; void talkphonemeAE (){ say_phoneme(phoneme_AE  ) ; };
                    3886   _talkphonemeAE:
000023F4  4878 001A 3887          pea       26
000023F8  4EB8 095A 3888          jsr       _say_phoneme
000023FC  584F      3889          addq.w    #4,A7
000023FE  4E75      3890          rts
                    3891   ; void talkphonemeAO (){ say_phoneme(phoneme_AO  ) ; };
                    3892   _talkphonemeAO:
00002400  4878 0017 3893          pea       23
00002404  4EB8 095A 3894          jsr       _say_phoneme
00002408  584F      3895          addq.w    #4,A7
0000240A  4E75      3896          rts
                    3897   ; void talkphonemeAR (){ say_phoneme(phoneme_AR  ) ; };
                    3898   _talkphonemeAR:
0000240C  4878 003B 3899          pea       59
00002410  4EB8 095A 3900          jsr       _say_phoneme
00002414  584F      3901          addq.w    #4,A7
00002416  4E75      3902          rts
                    3903   ; void talkphonemeAW (){ say_phoneme(phoneme_AW  ) ; };
                    3904   _talkphonemeAW:
00002418  4878 0020 3905          pea       32
0000241C  4EB8 095A 3906          jsr       _say_phoneme
00002420  584F      3907          addq.w    #4,A7
00002422  4E75      3908          rts
                    3909   ; void talkphonemeAX (){ say_phoneme(phoneme_AX  ) ; };
                    3910   _talkphonemeAX:
00002424  4878 000F 3911          pea       15
00002428  4EB8 095A 3912          jsr       _say_phoneme
0000242C  584F      3913          addq.w    #4,A7
0000242E  4E75      3914          rts
                    3915   ; void talkphonemeAY (){ say_phoneme(phoneme_AY  ) ; };
                    3916   _talkphonemeAY:
00002430  4878 0006 3917          pea       6
00002434  4EB8 095A 3918          jsr       _say_phoneme
00002438  584F      3919          addq.w    #4,A7
0000243A  4E75      3920          rts
                    3921   ; void talkphonemeBB1(){ say_phoneme(phoneme_BB1 ) ; };
                    3922   _talkphonemeBB1:
0000243C  4878 001C 3923          pea       28
00002440  4EB8 095A 3924          jsr       _say_phoneme
00002444  584F      3925          addq.w    #4,A7
00002446  4E75      3926          rts
                    3927   ; void talkphonemeBB2(){ say_phoneme(phoneme_BB2 ) ; };
                    3928   _talkphonemeBB2:
00002448  4878 003F 3929          pea       63
0000244C  4EB8 095A 3930          jsr       _say_phoneme
00002450  584F      3931          addq.w    #4,A7
00002452  4E75      3932          rts
                    3933   ; void talkphonemeCH (){ say_phoneme(phoneme_CH  ) ; };
                    3934   _talkphonemeCH:
00002454  4878 0032 3935          pea       50
00002458  4EB8 095A 3936          jsr       _say_phoneme
0000245C  584F      3937          addq.w    #4,A7
0000245E  4E75      3938          rts
                    3939   ; void talkphonemeDD1(){ say_phoneme(phoneme_DD1 ) ; };
                    3940   _talkphonemeDD1:
00002460  4878 0015 3941          pea       21
00002464  4EB8 095A 3942          jsr       _say_phoneme
00002468  584F      3943          addq.w    #4,A7
0000246A  4E75      3944          rts
                    3945   ; void talkphonemeDD2(){ say_phoneme(phoneme_DD2 ) ; };
                    3946   _talkphonemeDD2:
0000246C  4878 0021 3947          pea       33
00002470  4EB8 095A 3948          jsr       _say_phoneme
00002474  584F      3949          addq.w    #4,A7
00002476  4E75      3950          rts
                    3951   ; void talkphonemeDH1(){ say_phoneme(phoneme_DH1 ) ; };
                    3952   _talkphonemeDH1:
00002478  4878 0012 3953          pea       18
0000247C  4EB8 095A 3954          jsr       _say_phoneme
00002480  584F      3955          addq.w    #4,A7
00002482  4E75      3956          rts
                    3957   ; void talkphonemeDH2(){ say_phoneme(phoneme_DH2 ) ; };
                    3958   _talkphonemeDH2:
00002484  4878 0036 3959          pea       54
00002488  4EB8 095A 3960          jsr       _say_phoneme
0000248C  584F      3961          addq.w    #4,A7
0000248E  4E75      3962          rts
                    3963   ; void talkphonemeEH (){ say_phoneme(phoneme_EH  ) ; };
                    3964   _talkphonemeEH:
00002490  4878 0007 3965          pea       7
00002494  4EB8 095A 3966          jsr       _say_phoneme
00002498  584F      3967          addq.w    #4,A7
0000249A  4E75      3968          rts
                    3969   ; void talkphonemeEL (){ say_phoneme(phoneme_EL  ) ; };
                    3970   _talkphonemeEL:
0000249C  4878 003E 3971          pea       62
000024A0  4EB8 095A 3972          jsr       _say_phoneme
000024A4  584F      3973          addq.w    #4,A7
000024A6  4E75      3974          rts
                    3975   ; void talkphonemeER1(){ say_phoneme(phoneme_ER1 ) ; };
                    3976   _talkphonemeER1:
000024A8  4878 0033 3977          pea       51
000024AC  4EB8 095A 3978          jsr       _say_phoneme
000024B0  584F      3979          addq.w    #4,A7
000024B2  4E75      3980          rts
                    3981   ; void talkphonemeER2(){ say_phoneme(phoneme_ER2 ) ; };
                    3982   _talkphonemeER2:
000024B4  4878 0034 3983          pea       52
000024B8  4EB8 095A 3984          jsr       _say_phoneme
000024BC  584F      3985          addq.w    #4,A7
000024BE  4E75      3986          rts
                    3987   ; void talkphonemeEY (){ say_phoneme(phoneme_EY  ) ; };
                    3988   _talkphonemeEY:
000024C0  4878 0014 3989          pea       20
000024C4  4EB8 095A 3990          jsr       _say_phoneme
000024C8  584F      3991          addq.w    #4,A7
000024CA  4E75      3992          rts
                    3993   ; void talkphonemeFF (){ say_phoneme(phoneme_FF  ) ; };
                    3994   _talkphonemeFF:
000024CC  4878 0028 3995          pea       40
000024D0  4EB8 095A 3996          jsr       _say_phoneme
000024D4  584F      3997          addq.w    #4,A7
000024D6  4E75      3998          rts
                    3999   ; void talkphonemeGG1(){ say_phoneme(phoneme_GG1 ) ; };
                    4000   _talkphonemeGG1:
000024D8  4878 0024 4001          pea       36
000024DC  4EB8 095A 4002          jsr       _say_phoneme
000024E0  584F      4003          addq.w    #4,A7
000024E2  4E75      4004          rts
                    4005   ; void talkphonemeGG2(){ say_phoneme(phoneme_GG2 ) ; };
                    4006   _talkphonemeGG2:
000024E4  4878 003D 4007          pea       61
000024E8  4EB8 095A 4008          jsr       _say_phoneme
000024EC  584F      4009          addq.w    #4,A7
000024EE  4E75      4010          rts
                    4011   ; void talkphonemeGG3(){ say_phoneme(phoneme_GG3 ) ; };
                    4012   _talkphonemeGG3:
000024F0  4878 0022 4013          pea       34
000024F4  4EB8 095A 4014          jsr       _say_phoneme
000024F8  584F      4015          addq.w    #4,A7
000024FA  4E75      4016          rts
                    4017   ; void talkphonemeHH1(){ say_phoneme(phoneme_HH1 ) ; };
                    4018   _talkphonemeHH1:
000024FC  4878 001B 4019          pea       27
00002500  4EB8 095A 4020          jsr       _say_phoneme
00002504  584F      4021          addq.w    #4,A7
00002506  4E75      4022          rts
                    4023   ; void talkphonemeHH2(){ say_phoneme(phoneme_HH2 ) ; };
                    4024   _talkphonemeHH2:
00002508  4878 0039 4025          pea       57
0000250C  4EB8 095A 4026          jsr       _say_phoneme
00002510  584F      4027          addq.w    #4,A7
00002512  4E75      4028          rts
                    4029   ; void talkphonemeIH (){ say_phoneme(phoneme_IH  ) ; };
                    4030   _talkphonemeIH:
00002514  4878 000C 4031          pea       12
00002518  4EB8 095A 4032          jsr       _say_phoneme
0000251C  584F      4033          addq.w    #4,A7
0000251E  4E75      4034          rts
                    4035   ; void talkphonemeIY (){ say_phoneme(phoneme_IY  ) ; };
                    4036   _talkphonemeIY:
00002520  4878 0013 4037          pea       19
00002524  4EB8 095A 4038          jsr       _say_phoneme
00002528  584F      4039          addq.w    #4,A7
0000252A  4E75      4040          rts
                    4041   ; void talkphonemeJH (){ say_phoneme(phoneme_JH  ) ; };
                    4042   _talkphonemeJH:
0000252C  4878 000A 4043          pea       10
00002530  4EB8 095A 4044          jsr       _say_phoneme
00002534  584F      4045          addq.w    #4,A7
00002536  4E75      4046          rts
                    4047   ; void talkphonemeKK1(){ say_phoneme(phoneme_KK1 ) ; };
                    4048   _talkphonemeKK1:
00002538  4878 002A 4049          pea       42
0000253C  4EB8 095A 4050          jsr       _say_phoneme
00002540  584F      4051          addq.w    #4,A7
00002542  4E75      4052          rts
                    4053   ; void talkphonemeKK2(){ say_phoneme(phoneme_KK2 ) ; };
                    4054   _talkphonemeKK2:
00002544  4878 0029 4055          pea       41
00002548  4EB8 095A 4056          jsr       _say_phoneme
0000254C  584F      4057          addq.w    #4,A7
0000254E  4E75      4058          rts
                    4059   ; void talkphonemeKK3(){ say_phoneme(phoneme_KK3 ) ; };
                    4060   _talkphonemeKK3:
00002550  4878 0008 4061          pea       8
00002554  4EB8 095A 4062          jsr       _say_phoneme
00002558  584F      4063          addq.w    #4,A7
0000255A  4E75      4064          rts
                    4065   ; void talkphonemeLL (){ say_phoneme(phoneme_LL  ) ; };
                    4066   _talkphonemeLL:
0000255C  4878 002D 4067          pea       45
00002560  4EB8 095A 4068          jsr       _say_phoneme
00002564  584F      4069          addq.w    #4,A7
00002566  4E75      4070          rts
                    4071   ; void talkphonemeMM (){ say_phoneme(phoneme_MM  ) ; };
                    4072   _talkphonemeMM:
00002568  4878 0010 4073          pea       16
0000256C  4EB8 095A 4074          jsr       _say_phoneme
00002570  584F      4075          addq.w    #4,A7
00002572  4E75      4076          rts
                    4077   ; void talkphonemeNG (){ say_phoneme(phoneme_NG  ) ; };
                    4078   _talkphonemeNG:
00002574  4878 002C 4079          pea       44
00002578  4EB8 095A 4080          jsr       _say_phoneme
0000257C  584F      4081          addq.w    #4,A7
0000257E  4E75      4082          rts
                    4083   ; void talkphonemeNN1(){ say_phoneme(phoneme_NN1 ) ; };
                    4084   _talkphonemeNN1:
00002580  4878 000B 4085          pea       11
00002584  4EB8 095A 4086          jsr       _say_phoneme
00002588  584F      4087          addq.w    #4,A7
0000258A  4E75      4088          rts
                    4089   ; void talkphonemeNN2(){ say_phoneme(phoneme_NN2 ) ; };
                    4090   _talkphonemeNN2:
0000258C  4878 0038 4091          pea       56
00002590  4EB8 095A 4092          jsr       _say_phoneme
00002594  584F      4093          addq.w    #4,A7
00002596  4E75      4094          rts
                    4095   ; void talkphonemeOR (){ say_phoneme(phoneme_OR  ) ; };
                    4096   _talkphonemeOR:
00002598  4878 003A 4097          pea       58
0000259C  4EB8 095A 4098          jsr       _say_phoneme
000025A0  584F      4099          addq.w    #4,A7
000025A2  4E75      4100          rts
                    4101   ; void talkphonemeOW (){ say_phoneme(phoneme_OW  ) ; };
                    4102   _talkphonemeOW:
000025A4  4878 0035 4103          pea       53
000025A8  4EB8 095A 4104          jsr       _say_phoneme
000025AC  584F      4105          addq.w    #4,A7
000025AE  4E75      4106          rts
                    4107   ; void talkphonemeOY (){ say_phoneme(phoneme_OY  ) ; };
                    4108   _talkphonemeOY:
000025B0  4878 0005 4109          pea       5
000025B4  4EB8 095A 4110          jsr       _say_phoneme
000025B8  584F      4111          addq.w    #4,A7
000025BA  4E75      4112          rts
                    4113   ; void talkphonemePP (){ say_phoneme(phoneme_PP  ) ; };
                    4114   _talkphonemePP:
000025BC  4878 0009 4115          pea       9
000025C0  4EB8 095A 4116          jsr       _say_phoneme
000025C4  584F      4117          addq.w    #4,A7
000025C6  4E75      4118          rts
                    4119   ; void talkphonemeRR1(){ say_phoneme(phoneme_RR1 ) ; };
                    4120   _talkphonemeRR1:
000025C8  4878 000E 4121          pea       14
000025CC  4EB8 095A 4122          jsr       _say_phoneme
000025D0  584F      4123          addq.w    #4,A7
000025D2  4E75      4124          rts
                    4125   ; void talkphonemeRR2(){ say_phoneme(phoneme_RR2 ) ; };
                    4126   _talkphonemeRR2:
000025D4  4878 0027 4127          pea       39
000025D8  4EB8 095A 4128          jsr       _say_phoneme
000025DC  584F      4129          addq.w    #4,A7
000025DE  4E75      4130          rts
                    4131   ; void talkphonemeSH (){ say_phoneme(phoneme_SH  ) ; };
                    4132   _talkphonemeSH:
000025E0  4878 0025 4133          pea       37
000025E4  4EB8 095A 4134          jsr       _say_phoneme
000025E8  584F      4135          addq.w    #4,A7
000025EA  4E75      4136          rts
                    4137   ; void talkphonemeSS (){ say_phoneme(phoneme_SS  ) ; };
                    4138   _talkphonemeSS:
000025EC  4878 0037 4139          pea       55
000025F0  4EB8 095A 4140          jsr       _say_phoneme
000025F4  584F      4141          addq.w    #4,A7
000025F6  4E75      4142          rts
                    4143   ; void talkphonemeTH (){ say_phoneme(phoneme_TH  ) ; };
                    4144   _talkphonemeTH:
000025F8  4878 001D 4145          pea       29
000025FC  4EB8 095A 4146          jsr       _say_phoneme
00002600  584F      4147          addq.w    #4,A7
00002602  4E75      4148          rts
                    4149   ; void talkphonemeTT1(){ say_phoneme(phoneme_TT1 ) ; };
                    4150   _talkphonemeTT1:
00002604  4878 0011 4151          pea       17
00002608  4EB8 095A 4152          jsr       _say_phoneme
0000260C  584F      4153          addq.w    #4,A7
0000260E  4E75      4154          rts
                    4155   ; void talkphonemeTT2(){ say_phoneme(phoneme_TT2 ) ; };
                    4156   _talkphonemeTT2:
00002610  4878 000D 4157          pea       13
00002614  4EB8 095A 4158          jsr       _say_phoneme
00002618  584F      4159          addq.w    #4,A7
0000261A  4E75      4160          rts
                    4161   ; void talkphonemeUH (){ say_phoneme(phoneme_UH  ) ; };
                    4162   _talkphonemeUH:
0000261C  4878 001E 4163          pea       30
00002620  4EB8 095A 4164          jsr       _say_phoneme
00002624  584F      4165          addq.w    #4,A7
00002626  4E75      4166          rts
                    4167   ; void talkphonemeUW1(){ say_phoneme(phoneme_UW1 ) ; };
                    4168   _talkphonemeUW1:
00002628  4878 0016 4169          pea       22
0000262C  4EB8 095A 4170          jsr       _say_phoneme
00002630  584F      4171          addq.w    #4,A7
00002632  4E75      4172          rts
                    4173   ; void talkphonemeUW2(){ say_phoneme(phoneme_UW2 ) ; };
                    4174   _talkphonemeUW2:
00002634  4878 001F 4175          pea       31
00002638  4EB8 095A 4176          jsr       _say_phoneme
0000263C  584F      4177          addq.w    #4,A7
0000263E  4E75      4178          rts
                    4179   ; void talkphonemeVV (){ say_phoneme(phoneme_VV  ) ; };
                    4180   _talkphonemeVV:
00002640  4878 0023 4181          pea       35
00002644  4EB8 095A 4182          jsr       _say_phoneme
00002648  584F      4183          addq.w    #4,A7
0000264A  4E75      4184          rts
                    4185   ; void talkphonemeWH (){ say_phoneme(phoneme_WH  ) ; };
                    4186   _talkphonemeWH:
0000264C  4878 0030 4187          pea       48
00002650  4EB8 095A 4188          jsr       _say_phoneme
00002654  584F      4189          addq.w    #4,A7
00002656  4E75      4190          rts
                    4191   ; void talkphonemeWW (){ say_phoneme(phoneme_WW  ) ; };
                    4192   _talkphonemeWW:
00002658  4878 002E 4193          pea       46
0000265C  4EB8 095A 4194          jsr       _say_phoneme
00002660  584F      4195          addq.w    #4,A7
00002662  4E75      4196          rts
                    4197   ; void talkphonemeXR (){ say_phoneme(phoneme_XR  ) ; };
                    4198   _talkphonemeXR:
00002664  4878 002F 4199          pea       47
00002668  4EB8 095A 4200          jsr       _say_phoneme
0000266C  584F      4201          addq.w    #4,A7
0000266E  4E75      4202          rts
                    4203   ; void talkphonemeYR (){ say_phoneme(phoneme_YR  ) ; };
                    4204   _talkphonemeYR:
00002670  4878 003C 4205          pea       60
00002674  4EB8 095A 4206          jsr       _say_phoneme
00002678  584F      4207          addq.w    #4,A7
0000267A  4E75      4208          rts
                    4209   ; void talkphonemeYY1(){ say_phoneme(phoneme_YY1 ) ; };
                    4210   _talkphonemeYY1:
0000267C  4878 0031 4211          pea       49
00002680  4EB8 095A 4212          jsr       _say_phoneme
00002684  584F      4213          addq.w    #4,A7
00002686  4E75      4214          rts
                    4215   ; void talkphonemeYY2(){ say_phoneme(phoneme_YY2 ) ; };
                    4216   _talkphonemeYY2:
00002688  4878 0019 4217          pea       25
0000268C  4EB8 095A 4218          jsr       _say_phoneme
00002690  584F      4219          addq.w    #4,A7
00002692  4E75      4220          rts
                    4221   ; void talkphonemeZH (){ say_phoneme(phoneme_ZH  ) ; };
                    4222   _talkphonemeZH:
00002694  4878 0026 4223          pea       38
00002698  4EB8 095A 4224          jsr       _say_phoneme
0000269C  584F      4225          addq.w    #4,A7
0000269E  4E75      4226          rts
                    4227   ; void talkphonemeZZ (){ say_phoneme(phoneme_ZZ  ) ; };
                    4228   _talkphonemeZZ:
000026A0  4878 002B 4229          pea       43
000026A4  4EB8 095A 4230          jsr       _say_phoneme
000026A8  584F      4231          addq.w    #4,A7
000026AA  4E75      4232          rts
                    4233   ; void talkphonemePA1(){ say_phoneme(phoneme_PA1 ) ; };
                    4234   _talkphonemePA1:
000026AC  42A7      4235          clr.l     -(A7)
000026AE  4EB8 095A 4236          jsr       _say_phoneme
000026B2  584F      4237          addq.w    #4,A7
000026B4  4E75      4238          rts
                    4239   ; void talkphonemePA2(){ say_phoneme(phoneme_PA2 ) ; };
                    4240   _talkphonemePA2:
000026B6  4878 0001 4241          pea       1
000026BA  4EB8 095A 4242          jsr       _say_phoneme
000026BE  584F      4243          addq.w    #4,A7
000026C0  4E75      4244          rts
                    4245   ; void talkphonemePA3(){ say_phoneme(phoneme_PA3 ) ; };
                    4246   _talkphonemePA3:
000026C2  4878 0002 4247          pea       2
000026C6  4EB8 095A 4248          jsr       _say_phoneme
000026CA  584F      4249          addq.w    #4,A7
000026CC  4E75      4250          rts
                    4251   ; void talkphonemePA4(){ say_phoneme(phoneme_PA4 ) ; };
                    4252   _talkphonemePA4:
000026CE  4878 0003 4253          pea       3
000026D2  4EB8 095A 4254          jsr       _say_phoneme
000026D6  584F      4255          addq.w    #4,A7
000026D8  4E75      4256          rts
                    4257   ; void talkphonemePA5(){ say_phoneme(phoneme_PA5 ) ; };
                    4258   _talkphonemePA5:
000026DA  4878 0004 4259          pea       4
000026DE  4EB8 095A 4260          jsr       _say_phoneme
000026E2  584F      4261          addq.w    #4,A7
000026E4  4E75      4262          rts
                    4263   ; void talkword0() {
                    4264   _talkword0:
                    4265   ; talkphonemeZZ  ()   ;
000026E6  4EB8 26A0 4266          jsr       _talkphonemeZZ
                    4267   ; talkphonemeEH  ()   ;
000026EA  4EB8 2490 4268          jsr       _talkphonemeEH
                    4269   ; talkphonemeRR2 ()   ;
000026EE  4EB8 25D4 4270          jsr       _talkphonemeRR2
                    4271   ; talkphonemeOW  ()   ;
000026F2  4EB8 25A4 4272          jsr       _talkphonemeOW
000026F6  4E75      4273          rts
                    4274   ; }
                    4275   ; void talkword1() {
                    4276   _talkword1:
                    4277   ; talkphonemeWW    ()  ;
000026F8  4EB8 2658 4278          jsr       _talkphonemeWW
                    4279   ; talkphonemeAO    ()  ;
000026FC  4EB8 2400 4280          jsr       _talkphonemeAO
                    4281   ; talkphonemeNN1   ()  ;
00002700  4EB8 2580 4282          jsr       _talkphonemeNN1
00002704  4E75      4283          rts
                    4284   ; }
                    4285   ; void talkword2() {
                    4286   _talkword2:
                    4287   ; talkphonemeTT2();
00002706  4EB8 2610 4288          jsr       _talkphonemeTT2
                    4289   ; talkphonemeUW2();
0000270A  4EB8 2634 4290          jsr       _talkphonemeUW2
0000270E  4E75      4291          rts
                    4292   ; }
                    4293   ; void talkword3() {
                    4294   _talkword3:
                    4295   ; talkphonemeTH ();
00002710  4EB8 25F8 4296          jsr       _talkphonemeTH
                    4297   ; talkphonemeRR2();
00002714  4EB8 25D4 4298          jsr       _talkphonemeRR2
                    4299   ; talkphonemeIY ();
00002718  4EB8 2520 4300          jsr       _talkphonemeIY
0000271C  4E75      4301          rts
                    4302   ; }
                    4303   ; void talkword4() {
                    4304   _talkword4:
                    4305   ; talkphonemeFF  ();
0000271E  4EB8 24CC 4306          jsr       _talkphonemeFF
                    4307   ; talkphonemeOR  ();
00002722  4EB8 2598 4308          jsr       _talkphonemeOR
00002726  4E75      4309          rts
                    4310   ; }
                    4311   ; void talkword5() {
                    4312   _talkword5:
                    4313   ; talkphonemeFF();
00002728  4EB8 24CC 4314          jsr       _talkphonemeFF
                    4315   ; talkphonemeAY();
0000272C  4EB8 2430 4316          jsr       _talkphonemeAY
                    4317   ; talkphonemeVV();
00002730  4EB8 2640 4318          jsr       _talkphonemeVV
00002734  4E75      4319          rts
                    4320   ; }
                    4321   ; void talkword6() {
                    4322   _talkword6:
00002736  2F0A      4323          move.l    A2,-(A7)
00002738  45F8 25EC 4324          lea       _talkphonemeSS.L,A2
                    4325   ; talkphonemeSS  ();
0000273C  4E92      4326          jsr       (A2)
                    4327   ; talkphonemeIH  ();
0000273E  4EB8 2514 4328          jsr       _talkphonemeIH
                    4329   ; talkphonemeKK2 ();
00002742  4EB8 2544 4330          jsr       _talkphonemeKK2
                    4331   ; talkphonemeSS  ();
00002746  4E92      4332          jsr       (A2)
                    4333   ; talkphonemeSS  ();
00002748  4E92      4334          jsr       (A2)
0000274A  245F      4335          move.l    (A7)+,A2
0000274C  4E75      4336          rts
                    4337   ; }
                    4338   ; void talkword7() {
                    4339   _talkword7:
                    4340   ; talkphonemeSS    ();
0000274E  4EB8 25EC 4341          jsr       _talkphonemeSS
                    4342   ; talkphonemeEH    ();
00002752  4EB8 2490 4343          jsr       _talkphonemeEH
                    4344   ; talkphonemeVV    ();
00002756  4EB8 2640 4345          jsr       _talkphonemeVV
                    4346   ; talkphonemeAX    ();
0000275A  4EB8 2424 4347          jsr       _talkphonemeAX
                    4348   ; talkphonemeNN1   ();
0000275E  4EB8 2580 4349          jsr       _talkphonemeNN1
00002762  4E75      4350          rts
                    4351   ; }
                    4352   ; void talkword8() {
                    4353   _talkword8:
                    4354   ; talkphonemeEY  ();
00002764  4EB8 24C0 4355          jsr       _talkphonemeEY
                    4356   ; talkphonemeTT1 ();
00002768  4EB8 2604 4357          jsr       _talkphonemeTT1
0000276C  4E75      4358          rts
                    4359   ; }
                    4360   ; void talkword9() {
                    4361   _talkword9:
                    4362   ; talkphonemeNN2();
0000276E  4EB8 258C 4363          jsr       _talkphonemeNN2
                    4364   ; talkphonemeAY ();
00002772  4EB8 2430 4365          jsr       _talkphonemeAY
                    4366   ; talkphonemeNN1();
00002776  4EB8 2580 4367          jsr       _talkphonemeNN1
0000277A  4E75      4368          rts
                    4369   ; }
                    4370   ; void talkword10() {
                    4371   _talkword10:
                    4372   ; talkphonemeTT2 ();
0000277C  4EB8 2610 4373          jsr       _talkphonemeTT2
                    4374   ; talkphonemeEH  ();
00002780  4EB8 2490 4375          jsr       _talkphonemeEH
                    4376   ; talkphonemeNN1 ();
00002784  4EB8 2580 4377          jsr       _talkphonemeNN1
00002788  4E75      4378          rts
                    4379   ; }
                    4380   ; void talkword11() {
                    4381   _talkword11:
                    4382   ; talkphonemeIH ();
0000278A  4EB8 2514 4383          jsr       _talkphonemeIH
                    4384   ; talkphonemeLL ();
0000278E  4EB8 255C 4385          jsr       _talkphonemeLL
                    4386   ; talkphonemeEH ();
00002792  4EB8 2490 4387          jsr       _talkphonemeEH
                    4388   ; talkphonemeVV ();
00002796  4EB8 2640 4389          jsr       _talkphonemeVV
                    4390   ; talkphonemeEH ();
0000279A  4EB8 2490 4391          jsr       _talkphonemeEH
                    4392   ; talkphonemeNN1();
0000279E  4EB8 2580 4393          jsr       _talkphonemeNN1
000027A2  4E75      4394          rts
                    4395   ; }
                    4396   ; void talkword12() {
                    4397   _talkword12:
                    4398   ; talkphonemeTT2 ();
000027A4  4EB8 2610 4399          jsr       _talkphonemeTT2
                    4400   ; talkphonemeWW  ();
000027A8  4EB8 2658 4401          jsr       _talkphonemeWW
                    4402   ; talkphonemeEH  ();
000027AC  4EB8 2490 4403          jsr       _talkphonemeEH
                    4404   ; talkphonemeEL  ();
000027B0  4EB8 249C 4405          jsr       _talkphonemeEL
                    4406   ; talkphonemeVV  ();
000027B4  4EB8 2640 4407          jsr       _talkphonemeVV
000027B8  4E75      4408          rts
                    4409   ; }
                    4410   ; void talkword13() {
                    4411   _talkword13:
                    4412   ; talkphonemeTH  ();
000027BA  4EB8 25F8 4413          jsr       _talkphonemeTH
                    4414   ; talkphonemeER2 ();
000027BE  4EB8 24B4 4415          jsr       _talkphonemeER2
000027C2  4E75      4416          rts
                    4417   ; }
                    4418   ; void talkwordteen() {
                    4419   _talkwordteen:
                    4420   ; talkphonemeTT2   ();
000027C4  4EB8 2610 4421          jsr       _talkphonemeTT2
                    4422   ; talkphonemeIY    ();
000027C8  4EB8 2520 4423          jsr       _talkphonemeIY
                    4424   ; talkphonemeNN1   ();
000027CC  4EB8 2580 4425          jsr       _talkphonemeNN1
000027D0  4E75      4426          rts
                    4427   ; }
                    4428   ; void talkword14() {
                    4429   _talkword14:
                    4430   ; talkword4();
000027D2  4EB8 271E 4431          jsr       _talkword4
                    4432   ; talkwordteen();
000027D6  4EB8 27C4 4433          jsr       _talkwordteen
000027DA  4E75      4434          rts
                    4435   ; }
                    4436   ; void talkword15() {
                    4437   _talkword15:
                    4438   ; talkphonemeFF ();
000027DC  4EB8 24CC 4439          jsr       _talkphonemeFF
                    4440   ; talkphonemeIH ();
000027E0  4EB8 2514 4441          jsr       _talkphonemeIH
                    4442   ; talkphonemeFF ();
000027E4  4EB8 24CC 4443          jsr       _talkphonemeFF
                    4444   ; talkwordteen  ();
000027E8  4EB8 27C4 4445          jsr       _talkwordteen
000027EC  4E75      4446          rts
                    4447   ; }
                    4448   ; void talkword16() {
                    4449   _talkword16:
                    4450   ; talkword6    ();
000027EE  4EB8 2736 4451          jsr       _talkword6
                    4452   ; talkwordteen ();
000027F2  4EB8 27C4 4453          jsr       _talkwordteen
000027F6  4E75      4454          rts
                    4455   ; }
                    4456   ; void talkword17() {
                    4457   _talkword17:
                    4458   ; talkword7      ();
000027F8  4EB8 274E 4459          jsr       _talkword7
                    4460   ; talkwordteen   ();
000027FC  4EB8 27C4 4461          jsr       _talkwordteen
00002800  4E75      4462          rts
                    4463   ; }
                    4464   ; void talkword18() {
                    4465   _talkword18:
                    4466   ; talkword8    ();
00002802  4EB8 2764 4467          jsr       _talkword8
                    4468   ; talkwordteen ();
00002806  4EB8 27C4 4469          jsr       _talkwordteen
0000280A  4E75      4470          rts
                    4471   ; }
                    4472   ; void talkword19() {
                    4473   _talkword19:
                    4474   ; talkword9     ();
0000280C  4EB8 276E 4475          jsr       _talkword9
                    4476   ; talkwordteen  ();
00002810  4EB8 27C4 4477          jsr       _talkwordteen
00002814  4E75      4478          rts
                    4479   ; }
                    4480   ; void talkword20() {
                    4481   _talkword20:
                    4482   ; talkphonemeTT2 ();
00002816  4EB8 2610 4483          jsr       _talkphonemeTT2
                    4484   ; talkphonemeWW  ();
0000281A  4EB8 2658 4485          jsr       _talkphonemeWW
                    4486   ; talkphonemeEH  ();
0000281E  4EB8 2490 4487          jsr       _talkphonemeEH
                    4488   ; talkphonemeNN1 ();
00002822  4EB8 2580 4489          jsr       _talkphonemeNN1
00002826  4E75      4490          rts
                    4491   ; }
                    4492   ; void talkwordty() {
                    4493   _talkwordty:
                    4494   ; talkphonemeTT2 ();
00002828  4EB8 2610 4495          jsr       _talkphonemeTT2
                    4496   ; talkphonemeIY  ();
0000282C  4EB8 2520 4497          jsr       _talkphonemeIY
00002830  4E75      4498          rts
                    4499   ; }
                    4500   ; void talkword30() {
                    4501   _talkword30:
                    4502   ; talkphonemeTH  ();
00002832  4EB8 25F8 4503          jsr       _talkphonemeTH
                    4504   ; talkphonemeER1 ();
00002836  4EB8 24A8 4505          jsr       _talkphonemeER1
                    4506   ; talkwordty     ();
0000283A  4EB8 2828 4507          jsr       _talkwordty
0000283E  4E75      4508          rts
                    4509   ; }
                    4510   ; void talkword40() {
                    4511   _talkword40:
                    4512   ; talkword4  ();
00002840  4EB8 271E 4513          jsr       _talkword4
                    4514   ; talkwordty ();
00002844  4EB8 2828 4515          jsr       _talkwordty
00002848  4E75      4516          rts
                    4517   ; }
                    4518   ; void talkword50() {
                    4519   _talkword50:
                    4520   ; talkphonemeFF ();
0000284A  4EB8 24CC 4521          jsr       _talkphonemeFF
                    4522   ; talkphonemeIH ();
0000284E  4EB8 2514 4523          jsr       _talkphonemeIH
                    4524   ; talkphonemeFF ();
00002852  4EB8 24CC 4525          jsr       _talkphonemeFF
                    4526   ; talkwordty    ();
00002856  4EB8 2828 4527          jsr       _talkwordty
0000285A  4E75      4528          rts
                    4529   ; }
                    4530   ; void talkword60() {
                    4531   _talkword60:
                    4532   ; talkword6  ();
0000285C  4EB8 2736 4533          jsr       _talkword6
                    4534   ; talkwordty ();
00002860  4EB8 2828 4535          jsr       _talkwordty
00002864  4E75      4536          rts
                    4537   ; }
                    4538   ; void talkword70() {
                    4539   _talkword70:
                    4540   ; talkword7  ();
00002866  4EB8 274E 4541          jsr       _talkword7
                    4542   ; talkwordty ();
0000286A  4EB8 2828 4543          jsr       _talkwordty
0000286E  4E75      4544          rts
                    4545   ; }
                    4546   ; void talkword80() {
                    4547   _talkword80:
                    4548   ; talkword8   ();
00002870  4EB8 2764 4549          jsr       _talkword8
                    4550   ; talkwordty  ();
00002874  4EB8 2828 4551          jsr       _talkwordty
00002878  4E75      4552          rts
                    4553   ; }
                    4554   ; void talkword90() {
                    4555   _talkword90:
                    4556   ; talkword9   ();
0000287A  4EB8 276E 4557          jsr       _talkword9
                    4558   ; talkwordty  ();
0000287E  4EB8 2828 4559          jsr       _talkwordty
00002882  4E75      4560          rts
                    4561   ; }
                    4562   ; void talkwordhundred() {
                    4563   _talkwordhundred:
                    4564   ; talkphonemeHH2  ();
00002884  4EB8 2508 4565          jsr       _talkphonemeHH2
                    4566   ; talkphonemeAX   ();
00002888  4EB8 2424 4567          jsr       _talkphonemeAX
                    4568   ; talkphonemeNN1  ();
0000288C  4EB8 2580 4569          jsr       _talkphonemeNN1
                    4570   ; talkphonemeDD2  ();
00002890  4EB8 246C 4571          jsr       _talkphonemeDD2
                    4572   ; talkphonemeRR2  ();
00002894  4EB8 25D4 4573          jsr       _talkphonemeRR2
                    4574   ; talkphonemeDD1  ();
00002898  4EB8 2460 4575          jsr       _talkphonemeDD1
0000289C  4E75      4576          rts
                    4577   ; }
                    4578   ; void talkworddepth() {
                    4579   _talkworddepth:
                    4580   ; talkphonemeDD2   ();
0000289E  4EB8 246C 4581          jsr       _talkphonemeDD2
                    4582   ; talkphonemeEH    ();
000028A2  4EB8 2490 4583          jsr       _talkphonemeEH
                    4584   ; talkphonemeEH    ();
000028A6  4EB8 2490 4585          jsr       _talkphonemeEH
                    4586   ; talkphonemePP    ();
000028AA  4EB8 25BC 4587          jsr       _talkphonemePP
                    4588   ; talkphonemeTH    ();
000028AE  4EB8 25F8 4589          jsr       _talkphonemeTH
                    4590   ; endword          ();
000028B2  4EB9 0000 4591          jsr       _endword
000028B6  2A8E      
000028B8  4E75      4592          rts
                    4593   ; }
                    4594   ; void talkwordpoint() {
                    4595   _talkwordpoint:
                    4596   ; talkphonemePP   ();
000028BA  4EB8 25BC 4597          jsr       _talkphonemePP
                    4598   ; talkphonemeOY   ();
000028BE  4EB8 25B0 4599          jsr       _talkphonemeOY
                    4600   ; talkphonemeTT1  ();
000028C2  4EB8 2604 4601          jsr       _talkphonemeTT1
                    4602   ; endword         ();
000028C6  4EB9 0000 4603          jsr       _endword
000028CA  2A8E      
000028CC  4E75      4604          rts
                    4605   ; }
                    4606   ; void talkwordanchor() {
                    4607   _talkwordanchor:
                    4608   ; talkphonemeEY   ();
000028CE  4EB8 24C0 4609          jsr       _talkphonemeEY
                    4610   ; talkphonemeKK3  ();
000028D2  4EB8 2550 4611          jsr       _talkphonemeKK3
                    4612   ; talkphonemeAE   ();
000028D6  4EB8 23F4 4613          jsr       _talkphonemeAE
                    4614   ; endword         ();
000028DA  4EB9 0000 4615          jsr       _endword
000028DE  2A8E      
000028E0  4E75      4616          rts
                    4617   ; }
                    4618   ; void talkwordalarm() {
                    4619   _talkwordalarm:
                    4620   ; talkphonemeAE  ();
000028E2  4EB8 23F4 4621          jsr       _talkphonemeAE
                    4622   ; talkphonemeLL  ();
000028E6  4EB8 255C 4623          jsr       _talkphonemeLL
                    4624   ; talkphonemeAR  ();
000028EA  4EB8 240C 4625          jsr       _talkphonemeAR
                    4626   ; talkphonemeMM  ();
000028EE  4EB8 2568 4627          jsr       _talkphonemeMM
                    4628   ; endword        ();
000028F2  4EB9 0000 4629          jsr       _endword
000028F6  2A8E      
000028F8  4E75      4630          rts
                    4631   ; }
                    4632   ; void talkwordon() {
                    4633   _talkwordon:
                    4634   ; talkphonemeAO ();
000028FA  4EB8 2400 4635          jsr       _talkphonemeAO
                    4636   ; talkphonemeNG ();
000028FE  4EB8 2574 4637          jsr       _talkphonemeNG
                    4638   ; endword       ();
00002902  4EB9 0000 4639          jsr       _endword
00002906  2A8E      
00002908  4E75      4640          rts
                    4641   ; }
                    4642   ; void talkwordoff() {
                    4643   _talkwordoff:
                    4644   ; talkphonemeAO  ();
0000290A  4EB8 2400 4645          jsr       _talkphonemeAO
                    4646   ; talkphonemeFF  ();
0000290E  4EB8 24CC 4647          jsr       _talkphonemeFF
                    4648   ; talkphonemeFF  ();
00002912  4EB8 24CC 4649          jsr       _talkphonemeFF
                    4650   ; endword        ();
00002916  4EB9 0000 4651          jsr       _endword
0000291A  2A8E      
0000291C  4E75      4652          rts
                    4653   ; }
                    4654   ; void talkwordshallow() {
                    4655   _talkwordshallow:
                    4656   ; talkphonemeSH ();
0000291E  4EB8 25E0 4657          jsr       _talkphonemeSH
                    4658   ; talkphonemeAE ();
00002922  4EB8 23F4 4659          jsr       _talkphonemeAE
                    4660   ; talkphonemeLL ();
00002926  4EB8 255C 4661          jsr       _talkphonemeLL
                    4662   ; talkphonemeOW ();
0000292A  4EB8 25A4 4663          jsr       _talkphonemeOW
                    4664   ; endword       ();
0000292E  4EB9 0000 4665          jsr       _endword
00002932  2A8E      
00002934  4E75      4666          rts
                    4667   ; }
                    4668   ; void talkwordand() {
                    4669   _talkwordand:
                    4670   ; talkphonemeIH    ();
00002936  4EB8 2514 4671          jsr       _talkphonemeIH
                    4672   ; talkphonemeIH    ();
0000293A  4EB8 2514 4673          jsr       _talkphonemeIH
                    4674   ; talkphonemeNN1   ();
0000293E  4EB8 2580 4675          jsr       _talkphonemeNN1
                    4676   ; talkphonemeDD2   ();
00002942  4EB8 246C 4677          jsr       _talkphonemeDD2
                    4678   ; endword          ();
00002946  4EB9 0000 4679          jsr       _endword
0000294A  2A8E      
0000294C  4E75      4680          rts
                    4681   ; }
                    4682   ; void talkwordwatch() {
                    4683   _talkwordwatch:
                    4684   ; talkphonemeWW  ();
0000294E  4EB8 2658 4685          jsr       _talkphonemeWW
                    4686   ; talkphonemeAO  ();
00002952  4EB8 2400 4687          jsr       _talkphonemeAO
                    4688   ; talkphonemeTT1 ();
00002956  4EB8 2604 4689          jsr       _talkphonemeTT1
                    4690   ; talkphonemeCH  ();
0000295A  4EB8 2454 4691          jsr       _talkphonemeCH
                    4692   ; endword        ();
0000295E  4EB9 0000 4693          jsr       _endword
00002962  2A8E      
00002964  4E75      4694          rts
                    4695   ; }
                    4696   ; void talkwordlimit() {
                    4697   _talkwordlimit:
                    4698   ; talkphonemeLL   ();
00002966  4EB8 255C 4699          jsr       _talkphonemeLL
                    4700   ; talkphonemeIH   ();
0000296A  4EB8 2514 4701          jsr       _talkphonemeIH
                    4702   ; talkphonemeMM   ();
0000296E  4EB8 2568 4703          jsr       _talkphonemeMM
                    4704   ; talkphonemeIH   ();
00002972  4EB8 2514 4705          jsr       _talkphonemeIH
                    4706   ; talkphonemeTT1  ();
00002976  4EB8 2604 4707          jsr       _talkphonemeTT1
                    4708   ; endword         ();
0000297A  4EB9 0000 4709          jsr       _endword
0000297E  2A8E      
00002980  4E75      4710          rts
                    4711   ; }
                    4712   ; void talkwordset()  {
                    4713   _talkwordset:
                    4714   ; talkphonemeSS    ();
00002982  4EB8 25EC 4715          jsr       _talkphonemeSS
                    4716   ; talkphonemeSS    ();
00002986  4EB8 25EC 4717          jsr       _talkphonemeSS
                    4718   ; talkphonemeEH    ();
0000298A  4EB8 2490 4719          jsr       _talkphonemeEH
                    4720   ; talkphonemeTT2   ();
0000298E  4EB8 2610 4721          jsr       _talkphonemeTT2
                    4722   ; endword          ();
00002992  4EB9 0000 4723          jsr       _endword
00002996  2A8E      
00002998  4E75      4724          rts
                    4725   ; }
                    4726   ; void talkwordheading() {
                    4727   _talkwordheading:
                    4728   ; talkphonemeHH1   ();
0000299A  4EB8 24FC 4729          jsr       _talkphonemeHH1
                    4730   ; talkphonemeEH    ();
0000299E  4EB8 2490 4731          jsr       _talkphonemeEH
                    4732   ; talkphonemeDD2   ();
000029A2  4EB8 246C 4733          jsr       _talkphonemeDD2
                    4734   ; talkphonemeIH    ();
000029A6  4EB8 2514 4735          jsr       _talkphonemeIH
                    4736   ; talkphonemeNG    ();
000029AA  4EB8 2574 4737          jsr       _talkphonemeNG
                    4738   ; endword          ();
000029AE  4EB9 0000 4739          jsr       _endword
000029B2  2A8E      
000029B4  4E75      4740          rts
                    4741   ; }
                    4742   ; void talkwordgps() {
                    4743   _talkwordgps:
                    4744   ; talkphonemeJH  ();
000029B6  4EB8 252C 4745          jsr       _talkphonemeJH
                    4746   ; talkphonemeIY  ();
000029BA  4EB8 2520 4747          jsr       _talkphonemeIY
                    4748   ; talkphonemePP  ();
000029BE  4EB8 25BC 4749          jsr       _talkphonemePP
                    4750   ; talkphonemeIY  ();
000029C2  4EB8 2520 4751          jsr       _talkphonemeIY
                    4752   ; talkphonemeEH  ();
000029C6  4EB8 2490 4753          jsr       _talkphonemeEH
                    4754   ; talkphonemeSS  ();
000029CA  4EB8 25EC 4755          jsr       _talkphonemeSS
                    4756   ; talkphonemeSS  ();
000029CE  4EB8 25EC 4757          jsr       _talkphonemeSS
                    4758   ; endword        ();
000029D2  4EB9 0000 4759          jsr       _endword
000029D6  2A8E      
000029D8  4E75      4760          rts
                    4761   ; }
                    4762   ; void talkwordno() {
                    4763   _talkwordno:
                    4764   ; talkphonemeNN2  ();
000029DA  4EB8 258C 4765          jsr       _talkphonemeNN2
                    4766   ; talkphonemeOW   ();
000029DE  4EB8 25A4 4767          jsr       _talkphonemeOW
                    4768   ; endword         ();
000029E2  4EB9 0000 4769          jsr       _endword
000029E6  2A8E      
000029E8  4E75      4770          rts
                    4771   ; }
                    4772   ; void talkworddata() {
                    4773   _talkworddata:
                    4774   ; talkphonemeDD2   ();
000029EA  4EB8 246C 4775          jsr       _talkphonemeDD2
                    4776   ; talkphonemeEY    ();
000029EE  4EB8 24C0 4777          jsr       _talkphonemeEY
                    4778   ; talkphonemeTT2   ();
000029F2  4EB8 2610 4779          jsr       _talkphonemeTT2
                    4780   ; talkphonemeAX    ();
000029F6  4EB8 2424 4781          jsr       _talkphonemeAX
                    4782   ; endword          ();
000029FA  4EB9 0000 4783          jsr       _endword
000029FE  2A8E      
00002A00  4E75      4784          rts
                    4785   ; }
                    4786   ; void talkwordnorth() {
                    4787   _talkwordnorth:
                    4788   ; talkphonemeNN2 ();
00002A02  4EB8 258C 4789          jsr       _talkphonemeNN2
                    4790   ; talkphonemeOR  ();
00002A06  4EB8 2598 4791          jsr       _talkphonemeOR
                    4792   ; talkphonemeHH1 ();
00002A0A  4EB8 24FC 4793          jsr       _talkphonemeHH1
                    4794   ; endword        ();
00002A0E  4EB9 0000 4795          jsr       _endword
00002A12  2A8E      
00002A14  4E75      4796          rts
                    4797   ; }
                    4798   ; void talkwordsouth() {
                    4799   _talkwordsouth:
                    4800   ; talkphonemeSS();
00002A16  4EB8 25EC 4801          jsr       _talkphonemeSS
                    4802   ; talkphonemeSS();
00002A1A  4EB8 25EC 4803          jsr       _talkphonemeSS
                    4804   ; talkphonemeAW();
00002A1E  4EB8 2418 4805          jsr       _talkphonemeAW
                    4806   ; talkphonemeTH();
00002A22  4EB8 25F8 4807          jsr       _talkphonemeTH
                    4808   ; talkphonemeTH();
00002A26  4EB8 25F8 4809          jsr       _talkphonemeTH
00002A2A  4E75      4810          rts
                    4811   ; }
                    4812   ; void talkwordeast() {
                    4813   _talkwordeast:
                    4814   ; talkphonemeIY   ();
00002A2C  4EB8 2520 4815          jsr       _talkphonemeIY
                    4816   ; talkphonemeSS   ();
00002A30  4EB8 25EC 4817          jsr       _talkphonemeSS
                    4818   ; talkphonemeSS   ();
00002A34  4EB8 25EC 4819          jsr       _talkphonemeSS
                    4820   ; talkphonemeTT2  ();
00002A38  4EB8 2610 4821          jsr       _talkphonemeTT2
                    4822   ; endword         ();
00002A3C  4EB9 0000 4823          jsr       _endword
00002A40  2A8E      
00002A42  4E75      4824          rts
                    4825   ; }
                    4826   ; void talkwordwest() {
                    4827   _talkwordwest:
                    4828   ; talkphonemeWW     ();
00002A44  4EB8 2658 4829          jsr       _talkphonemeWW
                    4830   ; talkphonemeEH     ();
00002A48  4EB8 2490 4831          jsr       _talkphonemeEH
                    4832   ; talkphonemeSS     ();
00002A4C  4EB8 25EC 4833          jsr       _talkphonemeSS
                    4834   ; talkphonemeSS     ();
00002A50  4EB8 25EC 4835          jsr       _talkphonemeSS
                    4836   ; talkphonemeTT2    ();
00002A54  4EB8 2610 4837          jsr       _talkphonemeTT2
                    4838   ; endword           ();
00002A58  4EB9 0000 4839          jsr       _endword
00002A5C  2A8E      
00002A5E  4E75      4840          rts
                    4841   ; }
                    4842   ; void talkwordposition() {
                    4843   _talkwordposition:
                    4844   ; talkphonemePP   ();
00002A60  4EB8 25BC 4845          jsr       _talkphonemePP
                    4846   ; talkphonemeIH   ();
00002A64  4EB8 2514 4847          jsr       _talkphonemeIH
                    4848   ; talkphonemeZZ   ();
00002A68  4EB8 26A0 4849          jsr       _talkphonemeZZ
                    4850   ; talkphonemeIH   ();
00002A6C  4EB8 2514 4851          jsr       _talkphonemeIH
                    4852   ; talkphonemeSH   ();
00002A70  4EB8 25E0 4853          jsr       _talkphonemeSH
                    4854   ; talkphonemeNN1  ();
00002A74  4EB8 2580 4855          jsr       _talkphonemeNN1
                    4856   ; endword         ();
00002A78  4EB9 0000 4857          jsr       _endword
00002A7C  2A8E      
00002A7E  4E75      4858          rts
                    4859   ; }
                    4860   ; void talkphonemePA6() {
                    4861   _talkphonemePA6:
                    4862   ; talkphonemePA5();
00002A80  4EB8 26DA 4863          jsr       _talkphonemePA5
                    4864   ; talkphonemePA5();
00002A84  4EB8 26DA 4865          jsr       _talkphonemePA5
                    4866   ; talkphonemePA4();
00002A88  4EB8 26CE 4867          jsr       _talkphonemePA4
00002A8C  4E75      4868          rts
                    4869   ; }
                    4870   ; void endword() {
                    4871   _endword:
                    4872   ; talkphonemePA5();
00002A8E  4EB8 26DA 4873          jsr       _talkphonemePA5
                    4874   ; talkphonemePA4();
00002A92  4EB8 26CE 4875          jsr       _talkphonemePA4
00002A96  4E75      4876          rts
                    4877   ; }
                    4878   ; C:\USERS\10054\ONEDRIVE\CPEN 412 FINAL PROJECT\FINAL_PROJECT_2023_SEM2_STUDENT_TEMPLATE\FINAL_PROJECT_2023_SEM2_STUDENT_TEMPLATE\PROGRAMS\DEBUGMONITORCODE\TETRIS.C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                    4879   ; #include <stdio.h>
                    4880   ; #include <stdlib.h>
                    4881   ; #include <limits.h>
                    4882   ; #include "tetris.h"
                    4883   ; #include "say_phoneme.h"
                    4884   ; #define Timer1Data *(volatile unsigned char *)(0x00400030)
                    4885   ; #define Timer1Control *(volatile unsigned char *)(0x00400032)
                    4886   ; #define Timer1Status *(volatile unsigned char *)(0x00400032)
                    4887   ; #define octlAddress1 *(char *)(0xFF030001)
                    4888   ; #define octlAddress *(char *)(0xFF030000)
                    4889   ; char Table[TETRIS_ROWS][TETRIS_COLS];
                    4890   ; int tetris_score;
                    4891   ; char GameOn;
                    4892   ; int tetris_timer;
                    4893   ; char octl;
                    4894   ; typedef struct {
                    4895   ; char array[MAX_SHAPE_SIZE][MAX_SHAPE_SIZE];
                    4896   ; int width, row, col;
                    4897   ; } Shape;
                    4898   ; Shape current;
                    4899   ; Shape ShapesArray[NUM_SHAPES];
                    4900   ; struct
                    4901   ; {
                    4902   ; int speed;
                    4903   ; int speed_increase;
                    4904   ; } Tetris_Speed;
                    4905   ; int printw_x;  //hint: could be a useful variable
                    4906   ; int printw_y;  //hint: could be a useful variable
                    4907   ; char cx, cy;
                    4908   ; int timer_count;
                    4909   ; /* Compute x mod y using binary long division. */
                    4910   ; int mod_bld(int x, int y)
                    4911   ; {
                    4912   _mod_bld:
00002A98  4E56 0000 4913          link      A6,#0
00002A9C  48E7 3000 4914          movem.l   D2/D3,-(A7)
                    4915   ; int modulus = x, divisor = y;
00002AA0  262E 0008 4916          move.l    8(A6),D3
00002AA4  242E 000C 4917          move.l    12(A6),D2
                    4918   ; while (divisor <= modulus && divisor <= 16384)
                    4919   mod_bld_1:
00002AA8  B483      4920          cmp.l     D3,D2
00002AAA  6E0C      4921          bgt.s     mod_bld_3
00002AAC  0C82 0000 4922          cmp.l     #16384,D2
00002AB0  4000      
00002AB2  6E04      4923          bgt.s     mod_bld_3
                    4924   ; divisor <<= 1;
00002AB4  E382      4925          asl.l     #1,D2
00002AB6  60F0      4926          bra       mod_bld_1
                    4927   mod_bld_3:
                    4928   ; while (modulus >= y) {
                    4929   mod_bld_4:
00002AB8  B6AE 000C 4930          cmp.l     12(A6),D3
00002ABC  6D0C      4931          blt.s     mod_bld_6
                    4932   ; while (divisor > modulus)
                    4933   mod_bld_7:
00002ABE  B483      4934          cmp.l     D3,D2
00002AC0  6F04      4935          ble.s     mod_bld_9
                    4936   ; divisor >>= 1;
00002AC2  E282      4937          asr.l     #1,D2
00002AC4  60F8      4938          bra       mod_bld_7
                    4939   mod_bld_9:
                    4940   ; modulus -= divisor;
00002AC6  9682      4941          sub.l     D2,D3
00002AC8  60EE      4942          bra       mod_bld_4
                    4943   mod_bld_6:
                    4944   ; }
                    4945   ; return modulus;
00002ACA  2003      4946          move.l    D3,D0
00002ACC  4CDF 000C 4947          movem.l   (A7)+,D2/D3
00002AD0  4E5E      4948          unlk      A6
00002AD2  4E75      4949          rts
                    4950   ; }
                    4951   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    4952   ; //
                    4953   ; //
                    4954   ; //                        functions to implement
                    4955   ; //
                    4956   ; //
                    4957   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    4958   ; void Timer_ISR() {
                    4959   _Timer_ISR:
                    4960   ; ++timer_count;
00002AD4  52B9 0803 4961          addq.l    #1,_timer_count.L
00002AD8  0772      
                    4962   ; // printf("Timer ISR, %d\n", timer_count);
                    4963   ; Timer1Control = 3;
00002ADA  13FC 0003 4964          move.b    #3,4194354
00002ADE  0040 0032 
00002AE2  4E75      4965          rts
                    4966   ; }
                    4967   ; // #define StartOfExceptionVectorTable 0x08030000
                    4968   ; // void InstallExceptionHandler(void (*function_ptr)(), int level)
                    4969   ; // {
                    4970   ; //     volatile long int *RamVectorAddress = (volatile long int *)(StartOfExceptionVectorTable); // pointer to the Ram based interrupt vector table created in Cstart in debug monitor
                    4971   ; //     RamVectorAddress[level] = (long int *)(function_ptr); // install the address of our function into the exception table
                    4972   ; // }
                    4973   ; void Wait1ms_here(void)
                    4974   ; {
                    4975   _Wait1ms_here:
00002AE4  2F02      4976          move.l    D2,-(A7)
                    4977   ; int what;
                    4978   ; for (what = 0; what < 1000; what++)
00002AE6  4282      4979          clr.l     D2
                    4980   Wait1ms_here_1:
00002AE8  0C82 0000 4981          cmp.l     #1000,D2
00002AEC  03E8      
00002AEE  6C04      4982          bge.s     Wait1ms_here_3
00002AF0  5282      4983          addq.l    #1,D2
00002AF2  60F4      4984          bra       Wait1ms_here_1
                    4985   Wait1ms_here_3:
00002AF4  241F      4986          move.l    (A7)+,D2
00002AF6  4E75      4987          rts
                    4988   ; ;
                    4989   ; }
                    4990   ; void Wait250ms_here(void)
                    4991   ; {
                    4992   _Wait250ms_here:
00002AF8  2F02      4993          move.l    D2,-(A7)
                    4994   ; int what;
                    4995   ; for (what = 0; what < 250; what++)
00002AFA  4282      4996          clr.l     D2
                    4997   Wait250ms_here_1:
00002AFC  0C82 0000 4998          cmp.l     #250,D2
00002B00  00FA      
00002B02  6C08      4999          bge.s     Wait250ms_here_3
                    5000   ; Wait1ms_here();
00002B04  4EB8 2AE4 5001          jsr       _Wait1ms_here
00002B08  5282      5002          addq.l    #1,D2
00002B0A  60F0      5003          bra       Wait250ms_here_1
                    5004   Wait250ms_here_3:
00002B0C  241F      5005          move.l    (A7)+,D2
00002B0E  4E75      5006          rts
                    5007   ; }
                    5008   ; void changeChar(int addr, char c){
                    5009   _changeChar:
00002B10  4E56 0000 5010          link      A6,#0
                    5011   ; *(char*)(VGA_ADDRESS + addr * 2 + 1) = c;
00002B14  203C FFFF 5012          move.l    #-65536,D0
00002B18  0000      
00002B1A  2F2E 0008 5013          move.l    8(A6),-(A7)
00002B1E  4878 0002 5014          pea       2
00002B22  4EB9 0000 5015          jsr       LMUL
00002B26  39D6      
00002B28  2217      5016          move.l    (A7),D1
00002B2A  504F      5017          addq.w    #8,A7
00002B2C  5281      5018          addq.l    #1,D1
00002B2E  D081      5019          add.l     D1,D0
00002B30  2040      5020          move.l    D0,A0
00002B32  10AE 000F 5021          move.b    15(A6),(A0)
                    5022   ; *(char*)(VGA_ADDRESS + addr * 2) = c;
00002B36  203C FFFF 5023          move.l    #-65536,D0
00002B3A  0000      
00002B3C  2F2E 0008 5024          move.l    8(A6),-(A7)
00002B40  4878 0002 5025          pea       2
00002B44  4EB9 0000 5026          jsr       LMUL
00002B48  39D6      
00002B4A  2217      5027          move.l    (A7),D1
00002B4C  504F      5028          addq.w    #8,A7
00002B4E  D081      5029          add.l     D1,D0
00002B50  2040      5030          move.l    D0,A0
00002B52  10AE 000F 5031          move.b    15(A6),(A0)
00002B56  4E5E      5032          unlk      A6
00002B58  4E75      5033          rts
                    5034   ; }
                    5035   ; void changeColor(int addr, char color){
                    5036   _changeColor:
00002B5A  4E56 0000 5037          link      A6,#0
00002B5E  2F02      5038          move.l    D2,-(A7)
                    5039   ; char change = octl & 0xF8;
00002B60  1039 0803 5040          move.b    _octl.L,D0
00002B64  067C      
00002B66  4880      5041          ext.w     D0
00002B68  C07C 00F8 5042          and.w     #248,D0
00002B6C  1400      5043          move.b    D0,D2
                    5044   ; change |= color;
00002B6E  102E 000F 5045          move.b    15(A6),D0
00002B72  8400      5046          or.b      D0,D2
                    5047   ; octlAddress = change;
00002B74  13C2 FF03 5048          move.b    D2,-16580608
00002B78  0000      
                    5049   ; octlAddress1 = change;
00002B7A  13C2 FF03 5050          move.b    D2,-16580607
00002B7E  0001      
00002B80  241F      5051          move.l    (A7)+,D2
00002B82  4E5E      5052          unlk      A6
00002B84  4E75      5053          rts
                    5054   ; }
                    5055   ; void writeVGA(int addr, char c){
                    5056   _writeVGA:
00002B86  4E56 0000 5057          link      A6,#0
                    5058   ; changeColor(addr, octl);
00002B8A  1239 0803 5059          move.b    _octl.L,D1
00002B8E  067C      
00002B90  4881      5060          ext.w     D1
00002B92  48C1      5061          ext.l     D1
00002B94  2F01      5062          move.l    D1,-(A7)
00002B96  2F2E 0008 5063          move.l    8(A6),-(A7)
00002B9A  4EB8 2B5A 5064          jsr       _changeColor
00002B9E  504F      5065          addq.w    #8,A7
                    5066   ; changeChar(addr, c);
00002BA0  122E 000F 5067          move.b    15(A6),D1
00002BA4  4881      5068          ext.w     D1
00002BA6  48C1      5069          ext.l     D1
00002BA8  2F01      5070          move.l    D1,-(A7)
00002BAA  2F2E 0008 5071          move.l    8(A6),-(A7)
00002BAE  4EB8 2B10 5072          jsr       _changeChar
00002BB2  504F      5073          addq.w    #8,A7
00002BB4  4E5E      5074          unlk      A6
00002BB6  4E75      5075          rts
                    5076   ; }
                    5077   ; void updateVGA(int x, int y, char c){
                    5078   _updateVGA:
00002BB8  4E56 0000 5079          link      A6,#0
                    5080   ; writeVGA(y * screen_width + x, c);
00002BBC  122E 0013 5081          move.b    19(A6),D1
00002BC0  4881      5082          ext.w     D1
00002BC2  48C1      5083          ext.l     D1
00002BC4  2F01      5084          move.l    D1,-(A7)
00002BC6  2F2E 000C 5085          move.l    12(A6),-(A7)
00002BCA  4878 0050 5086          pea       80
00002BCE  4EB9 0000 5087          jsr       LMUL
00002BD2  39D6      
00002BD4  2217      5088          move.l    (A7),D1
00002BD6  504F      5089          addq.w    #8,A7
00002BD8  D2AE 0008 5090          add.l     8(A6),D1
00002BDC  2F01      5091          move.l    D1,-(A7)
00002BDE  4EB8 2B86 5092          jsr       _writeVGA
00002BE2  504F      5093          addq.w    #8,A7
00002BE4  4E5E      5094          unlk      A6
00002BE6  4E75      5095          rts
                    5096   ; }
                    5097   ; void update_cursor(int x, int y){
                    5098   _update_cursor:
00002BE8  4E56 0000 5099          link      A6,#0
                    5100   ; cx = x;
00002BEC  202E 0008 5101          move.l    8(A6),D0
00002BF0  13C0 0803 5102          move.b    D0,_cx.L
00002BF4  076E      
                    5103   ; cy = y;
00002BF6  202E 000C 5104          move.l    12(A6),D0
00002BFA  13C0 0803 5105          move.b    D0,_cy.L
00002BFE  0770      
                    5106   ; cursor_x = cx;
00002C00  13F9 0803 5107          move.b    _cx.L,-16711680
00002C04  076E FF01 
00002C08  0000      
                    5108   ; cursor_x1 = cx;
00002C0A  13F9 0803 5109          move.b    _cx.L,-16711679
00002C0E  076E FF01 
00002C12  0001      
                    5110   ; cursor_y = cy;
00002C14  13F9 0803 5111          move.b    _cy.L,-16711678
00002C18  0770 FF01 
00002C1C  0002      
                    5112   ; cursor_y1 = cy;
00002C1E  13F9 0803 5113          move.b    _cy.L,-16711677
00002C22  0770 FF01 
00002C26  0003      
00002C28  4E5E      5114          unlk      A6
00002C2A  4E75      5115          rts
                    5116   ; }
                    5117   ; void go_to_top_corner()
                    5118   ; {
                    5119   _go_to_top_corner:
                    5120   ; update_cursor(0,0);
00002C2C  42A7      5121          clr.l     -(A7)
00002C2E  42A7      5122          clr.l     -(A7)
00002C30  4EB8 2BE8 5123          jsr       _update_cursor
00002C34  504F      5124          addq.w    #8,A7
00002C36  4E75      5125          rts
                    5126   ; };
                    5127   ; void clear_screen()
                    5128   ; {
                    5129   _clear_screen:
00002C38  2F02      5130          move.l    D2,-(A7)
                    5131   ; int i;
                    5132   ; for (i = 0; i <= 3200; i++) {
00002C3A  4282      5133          clr.l     D2
                    5134   clear_screen_1:
00002C3C  0C82 0000 5135          cmp.l     #3200,D2
00002C40  0C80      
00002C42  6E10      5136          bgt.s     clear_screen_3
                    5137   ; changeChar(i, ' ');
00002C44  4878 0020 5138          pea       32
00002C48  2F02      5139          move.l    D2,-(A7)
00002C4A  4EB8 2B10 5140          jsr       _changeChar
00002C4E  504F      5141          addq.w    #8,A7
00002C50  5282      5142          addq.l    #1,D2
00002C52  60E8      5143          bra       clear_screen_1
                    5144   clear_screen_3:
00002C54  241F      5145          move.l    (A7)+,D2
00002C56  4E75      5146          rts
                    5147   ; }
                    5148   ; // int iiii, jjjjj;
                    5149   ; // for(iiii = 0; iiii < screen_height; iiii++){
                    5150   ; // 	for(jjjjj = 0; jjjjj < screen_width; jjjjj++){
                    5151   ; // 		printf("i: %d, j: %d\n", iiii, jjjjj);
                    5152   ; // 		updateVGA(jjjjj, iiii, 'C', 4);
                    5153   ; // 	}
                    5154   ; // }
                    5155   ; };
                    5156   ; void say_game_over() {
                    5157   _say_game_over:
                    5158   ; talkphonemeGG2();
00002C58  4EB8 24E4 5159          jsr       _talkphonemeGG2
                    5160   ; talkphonemeEH();
00002C5C  4EB8 2490 5161          jsr       _talkphonemeEH
                    5162   ; talkphonemeMM();
00002C60  4EB8 2568 5163          jsr       _talkphonemeMM
                    5164   ; endword();
00002C64  4EB8 2A8E 5165          jsr       _endword
                    5166   ; talkphonemeOW();
00002C68  4EB8 25A4 5167          jsr       _talkphonemeOW
                    5168   ; talkphonemeVV();
00002C6C  4EB8 2640 5169          jsr       _talkphonemeVV
                    5170   ; talkphonemeER1();
00002C70  4EB8 24A8 5171          jsr       _talkphonemeER1
                    5172   ; endword();
00002C74  4EB8 2A8E 5173          jsr       _endword
00002C78  4E75      5174          rts
                    5175   ; }
                    5176   ; void say_awesome() {
                    5177   _say_awesome:
                    5178   ; talkphonemeAO();
00002C7A  4EB8 2400 5179          jsr       _talkphonemeAO
                    5180   ; talkphonemeSS();
00002C7E  4EB8 25EC 5181          jsr       _talkphonemeSS
                    5182   ; talkphonemeOW();
00002C82  4EB8 25A4 5183          jsr       _talkphonemeOW
                    5184   ; talkphonemeMM();
00002C86  4EB8 2568 5185          jsr       _talkphonemeMM
                    5186   ; endword();
00002C8A  4EB8 2A8E 5187          jsr       _endword
00002C8E  4E75      5188          rts
                    5189   ; }
                    5190   ; void say_cool() {
                    5191   _say_cool:
                    5192   ; talkphonemeKK1();
00002C90  4EB8 2538 5193          jsr       _talkphonemeKK1
                    5194   ; talkphonemeUH();
00002C94  4EB8 261C 5195          jsr       _talkphonemeUH
                    5196   ; talkphonemeEL();
00002C98  4EB8 249C 5197          jsr       _talkphonemeEL
                    5198   ; endword();
00002C9C  4EB8 2A8E 5199          jsr       _endword
00002CA0  4E75      5200          rts
                    5201   ; }
                    5202   ; void say_yeah() {
                    5203   _say_yeah:
                    5204   ; talkphonemeYY2();
00002CA2  4EB8 2688 5205          jsr       _talkphonemeYY2
                    5206   ; talkphonemeEH();
00002CA6  4EB8 2490 5207          jsr       _talkphonemeEH
                    5208   ; endword();
00002CAA  4EB8 2A8E 5209          jsr       _endword
00002CAE  4E75      5210          rts
                    5211   ; }
                    5212   ; void putcharxy(int x, int y, char ch,char* error_message) {
                    5213   _putcharxy:
00002CB0  4E56 0000 5214          link      A6,#0
00002CB4  48E7 3000 5215          movem.l   D2/D3,-(A7)
00002CB8  242E 000C 5216          move.l    12(A6),D2
00002CBC  262E 0008 5217          move.l    8(A6),D3
                    5218   ; //Put the character "ch" in row x, column y on the screen.
                    5219   ; //The parameter "error_message" can be used to print out
                    5220   ; //an error message in Hyperterminal during debugging if, 
                    5221   ; //for example, x or y are out of range
                    5222   ; if (x < 0 || x >= screen_width || y < 0 || y >= screen_height) {
00002CC0  0C83 0000 5223          cmp.l     #0,D3
00002CC4  0000      
00002CC6  6D18      5224          blt.s     putcharxy_3
00002CC8  0C83 0000 5225          cmp.l     #80,D3
00002CCC  0050      
00002CCE  6C10      5226          bge.s     putcharxy_3
00002CD0  0C82 0000 5227          cmp.l     #0,D2
00002CD4  0000      
00002CD6  6D08      5228          blt.s     putcharxy_3
00002CD8  0C82 0000 5229          cmp.l     #40,D2
00002CDC  0028      
00002CDE  6D14      5230          blt.s     putcharxy_1
                    5231   putcharxy_3:
                    5232   ; printf("%s\n", error_message);
00002CE0  2F2E 0014 5233          move.l    20(A6),-(A7)
00002CE4  4879 0000 5234          pea       @tetris_1.L
00002CE8  4F98      
00002CEA  4EB9 0000 5235          jsr       _printf
00002CEE  3B36      
00002CF0  504F      5236          addq.w    #8,A7
00002CF2  6016      5237          bra.s     putcharxy_2
                    5238   putcharxy_1:
                    5239   ; // printf("x: %d, y: %d\n", x, y);
                    5240   ; } else {
                    5241   ; updateVGA(x, y, ch);
00002CF4  122E 0013 5242          move.b    19(A6),D1
00002CF8  4881      5243          ext.w     D1
00002CFA  48C1      5244          ext.l     D1
00002CFC  2F01      5245          move.l    D1,-(A7)
00002CFE  2F02      5246          move.l    D2,-(A7)
00002D00  2F03      5247          move.l    D3,-(A7)
00002D02  4EB8 2BB8 5248          jsr       _updateVGA
00002D06  DEFC 000C 5249          add.w     #12,A7
                    5250   putcharxy_2:
00002D0A  4CDF 000C 5251          movem.l   (A7)+,D2/D3
00002D0E  4E5E      5252          unlk      A6
00002D10  4E75      5253          rts
                    5254   ; }
                    5255   ; }
                    5256   ; void gotoxy(int x, int y)
                    5257   ; {
                    5258   _gotoxy:
00002D12  4E56 0000 5259          link      A6,#0
                    5260   ; update_cursor(x,y);
00002D16  2F2E 000C 5261          move.l    12(A6),-(A7)
00002D1A  2F2E 0008 5262          move.l    8(A6),-(A7)
00002D1E  4EB8 2BE8 5263          jsr       _update_cursor
00002D22  504F      5264          addq.w    #8,A7
00002D24  4E5E      5265          unlk      A6
00002D26  4E75      5266          rts
                    5267   ; };
                    5268   ; void set_vga_control_reg(char x) {
                    5269   _set_vga_control_reg:
00002D28  4E56 0000 5270          link      A6,#0
                    5271   ; //Set the value of the control register in the VGA core
                    5272   ; //write this function
                    5273   ; octl = (x & 0xF8) | (octl & 0x7);
00002D2C  102E 000B 5274          move.b    11(A6),D0
00002D30  4880      5275          ext.w     D0
00002D32  C07C 00F8 5276          and.w     #248,D0
00002D36  1239 0803 5277          move.b    _octl.L,D1
00002D3A  067C      
00002D3C  C23C 0007 5278          and.b     #7,D1
00002D40  4881      5279          ext.w     D1
00002D42  8041      5280          or.w      D1,D0
00002D44  13C0 0803 5281          move.b    D0,_octl.L
00002D48  067C      
00002D4A  4E5E      5282          unlk      A6
00002D4C  4E75      5283          rts
                    5284   ; }
                    5285   ; char get_vga_control_reg() {
                    5286   _get_vga_control_reg:
                    5287   ; //Get the value of the control register in the VGA core
                    5288   ; //write this function
                    5289   ; return octl;
00002D4E  1039 0803 5290          move.b    _octl.L,D0
00002D52  067C      
00002D54  4E75      5291          rts
                    5292   ; }
                    5293   ; void set_color(int color) {
                    5294   _set_color:
00002D56  4E56 0000 5295          link      A6,#0
                    5296   ; octl &= 0xF8; //8'b1111_1000
00002D5A  0239 00F8 5297          and.b     #248,_octl.L
00002D5E  0803 067C 
                    5298   ; octl |= (color & 0x7); //8'b0000_0111
00002D62  202E 0008 5299          move.l    8(A6),D0
00002D66  C0BC 0000 5300          and.l     #7,D0
00002D6A  0007      
00002D6C  8139 0803 5301          or.b      D0,_octl.L
00002D70  067C      
00002D72  4E5E      5302          unlk      A6
00002D74  4E75      5303          rts
                    5304   ; }
                    5305   ; int clock() {
                    5306   _clock:
                    5307   ; //Returns time in milliseconds since the timer was initialized
                    5308   ; //write this function
                    5309   ; return timer_count * 100;
00002D76  2F39 0803 5310          move.l    _timer_count.L,-(A7)
00002D7A  0772      
00002D7C  4878 0064 5311          pea       100
00002D80  4EB9 0000 5312          jsr       LMUL
00002D84  39D6      
00002D86  2017      5313          move.l    (A7),D0
00002D88  504F      5314          addq.w    #8,A7
00002D8A  4E75      5315          rts
                    5316   ; }
                    5317   ; void printw(const char* str,char* error_message) {
                    5318   _printw:
00002D8C  4E56 0000 5319          link      A6,#0
00002D90  48E7 3020 5320          movem.l   D2/D3/A2,-(A7)
00002D94  45F9 0803 5321          lea       _printw_x.L,A2
00002D98  0766      
00002D9A  262E 0008 5322          move.l    8(A6),D3
                    5323   ; //like "printf", just on the VGA screen
                    5324   ; //a newline character ("\n") causes the location
                    5325   ; //to move to the beginning of a new line
                    5326   ; //prints the string in the parameter "str", 
                    5327   ; //the parameter "error_message" can be used for debugging
                    5328   ; //hint: maybe this function could use the function  putcharxy(int x, int y, char ch,char* error_message)
                    5329   ; int index = 0;
00002D9E  4282      5330          clr.l     D2
                    5331   ; while (str[index] != '\0') {
                    5332   printw_1:
00002DA0  2043      5333          move.l    D3,A0
00002DA2  1030 2800 5334          move.b    0(A0,D2.L),D0
00002DA6  6700 003E 5335          beq       printw_3
                    5336   ; if (str[index] == '\n') {
00002DAA  2043      5337          move.l    D3,A0
00002DAC  1030 2800 5338          move.b    0(A0,D2.L),D0
00002DB0  0C00 000A 5339          cmp.b     #10,D0
00002DB4  660A      5340          bne.s     printw_4
                    5341   ; printw_x = 0;
00002DB6  4292      5342          clr.l     (A2)
                    5343   ; printw_y++;
00002DB8  52B9 0803 5344          addq.l    #1,_printw_y.L
00002DBC  076A      
00002DBE  6022      5345          bra.s     printw_5
                    5346   printw_4:
                    5347   ; // printf("newline\n");
                    5348   ; } else {
                    5349   ; putcharxy(printw_x, printw_y, str[index], error_message);
00002DC0  2F2E 000C 5350          move.l    12(A6),-(A7)
00002DC4  2043      5351          move.l    D3,A0
00002DC6  1230 2800 5352          move.b    0(A0,D2.L),D1
00002DCA  4881      5353          ext.w     D1
00002DCC  48C1      5354          ext.l     D1
00002DCE  2F01      5355          move.l    D1,-(A7)
00002DD0  2F39 0803 5356          move.l    _printw_y.L,-(A7)
00002DD4  076A      
00002DD6  2F12      5357          move.l    (A2),-(A7)
00002DD8  4EB8 2CB0 5358          jsr       _putcharxy
00002DDC  DEFC 0010 5359          add.w     #16,A7
                    5360   ; printw_x++;
00002DE0  5292      5361          addq.l    #1,(A2)
                    5362   printw_5:
                    5363   ; }
                    5364   ; index++;
00002DE2  5282      5365          addq.l    #1,D2
00002DE4  60BA      5366          bra       printw_1
                    5367   printw_3:
00002DE6  4CDF 040C 5368          movem.l   (A7)+,D2/D3/A2
00002DEA  4E5E      5369          unlk      A6
00002DEC  4E75      5370          rts
                    5371   ; }
                    5372   ; }
                    5373   ; void display_game_over(char *str, int x, int y) {
                    5374   _display_game_over:
00002DEE  4E56 0000 5375          link      A6,#0
00002DF2  48E7 3C00 5376          movem.l   D2/D3/D4/D5,-(A7)
00002DF6  242E 000C 5377          move.l    12(A6),D2
00002DFA  262E 0010 5378          move.l    16(A6),D3
00002DFE  2A2E 0008 5379          move.l    8(A6),D5
                    5380   ; int num;
                    5381   ; num = 0;
00002E02  4284      5382          clr.l     D4
                    5383   ; while (str[num] != '\0') {
                    5384   display_game_over_1:
00002E04  2045      5385          move.l    D5,A0
00002E06  1030 4800 5386          move.b    0(A0,D4.L),D0
00002E0A  6700 0056 5387          beq       display_game_over_3
                    5388   ; Wait250ms_here();
00002E0E  4EB8 2AF8 5389          jsr       _Wait250ms_here
                    5390   ; update_cursor(x + 1, y);
00002E12  2F03      5391          move.l    D3,-(A7)
00002E14  2202      5392          move.l    D2,D1
00002E16  5281      5393          addq.l    #1,D1
00002E18  2F01      5394          move.l    D1,-(A7)
00002E1A  4EB8 2BE8 5395          jsr       _update_cursor
00002E1E  504F      5396          addq.w    #8,A7
                    5397   ; putcharxy(x + 1, y, ' ', "game over");
00002E20  4879 0000 5398          pea       @tetris_2.L
00002E24  4F9C      
00002E26  4878 0020 5399          pea       32
00002E2A  2F03      5400          move.l    D3,-(A7)
00002E2C  2202      5401          move.l    D2,D1
00002E2E  5281      5402          addq.l    #1,D1
00002E30  2F01      5403          move.l    D1,-(A7)
00002E32  4EB8 2CB0 5404          jsr       _putcharxy
00002E36  DEFC 0010 5405          add.w     #16,A7
                    5406   ; // printf("cx: %d, cy: %d\n", cx, cy);
                    5407   ; Wait1ms_here();
00002E3A  4EB8 2AE4 5408          jsr       _Wait1ms_here
                    5409   ; putcharxy(x, y, str[num], "game over");
00002E3E  4879 0000 5410          pea       @tetris_2.L
00002E42  4F9C      
00002E44  2045      5411          move.l    D5,A0
00002E46  1230 4800 5412          move.b    0(A0,D4.L),D1
00002E4A  4881      5413          ext.w     D1
00002E4C  48C1      5414          ext.l     D1
00002E4E  2F01      5415          move.l    D1,-(A7)
00002E50  2F03      5416          move.l    D3,-(A7)
00002E52  2F02      5417          move.l    D2,-(A7)
00002E54  4EB8 2CB0 5418          jsr       _putcharxy
00002E58  DEFC 0010 5419          add.w     #16,A7
                    5420   ; x++;
00002E5C  5282      5421          addq.l    #1,D2
                    5422   ; num++;
00002E5E  5284      5423          addq.l    #1,D4
00002E60  60A2      5424          bra       display_game_over_1
                    5425   display_game_over_3:
                    5426   ; }
                    5427   ; if (str[0] == 'S')
00002E62  2045      5428          move.l    D5,A0
00002E64  1010      5429          move.b    (A0),D0
00002E66  0C00 0053 5430          cmp.b     #83,D0
00002E6A  660E      5431          bne.s     display_game_over_4
                    5432   ; update_cursor(x - 1, y);
00002E6C  2F03      5433          move.l    D3,-(A7)
00002E6E  2202      5434          move.l    D2,D1
00002E70  5381      5435          subq.l    #1,D1
00002E72  2F01      5436          move.l    D1,-(A7)
00002E74  4EB8 2BE8 5437          jsr       _update_cursor
00002E78  504F      5438          addq.w    #8,A7
                    5439   display_game_over_4:
00002E7A  4CDF 003C 5440          movem.l   (A7)+,D2/D3/D4/D5
00002E7E  4E5E      5441          unlk      A6
00002E80  4E75      5442          rts
                    5443   ; }
                    5444   ; void gameOver()
                    5445   ; {
                    5446   _gameOver:
00002E82  4E56 FF7C 5447          link      A6,#-132
00002E86  48E7 3038 5448          movem.l   D2/D3/A2/A3/A4,-(A7)
00002E8A  45F9 0803 5449          lea       _printw_y.L,A2
00002E8E  076A      
00002E90  47F9 0803 5450          lea       _printw_x.L,A3
00002E94  0766      
00002E96  49EE FF80 5451          lea       -128(A6),A4
                    5452   ; // 36, 20: Game over!
                    5453   ; int test = 5000;
00002E9A  2D7C 0000 5454          move.l    #5000,-132(A6)
00002E9E  1388 FF7C 
                    5455   ; char *game_over = "Game over! ";
00002EA2  41F9 0000 5456          lea       @tetris_3.L,A0
00002EA6  4FA6      
00002EA8  2608      5457          move.l    A0,D3
                    5458   ; char score_str[128];
                    5459   ; char num;
                    5460   ; say_game_over();
00002EAA  4EB8 2C58 5461          jsr       _say_game_over
                    5462   ; num = 1;
00002EAE  7401      5463          moveq     #1,D2
                    5464   ; sprintf(score_str,"Score: %d  ", tetris_score);
00002EB0  2F39 0803 5465          move.l    _tetris_score.L,-(A7)
00002EB4  0672      
00002EB6  4879 0000 5466          pea       @tetris_4.L
00002EBA  4FB2      
00002EBC  2F0C      5467          move.l    A4,-(A7)
00002EBE  4EB9 0000 5468          jsr       _sprintf
00002EC2  3AC0      
00002EC4  DEFC 000C 5469          add.w     #12,A7
                    5470   ; // 36, 22: Score: %d
                    5471   ; set_vga_control_reg(0xE0);
00002EC8  4878 00E0 5472          pea       224
00002ECC  4EB8 2D28 5473          jsr       _set_vga_control_reg
00002ED0  584F      5474          addq.w    #4,A7
                    5475   ; printw_x = 36;
00002ED2  26BC 0000 5476          move.l    #36,(A3)
00002ED6  0024      
                    5477   ; printw_y = 20;
00002ED8  24BC 0000 5478          move.l    #20,(A2)
00002EDC  0014      
                    5479   ; display_game_over(game_over, printw_x, printw_y);
00002EDE  2F12      5480          move.l    (A2),-(A7)
00002EE0  2F13      5481          move.l    (A3),-(A7)
00002EE2  2F03      5482          move.l    D3,-(A7)
00002EE4  4EB8 2DEE 5483          jsr       _display_game_over
00002EE8  DEFC 000C 5484          add.w     #12,A7
                    5485   ; printw_x = 36;
00002EEC  26BC 0000 5486          move.l    #36,(A3)
00002EF0  0024      
                    5487   ; printw_y = 22;
00002EF2  24BC 0000 5488          move.l    #22,(A2)
00002EF6  0016      
                    5489   ; display_game_over(score_str, printw_x, printw_y);
00002EF8  2F12      5490          move.l    (A2),-(A7)
00002EFA  2F13      5491          move.l    (A3),-(A7)
00002EFC  2F0C      5492          move.l    A4,-(A7)
00002EFE  4EB8 2DEE 5493          jsr       _display_game_over
00002F02  DEFC 000C 5494          add.w     #12,A7
                    5495   ; while (1) {
                    5496   gameOver_1:
                    5497   ; printw_x = 36;
00002F06  26BC 0000 5498          move.l    #36,(A3)
00002F0A  0024      
                    5499   ; printw_y = 20;
00002F0C  24BC 0000 5500          move.l    #20,(A2)
00002F10  0014      
                    5501   ; set_color(num);
00002F12  4882      5502          ext.w     D2
00002F14  48C2      5503          ext.l     D2
00002F16  2F02      5504          move.l    D2,-(A7)
00002F18  4EB8 2D56 5505          jsr       _set_color
00002F1C  584F      5506          addq.w    #4,A7
                    5507   ; printw(game_over, "game over");
00002F1E  4879 0000 5508          pea       @tetris_2.L
00002F22  4F9C      
00002F24  2F03      5509          move.l    D3,-(A7)
00002F26  4EB8 2D8C 5510          jsr       _printw
00002F2A  504F      5511          addq.w    #8,A7
                    5512   ; printw_x = 36;
00002F2C  26BC 0000 5513          move.l    #36,(A3)
00002F30  0024      
                    5514   ; printw_y = 22;
00002F32  24BC 0000 5515          move.l    #22,(A2)
00002F36  0016      
                    5516   ; printw(score_str, "score");
00002F38  4879 0000 5517          pea       @tetris_5.L
00002F3C  4FBE      
00002F3E  2F0C      5518          move.l    A4,-(A7)
00002F40  4EB8 2D8C 5519          jsr       _printw
00002F44  504F      5520          addq.w    #8,A7
                    5521   ; Wait250ms_here();
00002F46  4EB8 2AF8 5522          jsr       _Wait250ms_here
                    5523   ; ++num;
00002F4A  5202      5524          addq.b    #1,D2
                    5525   ; if (num > 7) {
00002F4C  0C02 0007 5526          cmp.b     #7,D2
00002F50  6F02      5527          ble.s     gameOver_4
                    5528   ; num = 1;
00002F52  7401      5529          moveq     #1,D2
                    5530   gameOver_4:
00002F54  60B0      5531          bra       gameOver_1
                    5532   ; }
                    5533   ; }
                    5534   ; set_vga_control_reg(0xA2);
                    5535   ; }
                    5536   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    5537   ; //
                    5538   ; //
                    5539   ; //                      end  functions to implement
                    5540   ; //
                    5541   ; //
                    5542   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    5543   ; void delay_ms(int num_ms) {
                    5544   _delay_ms:
00002F56  4E56 0000 5545          link      A6,#0
00002F5A  48E7 3000 5546          movem.l   D2/D3,-(A7)
                    5547   ; int start_time;
                    5548   ; int current_time;
                    5549   ; start_time = clock();
00002F5E  4EB8 2D76 5550          jsr       _clock
00002F62  2400      5551          move.l    D0,D2
                    5552   ; do {
                    5553   delay_ms_1:
                    5554   ; current_time = clock();
00002F64  4EB8 2D76 5555          jsr       _clock
00002F68  2600      5556          move.l    D0,D3
                    5557   ; if (current_time < start_time) { //handle wraparound
00002F6A  B682      5558          cmp.l     D2,D3
00002F6C  6C0E      5559          bge.s     delay_ms_3
                    5560   ; num_ms = num_ms - (INT_MAX-start_time);
00002F6E  203C 7FFF 5561          move.l    #2147483647,D0
00002F72  FFFF      
00002F74  9082      5562          sub.l     D2,D0
00002F76  91AE 0008 5563          sub.l     D0,8(A6)
                    5564   ; start_time = current_time;
00002F7A  2403      5565          move.l    D3,D2
                    5566   delay_ms_3:
00002F7C  2003      5567          move.l    D3,D0
00002F7E  9082      5568          sub.l     D2,D0
00002F80  B0AE 0008 5569          cmp.l     8(A6),D0
00002F84  6DDE      5570          blt       delay_ms_1
00002F86  4CDF 000C 5571          movem.l   (A7)+,D2/D3
00002F8A  4E5E      5572          unlk      A6
00002F8C  4E75      5573          rts
                    5574   ; }
                    5575   ; } while ((current_time - start_time) < num_ms);
                    5576   ; }
                    5577   ; int tetris_rand() {
                    5578   _tetris_rand:
                    5579   ; return ((clock() >> 4)& 0xFFFF); //divide by 4 because clock increases by 10 every interrupt, ensure last digit is "random" too
00002F8E  4EB8 2D76 5580          jsr       _clock
00002F92  E880      5581          asr.l     #4,D0
00002F94  C0BC 0000 5582          and.l     #65535,D0
00002F98  FFFF      
00002F9A  4E75      5583          rts
                    5584   ; }
                    5585   ; void CopyShape(Shape* shape, Shape* new_shape){
                    5586   _CopyShape:
00002F9C  4E56 0000 5587          link      A6,#0
00002FA0  48E7 3C00 5588          movem.l   D2/D3/D4/D5,-(A7)
00002FA4  242E 000C 5589          move.l    12(A6),D2
00002FA8  2A2E 0008 5590          move.l    8(A6),D5
                    5591   ; int i;
                    5592   ; int j;
                    5593   ; new_shape->width = shape->width;
00002FAC  2045      5594          move.l    D5,A0
00002FAE  2242      5595          move.l    D2,A1
00002FB0  2368 0010 5596          move.l    16(A0),16(A1)
00002FB4  0010      
                    5597   ; new_shape->row = shape->row;
00002FB6  2045      5598          move.l    D5,A0
00002FB8  2242      5599          move.l    D2,A1
00002FBA  2368 0014 5600          move.l    20(A0),20(A1)
00002FBE  0014      
                    5601   ; new_shape->col = shape->col;
00002FC0  2045      5602          move.l    D5,A0
00002FC2  2242      5603          move.l    D2,A1
00002FC4  2368 0018 5604          move.l    24(A0),24(A1)
00002FC8  0018      
                    5605   ; for(i = 0; i < new_shape->width; i++){
00002FCA  4284      5606          clr.l     D4
                    5607   CopyShape_1:
00002FCC  2042      5608          move.l    D2,A0
00002FCE  B8A8 0010 5609          cmp.l     16(A0),D4
00002FD2  6C00 002A 5610          bge       CopyShape_3
                    5611   ; for(j=0; j < new_shape->width; j++) {
00002FD6  4283      5612          clr.l     D3
                    5613   CopyShape_4:
00002FD8  2042      5614          move.l    D2,A0
00002FDA  B6A8 0010 5615          cmp.l     16(A0),D3
00002FDE  6C1A      5616          bge.s     CopyShape_6
                    5617   ; new_shape->array[i][j] = shape->array[i][j];
00002FE0  2045      5618          move.l    D5,A0
00002FE2  2004      5619          move.l    D4,D0
00002FE4  E588      5620          lsl.l     #2,D0
00002FE6  D1C0      5621          add.l     D0,A0
00002FE8  2242      5622          move.l    D2,A1
00002FEA  2004      5623          move.l    D4,D0
00002FEC  E588      5624          lsl.l     #2,D0
00002FEE  D3C0      5625          add.l     D0,A1
00002FF0  13B0 3800 5626          move.b    0(A0,D3.L),0(A1,D3.L)
00002FF4  3800      
00002FF6  5283      5627          addq.l    #1,D3
00002FF8  60DE      5628          bra       CopyShape_4
                    5629   CopyShape_6:
00002FFA  5284      5630          addq.l    #1,D4
00002FFC  60CE      5631          bra       CopyShape_1
                    5632   CopyShape_3:
00002FFE  4CDF 003C 5633          movem.l   (A7)+,D2/D3/D4/D5
00003002  4E5E      5634          unlk      A6
00003004  4E75      5635          rts
                    5636   ; }
                    5637   ; }
                    5638   ; }
                    5639   ; int CheckPosition(Shape* shape){ //Check the position of the copied shape
                    5640   _CheckPosition:
00003006  4E56 0000 5641          link      A6,#0
0000300A  48E7 3800 5642          movem.l   D2/D3/D4,-(A7)
0000300E  242E 0008 5643          move.l    8(A6),D2
                    5644   ; int i, j;
                    5645   ; for(i = 0; i < shape->width;i++) {
00003012  4284      5646          clr.l     D4
                    5647   CheckPosition_1:
00003014  2042      5648          move.l    D2,A0
00003016  B8A8 0010 5649          cmp.l     16(A0),D4
0000301A  6C00 0096 5650          bge       CheckPosition_3
                    5651   ; for(j = 0; j < shape->width ;j++){
0000301E  4283      5652          clr.l     D3
                    5653   CheckPosition_4:
00003020  2042      5654          move.l    D2,A0
00003022  B6A8 0010 5655          cmp.l     16(A0),D3
00003026  6C00 0084 5656          bge       CheckPosition_6
                    5657   ; if((shape->col+j < 0 || shape->col+j >= TETRIS_COLS || shape->row+i >= TETRIS_ROWS)){ //Out of borders
0000302A  2042      5658          move.l    D2,A0
0000302C  2028 0018 5659          move.l    24(A0),D0
00003030  D083      5660          add.l     D3,D0
00003032  0C80 0000 5661          cmp.l     #0,D0
00003036  0000      
00003038  6D20      5662          blt.s     CheckPosition_9
0000303A  2042      5663          move.l    D2,A0
0000303C  2028 0018 5664          move.l    24(A0),D0
00003040  D083      5665          add.l     D3,D0
00003042  0C80 0000 5666          cmp.l     #15,D0
00003046  000F      
00003048  6C10      5667          bge.s     CheckPosition_9
0000304A  2042      5668          move.l    D2,A0
0000304C  2028 0014 5669          move.l    20(A0),D0
00003050  D084      5670          add.l     D4,D0
00003052  0C80 0000 5671          cmp.l     #20,D0
00003056  0014      
00003058  6D18      5672          blt.s     CheckPosition_7
                    5673   CheckPosition_9:
                    5674   ; if(shape->array[i][j]) //but is it just a phantom?
0000305A  2042      5675          move.l    D2,A0
0000305C  2004      5676          move.l    D4,D0
0000305E  E588      5677          lsl.l     #2,D0
00003060  D1C0      5678          add.l     D0,A0
00003062  4A30 3800 5679          tst.b     0(A0,D3.L)
00003066  6706      5680          beq.s     CheckPosition_10
                    5681   ; return FALSE;
00003068  4280      5682          clr.l     D0
0000306A  6000 0048 5683          bra       CheckPosition_12
                    5684   CheckPosition_10:
0000306E  6000 0036 5685          bra       CheckPosition_13
                    5686   CheckPosition_7:
                    5687   ; }
                    5688   ; else if(Table[shape->row+i][shape->col+j] && shape->array[i][j])
00003072  2042      5689          move.l    D2,A0
00003074  2028 0014 5690          move.l    20(A0),D0
00003078  D084      5691          add.l     D4,D0
0000307A  C1FC 000F 5692          muls      #15,D0
0000307E  41F9 0803 5693          lea       _Table.L,A0
00003082  0546      
00003084  D1C0      5694          add.l     D0,A0
00003086  2242      5695          move.l    D2,A1
00003088  2029 0018 5696          move.l    24(A1),D0
0000308C  D083      5697          add.l     D3,D0
0000308E  4A30 0800 5698          tst.b     0(A0,D0.L)
00003092  6712      5699          beq.s     CheckPosition_13
00003094  2042      5700          move.l    D2,A0
00003096  2004      5701          move.l    D4,D0
00003098  E588      5702          lsl.l     #2,D0
0000309A  D1C0      5703          add.l     D0,A0
0000309C  4A30 3800 5704          tst.b     0(A0,D3.L)
000030A0  6704      5705          beq.s     CheckPosition_13
                    5706   ; return FALSE;
000030A2  4280      5707          clr.l     D0
000030A4  600E      5708          bra.s     CheckPosition_12
                    5709   CheckPosition_13:
000030A6  5283      5710          addq.l    #1,D3
000030A8  6000 FF76 5711          bra       CheckPosition_4
                    5712   CheckPosition_6:
000030AC  5284      5713          addq.l    #1,D4
000030AE  6000 FF64 5714          bra       CheckPosition_1
                    5715   CheckPosition_3:
                    5716   ; }
                    5717   ; }
                    5718   ; return TRUE;
000030B2  7001      5719          moveq     #1,D0
                    5720   CheckPosition_12:
000030B4  4CDF 001C 5721          movem.l   (A7)+,D2/D3/D4
000030B8  4E5E      5722          unlk      A6
000030BA  4E75      5723          rts
                    5724   ; }
                    5725   ; void SetNewRandomShape(){ //updates [current] with new shape
                    5726   _SetNewRandomShape:
000030BC  2F0A      5727          move.l    A2,-(A7)
000030BE  45F9 0803 5728          lea       _current.L,A2
000030C2  067E      
                    5729   ; CopyShape(&ShapesArray[mod_bld(tetris_rand(),NUM_SHAPES)],&current);
000030C4  2F0A      5730          move.l    A2,-(A7)
000030C6  4879 0803 5731          pea       _ShapesArray.L
000030CA  069A      
000030CC  2F00      5732          move.l    D0,-(A7)
000030CE  4878 0007 5733          pea       7
000030D2  2F01      5734          move.l    D1,-(A7)
000030D4  4EB8 2F8E 5735          jsr       _tetris_rand
000030D8  221F      5736          move.l    (A7)+,D1
000030DA  2F00      5737          move.l    D0,-(A7)
000030DC  4EB8 2A98 5738          jsr       _mod_bld
000030E0  504F      5739          addq.w    #8,A7
000030E2  2200      5740          move.l    D0,D1
000030E4  201F      5741          move.l    (A7)+,D0
000030E6  205F      5742          move.l    (A7)+,A0
000030E8  C3FC 001C 5743          muls      #28,D1
000030EC  D1C1      5744          add.l     D1,A0
000030EE  2F08      5745          move.l    A0,-(A7)
000030F0  4EB8 2F9C 5746          jsr       _CopyShape
000030F4  504F      5747          addq.w    #8,A7
                    5748   ; current.col = mod_bld(tetris_rand(),(TETRIS_COLS-current.width+1));
000030F6  720F      5749          moveq     #15,D1
000030F8  4881      5750          ext.w     D1
000030FA  48C1      5751          ext.l     D1
000030FC  92AA 0010 5752          sub.l     16(A2),D1
00003100  5281      5753          addq.l    #1,D1
00003102  2F01      5754          move.l    D1,-(A7)
00003104  2F00      5755          move.l    D0,-(A7)
00003106  4EB8 2F8E 5756          jsr       _tetris_rand
0000310A  2200      5757          move.l    D0,D1
0000310C  201F      5758          move.l    (A7)+,D0
0000310E  2F01      5759          move.l    D1,-(A7)
00003110  4EB8 2A98 5760          jsr       _mod_bld
00003114  504F      5761          addq.w    #8,A7
00003116  2540 0018 5762          move.l    D0,24(A2)
                    5763   ; current.row = 0;
0000311A  42AA 0014 5764          clr.l     20(A2)
                    5765   ; if(!CheckPosition(&current)){
0000311E  2F0A      5766          move.l    A2,-(A7)
00003120  4EB8 3006 5767          jsr       _CheckPosition
00003124  584F      5768          addq.w    #4,A7
00003126  4A80      5769          tst.l     D0
00003128  6606      5770          bne.s     SetNewRandomShape_1
                    5771   ; GameOn = FALSE;
0000312A  4239 0803 5772          clr.b     _GameOn.L
0000312E  0676      
                    5773   SetNewRandomShape_1:
00003130  245F      5774          move.l    (A7)+,A2
00003132  4E75      5775          rts
                    5776   ; //printf("Game on = false\n");
                    5777   ; }
                    5778   ; }
                    5779   ; void RotateShape(Shape* shape){ //rotates clockwise
                    5780   _RotateShape:
00003134  4E56 FFE4 5781          link      A6,#-28
00003138  48E7 3E00 5782          movem.l   D2/D3/D4/D5/D6,-(A7)
0000313C  2C2E 0008 5783          move.l    8(A6),D6
                    5784   ; Shape temp;
                    5785   ; int i, j, k, width;
                    5786   ; CopyShape(shape,&temp);
00003140  486E FFE4 5787          pea       -28(A6)
00003144  2F06      5788          move.l    D6,-(A7)
00003146  4EB8 2F9C 5789          jsr       _CopyShape
0000314A  504F      5790          addq.w    #8,A7
                    5791   ; width = shape->width;
0000314C  2046      5792          move.l    D6,A0
0000314E  2828 0010 5793          move.l    16(A0),D4
                    5794   ; for(i = 0; i < width ; i++){
00003152  4282      5795          clr.l     D2
                    5796   RotateShape_1:
00003154  B484      5797          cmp.l     D4,D2
00003156  6C00 0030 5798          bge       RotateShape_3
                    5799   ; for(j = 0, k = width-1; j < width ; j++, k--){
0000315A  4283      5800          clr.l     D3
0000315C  2004      5801          move.l    D4,D0
0000315E  5380      5802          subq.l    #1,D0
00003160  2A00      5803          move.l    D0,D5
                    5804   RotateShape_4:
00003162  B684      5805          cmp.l     D4,D3
00003164  6C1E      5806          bge.s     RotateShape_6
                    5807   ; shape->array[i][j] = temp.array[k][i];
00003166  41EE FFE4 5808          lea       -28(A6),A0
0000316A  2005      5809          move.l    D5,D0
0000316C  E588      5810          lsl.l     #2,D0
0000316E  D1C0      5811          add.l     D0,A0
00003170  2246      5812          move.l    D6,A1
00003172  2002      5813          move.l    D2,D0
00003174  E588      5814          lsl.l     #2,D0
00003176  D3C0      5815          add.l     D0,A1
00003178  13B0 2800 5816          move.b    0(A0,D2.L),0(A1,D3.L)
0000317C  3800      
0000317E  5283      5817          addq.l    #1,D3
00003180  5385      5818          subq.l    #1,D5
00003182  60DE      5819          bra       RotateShape_4
                    5820   RotateShape_6:
00003184  5282      5821          addq.l    #1,D2
00003186  60CC      5822          bra       RotateShape_1
                    5823   RotateShape_3:
00003188  4CDF 007C 5824          movem.l   (A7)+,D2/D3/D4/D5/D6
0000318C  4E5E      5825          unlk      A6
0000318E  4E75      5826          rts
                    5827   ; }
                    5828   ; }
                    5829   ; }
                    5830   ; void WriteToTable(){
                    5831   _WriteToTable:
00003190  48E7 3020 5832          movem.l   D2/D3/A2,-(A7)
00003194  45F9 0803 5833          lea       _current.L,A2
00003198  067E      
                    5834   ; int i, j;
                    5835   ; for(i = 0; i < current.width ;i++){
0000319A  4283      5836          clr.l     D3
                    5837   WriteToTable_1:
0000319C  B6AA 0010 5838          cmp.l     16(A2),D3
000031A0  6C00 0048 5839          bge       WriteToTable_3
                    5840   ; for(j = 0; j < current.width ; j++){
000031A4  4282      5841          clr.l     D2
                    5842   WriteToTable_4:
000031A6  B4AA 0010 5843          cmp.l     16(A2),D2
000031AA  6C00 003A 5844          bge       WriteToTable_6
                    5845   ; if(current.array[i][j])
000031AE  2003      5846          move.l    D3,D0
000031B0  E588      5847          lsl.l     #2,D0
000031B2  41F2 0800 5848          lea       0(A2,D0.L),A0
000031B6  4A30 2800 5849          tst.b     0(A0,D2.L)
000031BA  6726      5850          beq.s     WriteToTable_7
                    5851   ; Table[current.row+i][current.col+j] = current.array[i][j];
000031BC  2003      5852          move.l    D3,D0
000031BE  E588      5853          lsl.l     #2,D0
000031C0  41F2 0800 5854          lea       0(A2,D0.L),A0
000031C4  202A 0014 5855          move.l    20(A2),D0
000031C8  D083      5856          add.l     D3,D0
000031CA  C1FC 000F 5857          muls      #15,D0
000031CE  43F9 0803 5858          lea       _Table.L,A1
000031D2  0546      
000031D4  D3C0      5859          add.l     D0,A1
000031D6  202A 0018 5860          move.l    24(A2),D0
000031DA  D082      5861          add.l     D2,D0
000031DC  13B0 2800 5862          move.b    0(A0,D2.L),0(A1,D0.L)
000031E0  0800      
                    5863   WriteToTable_7:
000031E2  5282      5864          addq.l    #1,D2
000031E4  60C0      5865          bra       WriteToTable_4
                    5866   WriteToTable_6:
000031E6  5283      5867          addq.l    #1,D3
000031E8  60B2      5868          bra       WriteToTable_1
                    5869   WriteToTable_3:
000031EA  4CDF 040C 5870          movem.l   (A7)+,D2/D3/A2
000031EE  4E75      5871          rts
                    5872   ; }
                    5873   ; }
                    5874   ; }
                    5875   ; void RemoveFullRowsAndUpdateScore(){
                    5876   _RemoveFullRowsAndUpdateScore:
000031F0  4E56 FFFC 5877          link      A6,#-4
000031F4  48E7 3F30 5878          movem.l   D2/D3/D4/D5/D6/D7/A2/A3,-(A7)
000031F8  45F9 0803 5879          lea       _Table.L,A2
000031FC  0546      
000031FE  47F9 0803 5880          lea       _Tetris_Speed.L,A3
00003202  075E      
                    5881   ; int i, j, sum, count=0;
00003204  7E00      5882          moveq     #0,D7
                    5883   ; int l, k;
                    5884   ; int compliment_to_say;
                    5885   ; for(i=0;i<TETRIS_ROWS;i++){
00003206  4284      5886          clr.l     D4
                    5887   RemoveFullRowsAndUpdateScore_1:
00003208  0C84 0000 5888          cmp.l     #20,D4
0000320C  0014      
0000320E  6C00 00E2 5889          bge       RemoveFullRowsAndUpdateScore_3
                    5890   ; sum = 0;
00003212  4286      5891          clr.l     D6
                    5892   ; for(j=0;j< TETRIS_COLS;j++) {
00003214  4285      5893          clr.l     D5
                    5894   RemoveFullRowsAndUpdateScore_4:
00003216  0C85 0000 5895          cmp.l     #15,D5
0000321A  000F      
0000321C  6C18      5896          bge.s     RemoveFullRowsAndUpdateScore_6
                    5897   ; sum+=Table[i][j];
0000321E  2004      5898          move.l    D4,D0
00003220  C1FC 000F 5899          muls      #15,D0
00003224  41F2 0800 5900          lea       0(A2,D0.L),A0
00003228  1030 5800 5901          move.b    0(A0,D5.L),D0
0000322C  4880      5902          ext.w     D0
0000322E  48C0      5903          ext.l     D0
00003230  DC80      5904          add.l     D0,D6
00003232  5285      5905          addq.l    #1,D5
00003234  60E0      5906          bra       RemoveFullRowsAndUpdateScore_4
                    5907   RemoveFullRowsAndUpdateScore_6:
                    5908   ; }
                    5909   ; if(sum==TETRIS_COLS){
00003236  0C86 0000 5910          cmp.l     #15,D6
0000323A  000F      
0000323C  6600 00AE 5911          bne       RemoveFullRowsAndUpdateScore_7
                    5912   ; count++;
00003240  5287      5913          addq.l    #1,D7
                    5914   ; for(k = i;k >=1;k--)
00003242  2604      5915          move.l    D4,D3
                    5916   RemoveFullRowsAndUpdateScore_9:
00003244  0C83 0000 5917          cmp.l     #1,D3
00003248  0001      
0000324A  6D2E      5918          blt.s     RemoveFullRowsAndUpdateScore_11
                    5919   ; for(l=0;l<TETRIS_COLS;l++)
0000324C  4282      5920          clr.l     D2
                    5921   RemoveFullRowsAndUpdateScore_12:
0000324E  0C82 0000 5922          cmp.l     #15,D2
00003252  000F      
00003254  6C20      5923          bge.s     RemoveFullRowsAndUpdateScore_14
                    5924   ; Table[k][l]=Table[k-1][l];
00003256  2003      5925          move.l    D3,D0
00003258  5380      5926          subq.l    #1,D0
0000325A  C1FC 000F 5927          muls      #15,D0
0000325E  41F2 0800 5928          lea       0(A2,D0.L),A0
00003262  2003      5929          move.l    D3,D0
00003264  C1FC 000F 5930          muls      #15,D0
00003268  43F2 0800 5931          lea       0(A2,D0.L),A1
0000326C  13B0 2800 5932          move.b    0(A0,D2.L),0(A1,D2.L)
00003270  2800      
00003272  5282      5933          addq.l    #1,D2
00003274  60D8      5934          bra       RemoveFullRowsAndUpdateScore_12
                    5935   RemoveFullRowsAndUpdateScore_14:
00003276  5383      5936          subq.l    #1,D3
00003278  60CA      5937          bra       RemoveFullRowsAndUpdateScore_9
                    5938   RemoveFullRowsAndUpdateScore_11:
                    5939   ; for(l=0;l<TETRIS_COLS;l++)
0000327A  4282      5940          clr.l     D2
                    5941   RemoveFullRowsAndUpdateScore_15:
0000327C  0C82 0000 5942          cmp.l     #15,D2
00003280  000F      
00003282  6C12      5943          bge.s     RemoveFullRowsAndUpdateScore_17
                    5944   ; Table[k][l]=0;
00003284  2003      5945          move.l    D3,D0
00003286  C1FC 000F 5946          muls      #15,D0
0000328A  41F2 0800 5947          lea       0(A2,D0.L),A0
0000328E  4230 2800 5948          clr.b     0(A0,D2.L)
00003292  5282      5949          addq.l    #1,D2
00003294  60E6      5950          bra       RemoveFullRowsAndUpdateScore_15
                    5951   RemoveFullRowsAndUpdateScore_17:
                    5952   ; compliment_to_say = mod_bld(tetris_rand(),NUM_LINE_SUCCESS_MESSAGES);
00003296  4878 0003 5953          pea       3
0000329A  2F00      5954          move.l    D0,-(A7)
0000329C  4EB8 2F8E 5955          jsr       _tetris_rand
000032A0  2200      5956          move.l    D0,D1
000032A2  201F      5957          move.l    (A7)+,D0
000032A4  2F01      5958          move.l    D1,-(A7)
000032A6  4EB8 2A98 5959          jsr       _mod_bld
000032AA  504F      5960          addq.w    #8,A7
000032AC  2D40 FFFC 5961          move.l    D0,-4(A6)
                    5962   ; switch (compliment_to_say) {
000032B0  202E FFFC 5963          move.l    -4(A6),D0
000032B4  0C80 0000 5964          cmp.l     #1,D0
000032B8  0001      
000032BA  6718      5965          beq.s     RemoveFullRowsAndUpdateScore_21
000032BC  6E06      5966          bgt.s     RemoveFullRowsAndUpdateScore_24
000032BE  4A80      5967          tst.l     D0
000032C0  670C      5968          beq.s     RemoveFullRowsAndUpdateScore_20
000032C2  601C      5969          bra.s     RemoveFullRowsAndUpdateScore_18
                    5970   RemoveFullRowsAndUpdateScore_24:
000032C4  0C80 0000 5971          cmp.l     #2,D0
000032C8  0002      
000032CA  670E      5972          beq.s     RemoveFullRowsAndUpdateScore_22
000032CC  6012      5973          bra.s     RemoveFullRowsAndUpdateScore_18
                    5974   RemoveFullRowsAndUpdateScore_20:
                    5975   ; case 0:  say_awesome(); break;
000032CE  4EB8 2C7A 5976          jsr       _say_awesome
000032D2  6010      5977          bra.s     RemoveFullRowsAndUpdateScore_19
                    5978   RemoveFullRowsAndUpdateScore_21:
                    5979   ; case 1:  say_cool(); break;
000032D4  4EB8 2C90 5980          jsr       _say_cool
000032D8  600A      5981          bra.s     RemoveFullRowsAndUpdateScore_19
                    5982   RemoveFullRowsAndUpdateScore_22:
                    5983   ; case 2:  say_yeah(); break;
000032DA  4EB8 2CA2 5984          jsr       _say_yeah
000032DE  6004      5985          bra.s     RemoveFullRowsAndUpdateScore_19
                    5986   RemoveFullRowsAndUpdateScore_18:
                    5987   ; default: say_yeah(); break;
000032E0  4EB8 2CA2 5988          jsr       _say_yeah
                    5989   RemoveFullRowsAndUpdateScore_19:
                    5990   ; }
                    5991   ; Tetris_Speed.speed = Tetris_Speed.speed + Tetris_Speed.speed_increase;
000032E4  2013      5992          move.l    (A3),D0
000032E6  D0AB 0004 5993          add.l     4(A3),D0
000032EA  2680      5994          move.l    D0,(A3)
                    5995   RemoveFullRowsAndUpdateScore_7:
000032EC  5284      5996          addq.l    #1,D4
000032EE  6000 FF18 5997          bra       RemoveFullRowsAndUpdateScore_1
                    5998   RemoveFullRowsAndUpdateScore_3:
                    5999   ; }
                    6000   ; }
                    6001   ; tetris_score += 100*count;
000032F2  2F07      6002          move.l    D7,-(A7)
000032F4  4878 0064 6003          pea       100
000032F8  4EB9 0000 6004          jsr       LMUL
000032FC  39D6      
000032FE  2017      6005          move.l    (A7),D0
00003300  504F      6006          addq.w    #8,A7
00003302  D1B9 0803 6007          add.l     D0,_tetris_score.L
00003306  0672      
00003308  4CDF 0CFC 6008          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3
0000330C  4E5E      6009          unlk      A6
0000330E  4E75      6010          rts
                    6011   ; }
                    6012   ; void PrintTable(){
                    6013   _PrintTable:
00003310  4E56 FE54 6014          link      A6,#-428
00003314  48E7 3038 6015          movem.l   D2/D3/A2/A3/A4,-(A7)
00003318  45F8 2D8C 6016          lea       _printw.L,A2
0000331C  47F9 0803 6017          lea       _current.L,A3
00003320  067E      
00003322  49EE FED4 6018          lea       -300(A6),A4
                    6019   ; int i, j;
                    6020   ; char score_str[128];
                    6021   ; char Buffer[TETRIS_ROWS][TETRIS_COLS];
                    6022   ; printw_x = 0;
00003326  42B9 0803 6023          clr.l     _printw_x.L
0000332A  0766      
                    6024   ; printw_y = 0;
0000332C  42B9 0803 6025          clr.l     _printw_y.L
00003330  076A      
                    6026   ; for(i = 0; i < TETRIS_ROWS ;i++){
00003332  4282      6027          clr.l     D2
                    6028   PrintTable_1:
00003334  0C82 0000 6029          cmp.l     #20,D2
00003338  0014      
0000333A  6C20      6030          bge.s     PrintTable_3
                    6031   ; for(j = 0; j < TETRIS_COLS ; j++){
0000333C  4283      6032          clr.l     D3
                    6033   PrintTable_4:
0000333E  0C83 0000 6034          cmp.l     #15,D3
00003342  000F      
00003344  6C12      6035          bge.s     PrintTable_6
                    6036   ; Buffer[i][j] = 0;
00003346  2002      6037          move.l    D2,D0
00003348  C1FC 000F 6038          muls      #15,D0
0000334C  41F4 0800 6039          lea       0(A4,D0.L),A0
00003350  4230 3800 6040          clr.b     0(A0,D3.L)
00003354  5283      6041          addq.l    #1,D3
00003356  60E6      6042          bra       PrintTable_4
                    6043   PrintTable_6:
00003358  5282      6044          addq.l    #1,D2
0000335A  60D8      6045          bra       PrintTable_1
                    6046   PrintTable_3:
                    6047   ; }
                    6048   ; }
                    6049   ; for(i = 0; i < current.width ;i++){
0000335C  4282      6050          clr.l     D2
                    6051   PrintTable_7:
0000335E  B4AB 0010 6052          cmp.l     16(A3),D2
00003362  6C00 0044 6053          bge       PrintTable_9
                    6054   ; for(j = 0; j < current.width ; j++){
00003366  4283      6055          clr.l     D3
                    6056   PrintTable_10:
00003368  B6AB 0010 6057          cmp.l     16(A3),D3
0000336C  6C00 0036 6058          bge       PrintTable_12
                    6059   ; if(current.array[i][j])
00003370  2002      6060          move.l    D2,D0
00003372  E588      6061          lsl.l     #2,D0
00003374  41F3 0800 6062          lea       0(A3,D0.L),A0
00003378  4A30 3800 6063          tst.b     0(A0,D3.L)
0000337C  6722      6064          beq.s     PrintTable_13
                    6065   ; Buffer[current.row+i][current.col+j] = current.array[i][j];
0000337E  2002      6066          move.l    D2,D0
00003380  E588      6067          lsl.l     #2,D0
00003382  41F3 0800 6068          lea       0(A3,D0.L),A0
00003386  202B 0014 6069          move.l    20(A3),D0
0000338A  D082      6070          add.l     D2,D0
0000338C  C1FC 000F 6071          muls      #15,D0
00003390  43F4 0800 6072          lea       0(A4,D0.L),A1
00003394  202B 0018 6073          move.l    24(A3),D0
00003398  D083      6074          add.l     D3,D0
0000339A  13B0 3800 6075          move.b    0(A0,D3.L),0(A1,D0.L)
0000339E  0800      
                    6076   PrintTable_13:
000033A0  5283      6077          addq.l    #1,D3
000033A2  60C4      6078          bra       PrintTable_10
                    6079   PrintTable_12:
000033A4  5282      6080          addq.l    #1,D2
000033A6  60B6      6081          bra       PrintTable_7
                    6082   PrintTable_9:
                    6083   ; }
                    6084   ; }
                    6085   ; go_to_top_corner();
000033A8  4EB8 2C2C 6086          jsr       _go_to_top_corner
                    6087   ; printw("\n\n\n","initial_newline");
000033AC  4879 0000 6088          pea       @tetris_7.L
000033B0  4FC8      
000033B2  4879 0000 6089          pea       @tetris_6.L
000033B6  4FC4      
000033B8  4E92      6090          jsr       (A2)
000033BA  504F      6091          addq.w    #8,A7
                    6092   ; for(i=0; i<TETRIS_COLS-9; i++) {
000033BC  4282      6093          clr.l     D2
                    6094   PrintTable_15:
000033BE  0C82 0000 6095          cmp.l     #6,D2
000033C2  0006      
000033C4  6C14      6096          bge.s     PrintTable_17
                    6097   ; printw(" ","space");
000033C6  4879 0000 6098          pea       @tetris_9.L
000033CA  4FDA      
000033CC  4879 0000 6099          pea       @tetris_8.L
000033D0  4FD8      
000033D2  4E92      6100          jsr       (A2)
000033D4  504F      6101          addq.w    #8,A7
000033D6  5282      6102          addq.l    #1,D2
000033D8  60E4      6103          bra       PrintTable_15
                    6104   PrintTable_17:
                    6105   ; }
                    6106   ; printw("CPEN412 Tetris\n","title");
000033DA  4879 0000 6107          pea       @tetris_11.L
000033DE  4FF0      
000033E0  4879 0000 6108          pea       @tetris_10.L
000033E4  4FE0      
000033E6  4E92      6109          jsr       (A2)
000033E8  504F      6110          addq.w    #8,A7
                    6111   ; for(i = 0; i < TETRIS_ROWS ;i++){
000033EA  4282      6112          clr.l     D2
                    6113   PrintTable_18:
000033EC  0C82 0000 6114          cmp.l     #20,D2
000033F0  0014      
000033F2  6C00 006A 6115          bge       PrintTable_20
                    6116   ; for(j = 0; j < TETRIS_COLS ; j++){
000033F6  4283      6117          clr.l     D3
                    6118   PrintTable_21:
000033F8  0C83 0000 6119          cmp.l     #15,D3
000033FC  000F      
000033FE  6C00 004A 6120          bge       PrintTable_23
                    6121   ; if (Table[i][j] + Buffer[i][j]) {
00003402  2002      6122          move.l    D2,D0
00003404  C1FC 000F 6123          muls      #15,D0
00003408  41F9 0803 6124          lea       _Table.L,A0
0000340C  0546      
0000340E  D1C0      6125          add.l     D0,A0
00003410  1030 3800 6126          move.b    0(A0,D3.L),D0
00003414  2202      6127          move.l    D2,D1
00003416  C3FC 000F 6128          muls      #15,D1
0000341A  41F4 1800 6129          lea       0(A4,D1.L),A0
0000341E  D030 3800 6130          add.b     0(A0,D3.L),D0
00003422  6712      6131          beq.s     PrintTable_24
                    6132   ; printw("#","table#");
00003424  4879 0000 6133          pea       @tetris_13.L
00003428  4FF8      
0000342A  4879 0000 6134          pea       @tetris_12.L
0000342E  4FF6      
00003430  4E92      6135          jsr       (A2)
00003432  504F      6136          addq.w    #8,A7
00003434  6010      6137          bra.s     PrintTable_25
                    6138   PrintTable_24:
                    6139   ; } else {
                    6140   ; printw(".","table.");
00003436  4879 0000 6141          pea       @tetris_15.L
0000343A  5002      
0000343C  4879 0000 6142          pea       @tetris_14.L
00003440  5000      
00003442  4E92      6143          jsr       (A2)
00003444  504F      6144          addq.w    #8,A7
                    6145   PrintTable_25:
00003446  5283      6146          addq.l    #1,D3
00003448  60AE      6147          bra       PrintTable_21
                    6148   PrintTable_23:
                    6149   ; }
                    6150   ; //printw(" ","space2");
                    6151   ; }
                    6152   ; printw("\n","newline1");
0000344A  4879 0000 6153          pea       @tetris_17.L
0000344E  500C      
00003450  4879 0000 6154          pea       @tetris_16.L
00003454  500A      
00003456  4E92      6155          jsr       (A2)
00003458  504F      6156          addq.w    #8,A7
0000345A  5282      6157          addq.l    #1,D2
0000345C  608E      6158          bra       PrintTable_18
                    6159   PrintTable_20:
                    6160   ; }
                    6161   ; sprintf(score_str,"\nScore: %d\n",tetris_score);
0000345E  2F39 0803 6162          move.l    _tetris_score.L,-(A7)
00003462  0672      
00003464  4879 0000 6163          pea       @tetris_18.L
00003468  5016      
0000346A  486E FE54 6164          pea       -428(A6)
0000346E  4EB9 0000 6165          jsr       _sprintf
00003472  3AC0      
00003474  DEFC 000C 6166          add.w     #12,A7
                    6167   ; printw(score_str,"scoreprint");
00003478  4879 0000 6168          pea       @tetris_19.L
0000347C  5022      
0000347E  486E FE54 6169          pea       -428(A6)
00003482  4E92      6170          jsr       (A2)
00003484  504F      6171          addq.w    #8,A7
00003486  4CDF 1C0C 6172          movem.l   (A7)+,D2/D3/A2/A3/A4
0000348A  4E5E      6173          unlk      A6
0000348C  4E75      6174          rts
                    6175   ; }
                    6176   ; void ManipulateCurrent(int action){
                    6177   _ManipulateCurrent:
0000348E  4E56 FFE4 6178          link      A6,#-28
00003492  48E7 0038 6179          movem.l   A2/A3/A4,-(A7)
00003496  45EE FFE4 6180          lea       -28(A6),A2
0000349A  47F9 0803 6181          lea       _current.L,A3
0000349E  067E      
000034A0  49F8 3006 6182          lea       _CheckPosition.L,A4
                    6183   ; Shape temp;
                    6184   ; CopyShape(&current,&temp);
000034A4  2F0A      6185          move.l    A2,-(A7)
000034A6  2F0B      6186          move.l    A3,-(A7)
000034A8  4EB8 2F9C 6187          jsr       _CopyShape
000034AC  504F      6188          addq.w    #8,A7
                    6189   ; switch(action){
000034AE  202E 0008 6190          move.l    8(A6),D0
000034B2  0C80 0000 6191          cmp.l     #115,D0
000034B6  0073      
000034B8  672C      6192          beq.s     ManipulateCurrent_3
000034BA  6E1C      6193          bgt.s     ManipulateCurrent_7
000034BC  0C80 0000 6194          cmp.l     #100,D0
000034C0  0064      
000034C2  6700 0056 6195          beq       ManipulateCurrent_4
000034C6  6E00 00B6 6196          bgt       ManipulateCurrent_2
000034CA  0C80 0000 6197          cmp.l     #97,D0
000034CE  0061      
000034D0  6700 006E 6198          beq       ManipulateCurrent_5
000034D4  6000 00A8 6199          bra       ManipulateCurrent_2
                    6200   ManipulateCurrent_7:
000034D8  0C80 0000 6201          cmp.l     #119,D0
000034DC  0077      
000034DE  6700 0084 6202          beq       ManipulateCurrent_6
000034E2  6000 009A 6203          bra       ManipulateCurrent_2
                    6204   ManipulateCurrent_3:
                    6205   ; case 's':
                    6206   ; temp.row++;  //move down
000034E6  200A      6207          move.l    A2,D0
000034E8  0680 0000 6208          add.l     #20,D0
000034EC  0014      
000034EE  2040      6209          move.l    D0,A0
000034F0  5290      6210          addq.l    #1,(A0)
                    6211   ; if(CheckPosition(&temp)) {
000034F2  2F0A      6212          move.l    A2,-(A7)
000034F4  4E94      6213          jsr       (A4)
000034F6  584F      6214          addq.w    #4,A7
000034F8  4A80      6215          tst.l     D0
000034FA  670E      6216          beq.s     ManipulateCurrent_8
                    6217   ; current.row++;
000034FC  200B      6218          move.l    A3,D0
000034FE  0680 0000 6219          add.l     #20,D0
00003502  0014      
00003504  2040      6220          move.l    D0,A0
00003506  5290      6221          addq.l    #1,(A0)
00003508  600C      6222          bra.s     ManipulateCurrent_9
                    6223   ManipulateCurrent_8:
                    6224   ; } else {
                    6225   ; WriteToTable();
0000350A  4EB8 3190 6226          jsr       _WriteToTable
                    6227   ; RemoveFullRowsAndUpdateScore();
0000350E  4EB8 31F0 6228          jsr       _RemoveFullRowsAndUpdateScore
                    6229   ; SetNewRandomShape();
00003512  4EB8 30BC 6230          jsr       _SetNewRandomShape
                    6231   ManipulateCurrent_9:
                    6232   ; }
                    6233   ; break;
00003516  6000 0066 6234          bra       ManipulateCurrent_2
                    6235   ManipulateCurrent_4:
                    6236   ; case 'd':
                    6237   ; temp.col++;  //move right
0000351A  200A      6238          move.l    A2,D0
0000351C  0680 0000 6239          add.l     #24,D0
00003520  0018      
00003522  2040      6240          move.l    D0,A0
00003524  5290      6241          addq.l    #1,(A0)
                    6242   ; if(CheckPosition(&temp))
00003526  2F0A      6243          move.l    A2,-(A7)
00003528  4E94      6244          jsr       (A4)
0000352A  584F      6245          addq.w    #4,A7
0000352C  4A80      6246          tst.l     D0
0000352E  670C      6247          beq.s     ManipulateCurrent_10
                    6248   ; current.col++;
00003530  200B      6249          move.l    A3,D0
00003532  0680 0000 6250          add.l     #24,D0
00003536  0018      
00003538  2040      6251          move.l    D0,A0
0000353A  5290      6252          addq.l    #1,(A0)
                    6253   ManipulateCurrent_10:
                    6254   ; break;
0000353C  6000 0040 6255          bra       ManipulateCurrent_2
                    6256   ManipulateCurrent_5:
                    6257   ; case 'a':
                    6258   ; temp.col--;  //move left
00003540  200A      6259          move.l    A2,D0
00003542  0680 0000 6260          add.l     #24,D0
00003546  0018      
00003548  2040      6261          move.l    D0,A0
0000354A  5390      6262          subq.l    #1,(A0)
                    6263   ; if(CheckPosition(&temp))
0000354C  2F0A      6264          move.l    A2,-(A7)
0000354E  4E94      6265          jsr       (A4)
00003550  584F      6266          addq.w    #4,A7
00003552  4A80      6267          tst.l     D0
00003554  670C      6268          beq.s     ManipulateCurrent_12
                    6269   ; current.col--;
00003556  200B      6270          move.l    A3,D0
00003558  0680 0000 6271          add.l     #24,D0
0000355C  0018      
0000355E  2040      6272          move.l    D0,A0
00003560  5390      6273          subq.l    #1,(A0)
                    6274   ManipulateCurrent_12:
                    6275   ; break;
00003562  601A      6276          bra.s     ManipulateCurrent_2
                    6277   ManipulateCurrent_6:
                    6278   ; case 'w':
                    6279   ; RotateShape(&temp); // rotate clockwise
00003564  2F0A      6280          move.l    A2,-(A7)
00003566  4EB8 3134 6281          jsr       _RotateShape
0000356A  584F      6282          addq.w    #4,A7
                    6283   ; if(CheckPosition(&temp))
0000356C  2F0A      6284          move.l    A2,-(A7)
0000356E  4E94      6285          jsr       (A4)
00003570  584F      6286          addq.w    #4,A7
00003572  4A80      6287          tst.l     D0
00003574  6708      6288          beq.s     ManipulateCurrent_14
                    6289   ; RotateShape(&current);
00003576  2F0B      6290          move.l    A3,-(A7)
00003578  4EB8 3134 6291          jsr       _RotateShape
0000357C  584F      6292          addq.w    #4,A7
                    6293   ManipulateCurrent_14:
                    6294   ; break;
                    6295   ManipulateCurrent_2:
                    6296   ; }
                    6297   ; PrintTable();
0000357E  4EB8 3310 6298          jsr       _PrintTable
00003582  4CDF 1C00 6299          movem.l   (A7)+,A2/A3/A4
00003586  4E5E      6300          unlk      A6
00003588  4E75      6301          rts
                    6302   ; }
                    6303   ; void initTetris_Speed()
                    6304   ; {
                    6305   _initTetris_Speed:
                    6306   ; Tetris_Speed.speed          = INITIAL_TETRIS_SPEED ;
0000358A  23FC 0000 6307          move.l    #2,_Tetris_Speed.L
0000358E  0002 0803 
00003592  075E      
                    6308   ; Tetris_Speed.speed_increase = TETRIS_SPEED_INCREASE;
00003594  23FC 0000 6309          move.l    #1,_Tetris_Speed+4.L
00003598  0001 0803 
0000359C  0762      
0000359E  4E75      6310          rts
                    6311   ; }
                    6312   ; void tetris_mainloop()
                    6313   ; {
                    6314   _tetris_mainloop:
000035A0  4E56 FFFC 6315          link      A6,#-4
000035A4  2F02      6316          move.l    D2,-(A7)
                    6317   ; int current_time;
                    6318   ; int got_game_over;
                    6319   ; while(1){
                    6320   tetris_mainloop_1:
                    6321   ; current_time = clock();
000035A6  4EB8 2D76 6322          jsr       _clock
000035AA  2400      6323          move.l    D0,D2
                    6324   ; if (kbhit()) {
000035AC  4EB8 09E2 6325          jsr       _kbhit
000035B0  4A80      6326          tst.l     D0
000035B2  6720      6327          beq.s     tetris_mainloop_6
                    6328   ; ManipulateCurrent(getch());
000035B4  2F00      6329          move.l    D0,-(A7)
000035B6  4EB9 0000 6330          jsr       _getch
000035BA  3B68      
000035BC  2200      6331          move.l    D0,D1
000035BE  201F      6332          move.l    (A7)+,D0
000035C0  2F01      6333          move.l    D1,-(A7)
000035C2  4EB8 348E 6334          jsr       _ManipulateCurrent
000035C6  584F      6335          addq.w    #4,A7
                    6336   ; if (!GameOn) {
000035C8  4A39 0803 6337          tst.b     _GameOn.L
000035CC  0676      
000035CE  6604      6338          bne.s     tetris_mainloop_6
                    6339   ; break;
000035D0  6000 003C 6340          bra       tetris_mainloop_3
                    6341   tetris_mainloop_6:
                    6342   ; }
                    6343   ; }
                    6344   ; if (current_time >= ((MILLISECONDS_PER_SEC/Tetris_Speed.speed) + tetris_timer)) {
000035D4  4878 03E8 6345          pea       1000
000035D8  2F39 0803 6346          move.l    _Tetris_Speed.L,-(A7)
000035DC  075E      
000035DE  4EB9 0000 6347          jsr       LDIV
000035E2  38F8      
000035E4  2017      6348          move.l    (A7),D0
000035E6  504F      6349          addq.w    #8,A7
000035E8  D0B9 0803 6350          add.l     _tetris_timer.L,D0
000035EC  0678      
000035EE  B480      6351          cmp.l     D0,D2
000035F0  6D1A      6352          blt.s     tetris_mainloop_8
                    6353   ; ManipulateCurrent('s');
000035F2  4878 0073 6354          pea       115
000035F6  4EB8 348E 6355          jsr       _ManipulateCurrent
000035FA  584F      6356          addq.w    #4,A7
                    6357   ; if (!GameOn) {
000035FC  4A39 0803 6358          tst.b     _GameOn.L
00003600  0676      
00003602  6602      6359          bne.s     tetris_mainloop_10
                    6360   ; break;
00003604  6008      6361          bra.s     tetris_mainloop_3
                    6362   tetris_mainloop_10:
                    6363   ; }
                    6364   ; tetris_timer = current_time;
00003606  23C2 0803 6365          move.l    D2,_tetris_timer.L
0000360A  0678      
                    6366   tetris_mainloop_8:
0000360C  6098      6367          bra       tetris_mainloop_1
                    6368   tetris_mainloop_3:
0000360E  241F      6369          move.l    (A7)+,D2
00003610  4E5E      6370          unlk      A6
00003612  4E75      6371          rts
                    6372   ; }
                    6373   ; }
                    6374   ; }
                    6375   ; // void test(){
                    6376   ; // 	printf("Testing\n");
                    6377   ; // 	while (1){
                    6378   ; // 		octlAddress = 0xF3;
                    6379   ; // 		octlAddress1 = 0xE2;
                    6380   ; // 	}
                    6381   ; // }
                    6382   ; int tetris_main() {
                    6383   _tetris_main:
00003614  4E56 FF7C 6384          link      A6,#-132
00003618  48E7 3030 6385          movem.l   D2/D3/A2/A3,-(A7)
0000361C  45F9 0803 6386          lea       _ShapesArray.L,A2
00003620  069A      
00003622  47F9 0000 6387          lea       _printf.L,A3
00003626  3B36      
                    6388   ; int i, j;
                    6389   ; int test1;
                    6390   ; char score_str[128];
                    6391   ; // test();
                    6392   ; timer_count = 0;
00003628  42B9 0803 6393          clr.l     _timer_count.L
0000362C  0772      
                    6394   ; printw_x = 0;
0000362E  42B9 0803 6395          clr.l     _printw_x.L
00003632  0766      
                    6396   ; printw_y = 0;
00003634  42B9 0803 6397          clr.l     _printw_y.L
00003638  076A      
                    6398   ; GameOn = TRUE;
0000363A  13FC 0001 6399          move.b    #1,_GameOn.L
0000363E  0803 0676 
                    6400   ; InstallExceptionHandler(Timer_ISR, 30);
00003642  4878 001E 6401          pea       30
00003646  4878 2AD4 6402          pea       _Timer_ISR.L
0000364A  4EB8 093A 6403          jsr       _InstallExceptionHandler
0000364E  504F      6404          addq.w    #8,A7
                    6405   ; Timer1Data = 0x25;  // 100 ms
00003650  13FC 0025 6406          move.b    #37,4194352
00003654  0040 0030 
                    6407   ; Timer1Control = 3;  // enable timer, periodic mode
00003658  13FC 0003 6408          move.b    #3,4194354
0000365C  0040 0032 
                    6409   ; // InstallExceptionHandler(Timer_ISR, 29);
                    6410   ; // InstallExceptionHandler(Timer_ISR, 28);
                    6411   ; // InstallExceptionHandler(Timer_ISR, 27);
                    6412   ; // InstallExceptionHandler(Timer_ISR, 26);
                    6413   ; // InstallExceptionHandler(Timer_ISR, 25);
                    6414   ; octl = OCTL_TETRIS_DEFAULT;
00003660  13FC 00A2 6415          move.b    #162,_octl.L
00003664  0803 067C 
                    6416   ; octlAddress = octl;
00003668  13F9 0803 6417          move.b    _octl.L,-16580608
0000366C  067C FF03 
00003670  0000      
                    6418   ; for(i = 0; i < TETRIS_ROWS ;i++){
00003672  4283      6419          clr.l     D3
                    6420   tetris_main_1:
00003674  0C83 0000 6421          cmp.l     #20,D3
00003678  0014      
0000367A  6C24      6422          bge.s     tetris_main_3
                    6423   ; for(j = 0; j < TETRIS_COLS ; j++){
0000367C  4282      6424          clr.l     D2
                    6425   tetris_main_4:
0000367E  0C82 0000 6426          cmp.l     #15,D2
00003682  000F      
00003684  6C16      6427          bge.s     tetris_main_6
                    6428   ; Table[i][j] = 0;
00003686  2003      6429          move.l    D3,D0
00003688  C1FC 000F 6430          muls      #15,D0
0000368C  41F9 0803 6431          lea       _Table.L,A0
00003690  0546      
00003692  D1C0      6432          add.l     D0,A0
00003694  4230 2800 6433          clr.b     0(A0,D2.L)
00003698  5282      6434          addq.l    #1,D2
0000369A  60E2      6435          bra       tetris_main_4
                    6436   tetris_main_6:
0000369C  5283      6437          addq.l    #1,D3
0000369E  60D4      6438          bra       tetris_main_1
                    6439   tetris_main_3:
                    6440   ; }
                    6441   ; }
                    6442   ; //S shape
                    6443   ; ShapesArray[0].array[0][0] = 	0;
000036A0  4212      6444          clr.b     (A2)
                    6445   ; ShapesArray[0].array[0][1] = 	1;
000036A2  157C 0001 6446          move.b    #1,1(A2)
000036A6  0001      
                    6447   ; ShapesArray[0].array[0][2] = 	1;
000036A8  157C 0001 6448          move.b    #1,2(A2)
000036AC  0002      
                    6449   ; ShapesArray[0].array[1][0] = 	1;
000036AE  157C 0001 6450          move.b    #1,4(A2)
000036B2  0004      
                    6451   ; ShapesArray[0].array[1][1] = 	1;
000036B4  157C 0001 6452          move.b    #1,4+1(A2)
000036B8  0005      
                    6453   ; ShapesArray[0].array[1][2] = 	0;
000036BA  422A 0006 6454          clr.b     4+2(A2)
                    6455   ; ShapesArray[0].array[2][0] = 	0;
000036BE  422A 0008 6456          clr.b     8(A2)
                    6457   ; ShapesArray[0].array[2][1] = 	0;
000036C2  422A 0009 6458          clr.b     8+1(A2)
                    6459   ; ShapesArray[0].array[2][2] = 	0;
000036C6  422A 000A 6460          clr.b     8+2(A2)
                    6461   ; ShapesArray[0].width       = 	3;
000036CA  257C 0000 6462          move.l    #3,16(A2)
000036CE  0003 0010 
                    6463   ; //Z shape
                    6464   ; ShapesArray[1].array[0][0] = 	1;
000036D2  157C 0001 6465          move.b    #1,28(A2)
000036D6  001C      
                    6466   ; ShapesArray[1].array[0][1] = 	1;
000036D8  157C 0001 6467          move.b    #1,28+1(A2)
000036DC  001D      
                    6468   ; ShapesArray[1].array[0][2] = 	0;
000036DE  422A 001E 6469          clr.b     28+2(A2)
                    6470   ; ShapesArray[1].array[1][0] = 	0;
000036E2  422A 0020 6471          clr.b     28+4(A2)
                    6472   ; ShapesArray[1].array[1][1] = 	1;
000036E6  157C 0001 6473          move.b    #1,28+4+1(A2)
000036EA  0021      
                    6474   ; ShapesArray[1].array[1][2] = 	1;
000036EC  157C 0001 6475          move.b    #1,28+4+2(A2)
000036F0  0022      
                    6476   ; ShapesArray[1].array[2][0] = 	0;
000036F2  422A 0024 6477          clr.b     28+8(A2)
                    6478   ; ShapesArray[1].array[2][1] = 	0;
000036F6  422A 0025 6479          clr.b     28+8+1(A2)
                    6480   ; ShapesArray[1].array[2][2] = 	0;
000036FA  422A 0026 6481          clr.b     28+8+2(A2)
                    6482   ; ShapesArray[1].width       = 	3;
000036FE  257C 0000 6483          move.l    #3,44(A2)
00003702  0003 002C 
                    6484   ; //T shape
                    6485   ; ShapesArray[2].array[0][0] = 	0;
00003706  422A 0038 6486          clr.b     56(A2)
                    6487   ; ShapesArray[2].array[0][1] = 	1;
0000370A  157C 0001 6488          move.b    #1,56+1(A2)
0000370E  0039      
                    6489   ; ShapesArray[2].array[0][2] = 	0;
00003710  422A 003A 6490          clr.b     56+2(A2)
                    6491   ; ShapesArray[2].array[1][0] = 	1;
00003714  157C 0001 6492          move.b    #1,56+4(A2)
00003718  003C      
                    6493   ; ShapesArray[2].array[1][1] = 	1;
0000371A  157C 0001 6494          move.b    #1,56+4+1(A2)
0000371E  003D      
                    6495   ; ShapesArray[2].array[1][2] = 	1;
00003720  157C 0001 6496          move.b    #1,56+4+2(A2)
00003724  003E      
                    6497   ; ShapesArray[2].array[2][0] = 	0;
00003726  422A 0040 6498          clr.b     56+8(A2)
                    6499   ; ShapesArray[2].array[2][1] = 	0;
0000372A  422A 0041 6500          clr.b     56+8+1(A2)
                    6501   ; ShapesArray[2].array[2][2] = 	0;
0000372E  422A 0042 6502          clr.b     56+8+2(A2)
                    6503   ; ShapesArray[2].width       = 	3;
00003732  257C 0000 6504          move.l    #3,72(A2)
00003736  0003 0048 
                    6505   ; //L shape
                    6506   ; ShapesArray[3].array[0][0] = 	0;
0000373A  422A 0054 6507          clr.b     84(A2)
                    6508   ; ShapesArray[3].array[0][1] = 	0;
0000373E  422A 0055 6509          clr.b     84+1(A2)
                    6510   ; ShapesArray[3].array[0][2] = 	1;
00003742  157C 0001 6511          move.b    #1,84+2(A2)
00003746  0056      
                    6512   ; ShapesArray[3].array[1][0] = 	1;
00003748  157C 0001 6513          move.b    #1,84+4(A2)
0000374C  0058      
                    6514   ; ShapesArray[3].array[1][1] = 	1;
0000374E  157C 0001 6515          move.b    #1,84+4+1(A2)
00003752  0059      
                    6516   ; ShapesArray[3].array[1][2] = 	1;
00003754  157C 0001 6517          move.b    #1,84+4+2(A2)
00003758  005A      
                    6518   ; ShapesArray[3].array[2][0] = 	0;
0000375A  422A 005C 6519          clr.b     84+8(A2)
                    6520   ; ShapesArray[3].array[2][1] = 	0;
0000375E  422A 005D 6521          clr.b     84+8+1(A2)
                    6522   ; ShapesArray[3].array[2][2] = 	0;
00003762  422A 005E 6523          clr.b     84+8+2(A2)
                    6524   ; ShapesArray[3].width       = 	3;
00003766  257C 0000 6525          move.l    #3,100(A2)
0000376A  0003 0064 
                    6526   ; //flipped L shape
                    6527   ; ShapesArray[4].array[0][0] = 	1;
0000376E  157C 0001 6528          move.b    #1,112(A2)
00003772  0070      
                    6529   ; ShapesArray[4].array[0][1] = 	0;
00003774  422A 0071 6530          clr.b     112+1(A2)
                    6531   ; ShapesArray[4].array[0][2] = 	0;
00003778  422A 0072 6532          clr.b     112+2(A2)
                    6533   ; ShapesArray[4].array[1][0] = 	1;
0000377C  157C 0001 6534          move.b    #1,112+4(A2)
00003780  0074      
                    6535   ; ShapesArray[4].array[1][1] = 	1;
00003782  157C 0001 6536          move.b    #1,112+4+1(A2)
00003786  0075      
                    6537   ; ShapesArray[4].array[1][2] = 	1;
00003788  157C 0001 6538          move.b    #1,112+4+2(A2)
0000378C  0076      
                    6539   ; ShapesArray[4].array[2][0] = 	0;
0000378E  422A 0078 6540          clr.b     112+8(A2)
                    6541   ; ShapesArray[4].array[2][1] = 	0;
00003792  422A 0079 6542          clr.b     112+8+1(A2)
                    6543   ; ShapesArray[4].array[2][2] = 	0;
00003796  422A 007A 6544          clr.b     112+8+2(A2)
                    6545   ; ShapesArray[4].width       = 	3;
0000379A  257C 0000 6546          move.l    #3,128(A2)
0000379E  0003 0080 
                    6547   ; //square shape
                    6548   ; ShapesArray[5].array[0][0] = 	1;
000037A2  157C 0001 6549          move.b    #1,140(A2)
000037A6  008C      
                    6550   ; ShapesArray[5].array[0][1] = 	1;
000037A8  157C 0001 6551          move.b    #1,140+1(A2)
000037AC  008D      
                    6552   ; ShapesArray[5].array[1][0] = 	1;
000037AE  157C 0001 6553          move.b    #1,140+4(A2)
000037B2  0090      
                    6554   ; ShapesArray[5].array[1][1] = 	1;
000037B4  157C 0001 6555          move.b    #1,140+4+1(A2)
000037B8  0091      
                    6556   ; ShapesArray[5].width       = 	2;
000037BA  257C 0000 6557          move.l    #2,156(A2)
000037BE  0002 009C 
                    6558   ; //long bar shape
                    6559   ; ShapesArray[6].array[0][0] = 	0;
000037C2  422A 00A8 6560          clr.b     168(A2)
                    6561   ; ShapesArray[6].array[0][1] = 	0;
000037C6  422A 00A9 6562          clr.b     168+1(A2)
                    6563   ; ShapesArray[6].array[0][2] = 	0;
000037CA  422A 00AA 6564          clr.b     168+2(A2)
                    6565   ; ShapesArray[6].array[0][3] = 	0;
000037CE  422A 00AB 6566          clr.b     168+3(A2)
                    6567   ; ShapesArray[6].array[1][0] = 	1;
000037D2  157C 0001 6568          move.b    #1,168+4(A2)
000037D6  00AC      
                    6569   ; ShapesArray[6].array[1][1] = 	1;
000037D8  157C 0001 6570          move.b    #1,168+4+1(A2)
000037DC  00AD      
                    6571   ; ShapesArray[6].array[1][2] = 	1;
000037DE  157C 0001 6572          move.b    #1,168+4+2(A2)
000037E2  00AE      
                    6573   ; ShapesArray[6].array[1][3] = 	1;
000037E4  157C 0001 6574          move.b    #1,168+4+3(A2)
000037E8  00AF      
                    6575   ; ShapesArray[6].array[2][0] = 	0;
000037EA  422A 00B0 6576          clr.b     168+8(A2)
                    6577   ; ShapesArray[6].array[2][1] = 	0;
000037EE  422A 00B1 6578          clr.b     168+8+1(A2)
                    6579   ; ShapesArray[6].array[2][2] = 	0;
000037F2  422A 00B2 6580          clr.b     168+8+2(A2)
                    6581   ; ShapesArray[6].array[2][3] = 	0;
000037F6  422A 00B3 6582          clr.b     168+8+3(A2)
                    6583   ; ShapesArray[6].array[3][0] = 	0;
000037FA  422A 00B4 6584          clr.b     168+12(A2)
                    6585   ; ShapesArray[6].array[3][1] = 	0;
000037FE  422A 00B5 6586          clr.b     168+12+1(A2)
                    6587   ; ShapesArray[6].array[3][2] = 	0;
00003802  422A 00B6 6588          clr.b     168+12+2(A2)
                    6589   ; ShapesArray[6].array[3][3] = 	0;
00003806  422A 00B7 6590          clr.b     168+12+3(A2)
                    6591   ; ShapesArray[6].width       = 	4;
0000380A  257C 0000 6592          move.l    #4,184(A2)
0000380E  0004 00B8 
                    6593   ; set_color(OCTL_TETRIS_DEFAULT);
00003812  4878 00A2 6594          pea       162
00003816  4EB8 2D56 6595          jsr       _set_color
0000381A  584F      6596          addq.w    #4,A7
                    6597   ; set_vga_control_reg(OCTL_TETRIS_DEFAULT);
0000381C  4878 00A2 6598          pea       162
00003820  4EB8 2D28 6599          jsr       _set_vga_control_reg
00003824  584F      6600          addq.w    #4,A7
                    6601   ; tetris_score = 0;
00003826  42B9 0803 6602          clr.l     _tetris_score.L
0000382A  0672      
                    6603   ; initTetris_Speed();
0000382C  4EB8 358A 6604          jsr       _initTetris_Speed
                    6605   ; clear_screen();
00003830  4EB8 2C38 6606          jsr       _clear_screen
                    6607   ; tetris_timer = clock();
00003834  4EB8 2D76 6608          jsr       _clock
00003838  23C0 0803 6609          move.l    D0,_tetris_timer.L
0000383C  0678      
                    6610   ; SetNewRandomShape();
0000383E  4EB8 30BC 6611          jsr       _SetNewRandomShape
                    6612   ; PrintTable();	
00003842  4EB8 3310 6613          jsr       _PrintTable
                    6614   ; tetris_mainloop();
00003846  4EB8 35A0 6615          jsr       _tetris_mainloop
                    6616   ; gameOver();
0000384A  4EB8 2E82 6617          jsr       _gameOver
                    6618   ; for(i = 0; i < TETRIS_ROWS ;i++){
0000384E  4283      6619          clr.l     D3
                    6620   tetris_main_7:
00003850  0C83 0000 6621          cmp.l     #20,D3
00003854  0014      
00003856  6C00 0048 6622          bge       tetris_main_9
                    6623   ; for(j = 0; j < TETRIS_COLS ; j++){
0000385A  4282      6624          clr.l     D2
                    6625   tetris_main_10:
0000385C  0C82 0000 6626          cmp.l     #15,D2
00003860  000F      
00003862  6C2E      6627          bge.s     tetris_main_12
                    6628   ; if (Table[i][j]) {
00003864  2003      6629          move.l    D3,D0
00003866  C1FC 000F 6630          muls      #15,D0
0000386A  41F9 0803 6631          lea       _Table.L,A0
0000386E  0546      
00003870  D1C0      6632          add.l     D0,A0
00003872  4A30 2800 6633          tst.b     0(A0,D2.L)
00003876  670C      6634          beq.s     tetris_main_13
                    6635   ; printf("#");
00003878  4879 0000 6636          pea       @tetris_12.L
0000387C  4FF6      
0000387E  4E93      6637          jsr       (A3)
00003880  584F      6638          addq.w    #4,A7
00003882  600A      6639          bra.s     tetris_main_14
                    6640   tetris_main_13:
                    6641   ; } else {
                    6642   ; printf(".");
00003884  4879 0000 6643          pea       @tetris_14.L
00003888  5000      
0000388A  4E93      6644          jsr       (A3)
0000388C  584F      6645          addq.w    #4,A7
                    6646   tetris_main_14:
0000388E  5282      6647          addq.l    #1,D2
00003890  60CA      6648          bra       tetris_main_10
                    6649   tetris_main_12:
                    6650   ; }
                    6651   ; }
                    6652   ; printf("\n");
00003892  4879 0000 6653          pea       @tetris_16.L
00003896  500A      
00003898  4E93      6654          jsr       (A3)
0000389A  584F      6655          addq.w    #4,A7
0000389C  5283      6656          addq.l    #1,D3
0000389E  60B0      6657          bra       tetris_main_7
                    6658   tetris_main_9:
                    6659   ; }
                    6660   ; printf("\nGame over!\n");
000038A0  4879 0000 6661          pea       @tetris_20.L
000038A4  502E      
000038A6  4E93      6662          jsr       (A3)
000038A8  584F      6663          addq.w    #4,A7
                    6664   ; sprintf(score_str,"\nScore: %d\n",tetris_score);
000038AA  2F39 0803 6665          move.l    _tetris_score.L,-(A7)
000038AE  0672      
000038B0  4879 0000 6666          pea       @tetris_18.L
000038B4  5016      
000038B6  486E FF80 6667          pea       -128(A6)
000038BA  4EB9 0000 6668          jsr       _sprintf
000038BE  3AC0      
000038C0  DEFC 000C 6669          add.w     #12,A7
                    6670   ; printf(score_str);
000038C4  486E FF80 6671          pea       -128(A6)
000038C8  4E93      6672          jsr       (A3)
000038CA  584F      6673          addq.w    #4,A7
                    6674   ; return 0;
000038CC  4280      6675          clr.l     D0
000038CE  4CDF 0C0C 6676          movem.l   (A7)+,D2/D3/A2/A3
000038D2  4E5E      6677          unlk      A6
000038D4  4E75      6678          rts
                    6679   ; }
                    6680   _strcpy:
000038D6  206F 0004 6681          move.l    (4,A7),A0
000038DA  226F 0008 6682          move.l    (8,A7),A1
000038DE  2008      6683          move.l    A0,D0
                    6684   strcpy_1:
000038E0  10D9      6685          move.b    (A1)+,(A0)+
000038E2  66FC      6686          bne       strcpy_1
000038E4  4E75      6687          rts
                    6688   ULDIV:
000038E6  4E56 0000 6689          link    A6,#0
000038EA  48E7 C000 6690          movem.l D0/D1,-(A7)
000038EE  222E 0008 6691          move.l  8(A6),D1
000038F2  202E 000C 6692          move.l  12(A6),D0
000038F6  6036      6693          bra.s   ldiv_3
                    6694   LDIV:
000038F8  4E56 0000 6695          link    A6,#0
000038FC  48E7 C000 6696          movem.l D0/D1,-(A7)
00003900  222E 0008 6697          move.l  8(A6),D1
00003904  202E 000C 6698          move.l  12(A6),D0
00003908  4A80      6699          tst.l   D0
0000390A  6A0E      6700          bpl.s   ldiv_1
0000390C  4480      6701          neg.l   D0
0000390E  4A81      6702          tst.l   D1
00003910  6A14      6703          bpl.s   ldiv_2
00003912  4481      6704          neg.l   D1
00003914  612A      6705          bsr.s   dodiv
00003916  4481      6706          neg.l   D1
00003918  6016      6707          bra.s   ldiv_4
                    6708   ldiv_1:
0000391A  4A81      6709          tst.l   D1
0000391C  6A10      6710          bpl.s   ldiv_3
0000391E  4481      6711          neg.l   D1
00003920  611E      6712          bsr.s   dodiv
00003922  4480      6713          neg.l   D0
00003924  600A      6714          bra.s   ldiv_4
                    6715   ldiv_2:
00003926  6118      6716          bsr.s   dodiv
00003928  4480      6717          neg.l   D0
0000392A  4481      6718          neg.l   D1
0000392C  6002      6719          bra.s   ldiv_4
                    6720   ldiv_3:
0000392E  6110      6721          bsr.s   dodiv
                    6722   ldiv_4:
00003930  2D40 0008 6723          move.l  D0,8(A6)
00003934  2D41 000C 6724          move.l  D1,12(A6)
00003938  4CDF 0003 6725          movem.l (A7)+,D0/D1
0000393C  4E5E      6726          unlk    A6
0000393E  4E75      6727          rts
                    6728   dodiv:
00003940  0C81 0000 6729          cmpi.l  #$FFFF,D1
00003944  FFFF      
00003946  6236      6730          bhi.s   dodiv_2
00003948  0C80 0000 6731          cmpi.l  #$FFFF,D0
0000394C  FFFF      
0000394E  6210      6732          bhi.s   dodiv_1
00003950  80C1      6733          divu    D1,D0
00003952  2200      6734          move.l  D0,D1
00003954  4241      6735          clr.w   D1
00003956  4841      6736          swap    D1
00003958  0280 0000 6737          andi.l  #$FFFF,D0
0000395C  FFFF      
0000395E  4E75      6738          rts
                    6739   dodiv_1:
00003960  48A7 A000 6740          movem.w D0/D2,-(A7)
00003964  4240      6741          clr.w   D0
00003966  4840      6742          swap    D0
00003968  80C1      6743          divu    D1,D0
0000396A  3400      6744          move.w  D0,D2
0000396C  301F      6745          move.w  (A7)+,D0
0000396E  80C1      6746          divu    D1,D0
00003970  4840      6747          swap    D0
00003972  4281      6748          clr.l   D1
00003974  3200      6749          move.w  D0,D1
00003976  3002      6750          move.w  D2,D0
00003978  4840      6751          swap    D0
0000397A  341F      6752          move.w  (A7)+,D2
0000397C  4E75      6753          rts
                    6754   dodiv_2:
0000397E  48E7 3800 6755          movem.l D2/D3/D4,-(A7)
00003982  2401      6756          move.l  D1,D2
00003984  4242      6757          clr.w   D2
00003986  4842      6758          swap    D2
00003988  5282      6759          addq.l  #1,D2
0000398A  2600      6760          move.l  D0,D3
0000398C  2801      6761          move.l  D1,D4
0000398E  2202      6762          move.l  D2,D1
00003990  61CE      6763          bsr.s   dodiv_1
00003992  2204      6764          move.l  D4,D1
00003994  82C2      6765          divu    D2,D1
00003996  80C1      6766          divu    D1,D0
00003998  0280 0000 6767          andi.l  #$FFFF,D0
0000399C  FFFF      
                    6768   dodiv_3:
0000399E  2204      6769          move.l  D4,D1
000039A0  2404      6770          move.l  D4,D2
000039A2  4842      6771          swap    D2
000039A4  C2C0      6772          mulu    D0,D1
000039A6  C4C0      6773          mulu    D0,D2
000039A8  4842      6774          swap    D2
000039AA  D282      6775          add.l   D2,D1
000039AC  9283      6776          sub.l   D3,D1
000039AE  620A      6777          bhi.s   dodiv_4
000039B0  4481      6778          neg.l   D1
000039B2  B881      6779          cmp.l   D1,D4
000039B4  6208      6780          bhi.s   dodiv_5
000039B6  5280      6781          addq.l  #1,D0
000039B8  60E4      6782          bra.s   dodiv_3
                    6783   dodiv_4:
000039BA  5380      6784          subq.l  #1,D0
000039BC  60E0      6785          bra.s   dodiv_3
                    6786   dodiv_5:
000039BE  4CDF 001C 6787          movem.l (A7)+,D2/D3/D4
000039C2  4E75      6788          rts
                    6789   ULMUL:
000039C4  4E56 0000 6790          link    A6,#0
000039C8  48E7 C000 6791          movem.l D0/D1,-(A7)
000039CC  222E 0008 6792          move.l  8(A6),D1
000039D0  202E 000C 6793          move.l  12(A6),D0
000039D4  602C      6794          bra.s   lmul_3
                    6795   LMUL:
000039D6  4E56 0000 6796          link    A6,#0
000039DA  48E7 C000 6797          movem.l D0/D1,-(A7)
000039DE  222E 0008 6798          move.l  8(A6),D1
000039E2  202E 000C 6799          move.l  12(A6),D0
000039E6  4A80      6800          tst.l   D0
000039E8  6A0A      6801          bpl.s   lmul_1
000039EA  4480      6802          neg.l   D0
000039EC  4A81      6803          tst.l   D1
000039EE  6A0A      6804          bpl.s   lmul_2
000039F0  4481      6805          neg.l   D1
000039F2  600E      6806          bra.s   lmul_3
                    6807   lmul_1:
000039F4  4A81      6808          tst.l   D1
000039F6  6A0A      6809          bpl.s   lmul_3
000039F8  4481      6810          neg.l   D1
                    6811   lmul_2:
000039FA  6114      6812          bsr.s   domul
000039FC  4481      6813          neg.l   D1
000039FE  4080      6814          negx.l  D0
00003A00  6002      6815          bra.s   lmul_4
                    6816   lmul_3:
00003A02  610C      6817          bsr.s   domul
                    6818   lmul_4:
00003A04  2D41 0008 6819          move.l  D1,8(A6)
00003A08  4CDF 0003 6820          movem.l (A7)+,D0/D1
00003A0C  4E5E      6821          unlk    A6
00003A0E  4E75      6822          rts
                    6823   domul:
00003A10  0C81 0000 6824          cmpi.l  #$FFFF,D1
00003A14  FFFF      
00003A16  620C      6825          bhi.s   domul_1
00003A18  0C80 0000 6826          cmpi.l  #$FFFF,D0
00003A1C  FFFF      
00003A1E  620E      6827          bhi.s   domul_2
00003A20  C2C0      6828          mulu    D0,D1
00003A22  4E75      6829          rts
                    6830   domul_1:
00003A24  0C80 0000 6831          cmpi.l  #$FFFF,D0
00003A28  FFFF      
00003A2A  6218      6832          bhi.s   domul_4
00003A2C  6002      6833          bra.s   domul_3
                    6834   domul_2
00003A2E  C141      6835          exg     D0,D1
                    6836   domul_3:
00003A30  2F02      6837          move.l  D2,-(A7)
00003A32  2401      6838          move.l  D1,D2
00003A34  4842      6839          swap    D2
00003A36  C2C0      6840          mulu    D0,D1
00003A38  C4C0      6841          mulu    D0,D2
00003A3A  4842      6842          swap    D2
00003A3C  4242      6843          clr.w   D2
00003A3E  D282      6844          add.l   D2,D1
00003A40  241F      6845          move.l  (A7)+,D2
00003A42  4E75      6846          rts
                    6847   domul_4:
00003A44  48E7 3000 6848          movem.l D2/D3,-(A7)
00003A48  2401      6849          move.l  D1,D2
00003A4A  2601      6850          move.l  D1,D3
00003A4C  C2C0      6851          mulu    D0,D1
00003A4E  4842      6852          swap    D2
00003A50  C4C0      6853          mulu    D0,D2
00003A52  4840      6854          swap    D0
00003A54  C6C0      6855          mulu    D0,D3
00003A56  D483      6856          add.l   D3,D2
00003A58  4842      6857          swap    D2
00003A5A  4242      6858          clr.w   D2
00003A5C  D282      6859          add.l   D2,D1
00003A5E  4CDF 000C 6860          movem.l (A7)+,D2/D3
00003A62  4E75      6861          rts
                    6862   _putch:
00003A64  4E56 0000 6863          link      A6,#0
00003A68  48E7 2000 6864          movem.l   D2,-(A7)
00003A6C  242E 0008 6865          move.l    8(A6),D2
00003A70  0C82 0000 6866          cmp.l     #10,D2
00003A74  000A      
00003A76  660A      6867          bne.s     putch_1
00003A78  4878 000D 6868          pea       13
00003A7C  6100 CF7C 6869          bsr       __putch
00003A80  584F      6870          addq.w    #4,A7
                    6871   putch_1:
00003A82  2F02      6872          move.l    D2,-(A7)
00003A84  6100 CF74 6873          bsr       __putch
00003A88  584F      6874          addq.w    #4,A7
00003A8A  2002      6875          move.l    D2,D0
00003A8C  4CDF 0004 6876          movem.l   (A7)+,D2
00003A90  4E5E      6877          unlk      A6
00003A92  4E75      6878          rts
                    6879   _tolower:
00003A94  4E56 0000 6880          link      A6,#0
00003A98  48E7 2000 6881          movem.l   D2,-(A7)
00003A9C  242E 0008 6882          move.l    8(A6),D2
00003AA0  0C82 0000 6883          cmp.l     #65,D2
00003AA4  0041      
00003AA6  6D0E      6884          blt.s     tolower_1
00003AA8  0C82 0000 6885          cmp.l     #90,D2
00003AAC  005A      
00003AAE  6E06      6886          bgt.s     tolower_1
00003AB0  84BC 0000 6887          or.l      #32,D2
00003AB4  0020      
                    6888   tolower_1:
00003AB6  2002      6889          move.l    D2,D0
00003AB8  4CDF 0004 6890          movem.l   (A7)+,D2
00003ABC  4E5E      6891          unlk      A6
00003ABE  4E75      6892          rts
                    6893   _sprintf:
00003AC0  4E56 FFFC 6894          link      A6,#-4
00003AC4  48E7 2000 6895          movem.l   D2,-(A7)
00003AC8  41EE 000C 6896          lea       12(A6),A0
00003ACC  5848      6897          addq.w    #4,A0
00003ACE  2408      6898          move.l    A0,D2
00003AD0  2F02      6899          move.l    D2,-(A7)
00003AD2  2F2E 000C 6900          move.l    12(A6),-(A7)
00003AD6  2F2E 0008 6901          move.l    8(A6),-(A7)
00003ADA  6100 017A 6902          bsr       _vsprintf
00003ADE  DEFC 000C 6903          add.w     #12,A7
00003AE2  2D40 FFFC 6904          move.l    D0,-4(A6)
00003AE6  4282      6905          clr.l     D2
00003AE8  202E FFFC 6906          move.l    -4(A6),D0
00003AEC  4CDF 0004 6907          movem.l   (A7)+,D2
00003AF0  4E5E      6908          unlk      A6
00003AF2  4E75      6909          rts
                    6910   _strcat:
00003AF4  206F 0004 6911          move.l    (4,A7),A0	
00003AF8  226F 0008 6912          move.l    (8,A7),A1	
00003AFC  2008      6913          move.l    A0,D0		
                    6914   strcat_0:
00003AFE  4A18      6915          tst.b     (A0)+
00003B00  66FC      6916          bne       strcat_0
00003B02  5348      6917          subq      #1,A0
                    6918   strcat_1:
00003B04  10D9      6919          move.b    (A1)+,(A0)+
00003B06  66FC      6920          bne       strcat_1
00003B08  4E75      6921          rts
                    6922   _toupper:
00003B0A  4E56 0000 6923          link      A6,#0
00003B0E  48E7 2000 6924          movem.l   D2,-(A7)
00003B12  242E 0008 6925          move.l    8(A6),D2
00003B16  0C82 0000 6926          cmp.l     #97,D2
00003B1A  0061      
00003B1C  6D0E      6927          blt.s     toupper_1
00003B1E  0C82 0000 6928          cmp.l     #122,D2
00003B22  007A      
00003B24  6E06      6929          bgt.s     toupper_1
00003B26  C4BC 0000 6930          and.l     #95,D2
00003B2A  005F      
                    6931   toupper_1:
00003B2C  2002      6932          move.l    D2,D0
00003B2E  4CDF 0004 6933          movem.l   (A7)+,D2
00003B32  4E5E      6934          unlk      A6
00003B34  4E75      6935          rts
                    6936   _printf:
00003B36  4E56 FFFC 6937          link      A6,#-4
00003B3A  48E7 2000 6938          movem.l   D2,-(A7)
00003B3E  41EE 0008 6939          lea       8(A6),A0
00003B42  5848      6940          addq.w    #4,A0
00003B44  2408      6941          move.l    A0,D2
00003B46  2F02      6942          move.l    D2,-(A7)
00003B48  2F2E 0008 6943          move.l    8(A6),-(A7)
00003B4C  42A7      6944          clr.l     -(A7)
00003B4E  6100 0106 6945          bsr       _vsprintf
00003B52  DEFC 000C 6946          add.w     #12,A7
00003B56  2D40 FFFC 6947          move.l    D0,-4(A6)
00003B5A  4282      6948          clr.l     D2
00003B5C  202E FFFC 6949          move.l    -4(A6),D0
00003B60  4CDF 0004 6950          movem.l   (A7)+,D2
00003B64  4E5E      6951          unlk      A6
00003B66  4E75      6952          rts
                    6953   _getch:
00003B68  48E7 2000 6954          movem.l   D2,-(A7)
00003B6C  2439 0803 6955          move.l    __ungetbuf,D2
00003B70  00C0      
00003B72  2039 0803 6956          move.l    __ungetbuf,D0
00003B76  00C0      
00003B78  0C80 FFFF 6957          cmp.l     #-1,D0
00003B7C  FFFF      
00003B7E  670C      6958          beq.s     getch_1
00003B80  23FC FFFF 6959          move.l    #-1,__ungetbuf
00003B84  FFFF 0803 
00003B88  00C0      
00003B8A  6010      6960          bra.s     getch_3
                    6961   getch_1:
00003B8C  6100 CE98 6962          bsr       __getch
00003B90  2400      6963          move.l    D0,D2
00003B92  0C80 0000 6964          cmp.l     #13,D0
00003B96  000D      
00003B98  6602      6965          bne.s     getch_3
00003B9A  740A      6966          moveq     #10,D2
                    6967   getch_3:
00003B9C  2002      6968          move.l    D2,D0
00003B9E  4CDF 0004 6969          movem.l   (A7)+,D2
00003BA2  4E75      6970          rts
                    6971   @vsprintf_copy:
00003BA4  4E56 0000 6972          link      A6,#0
00003BA8  206E 0008 6973          move.l    8(A6),A0
00003BAC  4A90      6974          tst.l     (A0)
00003BAE  6710      6975          beq.s     @vsprintf_copy_1
00003BB0  202E 000C 6976          move.l    12(A6),D0
00003BB4  206E 0008 6977          move.l    8(A6),A0
00003BB8  2250      6978          move.l    (A0),A1
00003BBA  5290      6979          addq.l    #1,(A0)
00003BBC  1280      6980          move.b    D0,(A1)
00003BBE  600A      6981          bra.s     @vsprintf_copy_2
                    6982   @vsprintf_copy_1:
00003BC0  2F2E 000C 6983          move.l    12(A6),-(A7)
00003BC4  6100 FE9E 6984          bsr       _putch
00003BC8  584F      6985          addq.w    #4,A7
                    6986   @vsprintf_copy_2:
00003BCA  4E5E      6987          unlk      A6
00003BCC  4E75      6988          rts
                    6989   @vsprintf_getval:
00003BCE  4E56 0000 6990          link      A6,#0
00003BD2  48E7 3000 6991          movem.l   D2/D3,-(A7)
00003BD6  242E 0008 6992          move.l    8(A6),D2
00003BDA  4283      6993          clr.l     D3
00003BDC  2042      6994          move.l    D2,A0
00003BDE  2050      6995          move.l    (A0),A0
00003BE0  1010      6996          move.b    (A0),D0
00003BE2  4880      6997          ext.w     D0
00003BE4  48C0      6998          ext.l     D0
00003BE6  0C80 0000 6999          cmp.l     #42,D0
00003BEA  002A      
00003BEC  6612      7000          bne.s     @vsprintf_getval_1
00003BEE  206E 000C 7001          move.l    12(A6),A0
00003BF2  2250      7002          move.l    (A0),A1
00003BF4  5890      7003          addq.l    #4,(A0)
00003BF6  2611      7004          move.l    (A1),D3
00003BF8  2042      7005          move.l    D2,A0
00003BFA  5290      7006          addq.l    #1,(A0)
00003BFC  6000 004E 7007          bra       @vsprintf_getval_5
                    7008   @vsprintf_getval_1:
00003C00  2042      7009          move.l    D2,A0
00003C02  2050      7010          move.l    (A0),A0
00003C04  1010      7011          move.b    (A0),D0
00003C06  4880      7012          ext.w     D0
00003C08  48C0      7013          ext.l     D0
00003C0A  0C80 0000 7014          cmp.l     #48,D0
00003C0E  0030      
00003C10  6D00 003A 7015          blt       @vsprintf_getval_5
00003C14  2042      7016          move.l    D2,A0
00003C16  2050      7017          move.l    (A0),A0
00003C18  1010      7018          move.b    (A0),D0
00003C1A  4880      7019          ext.w     D0
00003C1C  48C0      7020          ext.l     D0
00003C1E  0C80 0000 7021          cmp.l     #57,D0
00003C22  0039      
00003C24  6E26      7022          bgt.s     @vsprintf_getval_5
00003C26  2F03      7023          move.l    D3,-(A7)
00003C28  4878 000A 7024          pea       10
00003C2C  6100 FDA8 7025          bsr       LMUL
00003C30  2017      7026          move.l    (A7),D0
00003C32  504F      7027          addq.w    #8,A7
00003C34  2042      7028          move.l    D2,A0
00003C36  2250      7029          move.l    (A0),A1
00003C38  5290      7030          addq.l    #1,(A0)
00003C3A  1211      7031          move.b    (A1),D1
00003C3C  4881      7032          ext.w     D1
00003C3E  48C1      7033          ext.l     D1
00003C40  D081      7034          add.l     D1,D0
00003C42  0480 0000 7035          sub.l     #48,D0
00003C46  0030      
00003C48  2600      7036          move.l    D0,D3
00003C4A  60B4      7037          bra       @vsprintf_getval_1
                    7038   @vsprintf_getval_5:
00003C4C  2003      7039          move.l    D3,D0
00003C4E  4CDF 000C 7040          movem.l   (A7)+,D2/D3
00003C52  4E5E      7041          unlk      A6
00003C54  4E75      7042          rts
                    7043   _vsprintf:
00003C56  4E56 FFCC 7044          link      A6,#-52
00003C5A  48E7 3F3C 7045          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00003C5E  45EE 0008 7046          lea       8(A6),A2
00003C62  47F8 3BA4 7047          lea       @vsprintf_copy,A3
00003C66  49F9 0000 7048          lea       _ultoa,A4
00003C6A  43AE      
00003C6C  4286      7049          clr.l     D6
                    7050   vsprintf_1:
00003C6E  206E 000C 7051          move.l    12(A6),A0
00003C72  4A10      7052          tst.b     (A0)
00003C74  6700 0624 7053          beq       vsprintf_3
00003C78  206E 000C 7054          move.l    12(A6),A0
00003C7C  1010      7055          move.b    (A0),D0
00003C7E  4880      7056          ext.w     D0
00003C80  48C0      7057          ext.l     D0
00003C82  0C80 0000 7058          cmp.l     #37,D0
00003C86  0025      
00003C88  671C      7059          beq.s     vsprintf_4
00003C8A  206E 000C 7060          move.l    12(A6),A0
00003C8E  52AE 000C 7061          addq.l    #1,12(A6)
00003C92  1210      7062          move.b    (A0),D1
00003C94  4881      7063          ext.w     D1
00003C96  48C1      7064          ext.l     D1
00003C98  2F01      7065          move.l    D1,-(A7)
00003C9A  2F0A      7066          move.l    A2,-(A7)
00003C9C  4E93      7067          jsr       (A3)
00003C9E  504F      7068          addq.w    #8,A7
00003CA0  5286      7069          addq.l    #1,D6
00003CA2  6000 05F2 7070          bra       vsprintf_2
                    7071   vsprintf_4:
00003CA6  52AE 000C 7072          addq.l    #1,12(A6)
00003CAA  422E FFD3 7073          clr.b     -45(A6)
00003CAE  422E FFD2 7074          clr.b     -46(A6)
00003CB2  422E FFD0 7075          clr.b     -48(A6)
00003CB6  422E FFCF 7076          clr.b     -49(A6)
00003CBA  422E FFCE 7077          clr.b     -50(A6)
00003CBE  422E FFCD 7078          clr.b     -51(A6)
00003CC2  42AE FFFC 7079          clr.l     -4(A6)
00003CC6  7AFF      7080          moveq     #-1,D5
00003CC8  41EE FFDC 7081          lea       -36(A6),A0
00003CCC  2608      7082          move.l    A0,D3
00003CCE  2408      7083          move.l    A0,D2
                    7084   vsprintf_6:
00003CD0  206E 000C 7085          move.l    12(A6),A0
00003CD4  1010      7086          move.b    (A0),D0
00003CD6  4880      7087          ext.w     D0
00003CD8  48C0      7088          ext.l     D0
00003CDA  0C80 0000 7089          cmp.l     #43,D0
00003CDE  002B      
00003CE0  6730      7090          beq.s     vsprintf_12
00003CE2  6E18      7091          bgt.s     vsprintf_15
00003CE4  0C80 0000 7092          cmp.l     #35,D0
00003CE8  0023      
00003CEA  6700 003E 7093          beq       vsprintf_14
00003CEE  6E00 0046 7094          bgt       vsprintf_9
00003CF2  0C80 0000 7095          cmp.l     #32,D0
00003CF6  0020      
00003CF8  6724      7096          beq.s     vsprintf_13
00003CFA  603A      7097          bra.s     vsprintf_9
                    7098   vsprintf_15:
00003CFC  0C80 0000 7099          cmp.l     #45,D0
00003D00  002D      
00003D02  6702      7100          beq.s     vsprintf_11
00003D04  6030      7101          bra.s     vsprintf_9
                    7102   vsprintf_11:
00003D06  1D7C 0001 7103          move.b    #1,-51(A6)
00003D0A  FFCD      
00003D0C  52AE 000C 7104          addq.l    #1,12(A6)
00003D10  6026      7105          bra.s     vsprintf_7
                    7106   vsprintf_12:
00003D12  1D7C 0001 7107          move.b    #1,-50(A6)
00003D16  FFCE      
00003D18  52AE 000C 7108          addq.l    #1,12(A6)
00003D1C  601A      7109          bra.s     vsprintf_7
                    7110   vsprintf_13:
00003D1E  1D7C 0001 7111          move.b    #1,-49(A6)
00003D22  FFCF      
00003D24  52AE 000C 7112          addq.l    #1,12(A6)
00003D28  600E      7113          bra.s     vsprintf_7
                    7114   vsprintf_14:
00003D2A  1D7C 0001 7115          move.b    #1,-48(A6)
00003D2E  FFD0      
00003D30  52AE 000C 7116          addq.l    #1,12(A6)
00003D34  6002      7117          bra.s     vsprintf_7
                    7118   vsprintf_9:
00003D36  6002      7119          bra.s     vsprintf_8
                    7120   vsprintf_7:
00003D38  6096      7121          bra       vsprintf_6
                    7122   vsprintf_8:
00003D3A  206E 000C 7123          move.l    12(A6),A0
00003D3E  1010      7124          move.b    (A0),D0
00003D40  4880      7125          ext.w     D0
00003D42  48C0      7126          ext.l     D0
00003D44  0C80 0000 7127          cmp.l     #48,D0
00003D48  0030      
00003D4A  660A      7128          bne.s     vsprintf_16
00003D4C  52AE 000C 7129          addq.l    #1,12(A6)
00003D50  1D7C 0001 7130          move.b    #1,-46(A6)
00003D54  FFD2      
                    7131   vsprintf_16:
00003D56  486E 0010 7132          pea       16(A6)
00003D5A  486E 000C 7133          pea       12(A6)
00003D5E  6100 FE6E 7134          bsr       @vsprintf_getval
00003D62  504F      7135          addq.w    #8,A7
00003D64  2A40      7136          move.l    D0,A5
00003D66  206E 000C 7137          move.l    12(A6),A0
00003D6A  1010      7138          move.b    (A0),D0
00003D6C  4880      7139          ext.w     D0
00003D6E  48C0      7140          ext.l     D0
00003D70  0C80 0000 7141          cmp.l     #46,D0
00003D74  002E      
00003D76  6614      7142          bne.s     vsprintf_18
00003D78  52AE 000C 7143          addq.l    #1,12(A6)
00003D7C  486E 0010 7144          pea       16(A6)
00003D80  486E 000C 7145          pea       12(A6)
00003D84  6100 FE48 7146          bsr       @vsprintf_getval
00003D88  504F      7147          addq.w    #8,A7
00003D8A  2A00      7148          move.l    D0,D5
                    7149   vsprintf_18:
00003D8C  206E 000C 7150          move.l    12(A6),A0
00003D90  1010      7151          move.b    (A0),D0
00003D92  4880      7152          ext.w     D0
00003D94  48C0      7153          ext.l     D0
00003D96  0C80 0000 7154          cmp.l     #108,D0
00003D9A  006C      
00003D9C  660A      7155          bne.s     vsprintf_20
00003D9E  52AE 000C 7156          addq.l    #1,12(A6)
00003DA2  1D7C 0001 7157          move.b    #1,-45(A6)
00003DA6  FFD3      
                    7158   vsprintf_20:
00003DA8  206E 000C 7159          move.l    12(A6),A0
00003DAC  1010      7160          move.b    (A0),D0
00003DAE  4880      7161          ext.w     D0
00003DB0  48C0      7162          ext.l     D0
00003DB2  0C80 0000 7163          cmp.l     #111,D0
00003DB6  006F      
00003DB8  6700 00D4 7164          beq       vsprintf_27
00003DBC  6E34      7165          bgt.s     vsprintf_33
00003DBE  0C80 0000 7166          cmp.l     #100,D0
00003DC2  0064      
00003DC4  6700 0054 7167          beq       vsprintf_24
00003DC8  6E1C      7168          bgt.s     vsprintf_34
00003DCA  0C80 0000 7169          cmp.l     #99,D0
00003DCE  0063      
00003DD0  6700 012C 7170          beq       vsprintf_30
00003DD4  6E00 016A 7171          bgt       vsprintf_22
00003DD8  0C80 0000 7172          cmp.l     #88,D0
00003DDC  0058      
00003DDE  6700 00E6 7173          beq       vsprintf_28
00003DE2  6000 015C 7174          bra       vsprintf_22
                    7175   vsprintf_34:
00003DE6  0C80 0000 7176          cmp.l     #105,D0
00003DEA  0069      
00003DEC  672C      7177          beq.s     vsprintf_24
00003DEE  6000 0150 7178          bra       vsprintf_22
                    7179   vsprintf_33:
00003DF2  0C80 0000 7180          cmp.l     #117,D0
00003DF6  0075      
00003DF8  6700 005C 7181          beq       vsprintf_26
00003DFC  6E0E      7182          bgt.s     vsprintf_35
00003DFE  0C80 0000 7183          cmp.l     #115,D0
00003E02  0073      
00003E04  6700 011C 7184          beq       vsprintf_31
00003E08  6000 0136 7185          bra       vsprintf_22
                    7186   vsprintf_35:
00003E0C  0C80 0000 7187          cmp.l     #120,D0
00003E10  0078      
00003E12  6700 00B2 7188          beq       vsprintf_28
00003E16  6000 0128 7189          bra       vsprintf_22
                    7190   vsprintf_24:
00003E1A  4A2E FFD3 7191          tst.b     -45(A6)
00003E1E  671A      7192          beq.s     vsprintf_36
00003E20  4878 000A 7193          pea       10
00003E24  2F03      7194          move.l    D3,-(A7)
00003E26  206E 0010 7195          move.l    16(A6),A0
00003E2A  58AE 0010 7196          addq.l    #4,16(A6)
00003E2E  2F10      7197          move.l    (A0),-(A7)
00003E30  6100 04F8 7198          bsr       _ltoa
00003E34  DEFC 000C 7199          add.w     #12,A7
00003E38  6018      7200          bra.s     vsprintf_37
                    7201   vsprintf_36:
00003E3A  4878 000A 7202          pea       10
00003E3E  2F03      7203          move.l    D3,-(A7)
00003E40  206E 0010 7204          move.l    16(A6),A0
00003E44  58AE 0010 7205          addq.l    #4,16(A6)
00003E48  2F10      7206          move.l    (A0),-(A7)
00003E4A  6100 04DE 7207          bsr       _ltoa
00003E4E  DEFC 000C 7208          add.w     #12,A7
                    7209   vsprintf_37:
00003E52  6000 00FA 7210          bra       vsprintf_23
                    7211   vsprintf_26:
00003E56  4A2E FFD3 7212          tst.b     -45(A6)
00003E5A  6718      7213          beq.s     vsprintf_38
00003E5C  4878 000A 7214          pea       10
00003E60  2F03      7215          move.l    D3,-(A7)
00003E62  206E 0010 7216          move.l    16(A6),A0
00003E66  58AE 0010 7217          addq.l    #4,16(A6)
00003E6A  2F10      7218          move.l    (A0),-(A7)
00003E6C  4E94      7219          jsr       (A4)
00003E6E  DEFC 000C 7220          add.w     #12,A7
00003E72  6016      7221          bra.s     vsprintf_39
                    7222   vsprintf_38:
00003E74  4878 000A 7223          pea       10
00003E78  2F03      7224          move.l    D3,-(A7)
00003E7A  206E 0010 7225          move.l    16(A6),A0
00003E7E  58AE 0010 7226          addq.l    #4,16(A6)
00003E82  2F10      7227          move.l    (A0),-(A7)
00003E84  4E94      7228          jsr       (A4)
00003E86  DEFC 000C 7229          add.w     #12,A7
                    7230   vsprintf_39:
00003E8A  6000 00C2 7231          bra       vsprintf_23
                    7232   vsprintf_27:
00003E8E  4A2E FFD3 7233          tst.b     -45(A6)
00003E92  6718      7234          beq.s     vsprintf_40
00003E94  4878 0008 7235          pea       8
00003E98  2F03      7236          move.l    D3,-(A7)
00003E9A  206E 0010 7237          move.l    16(A6),A0
00003E9E  58AE 0010 7238          addq.l    #4,16(A6)
00003EA2  2F10      7239          move.l    (A0),-(A7)
00003EA4  4E94      7240          jsr       (A4)
00003EA6  DEFC 000C 7241          add.w     #12,A7
00003EAA  6016      7242          bra.s     vsprintf_41
                    7243   vsprintf_40:
00003EAC  4878 0008 7244          pea       8
00003EB0  2F03      7245          move.l    D3,-(A7)
00003EB2  206E 0010 7246          move.l    16(A6),A0
00003EB6  58AE 0010 7247          addq.l    #4,16(A6)
00003EBA  2F10      7248          move.l    (A0),-(A7)
00003EBC  4E94      7249          jsr       (A4)
00003EBE  DEFC 000C 7250          add.w     #12,A7
                    7251   vsprintf_41:
00003EC2  6000 008A 7252          bra       vsprintf_23
                    7253   vsprintf_28:
00003EC6  4A2E FFD3 7254          tst.b     -45(A6)
00003ECA  6718      7255          beq.s     vsprintf_42
00003ECC  4878 0010 7256          pea       16
00003ED0  2F03      7257          move.l    D3,-(A7)
00003ED2  206E 0010 7258          move.l    16(A6),A0
00003ED6  58AE 0010 7259          addq.l    #4,16(A6)
00003EDA  2F10      7260          move.l    (A0),-(A7)
00003EDC  4E94      7261          jsr       (A4)
00003EDE  DEFC 000C 7262          add.w     #12,A7
00003EE2  6016      7263          bra.s     vsprintf_43
                    7264   vsprintf_42:
00003EE4  4878 0010 7265          pea       16
00003EE8  2F03      7266          move.l    D3,-(A7)
00003EEA  206E 0010 7267          move.l    16(A6),A0
00003EEE  58AE 0010 7268          addq.l    #4,16(A6)
00003EF2  2F10      7269          move.l    (A0),-(A7)
00003EF4  4E94      7270          jsr       (A4)
00003EF6  DEFC 000C 7271          add.w     #12,A7
                    7272   vsprintf_43:
00003EFA  6000 0052 7273          bra       vsprintf_23
                    7274   vsprintf_30:
00003EFE  206E 0010 7275          move.l    16(A6),A0
00003F02  58AE 0010 7276          addq.l    #4,16(A6)
00003F06  2010      7277          move.l    (A0),D0
00003F08  2042      7278          move.l    D2,A0
00003F0A  5282      7279          addq.l    #1,D2
00003F0C  1080      7280          move.b    D0,(A0)
00003F0E  2042      7281          move.l    D2,A0
00003F10  4210      7282          clr.b     (A0)
00003F12  200D      7283          move.l    A5,D0
00003F14  6704      7284          beq.s     vsprintf_44
00003F16  200D      7285          move.l    A5,D0
00003F18  6002      7286          bra.s     vsprintf_45
                    7287   vsprintf_44:
00003F1A  7001      7288          moveq     #1,D0
                    7289   vsprintf_45:
00003F1C  2A00      7290          move.l    D0,D5
00003F1E  6000 002E 7291          bra       vsprintf_23
                    7292   vsprintf_31:
00003F22  206E 0010 7293          move.l    16(A6),A0
00003F26  58AE 0010 7294          addq.l    #4,16(A6)
00003F2A  2610      7295          move.l    (A0),D3
00003F2C  0C85 FFFF 7296          cmp.l     #-1,D5
00003F30  FFFF      
00003F32  660A      7297          bne.s     vsprintf_46
00003F34  2F03      7298          move.l    D3,-(A7)
00003F36  6100 04D8 7299          bsr       _strlen
00003F3A  584F      7300          addq.w    #4,A7
00003F3C  2A00      7301          move.l    D0,D5
                    7302   vsprintf_46:
00003F3E  600E      7303          bra.s     vsprintf_23
                    7304   vsprintf_22:
00003F40  206E 000C 7305          move.l    12(A6),A0
00003F44  2242      7306          move.l    D2,A1
00003F46  5282      7307          addq.l    #1,D2
00003F48  1290      7308          move.b    (A0),(A1)
00003F4A  2042      7309          move.l    D2,A0
00003F4C  4210      7310          clr.b     (A0)
                    7311   vsprintf_23:
00003F4E  2F03      7312          move.l    D3,-(A7)
00003F50  6100 04BE 7313          bsr       _strlen
00003F54  584F      7314          addq.w    #4,A7
00003F56  1800      7315          move.b    D0,D4
00003F58  206E 000C 7316          move.l    12(A6),A0
00003F5C  1010      7317          move.b    (A0),D0
00003F5E  4880      7318          ext.w     D0
00003F60  48C0      7319          ext.l     D0
00003F62  0C80 0000 7320          cmp.l     #115,D0
00003F66  0073      
00003F68  6618      7321          bne.s     vsprintf_48
00003F6A  0C85 0000 7322          cmp.l     #0,D5
00003F6E  0000      
00003F70  6D10      7323          blt.s     vsprintf_48
00003F72  4884      7324          ext.w     D4
00003F74  48C4      7325          ext.l     D4
00003F76  B885      7326          cmp.l     D5,D4
00003F78  6F04      7327          ble.s     vsprintf_50
00003F7A  1005      7328          move.b    D5,D0
00003F7C  6002      7329          bra.s     vsprintf_51
                    7330   vsprintf_50:
00003F7E  1004      7331          move.b    D4,D0
                    7332   vsprintf_51:
00003F80  1800      7333          move.b    D0,D4
                    7334   vsprintf_48:
00003F82  206E 000C 7335          move.l    12(A6),A0
00003F86  1010      7336          move.b    (A0),D0
00003F88  4880      7337          ext.w     D0
00003F8A  48C0      7338          ext.l     D0
00003F8C  0C80 0000 7339          cmp.l     #88,D0
00003F90  0058      
00003F92  6600 0026 7340          bne       vsprintf_56
00003F96  41EE FFDC 7341          lea       -36(A6),A0
00003F9A  2408      7342          move.l    A0,D2
                    7343   vsprintf_54:
00003F9C  2042      7344          move.l    D2,A0
00003F9E  4A10      7345          tst.b     (A0)
00003FA0  6718      7346          beq.s     vsprintf_56
00003FA2  2042      7347          move.l    D2,A0
00003FA4  1210      7348          move.b    (A0),D1
00003FA6  4881      7349          ext.w     D1
00003FA8  48C1      7350          ext.l     D1
00003FAA  2F01      7351          move.l    D1,-(A7)
00003FAC  6100 FB5C 7352          bsr       _toupper
00003FB0  584F      7353          addq.w    #4,A7
00003FB2  2042      7354          move.l    D2,A0
00003FB4  1080      7355          move.b    D0,(A0)
00003FB6  5282      7356          addq.l    #1,D2
00003FB8  60E2      7357          bra       vsprintf_54
                    7358   vsprintf_56:
00003FBA  7E00      7359          moveq     #0,D7
00003FBC  41EE FFD4 7360          lea       -44(A6),A0
00003FC0  2408      7361          move.l    A0,D2
00003FC2  206E 000C 7362          move.l    12(A6),A0
00003FC6  1010      7363          move.b    (A0),D0
00003FC8  4880      7364          ext.w     D0
00003FCA  48C0      7365          ext.l     D0
00003FCC  0C80 0000 7366          cmp.l     #100,D0
00003FD0  0064      
00003FD2  6714      7367          beq.s     vsprintf_59
00003FD4  206E 000C 7368          move.l    12(A6),A0
00003FD8  1010      7369          move.b    (A0),D0
00003FDA  4880      7370          ext.w     D0
00003FDC  48C0      7371          ext.l     D0
00003FDE  0C80 0000 7372          cmp.l     #105,D0
00003FE2  0069      
00003FE4  6600 0076 7373          bne       vsprintf_65
                    7374   vsprintf_59:
00003FE8  4A2E FFCE 7375          tst.b     -50(A6)
00003FEC  6612      7376          bne.s     vsprintf_62
00003FEE  2043      7377          move.l    D3,A0
00003FF0  1010      7378          move.b    (A0),D0
00003FF2  4880      7379          ext.w     D0
00003FF4  48C0      7380          ext.l     D0
00003FF6  0C80 0000 7381          cmp.l     #45,D0
00003FFA  002D      
00003FFC  6600 002E 7382          bne       vsprintf_60
                    7383   vsprintf_62:
00004000  2043      7384          move.l    D3,A0
00004002  1010      7385          move.b    (A0),D0
00004004  4880      7386          ext.w     D0
00004006  48C0      7387          ext.l     D0
00004008  0C80 0000 7388          cmp.l     #45,D0
0000400C  002D      
0000400E  660E      7389          bne.s     vsprintf_63
00004010  2043      7390          move.l    D3,A0
00004012  5283      7391          addq.l    #1,D3
00004014  2242      7392          move.l    D2,A1
00004016  5282      7393          addq.l    #1,D2
00004018  1290      7394          move.b    (A0),(A1)
0000401A  5304      7395          subq.b    #1,D4
0000401C  6008      7396          bra.s     vsprintf_64
                    7397   vsprintf_63:
0000401E  2042      7398          move.l    D2,A0
00004020  5282      7399          addq.l    #1,D2
00004022  10BC 002B 7400          move.b    #43,(A0)
                    7401   vsprintf_64:
00004026  5287      7402          addq.l    #1,D7
00004028  6000 0032 7403          bra       vsprintf_65
                    7404   vsprintf_60:
0000402C  4A2E FFCF 7405          tst.b     -49(A6)
00004030  6700 002A 7406          beq       vsprintf_65
00004034  2043      7407          move.l    D3,A0
00004036  1010      7408          move.b    (A0),D0
00004038  4880      7409          ext.w     D0
0000403A  48C0      7410          ext.l     D0
0000403C  0C80 0000 7411          cmp.l     #45,D0
00004040  002D      
00004042  660E      7412          bne.s     vsprintf_67
00004044  2043      7413          move.l    D3,A0
00004046  5283      7414          addq.l    #1,D3
00004048  2242      7415          move.l    D2,A1
0000404A  5282      7416          addq.l    #1,D2
0000404C  1290      7417          move.b    (A0),(A1)
0000404E  5304      7418          subq.b    #1,D4
00004050  6008      7419          bra.s     vsprintf_68
                    7420   vsprintf_67:
00004052  2042      7421          move.l    D2,A0
00004054  5282      7422          addq.l    #1,D2
00004056  10BC 0020 7423          move.b    #32,(A0)
                    7424   vsprintf_68:
0000405A  5287      7425          addq.l    #1,D7
                    7426   vsprintf_65:
0000405C  4A2E FFD0 7427          tst.b     -48(A6)
00004060  6700 0066 7428          beq       vsprintf_77
00004064  206E 000C 7429          move.l    12(A6),A0
00004068  1010      7430          move.b    (A0),D0
0000406A  4880      7431          ext.w     D0
0000406C  48C0      7432          ext.l     D0
0000406E  0C80 0000 7433          cmp.l     #111,D0
00004072  006F      
00004074  671A      7434          beq.s     vsprintf_73
00004076  6E0C      7435          bgt.s     vsprintf_76
00004078  0C80 0000 7436          cmp.l     #88,D0
0000407C  0058      
0000407E  6710      7437          beq.s     vsprintf_73
00004080  6000 0046 7438          bra       vsprintf_77
                    7439   vsprintf_76:
00004084  0C80 0000 7440          cmp.l     #120,D0
00004088  0078      
0000408A  6704      7441          beq.s     vsprintf_73
0000408C  6000 003A 7442          bra       vsprintf_77
                    7443   vsprintf_73:
00004090  2042      7444          move.l    D2,A0
00004092  5282      7445          addq.l    #1,D2
00004094  10BC 0030 7446          move.b    #48,(A0)
00004098  5287      7447          addq.l    #1,D7
0000409A  206E 000C 7448          move.l    12(A6),A0
0000409E  1010      7449          move.b    (A0),D0
000040A0  4880      7450          ext.w     D0
000040A2  48C0      7451          ext.l     D0
000040A4  0C80 0000 7452          cmp.l     #120,D0
000040A8  0078      
000040AA  6712      7453          beq.s     vsprintf_79
000040AC  206E 000C 7454          move.l    12(A6),A0
000040B0  1010      7455          move.b    (A0),D0
000040B2  4880      7456          ext.w     D0
000040B4  48C0      7457          ext.l     D0
000040B6  0C80 0000 7458          cmp.l     #88,D0
000040BA  0058      
000040BC  660A      7459          bne.s     vsprintf_77
                    7460   vsprintf_79:
000040BE  2042      7461          move.l    D2,A0
000040C0  5282      7462          addq.l    #1,D2
000040C2  10BC 0078 7463          move.b    #120,(A0)
000040C6  5287      7464          addq.l    #1,D7
                    7465   vsprintf_77:
000040C8  2042      7466          move.l    D2,A0
000040CA  4210      7467          clr.b     (A0)
000040CC  206E 000C 7468          move.l    12(A6),A0
000040D0  1010      7469          move.b    (A0),D0
000040D2  4880      7470          ext.w     D0
000040D4  48C0      7471          ext.l     D0
000040D6  0C80 0000 7472          cmp.l     #105,D0
000040DA  0069      
000040DC  6700 0076 7473          beq       vsprintf_82
000040E0  6E42      7474          bgt.s     vsprintf_93
000040E2  0C80 0000 7475          cmp.l     #99,D0
000040E6  0063      
000040E8  6700 0084 7476          beq       vsprintf_96
000040EC  6E1C      7477          bgt.s     vsprintf_94
000040EE  0C80 0000 7478          cmp.l     #88,D0
000040F2  0058      
000040F4  6700 005E 7479          beq       vsprintf_82
000040F8  6E00 0184 7480          bgt       vsprintf_80
000040FC  0C80 0000 7481          cmp.l     #69,D0
00004100  0045      
00004102  6700 0050 7482          beq       vsprintf_82
00004106  6000 0176 7483          bra       vsprintf_80
                    7484   vsprintf_94:
0000410A  0C80 0000 7485          cmp.l     #101,D0
0000410E  0065      
00004110  6700 0042 7486          beq       vsprintf_82
00004114  6E00 0168 7487          bgt       vsprintf_80
00004118  0C80 0000 7488          cmp.l     #100,D0
0000411C  0064      
0000411E  6734      7489          beq.s     vsprintf_82
00004120  6000 015C 7490          bra       vsprintf_80
                    7491   vsprintf_93:
00004124  0C80 0000 7492          cmp.l     #117,D0
00004128  0075      
0000412A  6728      7493          beq.s     vsprintf_82
0000412C  6E1A      7494          bgt.s     vsprintf_95
0000412E  0C80 0000 7495          cmp.l     #115,D0
00004132  0073      
00004134  6700 0038 7496          beq       vsprintf_96
00004138  6E00 0144 7497          bgt       vsprintf_80
0000413C  0C80 0000 7498          cmp.l     #111,D0
00004140  006F      
00004142  6710      7499          beq.s     vsprintf_82
00004144  6000 0138 7500          bra       vsprintf_80
                    7501   vsprintf_95:
00004148  0C80 0000 7502          cmp.l     #120,D0
0000414C  0078      
0000414E  6704      7503          beq.s     vsprintf_82
00004150  6000 012C 7504          bra       vsprintf_80
                    7505   vsprintf_82:
00004154  4A2E FFD2 7506          tst.b     -46(A6)
00004158  6714      7507          beq.s     vsprintf_96
0000415A  4A2E FFCD 7508          tst.b     -51(A6)
0000415E  660E      7509          bne.s     vsprintf_96
00004160  200D      7510          move.l    A5,D0
00004162  9087      7511          sub.l     D7,D0
00004164  4884      7512          ext.w     D4
00004166  48C4      7513          ext.l     D4
00004168  9084      7514          sub.l     D4,D0
0000416A  2D40 FFFC 7515          move.l    D0,-4(A6)
                    7516   vsprintf_96:
0000416E  202E FFFC 7517          move.l    -4(A6),D0
00004172  0C80 0000 7518          cmp.l     #0,D0
00004176  0000      
00004178  6C04      7519          bge.s     vsprintf_98
0000417A  42AE FFFC 7520          clr.l     -4(A6)
                    7521   vsprintf_98:
0000417E  4A2E FFCD 7522          tst.b     -51(A6)
00004182  6600 0030 7523          bne       vsprintf_104
00004186  4884      7524          ext.w     D4
00004188  48C4      7525          ext.l     D4
0000418A  2004      7526          move.l    D4,D0
0000418C  D0AE FFFC 7527          add.l     -4(A6),D0
00004190  D087      7528          add.l     D7,D0
00004192  1D40 FFD1 7529          move.b    D0,-47(A6)
                    7530   vsprintf_102:
00004196  102E FFD1 7531          move.b    -47(A6),D0
0000419A  4880      7532          ext.w     D0
0000419C  48C0      7533          ext.l     D0
0000419E  220D      7534          move.l    A5,D1
000041A0  534D      7535          subq.w    #1,A5
000041A2  B081      7536          cmp.l     D1,D0
000041A4  6C0E      7537          bge.s     vsprintf_104
000041A6  4878 0020 7538          pea       32
000041AA  2F0A      7539          move.l    A2,-(A7)
000041AC  4E93      7540          jsr       (A3)
000041AE  504F      7541          addq.w    #8,A7
000041B0  5286      7542          addq.l    #1,D6
000041B2  60E2      7543          bra       vsprintf_102
                    7544   vsprintf_104:
000041B4  41EE FFD4 7545          lea       -44(A6),A0
000041B8  2408      7546          move.l    A0,D2
                    7547   vsprintf_105:
000041BA  2042      7548          move.l    D2,A0
000041BC  4A10      7549          tst.b     (A0)
000041BE  6716      7550          beq.s     vsprintf_107
000041C0  2042      7551          move.l    D2,A0
000041C2  5282      7552          addq.l    #1,D2
000041C4  1210      7553          move.b    (A0),D1
000041C6  4881      7554          ext.w     D1
000041C8  48C1      7555          ext.l     D1
000041CA  2F01      7556          move.l    D1,-(A7)
000041CC  2F0A      7557          move.l    A2,-(A7)
000041CE  4E93      7558          jsr       (A3)
000041D0  504F      7559          addq.w    #8,A7
000041D2  5286      7560          addq.l    #1,D6
000041D4  60E4      7561          bra       vsprintf_105
                    7562   vsprintf_107:
000041D6  202E FFFC 7563          move.l    -4(A6),D0
000041DA  1D40 FFD1 7564          move.b    D0,-47(A6)
                    7565   vsprintf_108:
000041DE  102E FFD1 7566          move.b    -47(A6),D0
000041E2  532E FFD1 7567          subq.b    #1,-47(A6)
000041E6  4A00      7568          tst.b     D0
000041E8  670E      7569          beq.s     vsprintf_110
000041EA  4878 0030 7570          pea       48
000041EE  2F0A      7571          move.l    A2,-(A7)
000041F0  4E93      7572          jsr       (A3)
000041F2  504F      7573          addq.w    #8,A7
000041F4  5286      7574          addq.l    #1,D6
000041F6  60E6      7575          bra       vsprintf_108
                    7576   vsprintf_110:
000041F8  2043      7577          move.l    D3,A0
000041FA  4A10      7578          tst.b     (A0)
000041FC  6700 0048 7579          beq       vsprintf_113
00004200  206E 000C 7580          move.l    12(A6),A0
00004204  1010      7581          move.b    (A0),D0
00004206  4880      7582          ext.w     D0
00004208  48C0      7583          ext.l     D0
0000420A  0C80 0000 7584          cmp.l     #115,D0
0000420E  0073      
00004210  670C      7585          beq.s     vsprintf_116
00004212  6E18      7586          bgt.s     vsprintf_119
00004214  0C80 0000 7587          cmp.l     #99,D0
00004218  0063      
0000421A  6702      7588          beq.s     vsprintf_116
0000421C  600E      7589          bra.s     vsprintf_119
                    7590   vsprintf_116:
0000421E  2005      7591          move.l    D5,D0
00004220  5385      7592          subq.l    #1,D5
00004222  0C80 0000 7593          cmp.l     #0,D0
00004226  0000      
00004228  6E02      7594          bgt.s     vsprintf_119
0000422A  6016      7595          bra.s     vsprintf_115
                    7596   vsprintf_119:
0000422C  2043      7597          move.l    D3,A0
0000422E  5283      7598          addq.l    #1,D3
00004230  1210      7599          move.b    (A0),D1
00004232  4881      7600          ext.w     D1
00004234  48C1      7601          ext.l     D1
00004236  2F01      7602          move.l    D1,-(A7)
00004238  2F0A      7603          move.l    A2,-(A7)
0000423A  4E93      7604          jsr       (A3)
0000423C  504F      7605          addq.w    #8,A7
0000423E  5286      7606          addq.l    #1,D6
00004240  6002      7607          bra.s     vsprintf_112
                    7608   vsprintf_115:
00004242  6002      7609          bra.s     vsprintf_113
                    7610   vsprintf_112:
00004244  60B2      7611          bra       vsprintf_110
                    7612   vsprintf_113:
00004246  4A2E FFCD 7613          tst.b     -51(A6)
0000424A  6700 0030 7614          beq       vsprintf_125
0000424E  4884      7615          ext.w     D4
00004250  48C4      7616          ext.l     D4
00004252  2004      7617          move.l    D4,D0
00004254  D0AE FFFC 7618          add.l     -4(A6),D0
00004258  D087      7619          add.l     D7,D0
0000425A  1D40 FFD1 7620          move.b    D0,-47(A6)
                    7621   vsprintf_123:
0000425E  102E FFD1 7622          move.b    -47(A6),D0
00004262  4880      7623          ext.w     D0
00004264  48C0      7624          ext.l     D0
00004266  220D      7625          move.l    A5,D1
00004268  534D      7626          subq.w    #1,A5
0000426A  B081      7627          cmp.l     D1,D0
0000426C  6C0E      7628          bge.s     vsprintf_125
0000426E  4878 0020 7629          pea       32
00004272  2F0A      7630          move.l    A2,-(A7)
00004274  4E93      7631          jsr       (A3)
00004276  504F      7632          addq.w    #8,A7
00004278  5386      7633          subq.l    #1,D6
0000427A  60E2      7634          bra       vsprintf_123
                    7635   vsprintf_125:
0000427C  6014      7636          bra.s     vsprintf_81
                    7637   vsprintf_80:
0000427E  206E 000C 7638          move.l    12(A6),A0
00004282  1210      7639          move.b    (A0),D1
00004284  4881      7640          ext.w     D1
00004286  48C1      7641          ext.l     D1
00004288  2F01      7642          move.l    D1,-(A7)
0000428A  2F0A      7643          move.l    A2,-(A7)
0000428C  4E93      7644          jsr       (A3)
0000428E  504F      7645          addq.w    #8,A7
00004290  5286      7646          addq.l    #1,D6
                    7647   vsprintf_81:
00004292  52AE 000C 7648          addq.l    #1,12(A6)
                    7649   vsprintf_2:
00004296  6000 F9D6 7650          bra       vsprintf_1
                    7651   vsprintf_3:
0000429A  4A92      7652          tst.l     (A2)
0000429C  6710      7653          beq.s     vsprintf_126
0000429E  4201      7654          clr.b     D1
000042A0  C2BC 0000 7655          and.l     #255,D1
000042A4  00FF      
000042A6  2F01      7656          move.l    D1,-(A7)
000042A8  2F0A      7657          move.l    A2,-(A7)
000042AA  4E93      7658          jsr       (A3)
000042AC  504F      7659          addq.w    #8,A7
                    7660   vsprintf_126:
000042AE  2006      7661          move.l    D6,D0
000042B0  4CDF 3CFC 7662          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
000042B4  4E5E      7663          unlk      A6
000042B6  4E75      7664          rts
                    7665   @itoa_convert:
000042B8  4E56 0000 7666          link      A6,#0
000042BC  48E7 3C00 7667          movem.l   D2/D3/D4/D5,-(A7)
000042C0  242E 0008 7668          move.l    8(A6),D2
000042C4  262E 0010 7669          move.l    16(A6),D3
000042C8  2A2E 000C 7670          move.l    12(A6),D5
000042CC  2F05      7671          move.l    D5,-(A7)
000042CE  2F03      7672          move.l    D3,-(A7)
000042D0  6100 F614 7673          bsr       ULDIV
000042D4  202F 0004 7674          move.l    4(A7),D0
000042D8  504F      7675          addq.w    #8,A7
000042DA  2800      7676          move.l    D0,D4
000042DC  BA83      7677          cmp.l     D3,D5
000042DE  651A      7678          blo.s     @itoa_convert_1
000042E0  2F03      7679          move.l    D3,-(A7)
000042E2  2F05      7680          move.l    D5,-(A7)
000042E4  2F03      7681          move.l    D3,-(A7)
000042E6  6100 F5FE 7682          bsr       ULDIV
000042EA  2217      7683          move.l    (A7),D1
000042EC  504F      7684          addq.w    #8,A7
000042EE  2F01      7685          move.l    D1,-(A7)
000042F0  2F02      7686          move.l    D2,-(A7)
000042F2  61C4      7687          bsr       @itoa_convert
000042F4  DEFC 000C 7688          add.w     #12,A7
000042F8  2400      7689          move.l    D0,D2
                    7690   @itoa_convert_1:
000042FA  0C84 0000 7691          cmp.l     #9,D4
000042FE  0009      
00004300  6E0A      7692          bgt.s     @itoa_convert_3
00004302  2004      7693          move.l    D4,D0
00004304  0680 0000 7694          add.l     #48,D0
00004308  0030      
0000430A  600E      7695          bra.s     @itoa_convert_4
                    7696   @itoa_convert_3:
0000430C  2004      7697          move.l    D4,D0
0000430E  0680 0000 7698          add.l     #97,D0
00004312  0061      
00004314  0480 0000 7699          sub.l     #10,D0
00004318  000A      
                    7700   @itoa_convert_4:
0000431A  2042      7701          move.l    D2,A0
0000431C  1080      7702          move.b    D0,(A0)
0000431E  2002      7703          move.l    D2,D0
00004320  5280      7704          addq.l    #1,D0
00004322  4CDF 003C 7705          movem.l   (A7)+,D2/D3/D4/D5
00004326  4E5E      7706          unlk      A6
00004328  4E75      7707          rts
                    7708   _ltoa:
0000432A  4E56 0000 7709          link      A6,#0
0000432E  48E7 3C00 7710          movem.l   D2/D3/D4/D5,-(A7)
00004332  242E 0008 7711          move.l    8(A6),D2
00004336  262E 000C 7712          move.l    12(A6),D3
0000433A  2A2E 0010 7713          move.l    16(A6),D5
0000433E  2803      7714          move.l    D3,D4
00004340  0C85 0000 7715          cmp.l     #2,D5
00004344  0002      
00004346  6D08      7716          blt.s     ltoa_3
00004348  0C85 0000 7717          cmp.l     #36,D5
0000434C  0024      
0000434E  6F06      7718          ble.s     ltoa_1
                    7719   ltoa_3:
00004350  2003      7720          move.l    D3,D0
00004352  6000 0052 7721          bra       ltoa_4
                    7722   ltoa_1:
00004356  0C85 0000 7723          cmp.l     #10,D5
0000435A  000A      
0000435C  6600 0032 7724          bne       ltoa_5
00004360  0C82 0000 7725          cmp.l     #0,D2
00004364  0000      
00004366  6C28      7726          bge.s     ltoa_5
00004368  2002      7727          move.l    D2,D0
0000436A  4480      7728          neg.l     D0
0000436C  2400      7729          move.l    D0,D2
0000436E  0C82 0000 7730          cmp.l     #0,D2
00004372  0000      
00004374  6C12      7731          bge.s     ltoa_7
00004376  4879 0000 7732          pea       @itoa_1
0000437A  503C      
0000437C  2F03      7733          move.l    D3,-(A7)
0000437E  6100 F556 7734          bsr       _strcpy
00004382  504F      7735          addq.w    #8,A7
00004384  2003      7736          move.l    D3,D0
00004386  601E      7737          bra.s     ltoa_4
                    7738   ltoa_7:
00004388  2044      7739          move.l    D4,A0
0000438A  5284      7740          addq.l    #1,D4
0000438C  10BC 002D 7741          move.b    #45,(A0)
                    7742   ltoa_5:
00004390  2F05      7743          move.l    D5,-(A7)
00004392  2F02      7744          move.l    D2,-(A7)
00004394  2F04      7745          move.l    D4,-(A7)
00004396  6100 FF20 7746          bsr       @itoa_convert
0000439A  DEFC 000C 7747          add.w     #12,A7
0000439E  2800      7748          move.l    D0,D4
000043A0  2044      7749          move.l    D4,A0
000043A2  4210      7750          clr.b     (A0)
000043A4  2003      7751          move.l    D3,D0
                    7752   ltoa_4:
000043A6  4CDF 003C 7753          movem.l   (A7)+,D2/D3/D4/D5
000043AA  4E5E      7754          unlk      A6
000043AC  4E75      7755          rts
                    7756   _ultoa:
000043AE  4E56 0000 7757          link      A6,#0
000043B2  48E7 3800 7758          movem.l   D2/D3/D4,-(A7)
000043B6  262E 0010 7759          move.l    16(A6),D3
000043BA  282E 000C 7760          move.l    12(A6),D4
000043BE  2404      7761          move.l    D4,D2
000043C0  0C83 0000 7762          cmp.l     #2,D3
000043C4  0002      
000043C6  6D08      7763          blt.s     ultoa_3
000043C8  0C83 0000 7764          cmp.l     #36,D3
000043CC  0024      
000043CE  6F04      7765          ble.s     ultoa_1
                    7766   ultoa_3:
000043D0  2004      7767          move.l    D4,D0
000043D2  6018      7768          bra.s     ultoa_4
                    7769   ultoa_1:
000043D4  2F03      7770          move.l    D3,-(A7)
000043D6  2F2E 0008 7771          move.l    8(A6),-(A7)
000043DA  2F02      7772          move.l    D2,-(A7)
000043DC  6100 FEDA 7773          bsr       @itoa_convert
000043E0  DEFC 000C 7774          add.w     #12,A7
000043E4  2400      7775          move.l    D0,D2
000043E6  2042      7776          move.l    D2,A0
000043E8  4210      7777          clr.b     (A0)
000043EA  2004      7778          move.l    D4,D0
                    7779   ultoa_4:
000043EC  4CDF 001C 7780          movem.l   (A7)+,D2/D3/D4
000043F0  4E5E      7781          unlk      A6
000043F2  4E75      7782          rts
                    7783   _itoa:
000043F4  4E56 0000 7784          link      A6,#0
000043F8  2F2E 0010 7785          move.l    16(A6),-(A7)
000043FC  2F2E 000C 7786          move.l    12(A6),-(A7)
00004400  2F2E 0008 7787          move.l    8(A6),-(A7)
00004404  6100 FF24 7788          bsr       _ltoa
00004408  DEFC 000C 7789          add.w     #12,A7
0000440C  4E5E      7790          unlk      A6
0000440E  4E75      7791          rts
                    7792   _strlen:
00004410  206F 0004 7793          move.l    (4,A7),A0
00004414  2248      7794          move.l    A0,A1
                    7795   strlen_1:
00004416  4A19      7796          tst.b     (A1)+
00004418  66FC      7797          bne       strlen_1
0000441A  2009      7798          move.l    A1,D0
0000441C  9088      7799          sub.l     A0,D0
0000441E  5380      7800          subq.l    #1,D0
00004420  4E75      7801          rts
                    7802          section   const
                    7803   
                    7804   @m68kde~1_1:
00004422  0D0A 4475 7805          dc.b      13,10,68,117,109,112,32,77,101,109,111,114,121
00004426  6D70 204D 
0000442A  656D 6F72 
0000442E  79        
0000442F  2042 6C6F 7806          dc.b      32,66,108,111,99,107,58,32,60,69,83,67,62,32
00004433  636B 3A20 
00004437  3C45 5343 
0000443B  3E20      
0000443D  746F 2041 7807          dc.b      116,111,32,65,98,111,114,116,44,32,60,83,80
00004441  626F 7274 
00004445  2C20 3C53 
00004449  50        
0000444A  4143 453E 7808          dc.b      65,67,69,62,32,116,111,32,67,111,110,116,105
0000444E  2074 6F20 
00004452  436F 6E74 
00004456  69        
00004457  6E75 6500 7809          dc.b      110,117,101,0
                    7810   @m68kde~1_2:
0000445C  0D0A 456E 7811          dc.b      13,10,69,110,116,101,114,32,83,116,97,114,116
00004460  7465 7220 
00004464  5374 6172 
00004468  74        
00004469  2041 6464 7812          dc.b      32,65,100,100,114,101,115,115,58,32,0
0000446D  7265 7373 
00004471  3A20 00   
                    7813   @m68kde~1_3:
00004474  0D0A 2530 7814          dc.b      13,10,37,48,56,120,32,0
00004478  3878 2000 
                    7815   @m68kde~1_4:
0000447C  2530 3258 7816          dc.b      37,48,50,88,0
00004480  00        
                    7817   @m68kde~1_5:
00004482  2020 00   7818          dc.b      32,32,0
                    7819   @m68kde~1_6:
00004486  0D0A 00   7820          dc.b      13,10,0
                    7821   @m68kde~1_7:
0000448A  0D0A 4669 7822          dc.b      13,10,70,105,108,108,32,77,101,109,111,114,121
0000448E  6C6C 204D 
00004492  656D 6F72 
00004496  79        
00004497  2042 6C6F 7823          dc.b      32,66,108,111,99,107,0
0000449B  636B 00   
                    7824   @m68kde~1_8:
0000449E  0D0A 456E 7825          dc.b      13,10,69,110,116,101,114,32,69,110,100,32,65
000044A2  7465 7220 
000044A6  456E 6420 
000044AA  41        
000044AB  6464 7265 7826          dc.b      100,100,114,101,115,115,58,32,0
000044AF  7373 3A20 
000044B3  00        
                    7827   @m68kde~1_9:
000044B4  0D0A 456E 7828          dc.b      13,10,69,110,116,101,114,32,70,105,108,108,32
000044B8  7465 7220 
000044BC  4669 6C6C 
000044C0  20        
000044C1  4461 7461 7829          dc.b      68,97,116,97,58,32,0
000044C5  3A20 00   
                    7830   @m68kde~1_10:
000044C8  0D0A 4669 7831          dc.b      13,10,70,105,108,108,105,110,103,32,65,100,100
000044CC  6C6C 696E 
000044D0  6720 4164 
000044D4  64        
000044D5  7265 7373 7832          dc.b      114,101,115,115,101,115,32,91,36,37,48,56,88
000044D9  6573 205B 
000044DD  2425 3038 
000044E1  58        
000044E2  202D 2024 7833          dc.b      32,45,32,36,37,48,56,88,93,32,119,105,116,104
000044E6  2530 3858 
000044EA  5D20 7769 
000044EE  7468      
000044F0  2024 2530 7834          dc.b      32,36,37,48,50,88,0
000044F4  3258 00   
                    7835   @m68kde~1_11:
000044F8  0D0A 5573 7836          dc.b      13,10,85,115,101,32,72,121,112,101,114,84,101
000044FC  6520 4879 
00004500  7065 7254 
00004504  65        
00004505  726D 696E 7837          dc.b      114,109,105,110,97,108,32,116,111,32,83,101
00004509  616C 2074 
0000450D  6F20 5365 
00004511  6E64 2054 7838          dc.b      110,100,32,84,101,120,116,32,70,105,108,101
00004515  6578 7420 
00004519  4669 6C65 
0000451D  2028 2E68 7839          dc.b      32,40,46,104,101,120,41,13,10,0
00004521  6578 290D 
00004525  0A00      
                    7840   @m68kde~1_12:
00004528  0D0A 4C6F 7841          dc.b      13,10,76,111,97,100,32,70,97,105,108,101,100
0000452C  6164 2046 
00004530  6169 6C65 
00004534  64        
00004535  2061 7420 7842          dc.b      32,97,116,32,65,100,100,114,101,115,115,32,61
00004539  4164 6472 
0000453D  6573 7320 
00004541  3D        
00004542  205B 2425 7843          dc.b      32,91,36,37,48,56,88,93,13,10,0
00004546  3038 585D 
0000454A  0D0A 00   
                    7844   @m68kde~1_13:
0000454E  0D0A 5375 7845          dc.b      13,10,83,117,99,99,101,115,115,58,32,68,111
00004552  6363 6573 
00004556  733A 2044 
0000455A  6F        
0000455B  776E 6C6F 7846          dc.b      119,110,108,111,97,100,101,100,32,37,100,32
0000455F  6164 6564 
00004563  2025 6420 
00004567  6279 7465 7847          dc.b      98,121,116,101,115,13,10,0
0000456B  730D 0A00 
                    7848   @m68kde~1_14:
00004570  0D0A 4578 7849          dc.b      13,10,69,120,97,109,105,110,101,32,97,110,100
00004574  616D 696E 
00004578  6520 616E 
0000457C  64        
0000457D  2043 6861 7850          dc.b      32,67,104,97,110,103,101,32,77,101,109,111,114
00004581  6E67 6520 
00004585  4D65 6D6F 
00004589  72        
0000458A  7900      7851          dc.b      121,0
                    7852   @m68kde~1_15:
0000458C  0D0A 3C45 7853          dc.b      13,10,60,69,83,67,62,32,116,111,32,83,116,111
00004590  5343 3E20 
00004594  746F 2053 
00004598  746F      
0000459A  702C 203C 7854          dc.b      112,44,32,60,83,80,65,67,69,62,32,116,111,32
0000459E  5350 4143 
000045A2  453E 2074 
000045A6  6F20      
000045A8  4164 7661 7855          dc.b      65,100,118,97,110,99,101,44,32,39,45,39,32,116
000045AC  6E63 652C 
000045B0  2027 2D27 
000045B4  2074      
000045B6  6F20 476F 7856          dc.b      111,32,71,111,32,66,97,99,107,44,32,60,68,65
000045BA  2042 6163 
000045BE  6B2C 203C 
000045C2  4441      
000045C4  5441 3E20 7857          dc.b      84,65,62,32,116,111,32,99,104,97,110,103,101
000045C8  746F 2063 
000045CC  6861 6E67 
000045D0  65        
000045D1  00        7858          dc.b      0
                    7859   @m68kde~1_16:
000045D2  0D0A 456E 7860          dc.b      13,10,69,110,116,101,114,32,65,100,100,114,101
000045D6  7465 7220 
000045DA  4164 6472 
000045DE  65        
000045DF  7373 3A20 7861          dc.b      115,115,58,32,0
000045E3  00        
                    7862   @m68kde~1_17:
000045E4  0D0A 5B25 7863          dc.b      13,10,91,37,48,56,120,93,32,58,32,37,48,50,120
000045E8  3038 785D 
000045EC  203A 2025 
000045F0  3032 78   
000045F3  2020 00   7864          dc.b      32,32,0
                    7865   @m68kde~1_18:
000045F6  0D0A 5761 7866          dc.b      13,10,87,97,114,110,105,110,103,32,67,104,97
000045FA  726E 696E 
000045FE  6720 4368 
00004602  61        
00004603  6E67 6520 7867          dc.b      110,103,101,32,70,97,105,108,101,100,58,32,87
00004607  4661 696C 
0000460B  6564 3A20 
0000460F  57        
00004610  726F 7465 7868          dc.b      114,111,116,101,32,91,37,48,50,120,93,44,32
00004614  205B 2530 
00004618  3278 5D2C 
0000461C  20        
0000461D  5265 6164 7869          dc.b      82,101,97,100,32,91,37,48,50,120,93,0
00004621  205B 2530 
00004625  3278 5D00 
                    7870   @m68kde~1_19:
0000462A  2425 3038 7871          dc.b      36,37,48,56,88,32,32,0
0000462E  5820 2000 
                    7872   @m68kde~1_20:
00004632  2000      7873          dc.b      32,0
                    7874   @m68kde~1_21:
00004634  2E00      7875          dc.b      46,0
                    7876   @m68kde~1_22:
00004636  2563 00   7877          dc.b      37,99,0
                    7878   @m68kde~1_23:
0000463A  00        7879          dc.b      0
                    7880   @m68kde~1_24:
0000463C  0D0A 0D0A 7881          dc.b      13,10,13,10,32,68,48,32,61,32,36,37,48,56,88
00004640  2044 3020 
00004644  3D20 2425 
00004648  3038 58   
0000464B  2020 4130 7882          dc.b      32,32,65,48,32,61,32,36,37,48,56,88,0
0000464F  203D 2024 
00004653  2530 3858 
00004657  00        
                    7883   @m68kde~1_25:
00004658  0D0A 2044 7884          dc.b      13,10,32,68,49,32,61,32,36,37,48,56,88,32,32
0000465C  3120 3D20 
00004660  2425 3038 
00004664  5820 20   
00004667  4131 203D 7885          dc.b      65,49,32,61,32,36,37,48,56,88,0
0000466B  2024 2530 
0000466F  3858 00   
                    7886   @m68kde~1_26:
00004672  0D0A 2044 7887          dc.b      13,10,32,68,50,32,61,32,36,37,48,56,88,32,32
00004676  3220 3D20 
0000467A  2425 3038 
0000467E  5820 20   
00004681  4132 203D 7888          dc.b      65,50,32,61,32,36,37,48,56,88,0
00004685  2024 2530 
00004689  3858 00   
                    7889   @m68kde~1_27:
0000468C  0D0A 2044 7890          dc.b      13,10,32,68,51,32,61,32,36,37,48,56,88,32,32
00004690  3320 3D20 
00004694  2425 3038 
00004698  5820 20   
0000469B  4133 203D 7891          dc.b      65,51,32,61,32,36,37,48,56,88,0
0000469F  2024 2530 
000046A3  3858 00   
                    7892   @m68kde~1_28:
000046A6  0D0A 2044 7893          dc.b      13,10,32,68,52,32,61,32,36,37,48,56,88,32,32
000046AA  3420 3D20 
000046AE  2425 3038 
000046B2  5820 20   
000046B5  4134 203D 7894          dc.b      65,52,32,61,32,36,37,48,56,88,0
000046B9  2024 2530 
000046BD  3858 00   
                    7895   @m68kde~1_29:
000046C0  0D0A 2044 7896          dc.b      13,10,32,68,53,32,61,32,36,37,48,56,88,32,32
000046C4  3520 3D20 
000046C8  2425 3038 
000046CC  5820 20   
000046CF  4135 203D 7897          dc.b      65,53,32,61,32,36,37,48,56,88,0
000046D3  2024 2530 
000046D7  3858 00   
                    7898   @m68kde~1_30:
000046DA  0D0A 2044 7899          dc.b      13,10,32,68,54,32,61,32,36,37,48,56,88,32,32
000046DE  3620 3D20 
000046E2  2425 3038 
000046E6  5820 20   
000046E9  4136 203D 7900          dc.b      65,54,32,61,32,36,37,48,56,88,0
000046ED  2024 2530 
000046F1  3858 00   
                    7901   @m68kde~1_31:
000046F4  0D0A 2044 7902          dc.b      13,10,32,68,55,32,61,32,36,37,48,56,88,32,32
000046F8  3720 3D20 
000046FC  2425 3038 
00004700  5820 20   
00004703  4137 203D 7903          dc.b      65,55,32,61,32,36,37,48,56,88,0
00004707  2024 2530 
0000470B  3858 00   
                    7904   @m68kde~1_32:
0000470E  0D0A 0D0A 7905          dc.b      13,10,13,10,85,83,80,32,61,32,36,37,48,56,88
00004712  5553 5020 
00004716  3D20 2425 
0000471A  3038 58   
0000471D  2020 2841 7906          dc.b      32,32,40,65,55,41,32,85,115,101,114,32,83,80
00004721  3729 2055 
00004725  7365 7220 
00004729  5350      
0000472B  00        7907          dc.b      0
                    7908   @m68kde~1_33:
0000472C  0D0A 5353 7909          dc.b      13,10,83,83,80,32,61,32,36,37,48,56,88,32,32
00004730  5020 3D20 
00004734  2425 3038 
00004738  5820 20   
0000473B  2841 3729 7910          dc.b      40,65,55,41,32,83,117,112,101,114,118,105,115
0000473F  2053 7570 
00004743  6572 7669 
00004747  73        
00004748  6F72 2053 7911          dc.b      111,114,32,83,80,0
0000474C  5000      
                    7912   @m68kde~1_34:
0000474E  0D0A 2053 7913          dc.b      13,10,32,83,82,32,61,32,36,37,48,52,88,32,32
00004752  5220 3D20 
00004756  2425 3034 
0000475A  5820 20   
0000475D  2000      7914          dc.b      32,0
                    7915   @m68kde~1_35:
00004760  2020 205B 7916          dc.b      32,32,32,91,0
00004764  00        
                    7917   @m68kde~1_36:
00004766  0D0A 2050 7918          dc.b      13,10,32,80,67,32,61,32,36,37,48,56,88,32,32
0000476A  4320 3D20 
0000476E  2425 3038 
00004772  5820 20   
00004775  00        7919          dc.b      0
                    7920   @m68kde~1_37:
00004776  5B40 2042 7921          dc.b      91,64,32,66,82,69,65,75,80,79,73,78,84,93,0
0000477A  5245 414B 
0000477E  504F 494E 
00004782  545D 00   
                    7922   @m68kde~1_38:
00004786  0D0A 5750 7923          dc.b      13,10,87,80,37,100,32,61,32,37,115,0
0000478A  2564 203D 
0000478E  2025 7300 
                    7924   @m68kde~1_39:
00004792  0D0A 0D0A 7925          dc.b      13,10,13,10,13,10,13,10,13,10,13,10,83,105,110
00004796  0D0A 0D0A 
0000479A  0D0A 0D0A 
0000479E  5369 6E   
000047A1  676C 6520 7926          dc.b      103,108,101,32,83,116,101,112,32,32,58,91,79
000047A5  5374 6570 
000047A9  2020 3A5B 
000047AD  4F        
000047AE  4E5D 00   7927          dc.b      78,93,0
                    7928   @m68kde~1_40:
000047B2  0D0A 4272 7929          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
000047B6  6561 6B20 
000047BA  506F 696E 
000047BE  74        
000047BF  7320 3A5B 7930          dc.b      115,32,58,91,68,105,115,97,98,108,101,100,93
000047C3  4469 7361 
000047C7  626C 6564 
000047CB  5D        
000047CC  00        7931          dc.b      0
                    7932   @m68kde~1_41:
000047CE  0D0A 5072 7933          dc.b      13,10,80,114,101,115,115,32,60,83,80,65,67,69
000047D2  6573 7320 
000047D6  3C53 5041 
000047DA  4345      
000047DC  3E20 746F 7934          dc.b      62,32,116,111,32,69,120,101,99,117,116,101,32
000047E0  2045 7865 
000047E4  6375 7465 
000047E8  20        
000047E9  4E65 7874 7935          dc.b      78,101,120,116,32,73,110,115,116,114,117,99
000047ED  2049 6E73 
000047F1  7472 7563 
000047F5  7469 6F6E 7936          dc.b      116,105,111,110,0
000047F9  00        
                    7937   @m68kde~1_42:
000047FA  0D0A 5072 7938          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
000047FE  6573 7320 
00004802  3C45 5343 
00004806  3E20      
00004808  746F 2052 7939          dc.b      116,111,32,82,101,115,117,109,101,32,80,114
0000480C  6573 756D 
00004810  6520 5072 
00004814  6F67 7261 7940          dc.b      111,103,114,97,109,0
00004818  6D00      
                    7941   @m68kde~1_43:
0000481A  0D0A 496C 7942          dc.b      13,10,73,108,108,101,103,97,108,32,68,97,116
0000481E  6C65 6761 
00004822  6C20 4461 
00004826  74        
00004827  6120 5265 7943          dc.b      97,32,82,101,103,105,115,116,101,114,32,58,32
0000482B  6769 7374 
0000482F  6572 203A 
00004833  20        
00004834  5573 6520 7944          dc.b      85,115,101,32,68,48,45,68,55,46,46,46,46,46
00004838  4430 2D44 
0000483C  372E 2E2E 
00004840  2E2E      
00004842  0D0A 00   7945          dc.b      13,10,0
                    7946   @m68kde~1_44:
00004846  0D0A 4425 7947          dc.b      13,10,68,37,99,32,61,32,0
0000484A  6320 3D20 
0000484E  00        
                    7948   @m68kde~1_45:
00004850  0D0A 496C 7949          dc.b      13,10,73,108,108,101,103,97,108,32,65,100,100
00004854  6C65 6761 
00004858  6C20 4164 
0000485C  64        
0000485D  7265 7373 7950          dc.b      114,101,115,115,32,82,101,103,105,115,116,101
00004861  2052 6567 
00004865  6973 7465 
00004869  7220 3A20 7951          dc.b      114,32,58,32,85,115,101,32,65,48,45,65,55,46
0000486D  5573 6520 
00004871  4130 2D41 
00004875  372E      
00004877  2E2E 2E2E 7952          dc.b      46,46,46,46,13,10,0
0000487B  0D0A 00   
                    7953   @m68kde~1_46:
0000487E  0D0A 4125 7954          dc.b      13,10,65,37,99,32,61,32,0
00004882  6320 3D20 
00004886  00        
                    7955   @m68kde~1_47:
00004888  0D0A 5573 7956          dc.b      13,10,85,115,101,114,32,83,80,32,61,32,0
0000488C  6572 2053 
00004890  5020 3D20 
00004894  00        
                    7957   @m68kde~1_48:
00004896  0D0A 496C 7958          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
0000489A  6C65 6761 
0000489E  6C20 5265 
000048A2  67        
000048A3  6973 7465 7959          dc.b      105,115,116,101,114,46,46,46,46,0
000048A7  722E 2E2E 
000048AB  2E00      
                    7960   @m68kde~1_49:
000048AE  0D0A 5379 7961          dc.b      13,10,83,121,115,116,101,109,32,83,80,32,61
000048B2  7374 656D 
000048B6  2053 5020 
000048BA  3D        
000048BB  2000      7962          dc.b      32,0
                    7963   @m68kde~1_50:
000048BE  0D0A 5043 7964          dc.b      13,10,80,67,32,61,32,0
000048C2  203D 2000 
                    7965   @m68kde~1_51:
000048C6  0D0A 5352 7966          dc.b      13,10,83,82,32,61,32,0
000048CA  203D 2000 
                    7967   @m68kde~1_52:
000048CE  0D0A 496C 7968          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
000048D2  6C65 6761 
000048D6  6C20 5265 
000048DA  67        
000048DB  6973 7465 7969          dc.b      105,115,116,101,114,58,32,85,115,101,32,65,48
000048DF  723A 2055 
000048E3  7365 2041 
000048E7  30        
000048E8  2D41 372C 7970          dc.b      45,65,55,44,32,68,48,45,68,55,44,32,83,83,80
000048EC  2044 302D 
000048F0  4437 2C20 
000048F4  5353 50   
000048F7  2C20 5553 7971          dc.b      44,32,85,83,80,44,32,80,67,32,111,114,32,83
000048FB  502C 2050 
000048FF  4320 6F72 
00004903  2053      
00004905  520D 0A00 7972          dc.b      82,13,10,0
                    7973   @m68kde~1_53:
0000490A  0D0A 0D0A 7974          dc.b      13,10,13,10,78,117,109,32,32,32,32,32,65,100
0000490E  4E75 6D20 
00004912  2020 2020 
00004916  4164      
00004918  6472 6573 7975          dc.b      100,114,101,115,115,32,32,32,32,32,32,73,110
0000491C  7320 2020 
00004920  2020 2049 
00004924  6E        
00004925  7374 7275 7976          dc.b      115,116,114,117,99,116,105,111,110,0
00004929  6374 696F 
0000492D  6E00      
                    7977   @m68kde~1_54:
00004930  0D0A 2D2D 7978          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
00004934  2D20 2020 
00004938  2020 2D2D 
0000493C  2D2D 2D   
0000493F  2D2D 2D2D 7979          dc.b      45,45,45,45,32,32,32,32,45,45,45,45,45,45,45
00004943  2020 2020 
00004947  2D2D 2D2D 
0000494B  2D2D 2D   
0000494E  2D2D 2D2D 7980          dc.b      45,45,45,45,0
00004952  00        
                    7981   @m68kde~1_55:
00004954  0D0A 4E6F 7982          dc.b      13,10,78,111,32,66,114,101,97,107,80,111,105
00004958  2042 7265 
0000495C  616B 506F 
00004960  69        
00004961  6E74 7320 7983          dc.b      110,116,115,32,83,101,116,0
00004965  5365 7400 
                    7984   @m68kde~1_56:
0000496A  0D0A 2533 7985          dc.b      13,10,37,51,100,32,32,32,32,32,36,37,48,56,120
0000496E  6420 2020 
00004972  2020 2425 
00004976  3038 78   
00004979  00        7986          dc.b      0
                    7987   @m68kde~1_57:
0000497A  0D0A 4E75 7988          dc.b      13,10,78,117,109,32,32,32,32,32,65,100,100,114
0000497E  6D20 2020 
00004982  2020 4164 
00004986  6472      
00004988  6573 7300 7989          dc.b      101,115,115,0
                    7990   @m68kde~1_58:
0000498C  0D0A 2D2D 7991          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
00004990  2D20 2020 
00004994  2020 2D2D 
00004998  2D2D 2D   
0000499B  2D2D 2D2D 7992          dc.b      45,45,45,45,0
0000499F  00        
                    7993   @m68kde~1_59:
000049A0  0D0A 4E6F 7994          dc.b      13,10,78,111,32,87,97,116,99,104,80,111,105
000049A4  2057 6174 
000049A8  6368 506F 
000049AC  69        
000049AD  6E74 7320 7995          dc.b      110,116,115,32,83,101,116,0
000049B1  5365 7400 
                    7996   @m68kde~1_60:
000049B6  0D0A 456E 7997          dc.b      13,10,69,110,116,101,114,32,66,114,101,97,107
000049BA  7465 7220 
000049BE  4272 6561 
000049C2  6B        
000049C3  2050 6F69 7998          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
000049C7  6E74 204E 
000049CB  756D 6265 
000049CF  72        
000049D0  3A20 00   7999          dc.b      58,32,0
                    8000   @m68kde~1_61:
000049D4  0D0A 496C 8001          dc.b      13,10,73,108,108,101,103,97,108,32,82,97,110
000049D8  6C65 6761 
000049DC  6C20 5261 
000049E0  6E        
000049E1  6765 203A 8002          dc.b      103,101,32,58,32,85,115,101,32,48,32,45,32,55
000049E5  2055 7365 
000049E9  2030 202D 
000049ED  2037      
000049EF  00        8003          dc.b      0
                    8004   @m68kde~1_62:
000049F0  0D0A 4272 8005          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
000049F4  6561 6B20 
000049F8  506F 696E 
000049FC  74        
000049FD  2043 6C65 8006          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
00004A01  6172 6564 
00004A05  2E2E 2E2E 
00004A09  2E        
00004A0A  0D0A 00   8007          dc.b      13,10,0
                    8008   @m68kde~1_63:
00004A0E  0D0A 4272 8009          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004A12  6561 6B20 
00004A16  506F 696E 
00004A1A  74        
00004A1B  2077 6173 8010          dc.b      32,119,97,115,110,39,116,32,83,101,116,46,46
00004A1F  6E27 7420 
00004A23  5365 742E 
00004A27  2E        
00004A28  2E2E 2E00 8011          dc.b      46,46,46,0
                    8012   @m68kde~1_64:
00004A2C  0D0A 456E 8013          dc.b      13,10,69,110,116,101,114,32,87,97,116,99,104
00004A30  7465 7220 
00004A34  5761 7463 
00004A38  68        
00004A39  2050 6F69 8014          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
00004A3D  6E74 204E 
00004A41  756D 6265 
00004A45  72        
00004A46  3A20 00   8015          dc.b      58,32,0
                    8016   @m68kde~1_65:
00004A4A  0D0A 5761 8017          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004A4E  7463 6820 
00004A52  506F 696E 
00004A56  74        
00004A57  2043 6C65 8018          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
00004A5B  6172 6564 
00004A5F  2E2E 2E2E 
00004A63  2E        
00004A64  0D0A 00   8019          dc.b      13,10,0
                    8020   @m68kde~1_66:
00004A68  0D0A 5761 8021          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004A6C  7463 6820 
00004A70  506F 696E 
00004A74  74        
00004A75  2057 6173 8022          dc.b      32,87,97,115,32,110,111,116,32,83,101,116,46
00004A79  206E 6F74 
00004A7D  2053 6574 
00004A81  2E        
00004A82  2E2E 2E2E 8023          dc.b      46,46,46,46,0
00004A86  00        
                    8024   @m68kde~1_67:
00004A88  0D0A 4E6F 8025          dc.b      13,10,78,111,32,70,82,69,69,32,66,114,101,97
00004A8C  2046 5245 
00004A90  4520 4272 
00004A94  6561      
00004A96  6B20 506F 8026          dc.b      107,32,80,111,105,110,116,115,46,46,46,46,46
00004A9A  696E 7473 
00004A9E  2E2E 2E2E 
00004AA2  2E        
00004AA3  00        8027          dc.b      0
                    8028   @m68kde~1_68:
00004AA4  0D0A 4272 8029          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004AA8  6561 6B20 
00004AAC  506F 696E 
00004AB0  74        
00004AB1  2041 6464 8030          dc.b      32,65,100,100,114,101,115,115,58,32,0
00004AB5  7265 7373 
00004AB9  3A20 00   
                    8031   @m68kde~1_69:
00004ABC  0D0A 4572 8032          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
00004AC0  726F 7220 
00004AC4  3A20 4272 
00004AC8  65        
00004AC9  616B 2050 8033          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
00004ACD  6F69 6E74 
00004AD1  7320 4341 
00004AD5  4E        
00004AD6  4E4F 5420 8034          dc.b      78,79,84,32,98,101,32,115,101,116,32,97,116
00004ADA  6265 2073 
00004ADE  6574 2061 
00004AE2  74        
00004AE3  204F 4444 8035          dc.b      32,79,68,68,32,97,100,100,114,101,115,115,101
00004AE7  2061 6464 
00004AEB  7265 7373 
00004AEF  65        
00004AF0  7300      8036          dc.b      115,0
                    8037   @m68kde~1_70:
00004AF2  0D0A 4572 8038          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
00004AF6  726F 7220 
00004AFA  3A20 4272 
00004AFE  65        
00004AFF  616B 2050 8039          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
00004B03  6F69 6E74 
00004B07  7320 4341 
00004B0B  4E        
00004B0C  4E4F 5420 8040          dc.b      78,79,84,32,98,101,32,115,101,116,32,102,111
00004B10  6265 2073 
00004B14  6574 2066 
00004B18  6F        
00004B19  7220 524F 8041          dc.b      114,32,82,79,77,32,105,110,32,82,97,110,103
00004B1D  4D20 696E 
00004B21  2052 616E 
00004B25  67        
00004B26  6520 3A20 8042          dc.b      101,32,58,32,91,36,48,45,36,48,48,48,48,55,70
00004B2A  5B24 302D 
00004B2E  2430 3030 
00004B32  3037 46   
00004B35  4646 5D00 8043          dc.b      70,70,93,0
                    8044   @m68kde~1_71:
00004B3A  0D0A 4572 8045          dc.b      13,10,69,114,114,111,114,58,32,66,114,101,97
00004B3E  726F 723A 
00004B42  2042 7265 
00004B46  61        
00004B47  6B20 506F 8046          dc.b      107,32,80,111,105,110,116,32,65,108,114,101
00004B4B  696E 7420 
00004B4F  416C 7265 
00004B53  6164 7920 8047          dc.b      97,100,121,32,69,120,105,115,116,115,32,97,116
00004B57  4578 6973 
00004B5B  7473 2061 
00004B5F  74        
00004B60  2041 6464 8048          dc.b      32,65,100,100,114,101,115,115,32,58,32,37,48
00004B64  7265 7373 
00004B68  203A 2025 
00004B6C  30        
00004B6D  3878 0D0A 8049          dc.b      56,120,13,10,0
00004B71  00        
                    8050   @m68kde~1_72:
00004B72  0D0A 4272 8051          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004B76  6561 6B20 
00004B7A  506F 696E 
00004B7E  74        
00004B7F  2053 6574 8052          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
00004B83  2061 7420 
00004B87  4164 6472 
00004B8B  65        
00004B8C  7373 3A20 8053          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
00004B90  5B24 2530 
00004B94  3878 5D00 
                    8054   @m68kde~1_73:
00004B98  0D0A 4E6F 8055          dc.b      13,10,78,111,32,70,82,69,69,32,87,97,116,99
00004B9C  2046 5245 
00004BA0  4520 5761 
00004BA4  7463      
00004BA6  6820 506F 8056          dc.b      104,32,80,111,105,110,116,115,46,46,46,46,46
00004BAA  696E 7473 
00004BAE  2E2E 2E2E 
00004BB2  2E        
00004BB3  00        8057          dc.b      0
                    8058   @m68kde~1_74:
00004BB4  0D0A 5761 8059          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004BB8  7463 6820 
00004BBC  506F 696E 
00004BC0  74        
00004BC1  2041 6464 8060          dc.b      32,65,100,100,114,101,115,115,58,32,0
00004BC5  7265 7373 
00004BC9  3A20 00   
                    8061   @m68kde~1_75:
00004BCC  0D0A 4572 8062          dc.b      13,10,69,114,114,111,114,58,32,87,97,116,99
00004BD0  726F 723A 
00004BD4  2057 6174 
00004BD8  63        
00004BD9  6820 506F 8063          dc.b      104,32,80,111,105,110,116,32,65,108,114,101
00004BDD  696E 7420 
00004BE1  416C 7265 
00004BE5  6164 7920 8064          dc.b      97,100,121,32,83,101,116,32,97,116,32,65,100
00004BE9  5365 7420 
00004BED  6174 2041 
00004BF1  64        
00004BF2  6472 6573 8065          dc.b      100,114,101,115,115,32,58,32,37,48,56,120,13
00004BF6  7320 3A20 
00004BFA  2530 3878 
00004BFE  0D        
00004BFF  0A00      8066          dc.b      10,0
                    8067   @m68kde~1_76:
00004C02  0D0A 5761 8068          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004C06  7463 6820 
00004C0A  506F 696E 
00004C0E  74        
00004C0F  2053 6574 8069          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
00004C13  2061 7420 
00004C17  4164 6472 
00004C1B  65        
00004C1C  7373 3A20 8070          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
00004C20  5B24 2530 
00004C24  3878 5D00 
                    8071   @m68kde~1_77:
00004C28  0D0A 0D0A 8072          dc.b      13,10,13,10,13,10,13,10,64,66,82,69,65,75,80
00004C2C  0D0A 0D0A 
00004C30  4042 5245 
00004C34  414B 50   
00004C37  4F49 4E54 8073          dc.b      79,73,78,84,0
00004C3B  00        
                    8074   @m68kde~1_78:
00004C3C  0D0A 5369 8075          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00004C40  6E67 6C65 
00004C44  2053 7465 
00004C48  70        
00004C49  203A 205B 8076          dc.b      32,58,32,91,79,78,93,0
00004C4D  4F4E 5D00 
                    8077   @m68kde~1_79:
00004C52  0D0A 4272 8078          dc.b      13,10,66,114,101,97,107,80,111,105,110,116,115
00004C56  6561 6B50 
00004C5A  6F69 6E74 
00004C5E  73        
00004C5F  203A 205B 8079          dc.b      32,58,32,91,69,110,97,98,108,101,100,93,0
00004C63  456E 6162 
00004C67  6C65 645D 
00004C6B  00        
                    8080   @m68kde~1_80:
00004C6C  0D0A 5072 8081          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00004C70  6573 7320 
00004C74  3C45 5343 
00004C78  3E20      
00004C7A  746F 2052 8082          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
00004C7E  6573 756D 
00004C82  6520 5573 
00004C86  6572 2050 8083          dc.b      101,114,32,80,114,111,103,114,97,109,13,10,0
00004C8A  726F 6772 
00004C8E  616D 0D0A 
00004C92  00        
                    8084   @m68kde~1_81:
00004C94  0D0A 556E 8085          dc.b      13,10,85,110,107,110,111,119,110,32,67,111,109
00004C98  6B6E 6F77 
00004C9C  6E20 436F 
00004CA0  6D        
00004CA1  6D61 6E64 8086          dc.b      109,97,110,100,46,46,46,46,46,13,10,0
00004CA5  2E2E 2E2E 
00004CA9  2E0D 0A00 
                    8087   @m68kde~1_82:
00004CAE  0D0A 5072 8088          dc.b      13,10,80,114,111,103,114,97,109,32,69,110,100
00004CB2  6F67 7261 
00004CB6  6D20 456E 
00004CBA  64        
00004CBB  6564 2028 8089          dc.b      101,100,32,40,84,82,65,80,32,35,49,53,41,46
00004CBF  5452 4150 
00004CC3  2023 3135 
00004CC7  292E      
00004CC9  2E2E 2E00 8090          dc.b      46,46,46,0
                    8091   @m68kde~1_83:
00004CCE  0D0A 4B69 8092          dc.b      13,10,75,105,108,108,32,65,108,108,32,66,114
00004CD2  6C6C 2041 
00004CD6  6C6C 2042 
00004CDA  72        
00004CDB  6561 6B20 8093          dc.b      101,97,107,32,80,111,105,110,116,115,46,46,46
00004CDF  506F 696E 
00004CE3  7473 2E2E 
00004CE7  2E        
00004CE8  2879 2F6E 8094          dc.b      40,121,47,110,41,63,0
00004CEC  293F 00   
                    8095   @m68kde~1_84:
00004CF0  0D0A 4B69 8096          dc.b      13,10,75,105,108,108,32,65,108,108,32,87,97
00004CF4  6C6C 2041 
00004CF8  6C6C 2057 
00004CFC  61        
00004CFD  7463 6820 8097          dc.b      116,99,104,32,80,111,105,110,116,115,46,46,46
00004D01  506F 696E 
00004D05  7473 2E2E 
00004D09  2E        
00004D0A  2879 2F6E 8098          dc.b      40,121,47,110,41,63,0
00004D0E  293F 00   
                    8099   @m68kde~1_85:
00004D12  0D0A 2D2D 8100          dc.b      13,10,45,45,45,45,45,45,45,45,45,45,45,45,45
00004D16  2D2D 2D2D 
00004D1A  2D2D 2D2D 
00004D1E  2D2D 2D   
00004D21  2D2D 2D2D 8101          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00004D25  2D2D 2D2D 
00004D29  2D2D 2D2D 
00004D2D  2D2D 2D   
00004D30  2D2D 2D2D 8102          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00004D34  2D2D 2D2D 
00004D38  2D2D 2D2D 
00004D3C  2D2D 2D   
00004D3F  2D2D 2D2D 8103          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00004D43  2D2D 2D2D 
00004D47  2D2D 2D2D 
00004D4B  2D2D 2D   
00004D4E  2D2D 2D2D 8104          dc.b      45,45,45,45,45,45,0
00004D52  2D2D 00   
                    8105   @m68kde~1_86:
00004D56  0D0A 2020 8106          dc.b      13,10,32,32,70,105,110,97,108,32,80,114,111
00004D5A  4669 6E61 
00004D5E  6C20 5072 
00004D62  6F        
00004D63  6A65 6374 8107          dc.b      106,101,99,116,0
00004D67  00        
                    8108   @m68kde~1_87:
00004D68  0D0A 2020 8109          dc.b      13,10,32,32,72,32,32,32,32,45,32,83,97,121,32
00004D6C  4820 2020 
00004D70  202D 2053 
00004D74  6179 20   
00004D77  4865 6C6C 8110          dc.b      72,101,108,108,111,32,87,111,114,108,100,0
00004D7B  6F20 576F 
00004D7F  726C 6400 
                    8111   @m68kde~1_88:
00004D84  0D0A 2020 8112          dc.b      13,10,32,32,84,32,32,32,32,45,32,82,117,110
00004D88  5420 2020 
00004D8C  202D 2052 
00004D90  756E      
00004D92  2054 6574 8113          dc.b      32,84,101,116,114,105,115,32,71,97,109,101,0
00004D96  7269 7320 
00004D9A  4761 6D65 
00004D9E  00        
                    8114   @m68kde~1_89:
00004DA0  0D0A 2300 8115          dc.b      13,10,35,0
                    8116   @m68kde~1_90:
00004DA4  0A52 756E 8117          dc.b      10,82,117,110,110,105,110,103,32,84,101,116
00004DA8  6E69 6E67 
00004DAC  2054 6574 
00004DB0  7269 7320 8118          dc.b      114,105,115,32,71,97,109,101,10,0
00004DB4  4761 6D65 
00004DB8  0A00      
                    8119   @m68kde~1_91:
00004DBA  0A53 6179 8120          dc.b      10,83,97,121,105,110,103,32,72,101,108,108,111
00004DBE  696E 6720 
00004DC2  4865 6C6C 
00004DC6  6F        
00004DC7  2057 6F72 8121          dc.b      32,87,111,114,108,100,10,0
00004DCB  6C64 0A00 
                    8122   @m68kde~1_92:
00004DD0  0A4D 656D 8123          dc.b      10,77,101,109,111,114,121,32,67,104,97,110,103
00004DD4  6F72 7920 
00004DD8  4368 616E 
00004DDC  67        
00004DDD  6520 696E 8124          dc.b      101,32,105,110,32,86,71,65,10,0
00004DE1  2056 4741 
00004DE5  0A00      
                    8125   @m68kde~1_93:
00004DE8  0A41 6464 8126          dc.b      10,65,100,100,114,101,115,115,58,32,48,120,37
00004DEC  7265 7373 
00004DF0  3A20 3078 
00004DF4  25        
00004DF5  3034 582C 8127          dc.b      48,52,88,44,32,68,97,116,97,58,32,37,99,0
00004DF9  2044 6174 
00004DFD  613A 2025 
00004E01  6300      
                    8128   @m68kde~1_94:
00004E04  0D0A 0D0A 8129          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
00004E08  5072 6F67 
00004E0C  7261 6D20 
00004E10  41        
00004E11  424F 5254 8130          dc.b      66,79,82,84,32,33,33,33,33,33,33,13,10,0
00004E15  2021 2121 
00004E19  2121 210D 
00004E1D  0A00      
                    8131   @m68kde~1_95:
00004E20  2573 0D0A 8132          dc.b      37,115,13,10,0
00004E24  00        
                    8133   @m68kde~1_96:
00004E26  0D0A 0D0A 8134          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
00004E2A  5072 6F67 
00004E2E  7261 6D20 
00004E32  41        
00004E33  424F 5254 8135          dc.b      66,79,82,84,32,33,33,33,33,33,0
00004E37  2021 2121 
00004E3B  2121 00   
                    8136   @m68kde~1_97:
00004E3E  0D0A 556E 8137          dc.b      13,10,85,110,104,97,110,100,108,101,100,32,73
00004E42  6861 6E64 
00004E46  6C65 6420 
00004E4A  49        
00004E4B  6E74 6572 8138          dc.b      110,116,101,114,114,117,112,116,58,32,73,82
00004E4F  7275 7074 
00004E53  3A20 4952 
00004E57  5125 6420 8139          dc.b      81,37,100,32,33,33,33,33,33,0
00004E5B  2121 2121 
00004E5F  2100      
                    8140   @m68kde~1_98:
00004E62  4144 4452 8141          dc.b      65,68,68,82,69,83,83,32,69,82,82,79,82,58,32
00004E66  4553 5320 
00004E6A  4552 524F 
00004E6E  523A 20   
00004E71  3136 206F 8142          dc.b      49,54,32,111,114,32,51,50,32,66,105,116,32,84
00004E75  7220 3332 
00004E79  2042 6974 
00004E7D  2054      
00004E7F  7261 6E73 8143          dc.b      114,97,110,115,102,101,114,32,116,111,47,102
00004E83  6665 7220 
00004E87  746F 2F66 
00004E8B  726F 6D20 8144          dc.b      114,111,109,32,97,110,32,79,68,68,32,65,100
00004E8F  616E 204F 
00004E93  4444 2041 
00004E97  64        
00004E98  6472 6573 8145          dc.b      100,114,101,115,115,46,46,46,46,0
00004E9C  732E 2E2E 
00004EA0  2E00      
                    8146   @m68kde~1_99:
00004EA2  556E 6861 8147          dc.b      85,110,104,97,110,100,108,101,100,32,84,114
00004EA6  6E64 6C65 
00004EAA  6420 5472 
00004EAE  6170 2021 8148          dc.b      97,112,32,33,33,33,33,33,0
00004EB2  2121 2121 
00004EB6  00        
                    8149   @m68kde~1_100:
00004EB8  4255 5320 8150          dc.b      66,85,83,32,69,114,114,111,114,33,0
00004EBC  4572 726F 
00004EC0  7221 00   
                    8151   @m68kde~1_101:
00004EC4  4144 4452 8152          dc.b      65,68,68,82,69,83,83,32,69,114,114,111,114,33
00004EC8  4553 5320 
00004ECC  4572 726F 
00004ED0  7221      
00004ED2  00        8153          dc.b      0
                    8154   @m68kde~1_102:
00004ED4  494C 4C45 8155          dc.b      73,76,76,69,71,65,76,32,73,78,83,84,82,85,67
00004ED8  4741 4C20 
00004EDC  494E 5354 
00004EE0  5255 43   
00004EE3  5449 4F4E 8156          dc.b      84,73,79,78,0
00004EE7  00        
                    8157   @m68kde~1_103:
00004EE8  4449 5649 8158          dc.b      68,73,86,73,68,69,32,66,89,32,90,69,82,79,0
00004EEC  4445 2042 
00004EF0  5920 5A45 
00004EF4  524F 00   
                    8159   @m68kde~1_104:
00004EF8  2743 484B 8160          dc.b      39,67,72,75,39,32,73,78,83,84,82,85,67,84,73
00004EFC  2720 494E 
00004F00  5354 5255 
00004F04  4354 49   
00004F07  4F4E 00   8161          dc.b      79,78,0
                    8162   @m68kde~1_105:
00004F0A  5452 4150 8163          dc.b      84,82,65,80,86,32,73,78,83,84,82,85,67,84,73
00004F0E  5620 494E 
00004F12  5354 5255 
00004F16  4354 49   
00004F19  4F4E 00   8164          dc.b      79,78,0
                    8165   @m68kde~1_106:
00004F1C  5052 4956 8166          dc.b      80,82,73,86,73,76,69,71,69,32,86,73,79,76,65
00004F20  494C 4547 
00004F24  4520 5649 
00004F28  4F4C 41   
00004F2B  5449 4F4E 8167          dc.b      84,73,79,78,0
00004F2F  00        
                    8168   @m68kde~1_107:
00004F30  554E 494E 8169          dc.b      85,78,73,78,73,84,73,65,76,73,83,69,68,32,73
00004F34  4954 4941 
00004F38  4C49 5345 
00004F3C  4420 49   
00004F3F  5251 00   8170          dc.b      82,81,0
                    8171   @m68kde~1_108:
00004F42  5350 5552 8172          dc.b      83,80,85,82,73,79,85,83,32,73,82,81,0
00004F46  494F 5553 
00004F4A  2049 5251 
00004F4E  00        
                    8173   @m68kde~1_109:
00004F50  4350 454E 8174          dc.b      67,80,69,78,32,52,49,50,32,50,48,50,51,87,50
00004F54  2034 3132 
00004F58  2032 3032 
00004F5C  3357 32   
00004F5F  0D0A 546F 8175          dc.b      13,10,84,111,109,32,87,97,110,103,44,32,55,54
00004F63  6D20 5761 
00004F67  6E67 2C20 
00004F6B  3736      
00004F6D  3334 3033 8176          dc.b      51,52,48,51,52,56,0
00004F71  3438 00   
                    8177   @m68kde~1_110:
00004F74  436F 7079 8178          dc.b      67,111,112,121,114,105,103,104,116,32,40,67
00004F78  7269 6768 
00004F7C  7420 2843 
00004F80  2920 504A 8179          dc.b      41,32,80,74,32,68,97,118,105,101,115,32,50,48
00004F84  2044 6176 
00004F88  6965 7320 
00004F8C  3230      
00004F8E  3136 00   8180          dc.b      49,54,0
                    8181   @m68kde~1_111:
00004F92  0D0A 2573 8182          dc.b      13,10,37,115,0
00004F96  00        
                    8183   @tetris_1:
00004F98  2573 0A00 8184          dc.b      37,115,10,0
                    8185   @tetris_2:
00004F9C  6761 6D65 8186          dc.b      103,97,109,101,32,111,118,101,114,0
00004FA0  206F 7665 
00004FA4  7200      
                    8187   @tetris_3:
00004FA6  4761 6D65 8188          dc.b      71,97,109,101,32,111,118,101,114,33,32,0
00004FAA  206F 7665 
00004FAE  7221 2000 
                    8189   @tetris_4:
00004FB2  5363 6F72 8190          dc.b      83,99,111,114,101,58,32,37,100,32,32,0
00004FB6  653A 2025 
00004FBA  6420 2000 
                    8191   @tetris_5:
00004FBE  7363 6F72 8192          dc.b      115,99,111,114,101,0
00004FC2  6500      
                    8193   @tetris_6:
00004FC4  0A0A 0A00 8194          dc.b      10,10,10,0
                    8195   @tetris_7:
00004FC8  696E 6974 8196          dc.b      105,110,105,116,105,97,108,95,110,101,119,108
00004FCC  6961 6C5F 
00004FD0  6E65 776C 
00004FD4  696E 6500 8197          dc.b      105,110,101,0
                    8198   @tetris_8:
00004FD8  2000      8199          dc.b      32,0
                    8200   @tetris_9:
00004FDA  7370 6163 8201          dc.b      115,112,97,99,101,0
00004FDE  6500      
                    8202   @tetris_10:
00004FE0  4350 454E 8203          dc.b      67,80,69,78,52,49,50,32,84,101,116,114,105,115
00004FE4  3431 3220 
00004FE8  5465 7472 
00004FEC  6973      
00004FEE  0A00      8204          dc.b      10,0
                    8205   @tetris_11:
00004FF0  7469 746C 8206          dc.b      116,105,116,108,101,0
00004FF4  6500      
                    8207   @tetris_12:
00004FF6  2300      8208          dc.b      35,0
                    8209   @tetris_13:
00004FF8  7461 626C 8210          dc.b      116,97,98,108,101,35,0
00004FFC  6523 00   
                    8211   @tetris_14:
00005000  2E00      8212          dc.b      46,0
                    8213   @tetris_15:
00005002  7461 626C 8214          dc.b      116,97,98,108,101,46,0
00005006  652E 00   
                    8215   @tetris_16:
0000500A  0A00      8216          dc.b      10,0
                    8217   @tetris_17:
0000500C  6E65 776C 8218          dc.b      110,101,119,108,105,110,101,49,0
00005010  696E 6531 
00005014  00        
                    8219   @tetris_18:
00005016  0A53 636F 8220          dc.b      10,83,99,111,114,101,58,32,37,100,10,0
0000501A  7265 3A20 
0000501E  2564 0A00 
                    8221   @tetris_19:
00005022  7363 6F72 8222          dc.b      115,99,111,114,101,112,114,105,110,116,0
00005026  6570 7269 
0000502A  6E74 00   
                    8223   @tetris_20:
0000502E  0A47 616D 8224          dc.b      10,71,97,109,101,32,111,118,101,114,33,10,0
00005032  6520 6F76 
00005036  6572 210A 
0000503A  00        
                    8225          section   data
0000503C            8226                   align
          0000 503C 8227   DataStart       equ       *
                    8228   
                    8229   *********************************************************************************************************
                    8230   * Data Section for Initialised Data - these will be placed in rom as constants and have to be copied
                    8231   * to ram as part of the CStart routine in this file
                    8232   *********************************************************************************************************
                    8233   
                    8234   @itoa_1:
0000503C  2D32 3134 8235          dc.b      45,50,49,52,55,52,56,51,54,52,56,0
00005040  3734 3833 
00005044  3634 3800 
                    8236          section   bss
00005048            8237                   align
          0000 5048 8238   DataEnd         equ     *                       this label will equate to the address of the last byte of global variable in it
                    8239   
                    8240   *********************************************************************************************************
                    8241   * Section for Uninitialised Data held in ROM as constants
                    8242   *********************************************************************************************************
                    8243   
08030000            8244                   org     RamVectorTable          Ram based vector table must be stored here otherwise InstallException Handler will not work
          0000 000C 8245   DataLength      equ     DataEnd-DataStart       length of data needed to copy to Ram on bootup
                    8246   
                    8247   
08030000            8248   bss             org       bss
                    8249   
                    8250   *********************************************************************************************************
                    8251   * Build a ram based vector table for interrupts so we can install our own Exception Handlers in C code at run time
                    8252   * install the exception handler using the C function InstallExceptionHandler()
                    8253   *********************************************************************************************************
                    8254   
                    8255   
                    8256   
08030000            8257   VInitialSP       ds.l    1      dummy as we can't really install a handler for this
08030004            8258   VInitialPC       ds.l    1      dummy as we can't reallin install a handler for this
08030008            8259   VBusError        ds.l    1      storage for address of Bus Error Handler
0803000C            8260   VAddressError    ds.l    1      storage for address of Address Error Handler
08030010            8261   VIllegalInstr    ds.l    1      storage for address of Illegal Instruction handler
08030014            8262   VDividebyZero    ds.l    1      storage for address of divide by zero handler
08030018            8263   VCheck           ds.l    1      ditto
0803001C            8264   VTrapV           ds.l    1      ditto
08030020            8265   VPrivilege       ds.l    1      ditto
08030024            8266   VTrace           ds.l    1
08030028            8267   VLine1010emul    ds.l    1
0803002C            8268   VLine1111emul    ds.l    1
08030030            8269   VUnassigned1     ds.l    1
08030034            8270   VUnassigned2     ds.l    1
08030038            8271   VUnassigned3     ds.l    1
0803003C            8272   VUninit_IRQ      ds.l    1
08030040            8273   VUnassigned4     ds.l    1
08030044            8274   VUnassigned5     ds.l    1
08030048            8275   VUnassigned6     ds.l    1
0803004C            8276   VUnassigned7     ds.l    1
08030050            8277   VUnassigned8     ds.l    1
08030054            8278   VUnassigned9     ds.l    1
08030058            8279   VUnassigned10    ds.l    1
0803005C            8280   VUnassigned11    ds.l    1
08030060            8281   VSpuriousIRQ     ds.l    1
                    8282   
                    8283   * Interrupt handlers Vector 25-31
08030064            8284   VL1IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030068            8285   VL2IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0803006C            8286   VL3IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030070            8287   VL4IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030074            8288   VL5IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030078            8289   VL6IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0803007C            8290   VL7IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
                    8291   
                    8292   * Trap Handler vectors 32-47
08030080            8293   VTrap0           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030084            8294   VTrap1           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030088            8295   VTrap2           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0803008C            8296   VTrap3           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030090            8297   VTrap4           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030094            8298   VTrap5           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030098            8299   VTrap6           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0803009C            8300   VTrap7           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300A0            8301   VTrap8           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300A4            8302   VTrap9           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300A8            8303   VTrap10          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300AC            8304   VTrap11          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300B0            8305   VTrap12          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300B4            8306   VTrap13          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300B8            8307   VTrap14          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300BC            8308   VTrap15          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
                    8309   
                    8310   * the remaining exceptions are unassigned in the 68000 so no need to allocate storage for them here
                    8311   
                    8312   ***********************************************************************************************************
                    8313   * Other Variables
                    8314   ***********************************************************************************************************
                    8315   *__DebugA5       ds.l    1
                    8316   *__UserA5        ds.l    1
                    8317   
                    8318   ***********************************************************************************************************
080300C0            8319   __ungetbuf:     ds.l    1       ; ungetbuffer for stdio functions
080300C4            8320   __allocp:       ds.l    0       ; start of allocation units
080300C4            8321   __heap:         ds.l    0       ; pointers for malloc functions
                    8322   
                    8323   *__himem:       ds.l    himem            ; highest memory location + 1
                    8324   *__stklen:      ds.l    stklen           ; default stack size
                    8325   
                    8326   *********************************************************************************************************
                    8327   * Section for Heap
                    8328   *********************************************************************************************************
                    8329   
                    8330   _i:
080300C4            8331          ds.b      4
                    8332   _x:
080300C8            8333          ds.b      4
                    8334   _y:
080300CC            8335          ds.b      4
                    8336   _z:
080300D0            8337          ds.b      4
                    8338   _PortA_Count:
080300D4            8339          ds.b      4
                    8340   _Trace:
080300D8            8341          ds.b      4
                    8342   _GoFlag:
080300DC            8343          ds.b      4
                    8344   _Echo:
080300E0            8345          ds.b      4
                    8346   _d0:
080300E4            8347          ds.b      4
                    8348   _d1:
080300E8            8349          ds.b      4
                    8350   _d2:
080300EC            8351          ds.b      4
                    8352   _d3:
080300F0            8353          ds.b      4
                    8354   _d4:
080300F4            8355          ds.b      4
                    8356   _d5:
080300F8            8357          ds.b      4
                    8358   _d6:
080300FC            8359          ds.b      4
                    8360   _d7:
08030100            8361          ds.b      4
                    8362   _a0:
08030104            8363          ds.b      4
                    8364   _a1:
08030108            8365          ds.b      4
                    8366   _a2:
0803010C            8367          ds.b      4
                    8368   _a3:
08030110            8369          ds.b      4
                    8370   _a4:
08030114            8371          ds.b      4
                    8372   _a5:
08030118            8373          ds.b      4
                    8374   _a6:
0803011C            8375          ds.b      4
                    8376   _PC:
08030120            8377          ds.b      4
                    8378   _SSP:
08030124            8379          ds.b      4
                    8380   _USP:
08030128            8381          ds.b      4
                    8382   _SR:
0803012C            8383          ds.b      2
                    8384   _BreakPointAddress:
0803012E            8385          ds.b      32
                    8386   _BreakPointInstruction:
0803014E            8387          ds.b      16
                    8388   _BreakPointSetOrCleared:
0803015E            8389          ds.b      32
                    8390   _InstructionSize:
0803017E            8391          ds.b      4
                    8392   _WatchPointAddress:
08030182            8393          ds.b      32
                    8394   _WatchPointSetOrCleared:
080301A2            8395          ds.b      32
                    8396   _WatchPointString:
080301C2            8397          ds.b      800
                    8398   _TempString:
080304E2            8399          ds.b      100
                    8400   _Table:
08030546            8401          ds.b      300
                    8402   _tetris_score:
08030672            8403          ds.b      4
                    8404   _GameOn:
08030676            8405          ds.b      1
                    8406   _tetris_timer:
08030678            8407          ds.b      4
                    8408   _octl:
0803067C            8409          ds.b      1
                    8410   _current:
0803067E            8411          ds.b      28
                    8412   _ShapesArray:
0803069A            8413          ds.b      196
                    8414   _Tetris_Speed:
0803075E            8415          ds.b      8
                    8416   _printw_x:
08030766            8417          ds.b      4
                    8418   _printw_y:
0803076A            8419          ds.b      4
                    8420   _cx:
0803076E            8421          ds.b      1
                    8422   _cy:
08030770            8423          ds.b      1
                    8424   _timer_count:
08030772            8425          ds.b      4
                    8426          section   heap
08030776            8427                   align
          0803 0776 8428   bssEnd          equ *                   end of storage space for unitialised variables
                    8429   *                                       we have to copy all initialised variable from rom to here at startup
          0803 0776 8430   heap   equ       *
08030776            8431                    align
          0000 0000

Assembly errors: 0
